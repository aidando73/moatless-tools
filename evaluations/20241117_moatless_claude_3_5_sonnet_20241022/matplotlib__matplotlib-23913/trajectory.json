{
  "metadata": {
    "evaluation_name": "20241117_moatless_tools_0_4_claude_3_5_sonnet_20241022",
    "instance_id": "matplotlib__matplotlib-23913"
  },
  "max_iterations": 30,
  "max_cost": 1.0,
  "agent": {
    "system_prompt": "You are an autonomous AI assistant and a core member of the development team for the matplotlib/matplotlib project. As a senior developer on the team, you have deep knowledge of the codebase and best practices.\n\n\nYou will write your reasoning steps inside `<thoughts>` tags, and then perform actions by making function calls as needed. \nAfter each action, you will receive an Observation that contains the result of your action. Use these observations to inform your next steps.\n\n## How to Interact\n\n- **Think Step by Step:** Use the ReAct pattern to reason about the task. Document each thought process within `<thoughts>`.\n- **Function Calls:** After your thoughts, make the necessary function calls to interact with the codebase or environment.\n- **Observations:** After each function call, you will receive an Observation containing the result. Use this information to plan your next step.\n- **One Action at a Time:** Only perform one action before waiting for its Observation.\n\n## Workflow Overview\n\n1. **Understand the Task**\n   - **Review the Task:** Carefully read the task provided in `<task>`.\n   - **Identify Code to Change:** Determine which parts of the codebase need modification.\n   - **Identify Necessary Context:** Figure out what additional code or information you need.\n\n2. **Locate Relevant Code**\n   - **Search for Code:** Use functions like `SearchCode` to find relevant code if it's not in the current context.\n   - **Request Additional Context:** Use `ViewCode` to view specific code spans, functions, classes, or lines of code.\n\n3. **Locate Relevant Tests**\n   - **Find Related Tests:** Use functions to locate existing tests related to the code changes.\n\n4. **Apply Code Changes**\n   - **One Step at a Time:** Plan and implement one code change at a time.\n   - **Provide Instructions and Pseudo Code:** Use `str_replace_editor` to update the code.\n   - **Automatic Testing:** Tests run automatically after each code change.\n\n5. **Modify or Add Tests**\n   - **Ensure Test Coverage:** Update or add tests to verify the changes using `str_replace_editor`.\n\n6. **Repeat as Necessary**\n   - **Iterate:** If tests fail or further changes are needed, repeat the steps above.\n\n7. **Finish the Task**\n   - **Completion:** When confident that all changes are correct and the task is resolved, use `Finish`.\n\n# Important Guidelines\n\n- **Focus on the Specific Task**\n  - Implement requirements exactly as specified.\n  - Do not modify unrelated code.\n\n- **Clear Communication**\n  - Provide detailed yet concise instructions.\n  - Include all necessary information for accurate implementation.\n\n- **Code Context and Changes**\n  - Limit changes to files in the current context.\n  - Explicitly request more code if needed.\n  - Provide line numbers if known; otherwise, explain where changes should be made.\n\n- **Testing**\n  - Always update or add tests to verify your changes.\n\n- **Error Handling**\n  - If tests fail, analyze the output and plan corrections.\n  - Document your reasoning in `<thoughts>` before making function calls.\n\n- **Task Completion**\n  - Finish only when the task is fully resolved and verified.\n  - Do not suggest additional changes beyond the scope.\n\n# Additional Notes\n\n- **ReAct Pattern Usage:** Always write your thoughts in `<thoughts>` before making function calls.\n- **Incremental Changes:** Focus on one change at a time and verify each step.\n- **Never Guess:** Do not guess code content. Use `ViewCode` to obtain accurate information.\n- **Collaboration:** The AI agent relies on your detailed instructions; clarity is key.\n",
    "actions": [],
    "message_history_type": "messages",
    "include_extra_history": true,
    "include_file_context": false,
    "include_git_patch": false,
    "completion": {
      "model": "claude-3-5-sonnet-20241022",
      "temperature": 0.0,
      "max_tokens": 4000,
      "response_format": "tool_call"
    },
    "agent_class": "moatless.agent.code_agent.CodingAgent"
  },
  "nodes": [
    {
      "node_id": 0,
      "file_context": {
        "max_tokens": 8000,
        "files": []
      },
      "message": "<task>\nlegend draggable as keyword\n<!--To help us understand and resolve your issue, please fill out the form to the best of your ability.-->\r\n<!--You can feel free to delete the sections that do not apply.-->\r\n\r\n### Feature request\r\n\r\n**There is not keyword to make legend draggable at creation**\r\n\r\n<!--A short 1-2 sentences that succinctly describes the bug-->\r\n\r\nIs there a code reason why one can not add a \"draggable=True\" keyword to the __init__ function for Legend?  This would be more handy than having to call it after legend creation.  And, naively, it would seem simple to do.  But maybe there is a reason why it would not work?\n\n</task>",
      "completions": {},
      "possible_actions": [],
      "parent_id": null
    },
    {
      "node_id": 1,
      "action": {
        "scratch_pad": "1. First, I need to locate the Legend class implementation to understand its current initialization\n2. Then I'll check if there are any technical limitations for adding the draggable parameter\n3. I'll also look for any tests related to legend draggability to understand the current testing approach\n4. Finally, I'll implement the change if there are no blockers",
        "class_name": "Legend",
        "action_args_class": "moatless.actions.find_class.FindClassArgs"
      },
      "observation": {
        "message": "Found 40 code sections.\n\nViewed relevant code:\nlib/matplotlib/legend.py\n```\n\n    23\t\n    24\timport itertools\n    25\timport logging\n    26\timport time\n    27\t\n    28\timport numpy as np\n    29\t\n    30\timport matplotlib as mpl\n    31\tfrom matplotlib import _api, _docstring, colors, offsetbox\n    32\tfrom matplotlib.artist import Artist, allow_rasterization\n    33\tfrom matplotlib.cbook import silent_list\n    34\tfrom matplotlib.font_manager import FontProperties\n    35\tfrom matplotlib.lines import Line2D\n    36\tfrom matplotlib.patches import (Patch, Rectangle, Shadow, FancyBboxPatch,\n    37\t                                StepPatch)\n    38\tfrom matplotlib.collections import (\n    39\t    Collection, CircleCollection, LineCollection, PathCollection,\n    40\t    PolyCollection, RegularPolyCollection)\n    41\tfrom matplotlib.text import Text\n    42\tfrom matplotlib.transforms import Bbox, BboxBase, TransformedBbox\n    43\tfrom matplotlib.transforms import BboxTransformTo, BboxTransformFrom\n    44\tfrom matplotlib.offsetbox import (\n    45\t    AnchoredOffsetbox, DraggableOffsetBox,\n    46\t    HPacker, VPacker,\n    47\t    DrawingArea, TextArea,\n    48\t)\n    49\tfrom matplotlib.container import ErrorbarContainer, BarContainer, StemContainer\n    50\tfrom . import legend_handler\n      # ...\n   290\t\n   291\t\n   292\tclass Legend(Artist):\n   293\t    \"\"\"\n   294\t    Place a legend on the axes at location loc.\n   295\t    \"\"\"\n   296\t\n   297\t    # 'best' is only implemented for axes legends\n   298\t    codes = {'best': 0, **AnchoredOffsetbox.codes}\n   299\t    zorder = 5\n          # ...\n   303\t\n   304\t    @_api.make_keyword_only(\"3.6\", \"loc\")\n   305\t    @_docstring.dedent_interpd\n   306\t    def __init__(\n   307\t        self, parent, handles, labels,\n   308\t        loc=None,\n   309\t        numpoints=None,      # number of points in the legend line\n   310\t        markerscale=None,    # relative size of legend markers vs. original\n   311\t        markerfirst=True,    # left/right ordering of legend marker and label\n   312\t        scatterpoints=None,  # number of scatter points\n   313\t        scatteryoffsets=None,\n   314\t        prop=None,           # properties for the legend texts\n   315\t        fontsize=None,       # keyword to set font size directly\n   316\t        labelcolor=None,     # keyword to set the text color\n   317\t\n   318\t        # spacing & pad defined as a fraction of the font-size\n   319\t        borderpad=None,      # whitespace inside the legend border\n   320\t        labelspacing=None,   # vertical space between the legend entries\n   321\t        handlelength=None,   # length of the legend handles\n   322\t        handleheight=None,   # height of the legend handles\n   323\t        handletextpad=None,  # pad between the legend handle and text\n   324\t        borderaxespad=None,  # pad between the axes and legend border\n   325\t        columnspacing=None,  # spacing between columns\n   326\t\n   327\t        ncols=1,     # number of columns\n   328\t        mode=None,  # horizontal distribution of columns: None or \"expand\"\n   329\t\n   330\t        fancybox=None,  # True: fancy box, False: rounded box, None: rcParam\n   331\t        shadow=None,\n   332\t        title=None,           # legend title\n   333\t        title_fontsize=None,  # legend title font size\n   334\t        framealpha=None,      # set frame alpha\n   335\t        edgecolor=None,       # frame patch edgecolor\n   336\t        facecolor=None,       # frame patch facecolor\n   337\t\n   338\t        bbox_to_anchor=None,  # bbox to which the legend will be anchored\n   339\t        bbox_transform=None,  # transform for the bbox\n   340\t        frameon=None,         # draw frame\n   341\t        handler_map=None,\n   342\t        title_fontproperties=None,  # properties for the legend title\n   343\t        alignment=\"center\",       # control the alignment within the legend box\n   344\t        *,\n   345\t        ncol=1  # synonym for ncols (backward compatibility)\n   346\t    ):\n   347\t        \"\"\"\n   348\t        Parameters\n   349\t        ----------\n   350\t        parent : `~matplotlib.axes.Axes` or `.Figure`\n   351\t            The artist that contains the legend.\n   352\t\n   353\t        handles : list of `.Artist`\n   354\t            A list of Artists (lines, patches) to be added to the legend.\n   355\t\n   356\t        labels : list of str\n   357\t            A list of labels to show next to the artists. The length of handles\n   358\t            and labels should be the same. If they are not, they are truncated\n   359\t            to the smaller of both lengths.\n   360\t\n   361\t        Other Parameters\n   362\t        ----------------\n   363\t        %(_legend_kw_doc)s\n   364\t\n   365\t        Notes\n   366\t        -----\n   367\t        Users can specify any arbitrary location for the legend using the\n   368\t        *bbox_to_anchor* keyword argument. *bbox_to_anchor* can be a\n   369\t        `.BboxBase` (or derived there from) or a tuple of 2 or 4 floats.\n   370\t        See `set_bbox_to_anchor` for more detail.\n   371\t\n   372\t        The legend location can be specified by setting *loc* with a tuple of\n   373\t        2 floats, which is interpreted as the lower-left corner of the legend\n   374\t        in the normalized axes coordinate.\n   375\t        \"\"\"\n   376\t        # local import only to avoid circularity\n   377\t        from matplotlib.axes import Axes\n   378\t        from matplotlib.figure import FigureBase\n   379\t\n   380\t        super().__init__()\n   381\t\n   382\t        if prop is None:\n   383\t            if fontsize is not None:\n   384\t                self.prop = FontProperties(size=fontsize)\n   385\t            else:\n   386\t                self.prop = FontProperties(\n   387\t                    size=mpl.rcParams[\"legend.fontsize\"])\n   388\t        else:\n   389\t            self.prop = FontProperties._from_any(prop)\n   390\t            if isinstance(prop, dict) and \"size\" not in prop:\n   391\t                self.prop.set_size(mpl.rcParams[\"legend.fontsize\"])\n   392\t\n   393\t        self._fontsize = self.prop.get_size_in_points()\n   394\t\n   395\t        self.texts = []\n   396\t        self.legendHandles = []\n   397\t        self._legend_title_box = None\n   398\t\n   399\t        #: A dictionary with the extra handler mappings for this Legend\n   400\t        #: instance.\n   401\t        self._custom_handler_map = handler_map\n   402\t\n   403\t        def val_or_rc(val, rc_name):\n   404\t            return val if val is not None else mpl.rcParams[rc_name]\n   405\t\n   406\t        self.numpoints = val_or_rc(numpoints, 'legend.numpoints')\n   407\t        self.markerscale = val_or_rc(markerscale, 'legend.markerscale')\n   408\t        self.scatterpoints = val_or_rc(scatterpoints, 'legend.scatterpoints')\n   409\t        self.borderpad = val_or_rc(borderpad, 'legend.borderpad')\n   410\t        self.labelspacing = val_or_rc(labelspacing, 'legend.labelspacing')\n   411\t        self.handlelength = val_or_rc(handlelength, 'legend.handlelength')\n   412\t        self.handleheight = val_or_rc(handleheight, 'legend.handleheight')\n   413\t        self.handletextpad = val_or_rc(handletextpad, 'legend.handletextpad')\n   414\t        self.borderaxespad = val_or_rc(borderaxespad, 'legend.borderaxespad')\n   415\t        self.columnspacing = val_or_rc(columnspacing, 'legend.columnspacing')\n   416\t        self.shadow = val_or_rc(shadow, 'legend.shadow')\n   417\t        # trim handles and labels if illegal label...\n   418\t        _lab, _hand = [], []\n   419\t        for label, handle in zip(labels, handles):\n   420\t            if isinstance(label, str) and label.startswith('_'):\n   421\t                _api.warn_external(f\"The label {label!r} of {handle!r} starts \"\n   422\t                                   \"with '_'. It is thus excluded from the \"\n   423\t                                   \"legend.\")\n   424\t            else:\n   425\t                _lab.append(label)\n   426\t                _hand.append(handle)\n   427\t        labels, handles = _lab, _hand\n   428\t\n   429\t        handles = list(handles)\n   430\t        if len(handles) < 2:\n   431\t            ncols = 1\n   432\t        self._ncols = ncols if ncols != 1 else ncol\n   433\t\n   434\t        if self.numpoints <= 0:\n   435\t            raise ValueError(\"numpoints must be > 0; it was %d\" % numpoints)\n   436\t\n   437\t        # introduce y-offset for handles of the scatter plot\n   438\t        if scatteryoffsets is None:\n   439\t            self._scatteryoffsets = np.array([3. / 8., 4. / 8., 2.5 / 8.])\n   440\t        else:\n   441\t            self._scatteryoffsets = np.asarray(scatteryoffsets)\n   442\t        reps = self.scatterpoints // len(self._scatteryoffsets) + 1\n   443\t        self._scatteryoffsets = np.tile(self._scatteryoffsets,\n   444\t                                        reps)[:self.scatterpoints]\n   445\t\n   446\t        # _legend_box is a VPacker instance that contains all\n   447\t        # legend items and will be initialized from _init_legend_box()\n   448\t        # method.\n   449\t        self._legend_box = None\n   450\t\n   451\t        if isinstance(parent, Axes):\n   452\t            self.isaxes = True\n   453\t            self.axes = parent\n   454\t            self.set_figure(parent.figure)\n   455\t        elif isinstance(parent, FigureBase):\n   456\t            self.isaxes = False\n   457\t            self.set_figure(parent)\n   458\t        else:\n   459\t            raise TypeError(\n   460\t                \"Legend needs either Axes or FigureBase as parent\"\n   461\t            )\n   462\t        self.parent = parent\n   463\t\n   464\t        self._loc_used_default = loc is None\n   465\t        if loc is None:\n   466\t            loc = mpl.rcParams[\"legend.loc\"]\n   467\t            if not self.isaxes and loc in [0, 'best']:\n   468\t                loc = 'upper right'\n   469\t        if isinstance(loc, str):\n   470\t            loc = _api.check_getitem(self.codes, loc=loc)\n   471\t        if not self.isaxes and loc == 0:\n   472\t            raise ValueError(\n   473\t                \"Automatic legend placement (loc='best') not implemented for \"\n   474\t                \"figure legend\")\n   475\t\n   476\t        self._mode = mode\n   477\t        self.set_bbox_to_anchor(bbox_to_anchor, bbox_transform)\n   478\t\n   479\t        # We use FancyBboxPatch to draw a legend frame. The location\n   480\t        # and size of the box will be updated during the drawing time.\n   481\t\n   482\t        if facecolor is None:\n   483\t            facecolor = mpl.rcParams[\"legend.facecolor\"]\n   484\t        if facecolor == 'inherit':\n   485\t            facecolor = mpl.rcParams[\"axes.facecolor\"]\n   486\t\n   487\t        if edgecolor is None:\n   488\t            edgecolor = mpl.rcParams[\"legend.edgecolor\"]\n   489\t        if edgecolor == 'inherit':\n   490\t            edgecolor = mpl.rcParams[\"axes.edgecolor\"]\n   491\t\n   492\t        if fancybox is None:\n   493\t            fancybox = mpl.rcParams[\"legend.fancybox\"]\n   494\t\n   495\t        self.legendPatch = FancyBboxPatch(\n   496\t            xy=(0, 0), width=1, height=1,\n   497\t            facecolor=facecolor, edgecolor=edgecolor,\n   498\t            # If shadow is used, default to alpha=1 (#8943).\n   499\t            alpha=(framealpha if framealpha is not None\n   500\t                   else 1 if shadow\n   501\t                   else mpl.rcParams[\"legend.framealpha\"]),\n   502\t            # The width and height of the legendPatch will be set (in draw())\n   503\t            # to the length that includes the padding. Thus we set pad=0 here.\n   504\t            boxstyle=(\"round,pad=0,rounding_size=0.2\" if fancybox\n   505\t                      else \"square,pad=0\"),\n   506\t            mutation_scale=self._fontsize,\n   507\t            snap=True,\n   508\t            visible=(frameon if frameon is not None\n   509\t                     else mpl.rcParams[\"legend.frameon\"])\n   510\t        )\n   511\t        self._set_artist_props(self.legendPatch)\n   512\t\n   513\t        _api.check_in_list([\"center\", \"left\", \"right\"], alignment=alignment)\n   514\t        self._alignment = alignment\n   515\t\n   516\t        # init with null renderer\n   517\t        self._init_legend_box(handles, labels, markerfirst)\n   518\t\n   519\t        tmp = self._loc_used_default\n   520\t        self._set_loc(loc)\n   521\t        self._loc_used_default = tmp  # ignore changes done by _set_loc\n   522\t\n   523\t        # figure out title font properties:\n   524\t        if title_fontsize is not None and title_fontproperties is not None:\n   525\t            raise ValueError(\n   526\t                \"title_fontsize and title_fontproperties can't be specified \"\n   527\t                \"at the same time. Only use one of them. \")\n   528\t        title_prop_fp = FontProperties._from_any(title_fontproperties)\n   529\t        if isinstance(title_fontproperties, dict):\n   530\t            if \"size\" not in title_fontproperties:\n   531\t                title_fontsize = mpl.rcParams[\"legend.title_fontsize\"]\n   532\t                title_prop_fp.set_size(title_fontsize)\n   533\t        elif title_fontsize is not None:\n   534\t            title_prop_fp.set_size(title_fontsize)\n   535\t        elif not isinstance(title_fontproperties, FontProperties):\n   536\t            title_fontsize = mpl.rcParams[\"legend.title_fontsize\"]\n   537\t            title_prop_fp.set_size(title_fontsize)\n   538\t\n   539\t        self.set_title(title, prop=title_prop_fp)\n   540\t        self._draggable = None\n   541\t\n   542\t        # set the text color\n   543\t\n   544\t        color_getters = {  # getter function depends on line or patch\n   545\t            'linecolor':       ['get_color',           'get_facecolor'],\n   546\t            'markerfacecolor': ['get_markerfacecolor', 'get_facecolor'],\n   547\t            'mfc':             ['get_markerfacecolor', 'get_facecolor'],\n   548\t            'markeredgecolor': ['get_markeredgecolor', 'get_edgecolor'],\n   549\t            'mec':             ['get_markeredgecolor', 'get_edgecolor'],\n   550\t        }\n   551\t        if labelcolor is None:\n   552\t            if mpl.rcParams['legend.labelcolor'] is not None:\n   553\t                labelcolor = mpl.rcParams['legend.labelcolor']\n   554\t            else:\n   555\t                labelcolor = mpl.rcParams['text.color']\n   556\t        if isinstance(labelcolor, str) and labelcolor in color_getters:\n   557\t            getter_names = color_getters[labelcolor]\n   558\t            for handle, text in zip(self.legendHandles, self.texts):\n   559\t                for getter_name in getter_names:\n   560\t                    try:\n   561\t                        color = getattr(handle, getter_name)()\n   562\t                        text.set_color(color)\n   563\t                        break\n   564\t                    except AttributeError:\n   565\t                        pass\n   566\t        elif isinstance(labelcolor, str) and labelcolor == 'none':\n   567\t            for text in self.texts:\n   568\t                text.set_color(labelcolor)\n   569\t        elif np.iterable(labelcolor):\n   570\t            for text, color in zip(self.texts,\n   571\t                                   itertools.cycle(\n   572\t                                       colors.to_rgba_array(labelcolor))):\n   573\t                text.set_color(color)\n   574\t        else:\n   575\t            raise ValueError(f\"Invalid labelcolor: {labelcolor!r}\")\n          # ...\n   622\t\n   623\t    @allow_rasterization\n   624\t    def draw(self, renderer):\n   625\t        # docstring inherited\n   626\t        if not self.get_visible():\n   627\t            return\n   628\t\n   629\t        renderer.open_group('legend', gid=self.get_gid())\n   630\t\n   631\t        fontsize = renderer.points_to_pixels(self._fontsize)\n   632\t\n   633\t        # if mode == fill, set the width of the legend_box to the\n   634\t        # width of the parent (minus pads)\n   635\t        if self._mode in [\"expand\"]:\n   636\t            pad = 2 * (self.borderaxespad + self.borderpad) * fontsize\n   637\t            self._legend_box.set_width(self.get_bbox_to_anchor().width - pad)\n   638\t\n   639\t        # update the location and size of the legend. This needs to\n   640\t        # be done in any case to clip the figure right.\n   641\t        bbox = self._legend_box.get_window_extent(renderer)\n   642\t        self.legendPatch.set_bounds(bbox.bounds)\n   643\t        self.legendPatch.set_mutation_scale(fontsize)\n   644\t\n   645\t        if self.shadow:\n   646\t            Shadow(self.legendPatch, 2, -2).draw(renderer)\n   647\t\n   648\t        self.legendPatch.draw(renderer)\n   649\t        self._legend_box.draw(renderer)\n   650\t\n   651\t        renderer.close_group('legend')\n   652\t        self.stale = False\n   653\t\n   654\t    # _default_handler_map defines the default mapping between plot\n   655\t    # elements and the legend handlers.\n          # ...\n      # ...\n```\n",
        "summary": "Found relevant code sections in the search results.",
        "terminal": false,
        "expect_correction": false,
        "properties": {
          "search_hits": [],
          "search_tokens": 6554,
          "new_span_ids": [
            "Legend",
            "Legend.__init__",
            "Legend.draw"
          ]
        },
        "execution_completion": {
          "model": "claude-3-5-sonnet-20241022",
          "input": [
            {
              "role": "user",
              "content": "Search request:\nAction: FindClass\n  file_pattern: None\n  class_name: Legend\n\nIdentify the relevant code sections in the search results to use them. \n\n<search_results>\nlib/matplotlib/legend.py\n```\n\n\n\n<span id='imports'>\n    23\t\n    24\timport itertools\n    25\timport logging\n    26\timport time\n    27\t\n    28\timport numpy as np\n    29\t\n    30\timport matplotlib as mpl\n    31\tfrom matplotlib import _api, _docstring, colors, offsetbox\n    32\tfrom matplotlib.artist import Artist, allow_rasterization\n    33\tfrom matplotlib.cbook import silent_list\n    34\tfrom matplotlib.font_manager import FontProperties\n    35\tfrom matplotlib.lines import Line2D\n    36\tfrom matplotlib.patches import (Patch, Rectangle, Shadow, FancyBboxPatch,\n    37\t                                StepPatch)\n    38\tfrom matplotlib.collections import (\n    39\t    Collection, CircleCollection, LineCollection, PathCollection,\n    40\t    PolyCollection, RegularPolyCollection)\n    41\tfrom matplotlib.text import Text\n    42\tfrom matplotlib.transforms import Bbox, BboxBase, TransformedBbox\n    43\tfrom matplotlib.transforms import BboxTransformTo, BboxTransformFrom\n    44\tfrom matplotlib.offsetbox import (\n    45\t    AnchoredOffsetbox, DraggableOffsetBox,\n    46\t    HPacker, VPacker,\n    47\t    DrawingArea, TextArea,\n    48\t)\n    49\tfrom matplotlib.container import ErrorbarContainer, BarContainer, StemContainer\n    50\tfrom . import legend_handler\n      # ...\n\n\n<span id='Legend'>\n   290\t\n   291\t\n   292\tclass Legend(Artist):\n   293\t    \"\"\"\n   294\t    Place a legend on the axes at location loc.\n   295\t    \"\"\"\n   296\t\n   297\t    # 'best' is only implemented for axes legends\n   298\t    codes = {'best': 0, **AnchoredOffsetbox.codes}\n   299\t    zorder = 5\n\n\n<span id='Legend.__str__'>\n   300\t\n   301\t    def __str__(self):\n   302\t        return \"Legend\"\n\n\n<span id='Legend.__init__'>\n   303\t\n   304\t    @_api.make_keyword_only(\"3.6\", \"loc\")\n   305\t    @_docstring.dedent_interpd\n   306\t    def __init__(\n   307\t        self, parent, handles, labels,\n   308\t        loc=None,\n   309\t        numpoints=None,      # number of points in the legend line\n   310\t        markerscale=None,    # relative size of legend markers vs. original\n   311\t        markerfirst=True,    # left/right ordering of legend marker and label\n   312\t        scatterpoints=None,  # number of scatter points\n   313\t        scatteryoffsets=None,\n   314\t        prop=None,           # properties for the legend texts\n   315\t        fontsize=None,       # keyword to set font size directly\n   316\t        labelcolor=None,     # keyword to set the text color\n   317\t\n   318\t        # spacing & pad defined as a fraction of the font-size\n   319\t        borderpad=None,      # whitespace inside the legend border\n   320\t        labelspacing=None,   # vertical space between the legend entries\n   321\t        handlelength=None,   # length of the legend handles\n   322\t        handleheight=None,   # height of the legend handles\n   323\t        handletextpad=None,  # pad between the legend handle and text\n   324\t        borderaxespad=None,  # pad between the axes and legend border\n   325\t        columnspacing=None,  # spacing between columns\n   326\t\n   327\t        ncols=1,     # number of columns\n   328\t        mode=None,  # horizontal distribution of columns: None or \"expand\"\n   329\t\n   330\t        fancybox=None,  # True: fancy box, False: rounded box, None: rcParam\n   331\t        shadow=None,\n   332\t        title=None,           # legend title\n   333\t        title_fontsize=None,  # legend title font size\n   334\t        framealpha=None,      # set frame alpha\n   335\t        edgecolor=None,       # frame patch edgecolor\n   336\t        facecolor=None,       # frame patch facecolor\n   337\t\n   338\t        bbox_to_anchor=None,  # bbox to which the legend will be anchored\n   339\t        bbox_transform=None,  # transform for the bbox\n   340\t        frameon=None,         # draw frame\n   341\t        handler_map=None,\n   342\t        title_fontproperties=None,  # properties for the legend title\n   343\t        alignment=\"center\",       # control the alignment within the legend box\n   344\t        *,\n   345\t        ncol=1  # synonym for ncols (backward compatibility)\n   346\t    ):\n   347\t        \"\"\"\n   348\t        Parameters\n   349\t        ----------\n   350\t        parent : `~matplotlib.axes.Axes` or `.Figure`\n   351\t            The artist that contains the legend.\n   352\t\n   353\t        handles : list of `.Artist`\n   354\t            A list of Artists (lines, patches) to be added to the legend.\n   355\t\n   356\t        labels : list of str\n   357\t            A list of labels to show next to the artists. The length of handles\n   358\t            and labels should be the same. If they are not, they are truncated\n   359\t            to the smaller of both lengths.\n   360\t\n   361\t        Other Parameters\n   362\t        ----------------\n   363\t        %(_legend_kw_doc)s\n   364\t\n   365\t        Notes\n   366\t        -----\n   367\t        Users can specify any arbitrary location for the legend using the\n   368\t        *bbox_to_anchor* keyword argument. *bbox_to_anchor* can be a\n   369\t        `.BboxBase` (or derived there from) or a tuple of 2 or 4 floats.\n   370\t        See `set_bbox_to_anchor` for more detail.\n   371\t\n   372\t        The legend location can be specified by setting *loc* with a tuple of\n   373\t        2 floats, which is interpreted as the lower-left corner of the legend\n   374\t        in the normalized axes coordinate.\n   375\t        \"\"\"\n   376\t        # local import only to avoid circularity\n   377\t        from matplotlib.axes import Axes\n   378\t        from matplotlib.figure import FigureBase\n   379\t\n   380\t        super().__init__()\n   381\t\n   382\t        if prop is None:\n   383\t            if fontsize is not None:\n   384\t                self.prop = FontProperties(size=fontsize)\n   385\t            else:\n   386\t                self.prop = FontProperties(\n   387\t                    size=mpl.rcParams[\"legend.fontsize\"])\n   388\t        else:\n   389\t            self.prop = FontProperties._from_any(prop)\n   390\t            if isinstance(prop, dict) and \"size\" not in prop:\n   391\t                self.prop.set_size(mpl.rcParams[\"legend.fontsize\"])\n   392\t\n   393\t        self._fontsize = self.prop.get_size_in_points()\n   394\t\n   395\t        self.texts = []\n   396\t        self.legendHandles = []\n   397\t        self._legend_title_box = None\n   398\t\n   399\t        #: A dictionary with the extra handler mappings for this Legend\n   400\t        #: instance.\n   401\t        self._custom_handler_map = handler_map\n   402\t\n   403\t        def val_or_rc(val, rc_name):\n   404\t            return val if val is not None else mpl.rcParams[rc_name]\n   405\t\n   406\t        self.numpoints = val_or_rc(numpoints, 'legend.numpoints')\n   407\t        self.markerscale = val_or_rc(markerscale, 'legend.markerscale')\n   408\t        self.scatterpoints = val_or_rc(scatterpoints, 'legend.scatterpoints')\n   409\t        self.borderpad = val_or_rc(borderpad, 'legend.borderpad')\n   410\t        self.labelspacing = val_or_rc(labelspacing, 'legend.labelspacing')\n   411\t        self.handlelength = val_or_rc(handlelength, 'legend.handlelength')\n   412\t        self.handleheight = val_or_rc(handleheight, 'legend.handleheight')\n   413\t        self.handletextpad = val_or_rc(handletextpad, 'legend.handletextpad')\n   414\t        self.borderaxespad = val_or_rc(borderaxespad, 'legend.borderaxespad')\n   415\t        self.columnspacing = val_or_rc(columnspacing, 'legend.columnspacing')\n   416\t        self.shadow = val_or_rc(shadow, 'legend.shadow')\n   417\t        # trim handles and labels if illegal label...\n   418\t        _lab, _hand = [], []\n   419\t        for label, handle in zip(labels, handles):\n   420\t            if isinstance(label, str) and label.startswith('_'):\n   421\t                _api.warn_external(f\"The label {label!r} of {handle!r} starts \"\n   422\t                                   \"with '_'. It is thus excluded from the \"\n   423\t                                   \"legend.\")\n   424\t            else:\n   425\t                _lab.append(label)\n   426\t                _hand.append(handle)\n   427\t        labels, handles = _lab, _hand\n   428\t\n   429\t        handles = list(handles)\n   430\t        if len(handles) < 2:\n   431\t            ncols = 1\n   432\t        self._ncols = ncols if ncols != 1 else ncol\n   433\t\n   434\t        if self.numpoints <= 0:\n   435\t            raise ValueError(\"numpoints must be > 0; it was %d\" % numpoints)\n   436\t\n   437\t        # introduce y-offset for handles of the scatter plot\n   438\t        if scatteryoffsets is None:\n   439\t            self._scatteryoffsets = np.array([3. / 8., 4. / 8., 2.5 / 8.])\n   440\t        else:\n   441\t            self._scatteryoffsets = np.asarray(scatteryoffsets)\n   442\t        reps = self.scatterpoints // len(self._scatteryoffsets) + 1\n   443\t        self._scatteryoffsets = np.tile(self._scatteryoffsets,\n   444\t                                        reps)[:self.scatterpoints]\n   445\t\n   446\t        # _legend_box is a VPacker instance that contains all\n   447\t        # legend items and will be initialized from _init_legend_box()\n   448\t        # method.\n   449\t        self._legend_box = None\n   450\t\n   451\t        if isinstance(parent, Axes):\n   452\t            self.isaxes = True\n   453\t            self.axes = parent\n   454\t            self.set_figure(parent.figure)\n   455\t        elif isinstance(parent, FigureBase):\n   456\t            self.isaxes = False\n   457\t            self.set_figure(parent)\n   458\t        else:\n   459\t            raise TypeError(\n   460\t                \"Legend needs either Axes or FigureBase as parent\"\n   461\t            )\n   462\t        self.parent = parent\n   463\t\n   464\t        self._loc_used_default = loc is None\n   465\t        if loc is None:\n   466\t            loc = mpl.rcParams[\"legend.loc\"]\n   467\t            if not self.isaxes and loc in [0, 'best']:\n   468\t                loc = 'upper right'\n   469\t        if isinstance(loc, str):\n   470\t            loc = _api.check_getitem(self.codes, loc=loc)\n   471\t        if not self.isaxes and loc == 0:\n   472\t            raise ValueError(\n   473\t                \"Automatic legend placement (loc='best') not implemented for \"\n   474\t                \"figure legend\")\n   475\t\n   476\t        self._mode = mode\n   477\t        self.set_bbox_to_anchor(bbox_to_anchor, bbox_transform)\n   478\t\n   479\t        # We use FancyBboxPatch to draw a legend frame. The location\n   480\t        # and size of the box will be updated during the drawing time.\n   481\t\n   482\t        if facecolor is None:\n   483\t            facecolor = mpl.rcParams[\"legend.facecolor\"]\n   484\t        if facecolor == 'inherit':\n   485\t            facecolor = mpl.rcParams[\"axes.facecolor\"]\n   486\t\n   487\t        if edgecolor is None:\n   488\t            edgecolor = mpl.rcParams[\"legend.edgecolor\"]\n   489\t        if edgecolor == 'inherit':\n   490\t            edgecolor = mpl.rcParams[\"axes.edgecolor\"]\n   491\t\n   492\t        if fancybox is None:\n   493\t            fancybox = mpl.rcParams[\"legend.fancybox\"]\n   494\t\n   495\t        self.legendPatch = FancyBboxPatch(\n   496\t            xy=(0, 0), width=1, height=1,\n   497\t            facecolor=facecolor, edgecolor=edgecolor,\n   498\t            # If shadow is used, default to alpha=1 (#8943).\n   499\t            alpha=(framealpha if framealpha is not None\n   500\t                   else 1 if shadow\n   501\t                   else mpl.rcParams[\"legend.framealpha\"]),\n   502\t            # The width and height of the legendPatch will be set (in draw())\n   503\t            # to the length that includes the padding. Thus we set pad=0 here.\n   504\t            boxstyle=(\"round,pad=0,rounding_size=0.2\" if fancybox\n   505\t                      else \"square,pad=0\"),\n   506\t            mutation_scale=self._fontsize,\n   507\t            snap=True,\n   508\t            visible=(frameon if frameon is not None\n   509\t                     else mpl.rcParams[\"legend.frameon\"])\n   510\t        )\n   511\t        self._set_artist_props(self.legendPatch)\n   512\t\n   513\t        _api.check_in_list([\"center\", \"left\", \"right\"], alignment=alignment)\n   514\t        self._alignment = alignment\n   515\t\n   516\t        # init with null renderer\n   517\t        self._init_legend_box(handles, labels, markerfirst)\n   518\t\n   519\t        tmp = self._loc_used_default\n   520\t        self._set_loc(loc)\n   521\t        self._loc_used_default = tmp  # ignore changes done by _set_loc\n   522\t\n   523\t        # figure out title font properties:\n   524\t        if title_fontsize is not None and title_fontproperties is not None:\n   525\t            raise ValueError(\n   526\t                \"title_fontsize and title_fontproperties can't be specified \"\n   527\t                \"at the same time. Only use one of them. \")\n   528\t        title_prop_fp = FontProperties._from_any(title_fontproperties)\n   529\t        if isinstance(title_fontproperties, dict):\n   530\t            if \"size\" not in title_fontproperties:\n   531\t                title_fontsize = mpl.rcParams[\"legend.title_fontsize\"]\n   532\t                title_prop_fp.set_size(title_fontsize)\n   533\t        elif title_fontsize is not None:\n   534\t            title_prop_fp.set_size(title_fontsize)\n   535\t        elif not isinstance(title_fontproperties, FontProperties):\n   536\t            title_fontsize = mpl.rcParams[\"legend.title_fontsize\"]\n   537\t            title_prop_fp.set_size(title_fontsize)\n   538\t\n   539\t        self.set_title(title, prop=title_prop_fp)\n   540\t        self._draggable = None\n   541\t\n   542\t        # set the text color\n   543\t\n   544\t        color_getters = {  # getter function depends on line or patch\n   545\t            'linecolor':       ['get_color',           'get_facecolor'],\n   546\t            'markerfacecolor': ['get_markerfacecolor', 'get_facecolor'],\n   547\t            'mfc':             ['get_markerfacecolor', 'get_facecolor'],\n   548\t            'markeredgecolor': ['get_markeredgecolor', 'get_edgecolor'],\n   549\t            'mec':             ['get_markeredgecolor', 'get_edgecolor'],\n   550\t        }\n   551\t        if labelcolor is None:\n   552\t            if mpl.rcParams['legend.labelcolor'] is not None:\n   553\t                labelcolor = mpl.rcParams['legend.labelcolor']\n   554\t            else:\n   555\t                labelcolor = mpl.rcParams['text.color']\n   556\t        if isinstance(labelcolor, str) and labelcolor in color_getters:\n   557\t            getter_names = color_getters[labelcolor]\n   558\t            for handle, text in zip(self.legendHandles, self.texts):\n   559\t                for getter_name in getter_names:\n   560\t                    try:\n   561\t                        color = getattr(handle, getter_name)()\n   562\t                        text.set_color(color)\n   563\t                        break\n   564\t                    except AttributeError:\n   565\t                        pass\n   566\t        elif isinstance(labelcolor, str) and labelcolor == 'none':\n   567\t            for text in self.texts:\n   568\t                text.set_color(labelcolor)\n   569\t        elif np.iterable(labelcolor):\n   570\t            for text, color in zip(self.texts,\n   571\t                                   itertools.cycle(\n   572\t                                       colors.to_rgba_array(labelcolor))):\n   573\t                text.set_color(color)\n   574\t        else:\n   575\t            raise ValueError(f\"Invalid labelcolor: {labelcolor!r}\")\n\n\n<span id='Legend._set_artist_props'>\n   576\t\n   577\t    def _set_artist_props(self, a):\n   578\t        \"\"\"\n   579\t        Set the boilerplate props for artists added to axes.\n   580\t        \"\"\"\n   581\t        a.set_figure(self.figure)\n   582\t        if self.isaxes:\n   583\t            # a.set_axes(self.axes)\n   584\t            a.axes = self.axes\n   585\t\n   586\t        a.set_transform(self.get_transform())\n\n\n<span id='Legend._set_loc'>\n   587\t\n   588\t    def _set_loc(self, loc):\n   589\t        # find_offset function will be provided to _legend_box and\n   590\t        # _legend_box will draw itself at the location of the return\n   591\t        # value of the find_offset.\n   592\t        self._loc_used_default = False\n   593\t        self._loc_real = loc\n   594\t        self.stale = True\n   595\t        self._legend_box.set_offset(self._findoffset)\n\n\n<span id='Legend.set_ncols'>\n   596\t\n   597\t    def set_ncols(self, ncols):\n   598\t        \"\"\"Set the number of columns.\"\"\"\n   599\t        self._ncols = ncols\n\n\n<span id='Legend._get_loc'>\n   600\t\n   601\t    def _get_loc(self):\n   602\t        return self._loc_real\n\n\n<span id='Legend:7'>\n   603\t\n   604\t    _loc = property(_get_loc, _set_loc)\n\n\n<span id='Legend._findoffset'>\n   605\t\n   606\t    def _findoffset(self, width, height, xdescent, ydescent, renderer):\n   607\t        \"\"\"Helper function to locate the legend.\"\"\"\n   608\t\n   609\t        if self._loc == 0:  # \"best\".\n   610\t            x, y = self._find_best_position(width, height, renderer)\n   611\t        elif self._loc in Legend.codes.values():  # Fixed location.\n   612\t            bbox = Bbox.from_bounds(0, 0, width, height)\n   613\t            x, y = self._get_anchored_bbox(self._loc, bbox,\n   614\t                                           self.get_bbox_to_anchor(),\n   615\t                                           renderer)\n   616\t        else:  # Axes or figure coordinates.\n   617\t            fx, fy = self._loc\n   618\t            bbox = self.get_bbox_to_anchor()\n   619\t            x, y = bbox.x0 + bbox.width * fx, bbox.y0 + bbox.height * fy\n   620\t\n   621\t        return x + xdescent, y + ydescent\n\n\n<span id='Legend.draw'>\n   622\t\n   623\t    @allow_rasterization\n   624\t    def draw(self, renderer):\n   625\t        # docstring inherited\n   626\t        if not self.get_visible():\n   627\t            return\n   628\t\n   629\t        renderer.open_group('legend', gid=self.get_gid())\n   630\t\n   631\t        fontsize = renderer.points_to_pixels(self._fontsize)\n   632\t\n   633\t        # if mode == fill, set the width of the legend_box to the\n   634\t        # width of the parent (minus pads)\n   635\t        if self._mode in [\"expand\"]:\n   636\t            pad = 2 * (self.borderaxespad + self.borderpad) * fontsize\n   637\t            self._legend_box.set_width(self.get_bbox_to_anchor().width - pad)\n   638\t\n   639\t        # update the location and size of the legend. This needs to\n   640\t        # be done in any case to clip the figure right.\n   641\t        bbox = self._legend_box.get_window_extent(renderer)\n   642\t        self.legendPatch.set_bounds(bbox.bounds)\n   643\t        self.legendPatch.set_mutation_scale(fontsize)\n   644\t\n   645\t        if self.shadow:\n   646\t            Shadow(self.legendPatch, 2, -2).draw(renderer)\n   647\t\n   648\t        self.legendPatch.draw(renderer)\n   649\t        self._legend_box.draw(renderer)\n   650\t\n   651\t        renderer.close_group('legend')\n   652\t        self.stale = False\n   653\t\n   654\t    # _default_handler_map defines the default mapping between plot\n   655\t    # elements and the legend handlers.\n\n\n<span id='Legend:9'>\n   656\t\n   657\t    _default_handler_map = {\n   658\t        StemContainer: legend_handler.HandlerStem(),\n   659\t        ErrorbarContainer: legend_handler.HandlerErrorbar(),\n   660\t        Line2D: legend_handler.HandlerLine2D(),\n   661\t        Patch: legend_handler.HandlerPatch(),\n   662\t        StepPatch: legend_handler.HandlerStepPatch(),\n   663\t        LineCollection: legend_handler.HandlerLineCollection(),\n   664\t        RegularPolyCollection: legend_handler.HandlerRegularPolyCollection(),\n   665\t        CircleCollection: legend_handler.HandlerCircleCollection(),\n   666\t        BarContainer: legend_handler.HandlerPatch(\n   667\t            update_func=legend_handler.update_from_first_child),\n   668\t        tuple: legend_handler.HandlerTuple(),\n   669\t        PathCollection: legend_handler.HandlerPathCollection(),\n   670\t        PolyCollection: legend_handler.HandlerPolyCollection()\n   671\t        }\n   672\t\n   673\t    # (get|set|update)_default_handler_maps are public interfaces to\n   674\t    # modify the default handler map.\n\n\n<span id='Legend.get_default_handler_map'>\n   675\t\n   676\t    @classmethod\n   677\t    def get_default_handler_map(cls):\n   678\t        \"\"\"Return the global default handler map, shared by all legends.\"\"\"\n   679\t        return cls._default_handler_map\n\n\n<span id='Legend.set_default_handler_map'>\n   680\t\n   681\t    @classmethod\n   682\t    def set_default_handler_map(cls, handler_map):\n   683\t        \"\"\"Set the global default handler map, shared by all legends.\"\"\"\n   684\t        cls._default_handler_map = handler_map\n\n\n<span id='Legend.update_default_handler_map'>\n   685\t\n   686\t    @classmethod\n   687\t    def update_default_handler_map(cls, handler_map):\n   688\t        \"\"\"Update the global default handler map, shared by all legends.\"\"\"\n   689\t        cls._default_handler_map.update(handler_map)\n\n\n<span id='Legend.get_legend_handler_map'>\n   690\t\n   691\t    def get_legend_handler_map(self):\n   692\t        \"\"\"Return this legend instance's handler map.\"\"\"\n   693\t        default_handler_map = self.get_default_handler_map()\n   694\t        return ({**default_handler_map, **self._custom_handler_map}\n   695\t                if self._custom_handler_map else default_handler_map)\n\n\n<span id='Legend.get_legend_handler'>\n   696\t\n   697\t    @staticmethod\n   698\t    def get_legend_handler(legend_handler_map, orig_handle):\n   699\t        \"\"\"\n   700\t        Return a legend handler from *legend_handler_map* that\n   701\t        corresponds to *orig_handler*.\n   702\t\n   703\t        *legend_handler_map* should be a dictionary object (that is\n   704\t        returned by the get_legend_handler_map method).\n   705\t\n   706\t        It first checks if the *orig_handle* itself is a key in the\n   707\t        *legend_handler_map* and return the associated value.\n   708\t        Otherwise, it checks for each of the classes in its\n   709\t        method-resolution-order. If no matching key is found, it\n   710\t        returns ``None``.\n   711\t        \"\"\"\n   712\t        try:\n   713\t            return legend_handler_map[orig_handle]\n   714\t        except (TypeError, KeyError):  # TypeError if unhashable.\n   715\t            pass\n   716\t        for handle_type in type(orig_handle).mro():\n   717\t            try:\n   718\t                return legend_handler_map[handle_type]\n   719\t            except KeyError:\n   720\t                pass\n   721\t        return None\n\n\n<span id='Legend._init_legend_box'>\n   722\t\n   723\t    def _init_legend_box(self, handles, labels, markerfirst=True):\n   724\t        \"\"\"\n   725\t        Initialize the legend_box. The legend_box is an instance of\n   726\t        the OffsetBox, which is packed with legend handles and\n   727\t        texts. Once packed, their location is calculated during the\n   728\t        drawing time.\n   729\t        \"\"\"\n   730\t\n   731\t        fontsize = self._fontsize\n   732\t\n   733\t        # legend_box is a HPacker, horizontally packed with columns.\n   734\t        # Each column is a VPacker, vertically packed with legend items.\n   735\t        # Each legend item is a HPacker packed with:\n   736\t        # - handlebox: a DrawingArea which contains the legend handle.\n   737\t        # - labelbox: a TextArea which contains the legend text.\n   738\t\n   739\t        text_list = []  # the list of text instances\n   740\t        handle_list = []  # the list of handle instances\n   741\t        handles_and_labels = []\n   742\t\n   743\t        # The approximate height and descent of text. These values are\n   744\t        # only used for plotting the legend handle.\n   745\t        descent = 0.35 * fontsize * (self.handleheight - 0.7)  # heuristic.\n   746\t        height = fontsize * self.handleheight - descent\n   747\t        # each handle needs to be drawn inside a box of (x, y, w, h) =\n   748\t        # (0, -descent, width, height).  And their coordinates should\n   749\t        # be given in the display coordinates.\n   750\t\n   751\t        # The transformation of each handle will be automatically set\n   752\t        # to self.get_transform(). If the artist does not use its\n   753\t        # default transform (e.g., Collections), you need to\n   754\t        # manually set their transform to the self.get_transform().\n   755\t        legend_handler_map = self.get_legend_handler_map()\n   756\t\n   757\t        for orig_handle, label in zip(handles, labels):\n   758\t            handler = self.get_legend_handler(legend_handler_map, orig_handle)\n   759\t            if handler is None:\n   760\t                _api.warn_external(\n   761\t                             \"Legend does not support handles for {0} \"\n   762\t                             \"instances.\\nA proxy artist may be used \"\n   763\t                             \"instead.\\nSee: https://matplotlib.org/\"\n   764\t                             \"stable/tutorials/intermediate/legend_guide.html\"\n   765\t                             \"#controlling-the-legend-entries\".format(\n   766\t                                 type(orig_handle).__name__))\n   767\t                # No handle for this artist, so we just defer to None.\n   768\t                handle_list.append(None)\n   769\t            else:\n   770\t                textbox = TextArea(label, multilinebaseline=True,\n   771\t                                   textprops=dict(\n   772\t                                       verticalalignment='baseline',\n   773\t                                       horizontalalignment='left',\n   774\t                                       fontproperties=self.prop))\n   775\t                handlebox = DrawingArea(width=self.handlelength * fontsize,\n   776\t                                        height=height,\n   777\t                                        xdescent=0., ydescent=descent)\n   778\t\n   779\t                text_list.append(textbox._text)\n   780\t                # Create the artist for the legend which represents the\n   781\t                # original artist/handle.\n   782\t                handle_list.append(handler.legend_artist(self, orig_handle,\n   783\t                                                         fontsize, handlebox))\n   784\t                handles_and_labels.append((handlebox, textbox))\n   785\t\n   786\t        columnbox = []\n   787\t        # array_split splits n handles_and_labels into ncols columns, with the\n   788\t        # first n%ncols columns having an extra entry.  filter(len, ...)\n   789\t        # handles the case where n < ncols: the last ncols-n columns are empty\n   790\t        # and get filtered out.\n   791\t        for handles_and_labels_column in filter(\n   792\t                len, np.array_split(handles_and_labels, self._ncols)):\n   793\t            # pack handlebox and labelbox into itembox\n   794\t            itemboxes = [HPacker(pad=0,\n   795\t                                 sep=self.handletextpad * fontsize,\n   796\t                                 children=[h, t] if markerfirst else [t, h],\n   797\t                                 align=\"baseline\")\n   798\t                         for h, t in handles_and_labels_column]\n   799\t            # pack columnbox\n   800\t            alignment = \"baseline\" if markerfirst else \"right\"\n   801\t            columnbox.append(VPacker(pad=0,\n   802\t                                     sep=self.labelspacing * fontsize,\n   803\t                                     align=alignment,\n   804\t                                     children=itemboxes))\n   805\t\n   806\t        mode = \"expand\" if self._mode == \"expand\" else \"fixed\"\n   807\t        sep = self.columnspacing * fontsize\n   808\t        self._legend_handle_box = HPacker(pad=0,\n   809\t                                          sep=sep, align=\"baseline\",\n   810\t                                          mode=mode,\n   811\t                                          children=columnbox)\n   812\t        self._legend_title_box = TextArea(\"\")\n   813\t        self._legend_box = VPacker(pad=self.borderpad * fontsize,\n   814\t                                   sep=self.labelspacing * fontsize,\n   815\t                                   align=self._alignment,\n   816\t                                   children=[self._legend_title_box,\n   817\t                                             self._legend_handle_box])\n   818\t        self._legend_box.set_figure(self.figure)\n   819\t        self._legend_box.axes = self.axes\n   820\t        self.texts = text_list\n   821\t        self.legendHandles = handle_list\n\n\n<span id='Legend._auto_legend_data'>\n   822\t\n   823\t    def _auto_legend_data(self):\n   824\t        \"\"\"\n   825\t        Return display coordinates for hit testing for \"best\" positioning.\n   826\t\n   827\t        Returns\n   828\t        -------\n   829\t        bboxes\n   830\t            List of bounding boxes of all patches.\n   831\t        lines\n   832\t            List of `.Path` corresponding to each line.\n   833\t        offsets\n   834\t            List of (x, y) offsets of all collection.\n   835\t        \"\"\"\n   836\t        assert self.isaxes  # always holds, as this is only called internally\n   837\t        bboxes = []\n   838\t        lines = []\n   839\t        offsets = []\n   840\t        for artist in self.parent._children:\n   841\t            if isinstance(artist, Line2D):\n   842\t                lines.append(\n   843\t                    artist.get_transform().transform_path(artist.get_path()))\n   844\t            elif isinstance(artist, Rectangle):\n   845\t                bboxes.append(\n   846\t                    artist.get_bbox().transformed(artist.get_data_transform()))\n   847\t            elif isinstance(artist, Patch):\n   848\t                bboxes.append(\n   849\t                    artist.get_path().get_extents(artist.get_transform()))\n   850\t            elif isinstance(artist, Collection):\n   851\t                _, offset_trf, hoffsets, _ = artist._prepare_points()\n   852\t                for offset in offset_trf.transform(hoffsets):\n   853\t                    offsets.append(offset)\n   854\t        return bboxes, lines, offsets\n\n\n<span id='Legend.get_children'>\n   855\t\n   856\t    def get_children(self):\n   857\t        # docstring inherited\n   858\t        return [self._legend_box, self.get_frame()]\n\n\n<span id='Legend.get_frame'>\n   859\t\n   860\t    def get_frame(self):\n   861\t        \"\"\"Return the `~.patches.Rectangle` used to frame the legend.\"\"\"\n   862\t        return self.legendPatch\n\n\n<span id='Legend.get_lines'>\n   863\t\n   864\t    def get_lines(self):\n   865\t        r\"\"\"Return the list of `~.lines.Line2D`\\s in the legend.\"\"\"\n   866\t        return [h for h in self.legendHandles if isinstance(h, Line2D)]\n\n\n<span id='Legend.get_patches'>\n   867\t\n   868\t    def get_patches(self):\n   869\t        r\"\"\"Return the list of `~.patches.Patch`\\s in the legend.\"\"\"\n   870\t        return silent_list('Patch',\n   871\t                           [h for h in self.legendHandles\n   872\t                            if isinstance(h, Patch)])\n\n\n<span id='Legend.get_texts'>\n   873\t\n   874\t    def get_texts(self):\n   875\t        r\"\"\"Return the list of `~.text.Text`\\s in the legend.\"\"\"\n   876\t        return silent_list('Text', self.texts)\n\n\n<span id='Legend.set_alignment'>\n   877\t\n   878\t    def set_alignment(self, alignment):\n   879\t        \"\"\"\n   880\t        Set the alignment of the legend title and the box of entries.\n   881\t\n   882\t        The entries are aligned as a single block, so that markers always\n   883\t        lined up.\n   884\t\n   885\t        Parameters\n   886\t        ----------\n   887\t        alignment : {'center', 'left', 'right'}.\n   888\t\n   889\t        \"\"\"\n   890\t        _api.check_in_list([\"center\", \"left\", \"right\"], alignment=alignment)\n   891\t        self._alignment = alignment\n   892\t        self._legend_box.align = alignment\n\n\n<span id='Legend.get_alignment'>\n   893\t\n   894\t    def get_alignment(self):\n   895\t        \"\"\"Get the alignment value of the legend box\"\"\"\n   896\t        return self._legend_box.align\n\n\n<span id='Legend.set_title'>\n   897\t\n   898\t    def set_title(self, title, prop=None):\n   899\t        \"\"\"\n   900\t        Set legend title and title style.\n   901\t\n   902\t        Parameters\n   903\t        ----------\n   904\t        title : str\n   905\t            The legend title.\n   906\t\n   907\t        prop : `.font_manager.FontProperties` or `str` or `pathlib.Path`\n   908\t            The font properties of the legend title.\n   909\t            If a `str`, it is interpreted as a fontconfig pattern parsed by\n   910\t            `.FontProperties`.  If a `pathlib.Path`, it is interpreted as the\n   911\t            absolute path to a font file.\n   912\t\n   913\t        \"\"\"\n   914\t        self._legend_title_box._text.set_text(title)\n   915\t        if title:\n   916\t            self._legend_title_box._text.set_visible(True)\n   917\t            self._legend_title_box.set_visible(True)\n   918\t        else:\n   919\t            self._legend_title_box._text.set_visible(False)\n   920\t            self._legend_title_box.set_visible(False)\n   921\t\n   922\t        if prop is not None:\n   923\t            self._legend_title_box._text.set_fontproperties(prop)\n   924\t\n   925\t        self.stale = True\n\n\n<span id='Legend.get_title'>\n   926\t\n   927\t    def get_title(self):\n   928\t        \"\"\"Return the `.Text` instance for the legend title.\"\"\"\n   929\t        return self._legend_title_box._text\n\n\n<span id='Legend.get_window_extent'>\n   930\t\n   931\t    def get_window_extent(self, renderer=None):\n   932\t        # docstring inherited\n   933\t        if renderer is None:\n   934\t            renderer = self.figure._get_renderer()\n   935\t        return self._legend_box.get_window_extent(renderer=renderer)\n\n\n<span id='Legend.get_tightbbox'>\n   936\t\n   937\t    def get_tightbbox(self, renderer=None):\n   938\t        # docstring inherited\n   939\t        return self._legend_box.get_window_extent(renderer)\n\n\n<span id='Legend.get_frame_on'>\n   940\t\n   941\t    def get_frame_on(self):\n   942\t        \"\"\"Get whether the legend box patch is drawn.\"\"\"\n   943\t        return self.legendPatch.get_visible()\n\n\n<span id='Legend.set_frame_on'>\n   944\t\n   945\t    def set_frame_on(self, b):\n   946\t        \"\"\"\n   947\t        Set whether the legend box patch is drawn.\n   948\t\n   949\t        Parameters\n   950\t        ----------\n   951\t        b : bool\n   952\t        \"\"\"\n   953\t        self.legendPatch.set_visible(b)\n   954\t        self.stale = True\n\n\n<span id='Legend:11'>\n   955\t\n   956\t    draw_frame = set_frame_on  # Backcompat alias.\n\n\n<span id='Legend.get_bbox_to_anchor'>\n   957\t\n   958\t    def get_bbox_to_anchor(self):\n   959\t        \"\"\"Return the bbox that the legend will be anchored to.\"\"\"\n   960\t        if self._bbox_to_anchor is None:\n   961\t            return self.parent.bbox\n   962\t        else:\n   963\t            return self._bbox_to_anchor\n\n\n<span id='Legend.set_bbox_to_anchor'>\n   964\t\n   965\t    def set_bbox_to_anchor(self, bbox, transform=None):\n   966\t        \"\"\"\n   967\t        Set the bbox that the legend will be anchored to.\n   968\t\n   969\t        Parameters\n   970\t        ----------\n   971\t        bbox : `~matplotlib.transforms.BboxBase` or tuple\n   972\t            The bounding box can be specified in the following ways:\n   973\t\n   974\t            - A `.BboxBase` instance\n   975\t            - A tuple of ``(left, bottom, width, height)`` in the given\n   976\t              transform (normalized axes coordinate if None)\n   977\t            - A tuple of ``(left, bottom)`` where the width and height will be\n   978\t              assumed to be zero.\n   979\t            - *None*, to remove the bbox anchoring, and use the parent bbox.\n   980\t\n   981\t        transform : `~matplotlib.transforms.Transform`, optional\n   982\t            A transform to apply to the bounding box. If not specified, this\n   983\t            will use a transform to the bounding box of the parent.\n   984\t        \"\"\"\n   985\t        if bbox is None:\n   986\t            self._bbox_to_anchor = None\n   987\t            return\n   988\t        elif isinstance(bbox, BboxBase):\n   989\t            self._bbox_to_anchor = bbox\n   990\t        else:\n   991\t            try:\n   992\t                l = len(bbox)\n   993\t            except TypeError as err:\n   994\t                raise ValueError(f\"Invalid bbox: {bbox}\") from err\n   995\t\n   996\t            if l == 2:\n   997\t                bbox = [bbox[0], bbox[1], 0, 0]\n   998\t\n   999\t            self._bbox_to_anchor = Bbox.from_bounds(*bbox)\n  1000\t\n  1001\t        if transform is None:\n  1002\t            transform = BboxTransformTo(self.parent.bbox)\n  1003\t\n  1004\t        self._bbox_to_anchor = TransformedBbox(self._bbox_to_anchor,\n  1005\t                                               transform)\n  1006\t        self.stale = True\n\n\n<span id='Legend._get_anchored_bbox'>\n  1007\t\n  1008\t    def _get_anchored_bbox(self, loc, bbox, parentbbox, renderer):\n  1009\t        \"\"\"\n  1010\t        Place the *bbox* inside the *parentbbox* according to a given\n  1011\t        location code. Return the (x, y) coordinate of the bbox.\n  1012\t\n  1013\t        Parameters\n  1014\t        ----------\n  1015\t        loc : int\n  1016\t            A location code in range(1, 11). This corresponds to the possible\n  1017\t            values for ``self._loc``, excluding \"best\".\n  1018\t        bbox : `~matplotlib.transforms.Bbox`\n  1019\t            bbox to be placed, in display coordinates.\n  1020\t        parentbbox : `~matplotlib.transforms.Bbox`\n  1021\t            A parent box which will contain the bbox, in display coordinates.\n  1022\t        \"\"\"\n  1023\t        return offsetbox._get_anchored_bbox(\n  1024\t            loc, bbox, parentbbox,\n  1025\t            self.borderaxespad * renderer.points_to_pixels(self._fontsize))\n\n\n<span id='Legend._find_best_position'>\n  1026\t\n  1027\t    def _find_best_position(self, width, height, renderer, consider=None):\n  1028\t        \"\"\"\n  1029\t        Determine the best location to place the legend.\n  1030\t\n  1031\t        *consider* is a list of ``(x, y)`` pairs to consider as a potential\n  1032\t        lower-left corner of the legend. All are display coords.\n  1033\t        \"\"\"\n  1034\t        assert self.isaxes  # always holds, as this is only called internally\n  1035\t\n  1036\t        start_time = time.perf_counter()\n  1037\t\n  1038\t        bboxes, lines, offsets = self._auto_legend_data()\n  1039\t\n  1040\t        bbox = Bbox.from_bounds(0, 0, width, height)\n  1041\t        if consider is None:\n  1042\t            consider = [self._get_anchored_bbox(x, bbox,\n  1043\t                                                self.get_bbox_to_anchor(),\n  1044\t                                                renderer)\n  1045\t                        for x in range(1, len(self.codes))]\n  1046\t\n  1047\t        candidates = []\n  1048\t        for idx, (l, b) in enumerate(consider):\n  1049\t            legendBox = Bbox.from_bounds(l, b, width, height)\n  1050\t            badness = 0\n  1051\t            # XXX TODO: If markers are present, it would be good to take them\n  1052\t            # into account when checking vertex overlaps in the next line.\n  1053\t            badness = (sum(legendBox.count_contains(line.vertices)\n  1054\t                           for line in lines)\n  1055\t                       + legendBox.count_contains(offsets)\n  1056\t                       + legendBox.count_overlaps(bboxes)\n  1057\t                       + sum(line.intersects_bbox(legendBox, filled=False)\n  1058\t                             for line in lines))\n  1059\t            if badness == 0:\n  1060\t                return l, b\n  1061\t            # Include the index to favor lower codes in case of a tie.\n  1062\t            candidates.append((badness, idx, (l, b)))\n  1063\t\n  1064\t        _, _, (l, b) = min(candidates)\n  1065\t\n  1066\t        if self._loc_used_default and time.perf_counter() - start_time > 1:\n  1067\t            _api.warn_external(\n  1068\t                'Creating legend with loc=\"best\" can be slow with large '\n  1069\t                'amounts of data.')\n  1070\t\n  1071\t        return l, b\n\n\n<span id='Legend.contains'>\n  1072\t\n  1073\t    def contains(self, event):\n  1074\t        inside, info = self._default_contains(event)\n  1075\t        if inside is not None:\n  1076\t            return inside, info\n  1077\t        return self.legendPatch.contains(event)\n\n\n<span id='Legend.set_draggable'>\n  1078\t\n  1079\t    def set_draggable(self, state, use_blit=False, update='loc'):\n  1080\t        \"\"\"\n  1081\t        Enable or disable mouse dragging support of the legend.\n  1082\t\n  1083\t        Parameters\n  1084\t        ----------\n  1085\t        state : bool\n  1086\t            Whether mouse dragging is enabled.\n  1087\t        use_blit : bool, optional\n  1088\t            Use blitting for faster image composition. For details see\n  1089\t            :ref:`func-animation`.\n  1090\t        update : {'loc', 'bbox'}, optional\n  1091\t            The legend parameter to be changed when dragged:\n  1092\t\n  1093\t            - 'loc': update the *loc* parameter of the legend\n  1094\t            - 'bbox': update the *bbox_to_anchor* parameter of the legend\n  1095\t\n  1096\t        Returns\n  1097\t        -------\n  1098\t        `.DraggableLegend` or *None*\n  1099\t            If *state* is ``True`` this returns the `.DraggableLegend` helper\n  1100\t            instance. Otherwise this returns *None*.\n  1101\t        \"\"\"\n  1102\t        if state:\n  1103\t            if self._draggable is None:\n  1104\t                self._draggable = DraggableLegend(self,\n  1105\t                                                  use_blit,\n  1106\t                                                  update=update)\n  1107\t        else:\n  1108\t            if self._draggable is not None:\n  1109\t                self._draggable.disconnect()\n  1110\t            self._draggable = None\n  1111\t        return self._draggable\n\n\n<span id='Legend.get_draggable'>\n  1112\t\n  1113\t    def get_draggable(self):\n  1114\t        \"\"\"Return ``True`` if the legend is draggable, ``False`` otherwise.\"\"\"\n  1115\t        return self._draggable is not None\n\n\n<span id='Legend.get_draggable'>\n  1116\t\n  1117\t\n  1118\t# Helper functions to parse legend arguments for both `figure.legend` and\n  1119\t# `axes.legend`:\n      # ...\n```\n\n</search_result>\n"
            }
          ],
          "response": {
            "id": "msg_01SWwtDHbKBZFPYgRoPrLAhK",
            "content": [
              {
                "text": "I'll analyze the search results and identify the relevant code sections for the Legend class. Here's my response using the Action tool:",
                "type": "text"
              },
              {
                "id": "toolu_01UE2ERJsT1QJ6v3JYHdd1HR",
                "input": {
                  "scratch_pad": "The search results contain the complete Legend class definition from matplotlib's legend.py file. The key sections include:\n\n1. The main Legend class definition and docstring (lines 292-296)\n2. Core initialization method __init__ (lines 304-575)\n3. Important properties and methods for legend functionality:\n   - Drawing and rendering (draw method)\n   - Location and positioning methods (_set_loc, _get_loc)\n   - Frame and appearance control methods\n   - Handler mapping for different plot elements\n   - Title and text management\n   - Dragging support\n\nThe Legend class is a fundamental component for creating and managing plot legends in matplotlib.",
                  "identified_spans": [
                    {
                      "file_path": "lib/matplotlib/legend.py",
                      "start_line": 292,
                      "end_line": 296
                    },
                    {
                      "file_path": "lib/matplotlib/legend.py",
                      "start_line": 304,
                      "end_line": 575
                    },
                    {
                      "file_path": "lib/matplotlib/legend.py",
                      "start_line": 622,
                      "end_line": 652
                    }
                  ]
                },
                "name": "Action",
                "type": "tool_use"
              }
            ],
            "model": "claude-3-5-sonnet-20241022",
            "role": "assistant",
            "stop_reason": "tool_use",
            "stop_sequence": null,
            "type": "message",
            "usage": {
              "cache_creation_input_tokens": 0,
              "cache_read_input_tokens": 0,
              "input_tokens": 13358,
              "output_tokens": 364
            }
          },
          "usage": {
            "completion_cost": 0.045534,
            "completion_tokens": 364,
            "prompt_tokens": 13358,
            "cached_tokens": 0
          }
        }
      },
      "file_context": {
        "max_tokens": 8000,
        "files": [
          {
            "file_path": "lib/matplotlib/legend.py",
            "spans": [
              {
                "span_id": "imports",
                "pinned": false
              },
              {
                "span_id": "Legend",
                "pinned": false
              },
              {
                "span_id": "Legend.__init__",
                "pinned": false
              },
              {
                "span_id": "Legend.draw",
                "pinned": false
              }
            ],
            "show_all_spans": false,
            "patch": null
          }
        ]
      },
      "completions": {
        "build_action": {
          "model": "claude-3-5-sonnet-20241022",
          "input": [
            {
              "role": "user",
              "content": "<task>\nlegend draggable as keyword\n<!--To help us understand and resolve your issue, please fill out the form to the best of your ability.-->\r\n<!--You can feel free to delete the sections that do not apply.-->\r\n\r\n### Feature request\r\n\r\n**There is not keyword to make legend draggable at creation**\r\n\r\n<!--A short 1-2 sentences that succinctly describes the bug-->\r\n\r\nIs there a code reason why one can not add a \"draggable=True\" keyword to the __init__ function for Legend?  This would be more handy than having to call it after legend creation.  And, naively, it would seem simple to do.  But maybe there is a reason why it would not work?\n\n</task>"
            }
          ],
          "response": {
            "id": "msg_01JVq1Fbj7cDAMgaJwYmSsJZ",
            "content": [
              {
                "text": "I'll help investigate and implement adding a `draggable` keyword argument to the Legend initialization.\n\n<thoughts>\n1. First, I need to locate the Legend class implementation to understand its current initialization\n2. Then I'll check if there are any technical limitations for adding the draggable parameter\n3. I'll also look for any tests related to legend draggability to understand the current testing approach\n4. Finally, I'll implement the change if there are no blockers\n</thoughts>",
                "type": "text"
              },
              {
                "id": "toolu_01KuePujCyxz5uftoDC63Rxy",
                "input": {
                  "class_name": "Legend"
                },
                "name": "FindClass",
                "type": "tool_use"
              }
            ],
            "model": "claude-3-5-sonnet-20241022",
            "role": "assistant",
            "stop_reason": "tool_use",
            "stop_sequence": null,
            "type": "message",
            "usage": {
              "cache_creation_input_tokens": 0,
              "cache_read_input_tokens": 3981,
              "input_tokens": 304,
              "output_tokens": 159
            }
          },
          "usage": {
            "completion_cost": 0.003297,
            "completion_tokens": 159,
            "prompt_tokens": 304,
            "cached_tokens": 3981
          }
        },
        "execute_action": {
          "model": "claude-3-5-sonnet-20241022",
          "input": [
            {
              "role": "user",
              "content": "Search request:\nAction: FindClass\n  file_pattern: None\n  class_name: Legend\n\nIdentify the relevant code sections in the search results to use them. \n\n<search_results>\nlib/matplotlib/legend.py\n```\n\n\n\n<span id='imports'>\n    23\t\n    24\timport itertools\n    25\timport logging\n    26\timport time\n    27\t\n    28\timport numpy as np\n    29\t\n    30\timport matplotlib as mpl\n    31\tfrom matplotlib import _api, _docstring, colors, offsetbox\n    32\tfrom matplotlib.artist import Artist, allow_rasterization\n    33\tfrom matplotlib.cbook import silent_list\n    34\tfrom matplotlib.font_manager import FontProperties\n    35\tfrom matplotlib.lines import Line2D\n    36\tfrom matplotlib.patches import (Patch, Rectangle, Shadow, FancyBboxPatch,\n    37\t                                StepPatch)\n    38\tfrom matplotlib.collections import (\n    39\t    Collection, CircleCollection, LineCollection, PathCollection,\n    40\t    PolyCollection, RegularPolyCollection)\n    41\tfrom matplotlib.text import Text\n    42\tfrom matplotlib.transforms import Bbox, BboxBase, TransformedBbox\n    43\tfrom matplotlib.transforms import BboxTransformTo, BboxTransformFrom\n    44\tfrom matplotlib.offsetbox import (\n    45\t    AnchoredOffsetbox, DraggableOffsetBox,\n    46\t    HPacker, VPacker,\n    47\t    DrawingArea, TextArea,\n    48\t)\n    49\tfrom matplotlib.container import ErrorbarContainer, BarContainer, StemContainer\n    50\tfrom . import legend_handler\n      # ...\n\n\n<span id='Legend'>\n   290\t\n   291\t\n   292\tclass Legend(Artist):\n   293\t    \"\"\"\n   294\t    Place a legend on the axes at location loc.\n   295\t    \"\"\"\n   296\t\n   297\t    # 'best' is only implemented for axes legends\n   298\t    codes = {'best': 0, **AnchoredOffsetbox.codes}\n   299\t    zorder = 5\n\n\n<span id='Legend.__str__'>\n   300\t\n   301\t    def __str__(self):\n   302\t        return \"Legend\"\n\n\n<span id='Legend.__init__'>\n   303\t\n   304\t    @_api.make_keyword_only(\"3.6\", \"loc\")\n   305\t    @_docstring.dedent_interpd\n   306\t    def __init__(\n   307\t        self, parent, handles, labels,\n   308\t        loc=None,\n   309\t        numpoints=None,      # number of points in the legend line\n   310\t        markerscale=None,    # relative size of legend markers vs. original\n   311\t        markerfirst=True,    # left/right ordering of legend marker and label\n   312\t        scatterpoints=None,  # number of scatter points\n   313\t        scatteryoffsets=None,\n   314\t        prop=None,           # properties for the legend texts\n   315\t        fontsize=None,       # keyword to set font size directly\n   316\t        labelcolor=None,     # keyword to set the text color\n   317\t\n   318\t        # spacing & pad defined as a fraction of the font-size\n   319\t        borderpad=None,      # whitespace inside the legend border\n   320\t        labelspacing=None,   # vertical space between the legend entries\n   321\t        handlelength=None,   # length of the legend handles\n   322\t        handleheight=None,   # height of the legend handles\n   323\t        handletextpad=None,  # pad between the legend handle and text\n   324\t        borderaxespad=None,  # pad between the axes and legend border\n   325\t        columnspacing=None,  # spacing between columns\n   326\t\n   327\t        ncols=1,     # number of columns\n   328\t        mode=None,  # horizontal distribution of columns: None or \"expand\"\n   329\t\n   330\t        fancybox=None,  # True: fancy box, False: rounded box, None: rcParam\n   331\t        shadow=None,\n   332\t        title=None,           # legend title\n   333\t        title_fontsize=None,  # legend title font size\n   334\t        framealpha=None,      # set frame alpha\n   335\t        edgecolor=None,       # frame patch edgecolor\n   336\t        facecolor=None,       # frame patch facecolor\n   337\t\n   338\t        bbox_to_anchor=None,  # bbox to which the legend will be anchored\n   339\t        bbox_transform=None,  # transform for the bbox\n   340\t        frameon=None,         # draw frame\n   341\t        handler_map=None,\n   342\t        title_fontproperties=None,  # properties for the legend title\n   343\t        alignment=\"center\",       # control the alignment within the legend box\n   344\t        *,\n   345\t        ncol=1  # synonym for ncols (backward compatibility)\n   346\t    ):\n   347\t        \"\"\"\n   348\t        Parameters\n   349\t        ----------\n   350\t        parent : `~matplotlib.axes.Axes` or `.Figure`\n   351\t            The artist that contains the legend.\n   352\t\n   353\t        handles : list of `.Artist`\n   354\t            A list of Artists (lines, patches) to be added to the legend.\n   355\t\n   356\t        labels : list of str\n   357\t            A list of labels to show next to the artists. The length of handles\n   358\t            and labels should be the same. If they are not, they are truncated\n   359\t            to the smaller of both lengths.\n   360\t\n   361\t        Other Parameters\n   362\t        ----------------\n   363\t        %(_legend_kw_doc)s\n   364\t\n   365\t        Notes\n   366\t        -----\n   367\t        Users can specify any arbitrary location for the legend using the\n   368\t        *bbox_to_anchor* keyword argument. *bbox_to_anchor* can be a\n   369\t        `.BboxBase` (or derived there from) or a tuple of 2 or 4 floats.\n   370\t        See `set_bbox_to_anchor` for more detail.\n   371\t\n   372\t        The legend location can be specified by setting *loc* with a tuple of\n   373\t        2 floats, which is interpreted as the lower-left corner of the legend\n   374\t        in the normalized axes coordinate.\n   375\t        \"\"\"\n   376\t        # local import only to avoid circularity\n   377\t        from matplotlib.axes import Axes\n   378\t        from matplotlib.figure import FigureBase\n   379\t\n   380\t        super().__init__()\n   381\t\n   382\t        if prop is None:\n   383\t            if fontsize is not None:\n   384\t                self.prop = FontProperties(size=fontsize)\n   385\t            else:\n   386\t                self.prop = FontProperties(\n   387\t                    size=mpl.rcParams[\"legend.fontsize\"])\n   388\t        else:\n   389\t            self.prop = FontProperties._from_any(prop)\n   390\t            if isinstance(prop, dict) and \"size\" not in prop:\n   391\t                self.prop.set_size(mpl.rcParams[\"legend.fontsize\"])\n   392\t\n   393\t        self._fontsize = self.prop.get_size_in_points()\n   394\t\n   395\t        self.texts = []\n   396\t        self.legendHandles = []\n   397\t        self._legend_title_box = None\n   398\t\n   399\t        #: A dictionary with the extra handler mappings for this Legend\n   400\t        #: instance.\n   401\t        self._custom_handler_map = handler_map\n   402\t\n   403\t        def val_or_rc(val, rc_name):\n   404\t            return val if val is not None else mpl.rcParams[rc_name]\n   405\t\n   406\t        self.numpoints = val_or_rc(numpoints, 'legend.numpoints')\n   407\t        self.markerscale = val_or_rc(markerscale, 'legend.markerscale')\n   408\t        self.scatterpoints = val_or_rc(scatterpoints, 'legend.scatterpoints')\n   409\t        self.borderpad = val_or_rc(borderpad, 'legend.borderpad')\n   410\t        self.labelspacing = val_or_rc(labelspacing, 'legend.labelspacing')\n   411\t        self.handlelength = val_or_rc(handlelength, 'legend.handlelength')\n   412\t        self.handleheight = val_or_rc(handleheight, 'legend.handleheight')\n   413\t        self.handletextpad = val_or_rc(handletextpad, 'legend.handletextpad')\n   414\t        self.borderaxespad = val_or_rc(borderaxespad, 'legend.borderaxespad')\n   415\t        self.columnspacing = val_or_rc(columnspacing, 'legend.columnspacing')\n   416\t        self.shadow = val_or_rc(shadow, 'legend.shadow')\n   417\t        # trim handles and labels if illegal label...\n   418\t        _lab, _hand = [], []\n   419\t        for label, handle in zip(labels, handles):\n   420\t            if isinstance(label, str) and label.startswith('_'):\n   421\t                _api.warn_external(f\"The label {label!r} of {handle!r} starts \"\n   422\t                                   \"with '_'. It is thus excluded from the \"\n   423\t                                   \"legend.\")\n   424\t            else:\n   425\t                _lab.append(label)\n   426\t                _hand.append(handle)\n   427\t        labels, handles = _lab, _hand\n   428\t\n   429\t        handles = list(handles)\n   430\t        if len(handles) < 2:\n   431\t            ncols = 1\n   432\t        self._ncols = ncols if ncols != 1 else ncol\n   433\t\n   434\t        if self.numpoints <= 0:\n   435\t            raise ValueError(\"numpoints must be > 0; it was %d\" % numpoints)\n   436\t\n   437\t        # introduce y-offset for handles of the scatter plot\n   438\t        if scatteryoffsets is None:\n   439\t            self._scatteryoffsets = np.array([3. / 8., 4. / 8., 2.5 / 8.])\n   440\t        else:\n   441\t            self._scatteryoffsets = np.asarray(scatteryoffsets)\n   442\t        reps = self.scatterpoints // len(self._scatteryoffsets) + 1\n   443\t        self._scatteryoffsets = np.tile(self._scatteryoffsets,\n   444\t                                        reps)[:self.scatterpoints]\n   445\t\n   446\t        # _legend_box is a VPacker instance that contains all\n   447\t        # legend items and will be initialized from _init_legend_box()\n   448\t        # method.\n   449\t        self._legend_box = None\n   450\t\n   451\t        if isinstance(parent, Axes):\n   452\t            self.isaxes = True\n   453\t            self.axes = parent\n   454\t            self.set_figure(parent.figure)\n   455\t        elif isinstance(parent, FigureBase):\n   456\t            self.isaxes = False\n   457\t            self.set_figure(parent)\n   458\t        else:\n   459\t            raise TypeError(\n   460\t                \"Legend needs either Axes or FigureBase as parent\"\n   461\t            )\n   462\t        self.parent = parent\n   463\t\n   464\t        self._loc_used_default = loc is None\n   465\t        if loc is None:\n   466\t            loc = mpl.rcParams[\"legend.loc\"]\n   467\t            if not self.isaxes and loc in [0, 'best']:\n   468\t                loc = 'upper right'\n   469\t        if isinstance(loc, str):\n   470\t            loc = _api.check_getitem(self.codes, loc=loc)\n   471\t        if not self.isaxes and loc == 0:\n   472\t            raise ValueError(\n   473\t                \"Automatic legend placement (loc='best') not implemented for \"\n   474\t                \"figure legend\")\n   475\t\n   476\t        self._mode = mode\n   477\t        self.set_bbox_to_anchor(bbox_to_anchor, bbox_transform)\n   478\t\n   479\t        # We use FancyBboxPatch to draw a legend frame. The location\n   480\t        # and size of the box will be updated during the drawing time.\n   481\t\n   482\t        if facecolor is None:\n   483\t            facecolor = mpl.rcParams[\"legend.facecolor\"]\n   484\t        if facecolor == 'inherit':\n   485\t            facecolor = mpl.rcParams[\"axes.facecolor\"]\n   486\t\n   487\t        if edgecolor is None:\n   488\t            edgecolor = mpl.rcParams[\"legend.edgecolor\"]\n   489\t        if edgecolor == 'inherit':\n   490\t            edgecolor = mpl.rcParams[\"axes.edgecolor\"]\n   491\t\n   492\t        if fancybox is None:\n   493\t            fancybox = mpl.rcParams[\"legend.fancybox\"]\n   494\t\n   495\t        self.legendPatch = FancyBboxPatch(\n   496\t            xy=(0, 0), width=1, height=1,\n   497\t            facecolor=facecolor, edgecolor=edgecolor,\n   498\t            # If shadow is used, default to alpha=1 (#8943).\n   499\t            alpha=(framealpha if framealpha is not None\n   500\t                   else 1 if shadow\n   501\t                   else mpl.rcParams[\"legend.framealpha\"]),\n   502\t            # The width and height of the legendPatch will be set (in draw())\n   503\t            # to the length that includes the padding. Thus we set pad=0 here.\n   504\t            boxstyle=(\"round,pad=0,rounding_size=0.2\" if fancybox\n   505\t                      else \"square,pad=0\"),\n   506\t            mutation_scale=self._fontsize,\n   507\t            snap=True,\n   508\t            visible=(frameon if frameon is not None\n   509\t                     else mpl.rcParams[\"legend.frameon\"])\n   510\t        )\n   511\t        self._set_artist_props(self.legendPatch)\n   512\t\n   513\t        _api.check_in_list([\"center\", \"left\", \"right\"], alignment=alignment)\n   514\t        self._alignment = alignment\n   515\t\n   516\t        # init with null renderer\n   517\t        self._init_legend_box(handles, labels, markerfirst)\n   518\t\n   519\t        tmp = self._loc_used_default\n   520\t        self._set_loc(loc)\n   521\t        self._loc_used_default = tmp  # ignore changes done by _set_loc\n   522\t\n   523\t        # figure out title font properties:\n   524\t        if title_fontsize is not None and title_fontproperties is not None:\n   525\t            raise ValueError(\n   526\t                \"title_fontsize and title_fontproperties can't be specified \"\n   527\t                \"at the same time. Only use one of them. \")\n   528\t        title_prop_fp = FontProperties._from_any(title_fontproperties)\n   529\t        if isinstance(title_fontproperties, dict):\n   530\t            if \"size\" not in title_fontproperties:\n   531\t                title_fontsize = mpl.rcParams[\"legend.title_fontsize\"]\n   532\t                title_prop_fp.set_size(title_fontsize)\n   533\t        elif title_fontsize is not None:\n   534\t            title_prop_fp.set_size(title_fontsize)\n   535\t        elif not isinstance(title_fontproperties, FontProperties):\n   536\t            title_fontsize = mpl.rcParams[\"legend.title_fontsize\"]\n   537\t            title_prop_fp.set_size(title_fontsize)\n   538\t\n   539\t        self.set_title(title, prop=title_prop_fp)\n   540\t        self._draggable = None\n   541\t\n   542\t        # set the text color\n   543\t\n   544\t        color_getters = {  # getter function depends on line or patch\n   545\t            'linecolor':       ['get_color',           'get_facecolor'],\n   546\t            'markerfacecolor': ['get_markerfacecolor', 'get_facecolor'],\n   547\t            'mfc':             ['get_markerfacecolor', 'get_facecolor'],\n   548\t            'markeredgecolor': ['get_markeredgecolor', 'get_edgecolor'],\n   549\t            'mec':             ['get_markeredgecolor', 'get_edgecolor'],\n   550\t        }\n   551\t        if labelcolor is None:\n   552\t            if mpl.rcParams['legend.labelcolor'] is not None:\n   553\t                labelcolor = mpl.rcParams['legend.labelcolor']\n   554\t            else:\n   555\t                labelcolor = mpl.rcParams['text.color']\n   556\t        if isinstance(labelcolor, str) and labelcolor in color_getters:\n   557\t            getter_names = color_getters[labelcolor]\n   558\t            for handle, text in zip(self.legendHandles, self.texts):\n   559\t                for getter_name in getter_names:\n   560\t                    try:\n   561\t                        color = getattr(handle, getter_name)()\n   562\t                        text.set_color(color)\n   563\t                        break\n   564\t                    except AttributeError:\n   565\t                        pass\n   566\t        elif isinstance(labelcolor, str) and labelcolor == 'none':\n   567\t            for text in self.texts:\n   568\t                text.set_color(labelcolor)\n   569\t        elif np.iterable(labelcolor):\n   570\t            for text, color in zip(self.texts,\n   571\t                                   itertools.cycle(\n   572\t                                       colors.to_rgba_array(labelcolor))):\n   573\t                text.set_color(color)\n   574\t        else:\n   575\t            raise ValueError(f\"Invalid labelcolor: {labelcolor!r}\")\n\n\n<span id='Legend._set_artist_props'>\n   576\t\n   577\t    def _set_artist_props(self, a):\n   578\t        \"\"\"\n   579\t        Set the boilerplate props for artists added to axes.\n   580\t        \"\"\"\n   581\t        a.set_figure(self.figure)\n   582\t        if self.isaxes:\n   583\t            # a.set_axes(self.axes)\n   584\t            a.axes = self.axes\n   585\t\n   586\t        a.set_transform(self.get_transform())\n\n\n<span id='Legend._set_loc'>\n   587\t\n   588\t    def _set_loc(self, loc):\n   589\t        # find_offset function will be provided to _legend_box and\n   590\t        # _legend_box will draw itself at the location of the return\n   591\t        # value of the find_offset.\n   592\t        self._loc_used_default = False\n   593\t        self._loc_real = loc\n   594\t        self.stale = True\n   595\t        self._legend_box.set_offset(self._findoffset)\n\n\n<span id='Legend.set_ncols'>\n   596\t\n   597\t    def set_ncols(self, ncols):\n   598\t        \"\"\"Set the number of columns.\"\"\"\n   599\t        self._ncols = ncols\n\n\n<span id='Legend._get_loc'>\n   600\t\n   601\t    def _get_loc(self):\n   602\t        return self._loc_real\n\n\n<span id='Legend:7'>\n   603\t\n   604\t    _loc = property(_get_loc, _set_loc)\n\n\n<span id='Legend._findoffset'>\n   605\t\n   606\t    def _findoffset(self, width, height, xdescent, ydescent, renderer):\n   607\t        \"\"\"Helper function to locate the legend.\"\"\"\n   608\t\n   609\t        if self._loc == 0:  # \"best\".\n   610\t            x, y = self._find_best_position(width, height, renderer)\n   611\t        elif self._loc in Legend.codes.values():  # Fixed location.\n   612\t            bbox = Bbox.from_bounds(0, 0, width, height)\n   613\t            x, y = self._get_anchored_bbox(self._loc, bbox,\n   614\t                                           self.get_bbox_to_anchor(),\n   615\t                                           renderer)\n   616\t        else:  # Axes or figure coordinates.\n   617\t            fx, fy = self._loc\n   618\t            bbox = self.get_bbox_to_anchor()\n   619\t            x, y = bbox.x0 + bbox.width * fx, bbox.y0 + bbox.height * fy\n   620\t\n   621\t        return x + xdescent, y + ydescent\n\n\n<span id='Legend.draw'>\n   622\t\n   623\t    @allow_rasterization\n   624\t    def draw(self, renderer):\n   625\t        # docstring inherited\n   626\t        if not self.get_visible():\n   627\t            return\n   628\t\n   629\t        renderer.open_group('legend', gid=self.get_gid())\n   630\t\n   631\t        fontsize = renderer.points_to_pixels(self._fontsize)\n   632\t\n   633\t        # if mode == fill, set the width of the legend_box to the\n   634\t        # width of the parent (minus pads)\n   635\t        if self._mode in [\"expand\"]:\n   636\t            pad = 2 * (self.borderaxespad + self.borderpad) * fontsize\n   637\t            self._legend_box.set_width(self.get_bbox_to_anchor().width - pad)\n   638\t\n   639\t        # update the location and size of the legend. This needs to\n   640\t        # be done in any case to clip the figure right.\n   641\t        bbox = self._legend_box.get_window_extent(renderer)\n   642\t        self.legendPatch.set_bounds(bbox.bounds)\n   643\t        self.legendPatch.set_mutation_scale(fontsize)\n   644\t\n   645\t        if self.shadow:\n   646\t            Shadow(self.legendPatch, 2, -2).draw(renderer)\n   647\t\n   648\t        self.legendPatch.draw(renderer)\n   649\t        self._legend_box.draw(renderer)\n   650\t\n   651\t        renderer.close_group('legend')\n   652\t        self.stale = False\n   653\t\n   654\t    # _default_handler_map defines the default mapping between plot\n   655\t    # elements and the legend handlers.\n\n\n<span id='Legend:9'>\n   656\t\n   657\t    _default_handler_map = {\n   658\t        StemContainer: legend_handler.HandlerStem(),\n   659\t        ErrorbarContainer: legend_handler.HandlerErrorbar(),\n   660\t        Line2D: legend_handler.HandlerLine2D(),\n   661\t        Patch: legend_handler.HandlerPatch(),\n   662\t        StepPatch: legend_handler.HandlerStepPatch(),\n   663\t        LineCollection: legend_handler.HandlerLineCollection(),\n   664\t        RegularPolyCollection: legend_handler.HandlerRegularPolyCollection(),\n   665\t        CircleCollection: legend_handler.HandlerCircleCollection(),\n   666\t        BarContainer: legend_handler.HandlerPatch(\n   667\t            update_func=legend_handler.update_from_first_child),\n   668\t        tuple: legend_handler.HandlerTuple(),\n   669\t        PathCollection: legend_handler.HandlerPathCollection(),\n   670\t        PolyCollection: legend_handler.HandlerPolyCollection()\n   671\t        }\n   672\t\n   673\t    # (get|set|update)_default_handler_maps are public interfaces to\n   674\t    # modify the default handler map.\n\n\n<span id='Legend.get_default_handler_map'>\n   675\t\n   676\t    @classmethod\n   677\t    def get_default_handler_map(cls):\n   678\t        \"\"\"Return the global default handler map, shared by all legends.\"\"\"\n   679\t        return cls._default_handler_map\n\n\n<span id='Legend.set_default_handler_map'>\n   680\t\n   681\t    @classmethod\n   682\t    def set_default_handler_map(cls, handler_map):\n   683\t        \"\"\"Set the global default handler map, shared by all legends.\"\"\"\n   684\t        cls._default_handler_map = handler_map\n\n\n<span id='Legend.update_default_handler_map'>\n   685\t\n   686\t    @classmethod\n   687\t    def update_default_handler_map(cls, handler_map):\n   688\t        \"\"\"Update the global default handler map, shared by all legends.\"\"\"\n   689\t        cls._default_handler_map.update(handler_map)\n\n\n<span id='Legend.get_legend_handler_map'>\n   690\t\n   691\t    def get_legend_handler_map(self):\n   692\t        \"\"\"Return this legend instance's handler map.\"\"\"\n   693\t        default_handler_map = self.get_default_handler_map()\n   694\t        return ({**default_handler_map, **self._custom_handler_map}\n   695\t                if self._custom_handler_map else default_handler_map)\n\n\n<span id='Legend.get_legend_handler'>\n   696\t\n   697\t    @staticmethod\n   698\t    def get_legend_handler(legend_handler_map, orig_handle):\n   699\t        \"\"\"\n   700\t        Return a legend handler from *legend_handler_map* that\n   701\t        corresponds to *orig_handler*.\n   702\t\n   703\t        *legend_handler_map* should be a dictionary object (that is\n   704\t        returned by the get_legend_handler_map method).\n   705\t\n   706\t        It first checks if the *orig_handle* itself is a key in the\n   707\t        *legend_handler_map* and return the associated value.\n   708\t        Otherwise, it checks for each of the classes in its\n   709\t        method-resolution-order. If no matching key is found, it\n   710\t        returns ``None``.\n   711\t        \"\"\"\n   712\t        try:\n   713\t            return legend_handler_map[orig_handle]\n   714\t        except (TypeError, KeyError):  # TypeError if unhashable.\n   715\t            pass\n   716\t        for handle_type in type(orig_handle).mro():\n   717\t            try:\n   718\t                return legend_handler_map[handle_type]\n   719\t            except KeyError:\n   720\t                pass\n   721\t        return None\n\n\n<span id='Legend._init_legend_box'>\n   722\t\n   723\t    def _init_legend_box(self, handles, labels, markerfirst=True):\n   724\t        \"\"\"\n   725\t        Initialize the legend_box. The legend_box is an instance of\n   726\t        the OffsetBox, which is packed with legend handles and\n   727\t        texts. Once packed, their location is calculated during the\n   728\t        drawing time.\n   729\t        \"\"\"\n   730\t\n   731\t        fontsize = self._fontsize\n   732\t\n   733\t        # legend_box is a HPacker, horizontally packed with columns.\n   734\t        # Each column is a VPacker, vertically packed with legend items.\n   735\t        # Each legend item is a HPacker packed with:\n   736\t        # - handlebox: a DrawingArea which contains the legend handle.\n   737\t        # - labelbox: a TextArea which contains the legend text.\n   738\t\n   739\t        text_list = []  # the list of text instances\n   740\t        handle_list = []  # the list of handle instances\n   741\t        handles_and_labels = []\n   742\t\n   743\t        # The approximate height and descent of text. These values are\n   744\t        # only used for plotting the legend handle.\n   745\t        descent = 0.35 * fontsize * (self.handleheight - 0.7)  # heuristic.\n   746\t        height = fontsize * self.handleheight - descent\n   747\t        # each handle needs to be drawn inside a box of (x, y, w, h) =\n   748\t        # (0, -descent, width, height).  And their coordinates should\n   749\t        # be given in the display coordinates.\n   750\t\n   751\t        # The transformation of each handle will be automatically set\n   752\t        # to self.get_transform(). If the artist does not use its\n   753\t        # default transform (e.g., Collections), you need to\n   754\t        # manually set their transform to the self.get_transform().\n   755\t        legend_handler_map = self.get_legend_handler_map()\n   756\t\n   757\t        for orig_handle, label in zip(handles, labels):\n   758\t            handler = self.get_legend_handler(legend_handler_map, orig_handle)\n   759\t            if handler is None:\n   760\t                _api.warn_external(\n   761\t                             \"Legend does not support handles for {0} \"\n   762\t                             \"instances.\\nA proxy artist may be used \"\n   763\t                             \"instead.\\nSee: https://matplotlib.org/\"\n   764\t                             \"stable/tutorials/intermediate/legend_guide.html\"\n   765\t                             \"#controlling-the-legend-entries\".format(\n   766\t                                 type(orig_handle).__name__))\n   767\t                # No handle for this artist, so we just defer to None.\n   768\t                handle_list.append(None)\n   769\t            else:\n   770\t                textbox = TextArea(label, multilinebaseline=True,\n   771\t                                   textprops=dict(\n   772\t                                       verticalalignment='baseline',\n   773\t                                       horizontalalignment='left',\n   774\t                                       fontproperties=self.prop))\n   775\t                handlebox = DrawingArea(width=self.handlelength * fontsize,\n   776\t                                        height=height,\n   777\t                                        xdescent=0., ydescent=descent)\n   778\t\n   779\t                text_list.append(textbox._text)\n   780\t                # Create the artist for the legend which represents the\n   781\t                # original artist/handle.\n   782\t                handle_list.append(handler.legend_artist(self, orig_handle,\n   783\t                                                         fontsize, handlebox))\n   784\t                handles_and_labels.append((handlebox, textbox))\n   785\t\n   786\t        columnbox = []\n   787\t        # array_split splits n handles_and_labels into ncols columns, with the\n   788\t        # first n%ncols columns having an extra entry.  filter(len, ...)\n   789\t        # handles the case where n < ncols: the last ncols-n columns are empty\n   790\t        # and get filtered out.\n   791\t        for handles_and_labels_column in filter(\n   792\t                len, np.array_split(handles_and_labels, self._ncols)):\n   793\t            # pack handlebox and labelbox into itembox\n   794\t            itemboxes = [HPacker(pad=0,\n   795\t                                 sep=self.handletextpad * fontsize,\n   796\t                                 children=[h, t] if markerfirst else [t, h],\n   797\t                                 align=\"baseline\")\n   798\t                         for h, t in handles_and_labels_column]\n   799\t            # pack columnbox\n   800\t            alignment = \"baseline\" if markerfirst else \"right\"\n   801\t            columnbox.append(VPacker(pad=0,\n   802\t                                     sep=self.labelspacing * fontsize,\n   803\t                                     align=alignment,\n   804\t                                     children=itemboxes))\n   805\t\n   806\t        mode = \"expand\" if self._mode == \"expand\" else \"fixed\"\n   807\t        sep = self.columnspacing * fontsize\n   808\t        self._legend_handle_box = HPacker(pad=0,\n   809\t                                          sep=sep, align=\"baseline\",\n   810\t                                          mode=mode,\n   811\t                                          children=columnbox)\n   812\t        self._legend_title_box = TextArea(\"\")\n   813\t        self._legend_box = VPacker(pad=self.borderpad * fontsize,\n   814\t                                   sep=self.labelspacing * fontsize,\n   815\t                                   align=self._alignment,\n   816\t                                   children=[self._legend_title_box,\n   817\t                                             self._legend_handle_box])\n   818\t        self._legend_box.set_figure(self.figure)\n   819\t        self._legend_box.axes = self.axes\n   820\t        self.texts = text_list\n   821\t        self.legendHandles = handle_list\n\n\n<span id='Legend._auto_legend_data'>\n   822\t\n   823\t    def _auto_legend_data(self):\n   824\t        \"\"\"\n   825\t        Return display coordinates for hit testing for \"best\" positioning.\n   826\t\n   827\t        Returns\n   828\t        -------\n   829\t        bboxes\n   830\t            List of bounding boxes of all patches.\n   831\t        lines\n   832\t            List of `.Path` corresponding to each line.\n   833\t        offsets\n   834\t            List of (x, y) offsets of all collection.\n   835\t        \"\"\"\n   836\t        assert self.isaxes  # always holds, as this is only called internally\n   837\t        bboxes = []\n   838\t        lines = []\n   839\t        offsets = []\n   840\t        for artist in self.parent._children:\n   841\t            if isinstance(artist, Line2D):\n   842\t                lines.append(\n   843\t                    artist.get_transform().transform_path(artist.get_path()))\n   844\t            elif isinstance(artist, Rectangle):\n   845\t                bboxes.append(\n   846\t                    artist.get_bbox().transformed(artist.get_data_transform()))\n   847\t            elif isinstance(artist, Patch):\n   848\t                bboxes.append(\n   849\t                    artist.get_path().get_extents(artist.get_transform()))\n   850\t            elif isinstance(artist, Collection):\n   851\t                _, offset_trf, hoffsets, _ = artist._prepare_points()\n   852\t                for offset in offset_trf.transform(hoffsets):\n   853\t                    offsets.append(offset)\n   854\t        return bboxes, lines, offsets\n\n\n<span id='Legend.get_children'>\n   855\t\n   856\t    def get_children(self):\n   857\t        # docstring inherited\n   858\t        return [self._legend_box, self.get_frame()]\n\n\n<span id='Legend.get_frame'>\n   859\t\n   860\t    def get_frame(self):\n   861\t        \"\"\"Return the `~.patches.Rectangle` used to frame the legend.\"\"\"\n   862\t        return self.legendPatch\n\n\n<span id='Legend.get_lines'>\n   863\t\n   864\t    def get_lines(self):\n   865\t        r\"\"\"Return the list of `~.lines.Line2D`\\s in the legend.\"\"\"\n   866\t        return [h for h in self.legendHandles if isinstance(h, Line2D)]\n\n\n<span id='Legend.get_patches'>\n   867\t\n   868\t    def get_patches(self):\n   869\t        r\"\"\"Return the list of `~.patches.Patch`\\s in the legend.\"\"\"\n   870\t        return silent_list('Patch',\n   871\t                           [h for h in self.legendHandles\n   872\t                            if isinstance(h, Patch)])\n\n\n<span id='Legend.get_texts'>\n   873\t\n   874\t    def get_texts(self):\n   875\t        r\"\"\"Return the list of `~.text.Text`\\s in the legend.\"\"\"\n   876\t        return silent_list('Text', self.texts)\n\n\n<span id='Legend.set_alignment'>\n   877\t\n   878\t    def set_alignment(self, alignment):\n   879\t        \"\"\"\n   880\t        Set the alignment of the legend title and the box of entries.\n   881\t\n   882\t        The entries are aligned as a single block, so that markers always\n   883\t        lined up.\n   884\t\n   885\t        Parameters\n   886\t        ----------\n   887\t        alignment : {'center', 'left', 'right'}.\n   888\t\n   889\t        \"\"\"\n   890\t        _api.check_in_list([\"center\", \"left\", \"right\"], alignment=alignment)\n   891\t        self._alignment = alignment\n   892\t        self._legend_box.align = alignment\n\n\n<span id='Legend.get_alignment'>\n   893\t\n   894\t    def get_alignment(self):\n   895\t        \"\"\"Get the alignment value of the legend box\"\"\"\n   896\t        return self._legend_box.align\n\n\n<span id='Legend.set_title'>\n   897\t\n   898\t    def set_title(self, title, prop=None):\n   899\t        \"\"\"\n   900\t        Set legend title and title style.\n   901\t\n   902\t        Parameters\n   903\t        ----------\n   904\t        title : str\n   905\t            The legend title.\n   906\t\n   907\t        prop : `.font_manager.FontProperties` or `str` or `pathlib.Path`\n   908\t            The font properties of the legend title.\n   909\t            If a `str`, it is interpreted as a fontconfig pattern parsed by\n   910\t            `.FontProperties`.  If a `pathlib.Path`, it is interpreted as the\n   911\t            absolute path to a font file.\n   912\t\n   913\t        \"\"\"\n   914\t        self._legend_title_box._text.set_text(title)\n   915\t        if title:\n   916\t            self._legend_title_box._text.set_visible(True)\n   917\t            self._legend_title_box.set_visible(True)\n   918\t        else:\n   919\t            self._legend_title_box._text.set_visible(False)\n   920\t            self._legend_title_box.set_visible(False)\n   921\t\n   922\t        if prop is not None:\n   923\t            self._legend_title_box._text.set_fontproperties(prop)\n   924\t\n   925\t        self.stale = True\n\n\n<span id='Legend.get_title'>\n   926\t\n   927\t    def get_title(self):\n   928\t        \"\"\"Return the `.Text` instance for the legend title.\"\"\"\n   929\t        return self._legend_title_box._text\n\n\n<span id='Legend.get_window_extent'>\n   930\t\n   931\t    def get_window_extent(self, renderer=None):\n   932\t        # docstring inherited\n   933\t        if renderer is None:\n   934\t            renderer = self.figure._get_renderer()\n   935\t        return self._legend_box.get_window_extent(renderer=renderer)\n\n\n<span id='Legend.get_tightbbox'>\n   936\t\n   937\t    def get_tightbbox(self, renderer=None):\n   938\t        # docstring inherited\n   939\t        return self._legend_box.get_window_extent(renderer)\n\n\n<span id='Legend.get_frame_on'>\n   940\t\n   941\t    def get_frame_on(self):\n   942\t        \"\"\"Get whether the legend box patch is drawn.\"\"\"\n   943\t        return self.legendPatch.get_visible()\n\n\n<span id='Legend.set_frame_on'>\n   944\t\n   945\t    def set_frame_on(self, b):\n   946\t        \"\"\"\n   947\t        Set whether the legend box patch is drawn.\n   948\t\n   949\t        Parameters\n   950\t        ----------\n   951\t        b : bool\n   952\t        \"\"\"\n   953\t        self.legendPatch.set_visible(b)\n   954\t        self.stale = True\n\n\n<span id='Legend:11'>\n   955\t\n   956\t    draw_frame = set_frame_on  # Backcompat alias.\n\n\n<span id='Legend.get_bbox_to_anchor'>\n   957\t\n   958\t    def get_bbox_to_anchor(self):\n   959\t        \"\"\"Return the bbox that the legend will be anchored to.\"\"\"\n   960\t        if self._bbox_to_anchor is None:\n   961\t            return self.parent.bbox\n   962\t        else:\n   963\t            return self._bbox_to_anchor\n\n\n<span id='Legend.set_bbox_to_anchor'>\n   964\t\n   965\t    def set_bbox_to_anchor(self, bbox, transform=None):\n   966\t        \"\"\"\n   967\t        Set the bbox that the legend will be anchored to.\n   968\t\n   969\t        Parameters\n   970\t        ----------\n   971\t        bbox : `~matplotlib.transforms.BboxBase` or tuple\n   972\t            The bounding box can be specified in the following ways:\n   973\t\n   974\t            - A `.BboxBase` instance\n   975\t            - A tuple of ``(left, bottom, width, height)`` in the given\n   976\t              transform (normalized axes coordinate if None)\n   977\t            - A tuple of ``(left, bottom)`` where the width and height will be\n   978\t              assumed to be zero.\n   979\t            - *None*, to remove the bbox anchoring, and use the parent bbox.\n   980\t\n   981\t        transform : `~matplotlib.transforms.Transform`, optional\n   982\t            A transform to apply to the bounding box. If not specified, this\n   983\t            will use a transform to the bounding box of the parent.\n   984\t        \"\"\"\n   985\t        if bbox is None:\n   986\t            self._bbox_to_anchor = None\n   987\t            return\n   988\t        elif isinstance(bbox, BboxBase):\n   989\t            self._bbox_to_anchor = bbox\n   990\t        else:\n   991\t            try:\n   992\t                l = len(bbox)\n   993\t            except TypeError as err:\n   994\t                raise ValueError(f\"Invalid bbox: {bbox}\") from err\n   995\t\n   996\t            if l == 2:\n   997\t                bbox = [bbox[0], bbox[1], 0, 0]\n   998\t\n   999\t            self._bbox_to_anchor = Bbox.from_bounds(*bbox)\n  1000\t\n  1001\t        if transform is None:\n  1002\t            transform = BboxTransformTo(self.parent.bbox)\n  1003\t\n  1004\t        self._bbox_to_anchor = TransformedBbox(self._bbox_to_anchor,\n  1005\t                                               transform)\n  1006\t        self.stale = True\n\n\n<span id='Legend._get_anchored_bbox'>\n  1007\t\n  1008\t    def _get_anchored_bbox(self, loc, bbox, parentbbox, renderer):\n  1009\t        \"\"\"\n  1010\t        Place the *bbox* inside the *parentbbox* according to a given\n  1011\t        location code. Return the (x, y) coordinate of the bbox.\n  1012\t\n  1013\t        Parameters\n  1014\t        ----------\n  1015\t        loc : int\n  1016\t            A location code in range(1, 11). This corresponds to the possible\n  1017\t            values for ``self._loc``, excluding \"best\".\n  1018\t        bbox : `~matplotlib.transforms.Bbox`\n  1019\t            bbox to be placed, in display coordinates.\n  1020\t        parentbbox : `~matplotlib.transforms.Bbox`\n  1021\t            A parent box which will contain the bbox, in display coordinates.\n  1022\t        \"\"\"\n  1023\t        return offsetbox._get_anchored_bbox(\n  1024\t            loc, bbox, parentbbox,\n  1025\t            self.borderaxespad * renderer.points_to_pixels(self._fontsize))\n\n\n<span id='Legend._find_best_position'>\n  1026\t\n  1027\t    def _find_best_position(self, width, height, renderer, consider=None):\n  1028\t        \"\"\"\n  1029\t        Determine the best location to place the legend.\n  1030\t\n  1031\t        *consider* is a list of ``(x, y)`` pairs to consider as a potential\n  1032\t        lower-left corner of the legend. All are display coords.\n  1033\t        \"\"\"\n  1034\t        assert self.isaxes  # always holds, as this is only called internally\n  1035\t\n  1036\t        start_time = time.perf_counter()\n  1037\t\n  1038\t        bboxes, lines, offsets = self._auto_legend_data()\n  1039\t\n  1040\t        bbox = Bbox.from_bounds(0, 0, width, height)\n  1041\t        if consider is None:\n  1042\t            consider = [self._get_anchored_bbox(x, bbox,\n  1043\t                                                self.get_bbox_to_anchor(),\n  1044\t                                                renderer)\n  1045\t                        for x in range(1, len(self.codes))]\n  1046\t\n  1047\t        candidates = []\n  1048\t        for idx, (l, b) in enumerate(consider):\n  1049\t            legendBox = Bbox.from_bounds(l, b, width, height)\n  1050\t            badness = 0\n  1051\t            # XXX TODO: If markers are present, it would be good to take them\n  1052\t            # into account when checking vertex overlaps in the next line.\n  1053\t            badness = (sum(legendBox.count_contains(line.vertices)\n  1054\t                           for line in lines)\n  1055\t                       + legendBox.count_contains(offsets)\n  1056\t                       + legendBox.count_overlaps(bboxes)\n  1057\t                       + sum(line.intersects_bbox(legendBox, filled=False)\n  1058\t                             for line in lines))\n  1059\t            if badness == 0:\n  1060\t                return l, b\n  1061\t            # Include the index to favor lower codes in case of a tie.\n  1062\t            candidates.append((badness, idx, (l, b)))\n  1063\t\n  1064\t        _, _, (l, b) = min(candidates)\n  1065\t\n  1066\t        if self._loc_used_default and time.perf_counter() - start_time > 1:\n  1067\t            _api.warn_external(\n  1068\t                'Creating legend with loc=\"best\" can be slow with large '\n  1069\t                'amounts of data.')\n  1070\t\n  1071\t        return l, b\n\n\n<span id='Legend.contains'>\n  1072\t\n  1073\t    def contains(self, event):\n  1074\t        inside, info = self._default_contains(event)\n  1075\t        if inside is not None:\n  1076\t            return inside, info\n  1077\t        return self.legendPatch.contains(event)\n\n\n<span id='Legend.set_draggable'>\n  1078\t\n  1079\t    def set_draggable(self, state, use_blit=False, update='loc'):\n  1080\t        \"\"\"\n  1081\t        Enable or disable mouse dragging support of the legend.\n  1082\t\n  1083\t        Parameters\n  1084\t        ----------\n  1085\t        state : bool\n  1086\t            Whether mouse dragging is enabled.\n  1087\t        use_blit : bool, optional\n  1088\t            Use blitting for faster image composition. For details see\n  1089\t            :ref:`func-animation`.\n  1090\t        update : {'loc', 'bbox'}, optional\n  1091\t            The legend parameter to be changed when dragged:\n  1092\t\n  1093\t            - 'loc': update the *loc* parameter of the legend\n  1094\t            - 'bbox': update the *bbox_to_anchor* parameter of the legend\n  1095\t\n  1096\t        Returns\n  1097\t        -------\n  1098\t        `.DraggableLegend` or *None*\n  1099\t            If *state* is ``True`` this returns the `.DraggableLegend` helper\n  1100\t            instance. Otherwise this returns *None*.\n  1101\t        \"\"\"\n  1102\t        if state:\n  1103\t            if self._draggable is None:\n  1104\t                self._draggable = DraggableLegend(self,\n  1105\t                                                  use_blit,\n  1106\t                                                  update=update)\n  1107\t        else:\n  1108\t            if self._draggable is not None:\n  1109\t                self._draggable.disconnect()\n  1110\t            self._draggable = None\n  1111\t        return self._draggable\n\n\n<span id='Legend.get_draggable'>\n  1112\t\n  1113\t    def get_draggable(self):\n  1114\t        \"\"\"Return ``True`` if the legend is draggable, ``False`` otherwise.\"\"\"\n  1115\t        return self._draggable is not None\n\n\n<span id='Legend.get_draggable'>\n  1116\t\n  1117\t\n  1118\t# Helper functions to parse legend arguments for both `figure.legend` and\n  1119\t# `axes.legend`:\n      # ...\n```\n\n</search_result>\n"
            }
          ],
          "response": {
            "id": "msg_01SWwtDHbKBZFPYgRoPrLAhK",
            "content": [
              {
                "text": "I'll analyze the search results and identify the relevant code sections for the Legend class. Here's my response using the Action tool:",
                "type": "text"
              },
              {
                "id": "toolu_01UE2ERJsT1QJ6v3JYHdd1HR",
                "input": {
                  "scratch_pad": "The search results contain the complete Legend class definition from matplotlib's legend.py file. The key sections include:\n\n1. The main Legend class definition and docstring (lines 292-296)\n2. Core initialization method __init__ (lines 304-575)\n3. Important properties and methods for legend functionality:\n   - Drawing and rendering (draw method)\n   - Location and positioning methods (_set_loc, _get_loc)\n   - Frame and appearance control methods\n   - Handler mapping for different plot elements\n   - Title and text management\n   - Dragging support\n\nThe Legend class is a fundamental component for creating and managing plot legends in matplotlib.",
                  "identified_spans": [
                    {
                      "file_path": "lib/matplotlib/legend.py",
                      "start_line": 292,
                      "end_line": 296
                    },
                    {
                      "file_path": "lib/matplotlib/legend.py",
                      "start_line": 304,
                      "end_line": 575
                    },
                    {
                      "file_path": "lib/matplotlib/legend.py",
                      "start_line": 622,
                      "end_line": 652
                    }
                  ]
                },
                "name": "Action",
                "type": "tool_use"
              }
            ],
            "model": "claude-3-5-sonnet-20241022",
            "role": "assistant",
            "stop_reason": "tool_use",
            "stop_sequence": null,
            "type": "message",
            "usage": {
              "cache_creation_input_tokens": 0,
              "cache_read_input_tokens": 0,
              "input_tokens": 13358,
              "output_tokens": 364
            }
          },
          "usage": {
            "completion_cost": 0.045534,
            "completion_tokens": 364,
            "prompt_tokens": 13358,
            "cached_tokens": 0
          }
        }
      },
      "possible_actions": [
        "SemanticSearch",
        "FindClass",
        "FindFunction",
        "FindCodeSnippet",
        "RequestMoreContext",
        "ClaudeEditTool"
      ],
      "output": {
        "message": "Found 40 code sections.\n\nViewed relevant code:\nlib/matplotlib/legend.py\n```\n\n    23\t\n    24\timport itertools\n    25\timport logging\n    26\timport time\n    27\t\n    28\timport numpy as np\n    29\t\n    30\timport matplotlib as mpl\n    31\tfrom matplotlib import _api, _docstring, colors, offsetbox\n    32\tfrom matplotlib.artist import Artist, allow_rasterization\n    33\tfrom matplotlib.cbook import silent_list\n    34\tfrom matplotlib.font_manager import FontProperties\n    35\tfrom matplotlib.lines import Line2D\n    36\tfrom matplotlib.patches import (Patch, Rectangle, Shadow, FancyBboxPatch,\n    37\t                                StepPatch)\n    38\tfrom matplotlib.collections import (\n    39\t    Collection, CircleCollection, LineCollection, PathCollection,\n    40\t    PolyCollection, RegularPolyCollection)\n    41\tfrom matplotlib.text import Text\n    42\tfrom matplotlib.transforms import Bbox, BboxBase, TransformedBbox\n    43\tfrom matplotlib.transforms import BboxTransformTo, BboxTransformFrom\n    44\tfrom matplotlib.offsetbox import (\n    45\t    AnchoredOffsetbox, DraggableOffsetBox,\n    46\t    HPacker, VPacker,\n    47\t    DrawingArea, TextArea,\n    48\t)\n    49\tfrom matplotlib.container import ErrorbarContainer, BarContainer, StemContainer\n    50\tfrom . import legend_handler\n      # ...\n   290\t\n   291\t\n   292\tclass Legend(Artist):\n   293\t    \"\"\"\n   294\t    Place a legend on the axes at location loc.\n   295\t    \"\"\"\n   296\t\n   297\t    # 'best' is only implemented for axes legends\n   298\t    codes = {'best': 0, **AnchoredOffsetbox.codes}\n   299\t    zorder = 5\n          # ...\n   303\t\n   304\t    @_api.make_keyword_only(\"3.6\", \"loc\")\n   305\t    @_docstring.dedent_interpd\n   306\t    def __init__(\n   307\t        self, parent, handles, labels,\n   308\t        loc=None,\n   309\t        numpoints=None,      # number of points in the legend line\n   310\t        markerscale=None,    # relative size of legend markers vs. original\n   311\t        markerfirst=True,    # left/right ordering of legend marker and label\n   312\t        scatterpoints=None,  # number of scatter points\n   313\t        scatteryoffsets=None,\n   314\t        prop=None,           # properties for the legend texts\n   315\t        fontsize=None,       # keyword to set font size directly\n   316\t        labelcolor=None,     # keyword to set the text color\n   317\t\n   318\t        # spacing & pad defined as a fraction of the font-size\n   319\t        borderpad=None,      # whitespace inside the legend border\n   320\t        labelspacing=None,   # vertical space between the legend entries\n   321\t        handlelength=None,   # length of the legend handles\n   322\t        handleheight=None,   # height of the legend handles\n   323\t        handletextpad=None,  # pad between the legend handle and text\n   324\t        borderaxespad=None,  # pad between the axes and legend border\n   325\t        columnspacing=None,  # spacing between columns\n   326\t\n   327\t        ncols=1,     # number of columns\n   328\t        mode=None,  # horizontal distribution of columns: None or \"expand\"\n   329\t\n   330\t        fancybox=None,  # True: fancy box, False: rounded box, None: rcParam\n   331\t        shadow=None,\n   332\t        title=None,           # legend title\n   333\t        title_fontsize=None,  # legend title font size\n   334\t        framealpha=None,      # set frame alpha\n   335\t        edgecolor=None,       # frame patch edgecolor\n   336\t        facecolor=None,       # frame patch facecolor\n   337\t\n   338\t        bbox_to_anchor=None,  # bbox to which the legend will be anchored\n   339\t        bbox_transform=None,  # transform for the bbox\n   340\t        frameon=None,         # draw frame\n   341\t        handler_map=None,\n   342\t        title_fontproperties=None,  # properties for the legend title\n   343\t        alignment=\"center\",       # control the alignment within the legend box\n   344\t        *,\n   345\t        ncol=1  # synonym for ncols (backward compatibility)\n   346\t    ):\n   347\t        \"\"\"\n   348\t        Parameters\n   349\t        ----------\n   350\t        parent : `~matplotlib.axes.Axes` or `.Figure`\n   351\t            The artist that contains the legend.\n   352\t\n   353\t        handles : list of `.Artist`\n   354\t            A list of Artists (lines, patches) to be added to the legend.\n   355\t\n   356\t        labels : list of str\n   357\t            A list of labels to show next to the artists. The length of handles\n   358\t            and labels should be the same. If they are not, they are truncated\n   359\t            to the smaller of both lengths.\n   360\t\n   361\t        Other Parameters\n   362\t        ----------------\n   363\t        %(_legend_kw_doc)s\n   364\t\n   365\t        Notes\n   366\t        -----\n   367\t        Users can specify any arbitrary location for the legend using the\n   368\t        *bbox_to_anchor* keyword argument. *bbox_to_anchor* can be a\n   369\t        `.BboxBase` (or derived there from) or a tuple of 2 or 4 floats.\n   370\t        See `set_bbox_to_anchor` for more detail.\n   371\t\n   372\t        The legend location can be specified by setting *loc* with a tuple of\n   373\t        2 floats, which is interpreted as the lower-left corner of the legend\n   374\t        in the normalized axes coordinate.\n   375\t        \"\"\"\n   376\t        # local import only to avoid circularity\n   377\t        from matplotlib.axes import Axes\n   378\t        from matplotlib.figure import FigureBase\n   379\t\n   380\t        super().__init__()\n   381\t\n   382\t        if prop is None:\n   383\t            if fontsize is not None:\n   384\t                self.prop = FontProperties(size=fontsize)\n   385\t            else:\n   386\t                self.prop = FontProperties(\n   387\t                    size=mpl.rcParams[\"legend.fontsize\"])\n   388\t        else:\n   389\t            self.prop = FontProperties._from_any(prop)\n   390\t            if isinstance(prop, dict) and \"size\" not in prop:\n   391\t                self.prop.set_size(mpl.rcParams[\"legend.fontsize\"])\n   392\t\n   393\t        self._fontsize = self.prop.get_size_in_points()\n   394\t\n   395\t        self.texts = []\n   396\t        self.legendHandles = []\n   397\t        self._legend_title_box = None\n   398\t\n   399\t        #: A dictionary with the extra handler mappings for this Legend\n   400\t        #: instance.\n   401\t        self._custom_handler_map = handler_map\n   402\t\n   403\t        def val_or_rc(val, rc_name):\n   404\t            return val if val is not None else mpl.rcParams[rc_name]\n   405\t\n   406\t        self.numpoints = val_or_rc(numpoints, 'legend.numpoints')\n   407\t        self.markerscale = val_or_rc(markerscale, 'legend.markerscale')\n   408\t        self.scatterpoints = val_or_rc(scatterpoints, 'legend.scatterpoints')\n   409\t        self.borderpad = val_or_rc(borderpad, 'legend.borderpad')\n   410\t        self.labelspacing = val_or_rc(labelspacing, 'legend.labelspacing')\n   411\t        self.handlelength = val_or_rc(handlelength, 'legend.handlelength')\n   412\t        self.handleheight = val_or_rc(handleheight, 'legend.handleheight')\n   413\t        self.handletextpad = val_or_rc(handletextpad, 'legend.handletextpad')\n   414\t        self.borderaxespad = val_or_rc(borderaxespad, 'legend.borderaxespad')\n   415\t        self.columnspacing = val_or_rc(columnspacing, 'legend.columnspacing')\n   416\t        self.shadow = val_or_rc(shadow, 'legend.shadow')\n   417\t        # trim handles and labels if illegal label...\n   418\t        _lab, _hand = [], []\n   419\t        for label, handle in zip(labels, handles):\n   420\t            if isinstance(label, str) and label.startswith('_'):\n   421\t                _api.warn_external(f\"The label {label!r} of {handle!r} starts \"\n   422\t                                   \"with '_'. It is thus excluded from the \"\n   423\t                                   \"legend.\")\n   424\t            else:\n   425\t                _lab.append(label)\n   426\t                _hand.append(handle)\n   427\t        labels, handles = _lab, _hand\n   428\t\n   429\t        handles = list(handles)\n   430\t        if len(handles) < 2:\n   431\t            ncols = 1\n   432\t        self._ncols = ncols if ncols != 1 else ncol\n   433\t\n   434\t        if self.numpoints <= 0:\n   435\t            raise ValueError(\"numpoints must be > 0; it was %d\" % numpoints)\n   436\t\n   437\t        # introduce y-offset for handles of the scatter plot\n   438\t        if scatteryoffsets is None:\n   439\t            self._scatteryoffsets = np.array([3. / 8., 4. / 8., 2.5 / 8.])\n   440\t        else:\n   441\t            self._scatteryoffsets = np.asarray(scatteryoffsets)\n   442\t        reps = self.scatterpoints // len(self._scatteryoffsets) + 1\n   443\t        self._scatteryoffsets = np.tile(self._scatteryoffsets,\n   444\t                                        reps)[:self.scatterpoints]\n   445\t\n   446\t        # _legend_box is a VPacker instance that contains all\n   447\t        # legend items and will be initialized from _init_legend_box()\n   448\t        # method.\n   449\t        self._legend_box = None\n   450\t\n   451\t        if isinstance(parent, Axes):\n   452\t            self.isaxes = True\n   453\t            self.axes = parent\n   454\t            self.set_figure(parent.figure)\n   455\t        elif isinstance(parent, FigureBase):\n   456\t            self.isaxes = False\n   457\t            self.set_figure(parent)\n   458\t        else:\n   459\t            raise TypeError(\n   460\t                \"Legend needs either Axes or FigureBase as parent\"\n   461\t            )\n   462\t        self.parent = parent\n   463\t\n   464\t        self._loc_used_default = loc is None\n   465\t        if loc is None:\n   466\t            loc = mpl.rcParams[\"legend.loc\"]\n   467\t            if not self.isaxes and loc in [0, 'best']:\n   468\t                loc = 'upper right'\n   469\t        if isinstance(loc, str):\n   470\t            loc = _api.check_getitem(self.codes, loc=loc)\n   471\t        if not self.isaxes and loc == 0:\n   472\t            raise ValueError(\n   473\t                \"Automatic legend placement (loc='best') not implemented for \"\n   474\t                \"figure legend\")\n   475\t\n   476\t        self._mode = mode\n   477\t        self.set_bbox_to_anchor(bbox_to_anchor, bbox_transform)\n   478\t\n   479\t        # We use FancyBboxPatch to draw a legend frame. The location\n   480\t        # and size of the box will be updated during the drawing time.\n   481\t\n   482\t        if facecolor is None:\n   483\t            facecolor = mpl.rcParams[\"legend.facecolor\"]\n   484\t        if facecolor == 'inherit':\n   485\t            facecolor = mpl.rcParams[\"axes.facecolor\"]\n   486\t\n   487\t        if edgecolor is None:\n   488\t            edgecolor = mpl.rcParams[\"legend.edgecolor\"]\n   489\t        if edgecolor == 'inherit':\n   490\t            edgecolor = mpl.rcParams[\"axes.edgecolor\"]\n   491\t\n   492\t        if fancybox is None:\n   493\t            fancybox = mpl.rcParams[\"legend.fancybox\"]\n   494\t\n   495\t        self.legendPatch = FancyBboxPatch(\n   496\t            xy=(0, 0), width=1, height=1,\n   497\t            facecolor=facecolor, edgecolor=edgecolor,\n   498\t            # If shadow is used, default to alpha=1 (#8943).\n   499\t            alpha=(framealpha if framealpha is not None\n   500\t                   else 1 if shadow\n   501\t                   else mpl.rcParams[\"legend.framealpha\"]),\n   502\t            # The width and height of the legendPatch will be set (in draw())\n   503\t            # to the length that includes the padding. Thus we set pad=0 here.\n   504\t            boxstyle=(\"round,pad=0,rounding_size=0.2\" if fancybox\n   505\t                      else \"square,pad=0\"),\n   506\t            mutation_scale=self._fontsize,\n   507\t            snap=True,\n   508\t            visible=(frameon if frameon is not None\n   509\t                     else mpl.rcParams[\"legend.frameon\"])\n   510\t        )\n   511\t        self._set_artist_props(self.legendPatch)\n   512\t\n   513\t        _api.check_in_list([\"center\", \"left\", \"right\"], alignment=alignment)\n   514\t        self._alignment = alignment\n   515\t\n   516\t        # init with null renderer\n   517\t        self._init_legend_box(handles, labels, markerfirst)\n   518\t\n   519\t        tmp = self._loc_used_default\n   520\t        self._set_loc(loc)\n   521\t        self._loc_used_default = tmp  # ignore changes done by _set_loc\n   522\t\n   523\t        # figure out title font properties:\n   524\t        if title_fontsize is not None and title_fontproperties is not None:\n   525\t            raise ValueError(\n   526\t                \"title_fontsize and title_fontproperties can't be specified \"\n   527\t                \"at the same time. Only use one of them. \")\n   528\t        title_prop_fp = FontProperties._from_any(title_fontproperties)\n   529\t        if isinstance(title_fontproperties, dict):\n   530\t            if \"size\" not in title_fontproperties:\n   531\t                title_fontsize = mpl.rcParams[\"legend.title_fontsize\"]\n   532\t                title_prop_fp.set_size(title_fontsize)\n   533\t        elif title_fontsize is not None:\n   534\t            title_prop_fp.set_size(title_fontsize)\n   535\t        elif not isinstance(title_fontproperties, FontProperties):\n   536\t            title_fontsize = mpl.rcParams[\"legend.title_fontsize\"]\n   537\t            title_prop_fp.set_size(title_fontsize)\n   538\t\n   539\t        self.set_title(title, prop=title_prop_fp)\n   540\t        self._draggable = None\n   541\t\n   542\t        # set the text color\n   543\t\n   544\t        color_getters = {  # getter function depends on line or patch\n   545\t            'linecolor':       ['get_color',           'get_facecolor'],\n   546\t            'markerfacecolor': ['get_markerfacecolor', 'get_facecolor'],\n   547\t            'mfc':             ['get_markerfacecolor', 'get_facecolor'],\n   548\t            'markeredgecolor': ['get_markeredgecolor', 'get_edgecolor'],\n   549\t            'mec':             ['get_markeredgecolor', 'get_edgecolor'],\n   550\t        }\n   551\t        if labelcolor is None:\n   552\t            if mpl.rcParams['legend.labelcolor'] is not None:\n   553\t                labelcolor = mpl.rcParams['legend.labelcolor']\n   554\t            else:\n   555\t                labelcolor = mpl.rcParams['text.color']\n   556\t        if isinstance(labelcolor, str) and labelcolor in color_getters:\n   557\t            getter_names = color_getters[labelcolor]\n   558\t            for handle, text in zip(self.legendHandles, self.texts):\n   559\t                for getter_name in getter_names:\n   560\t                    try:\n   561\t                        color = getattr(handle, getter_name)()\n   562\t                        text.set_color(color)\n   563\t                        break\n   564\t                    except AttributeError:\n   565\t                        pass\n   566\t        elif isinstance(labelcolor, str) and labelcolor == 'none':\n   567\t            for text in self.texts:\n   568\t                text.set_color(labelcolor)\n   569\t        elif np.iterable(labelcolor):\n   570\t            for text, color in zip(self.texts,\n   571\t                                   itertools.cycle(\n   572\t                                       colors.to_rgba_array(labelcolor))):\n   573\t                text.set_color(color)\n   574\t        else:\n   575\t            raise ValueError(f\"Invalid labelcolor: {labelcolor!r}\")\n          # ...\n   622\t\n   623\t    @allow_rasterization\n   624\t    def draw(self, renderer):\n   625\t        # docstring inherited\n   626\t        if not self.get_visible():\n   627\t            return\n   628\t\n   629\t        renderer.open_group('legend', gid=self.get_gid())\n   630\t\n   631\t        fontsize = renderer.points_to_pixels(self._fontsize)\n   632\t\n   633\t        # if mode == fill, set the width of the legend_box to the\n   634\t        # width of the parent (minus pads)\n   635\t        if self._mode in [\"expand\"]:\n   636\t            pad = 2 * (self.borderaxespad + self.borderpad) * fontsize\n   637\t            self._legend_box.set_width(self.get_bbox_to_anchor().width - pad)\n   638\t\n   639\t        # update the location and size of the legend. This needs to\n   640\t        # be done in any case to clip the figure right.\n   641\t        bbox = self._legend_box.get_window_extent(renderer)\n   642\t        self.legendPatch.set_bounds(bbox.bounds)\n   643\t        self.legendPatch.set_mutation_scale(fontsize)\n   644\t\n   645\t        if self.shadow:\n   646\t            Shadow(self.legendPatch, 2, -2).draw(renderer)\n   647\t\n   648\t        self.legendPatch.draw(renderer)\n   649\t        self._legend_box.draw(renderer)\n   650\t\n   651\t        renderer.close_group('legend')\n   652\t        self.stale = False\n   653\t\n   654\t    # _default_handler_map defines the default mapping between plot\n   655\t    # elements and the legend handlers.\n          # ...\n      # ...\n```\n",
        "summary": "Found relevant code sections in the search results.",
        "terminal": false,
        "expect_correction": false,
        "properties": {
          "search_hits": [],
          "search_tokens": 6554,
          "new_span_ids": [
            "Legend",
            "Legend.__init__",
            "Legend.draw"
          ]
        },
        "execution_completion": {
          "model": "claude-3-5-sonnet-20241022",
          "input": [
            {
              "role": "user",
              "content": "Search request:\nAction: FindClass\n  file_pattern: None\n  class_name: Legend\n\nIdentify the relevant code sections in the search results to use them. \n\n<search_results>\nlib/matplotlib/legend.py\n```\n\n\n\n<span id='imports'>\n    23\t\n    24\timport itertools\n    25\timport logging\n    26\timport time\n    27\t\n    28\timport numpy as np\n    29\t\n    30\timport matplotlib as mpl\n    31\tfrom matplotlib import _api, _docstring, colors, offsetbox\n    32\tfrom matplotlib.artist import Artist, allow_rasterization\n    33\tfrom matplotlib.cbook import silent_list\n    34\tfrom matplotlib.font_manager import FontProperties\n    35\tfrom matplotlib.lines import Line2D\n    36\tfrom matplotlib.patches import (Patch, Rectangle, Shadow, FancyBboxPatch,\n    37\t                                StepPatch)\n    38\tfrom matplotlib.collections import (\n    39\t    Collection, CircleCollection, LineCollection, PathCollection,\n    40\t    PolyCollection, RegularPolyCollection)\n    41\tfrom matplotlib.text import Text\n    42\tfrom matplotlib.transforms import Bbox, BboxBase, TransformedBbox\n    43\tfrom matplotlib.transforms import BboxTransformTo, BboxTransformFrom\n    44\tfrom matplotlib.offsetbox import (\n    45\t    AnchoredOffsetbox, DraggableOffsetBox,\n    46\t    HPacker, VPacker,\n    47\t    DrawingArea, TextArea,\n    48\t)\n    49\tfrom matplotlib.container import ErrorbarContainer, BarContainer, StemContainer\n    50\tfrom . import legend_handler\n      # ...\n\n\n<span id='Legend'>\n   290\t\n   291\t\n   292\tclass Legend(Artist):\n   293\t    \"\"\"\n   294\t    Place a legend on the axes at location loc.\n   295\t    \"\"\"\n   296\t\n   297\t    # 'best' is only implemented for axes legends\n   298\t    codes = {'best': 0, **AnchoredOffsetbox.codes}\n   299\t    zorder = 5\n\n\n<span id='Legend.__str__'>\n   300\t\n   301\t    def __str__(self):\n   302\t        return \"Legend\"\n\n\n<span id='Legend.__init__'>\n   303\t\n   304\t    @_api.make_keyword_only(\"3.6\", \"loc\")\n   305\t    @_docstring.dedent_interpd\n   306\t    def __init__(\n   307\t        self, parent, handles, labels,\n   308\t        loc=None,\n   309\t        numpoints=None,      # number of points in the legend line\n   310\t        markerscale=None,    # relative size of legend markers vs. original\n   311\t        markerfirst=True,    # left/right ordering of legend marker and label\n   312\t        scatterpoints=None,  # number of scatter points\n   313\t        scatteryoffsets=None,\n   314\t        prop=None,           # properties for the legend texts\n   315\t        fontsize=None,       # keyword to set font size directly\n   316\t        labelcolor=None,     # keyword to set the text color\n   317\t\n   318\t        # spacing & pad defined as a fraction of the font-size\n   319\t        borderpad=None,      # whitespace inside the legend border\n   320\t        labelspacing=None,   # vertical space between the legend entries\n   321\t        handlelength=None,   # length of the legend handles\n   322\t        handleheight=None,   # height of the legend handles\n   323\t        handletextpad=None,  # pad between the legend handle and text\n   324\t        borderaxespad=None,  # pad between the axes and legend border\n   325\t        columnspacing=None,  # spacing between columns\n   326\t\n   327\t        ncols=1,     # number of columns\n   328\t        mode=None,  # horizontal distribution of columns: None or \"expand\"\n   329\t\n   330\t        fancybox=None,  # True: fancy box, False: rounded box, None: rcParam\n   331\t        shadow=None,\n   332\t        title=None,           # legend title\n   333\t        title_fontsize=None,  # legend title font size\n   334\t        framealpha=None,      # set frame alpha\n   335\t        edgecolor=None,       # frame patch edgecolor\n   336\t        facecolor=None,       # frame patch facecolor\n   337\t\n   338\t        bbox_to_anchor=None,  # bbox to which the legend will be anchored\n   339\t        bbox_transform=None,  # transform for the bbox\n   340\t        frameon=None,         # draw frame\n   341\t        handler_map=None,\n   342\t        title_fontproperties=None,  # properties for the legend title\n   343\t        alignment=\"center\",       # control the alignment within the legend box\n   344\t        *,\n   345\t        ncol=1  # synonym for ncols (backward compatibility)\n   346\t    ):\n   347\t        \"\"\"\n   348\t        Parameters\n   349\t        ----------\n   350\t        parent : `~matplotlib.axes.Axes` or `.Figure`\n   351\t            The artist that contains the legend.\n   352\t\n   353\t        handles : list of `.Artist`\n   354\t            A list of Artists (lines, patches) to be added to the legend.\n   355\t\n   356\t        labels : list of str\n   357\t            A list of labels to show next to the artists. The length of handles\n   358\t            and labels should be the same. If they are not, they are truncated\n   359\t            to the smaller of both lengths.\n   360\t\n   361\t        Other Parameters\n   362\t        ----------------\n   363\t        %(_legend_kw_doc)s\n   364\t\n   365\t        Notes\n   366\t        -----\n   367\t        Users can specify any arbitrary location for the legend using the\n   368\t        *bbox_to_anchor* keyword argument. *bbox_to_anchor* can be a\n   369\t        `.BboxBase` (or derived there from) or a tuple of 2 or 4 floats.\n   370\t        See `set_bbox_to_anchor` for more detail.\n   371\t\n   372\t        The legend location can be specified by setting *loc* with a tuple of\n   373\t        2 floats, which is interpreted as the lower-left corner of the legend\n   374\t        in the normalized axes coordinate.\n   375\t        \"\"\"\n   376\t        # local import only to avoid circularity\n   377\t        from matplotlib.axes import Axes\n   378\t        from matplotlib.figure import FigureBase\n   379\t\n   380\t        super().__init__()\n   381\t\n   382\t        if prop is None:\n   383\t            if fontsize is not None:\n   384\t                self.prop = FontProperties(size=fontsize)\n   385\t            else:\n   386\t                self.prop = FontProperties(\n   387\t                    size=mpl.rcParams[\"legend.fontsize\"])\n   388\t        else:\n   389\t            self.prop = FontProperties._from_any(prop)\n   390\t            if isinstance(prop, dict) and \"size\" not in prop:\n   391\t                self.prop.set_size(mpl.rcParams[\"legend.fontsize\"])\n   392\t\n   393\t        self._fontsize = self.prop.get_size_in_points()\n   394\t\n   395\t        self.texts = []\n   396\t        self.legendHandles = []\n   397\t        self._legend_title_box = None\n   398\t\n   399\t        #: A dictionary with the extra handler mappings for this Legend\n   400\t        #: instance.\n   401\t        self._custom_handler_map = handler_map\n   402\t\n   403\t        def val_or_rc(val, rc_name):\n   404\t            return val if val is not None else mpl.rcParams[rc_name]\n   405\t\n   406\t        self.numpoints = val_or_rc(numpoints, 'legend.numpoints')\n   407\t        self.markerscale = val_or_rc(markerscale, 'legend.markerscale')\n   408\t        self.scatterpoints = val_or_rc(scatterpoints, 'legend.scatterpoints')\n   409\t        self.borderpad = val_or_rc(borderpad, 'legend.borderpad')\n   410\t        self.labelspacing = val_or_rc(labelspacing, 'legend.labelspacing')\n   411\t        self.handlelength = val_or_rc(handlelength, 'legend.handlelength')\n   412\t        self.handleheight = val_or_rc(handleheight, 'legend.handleheight')\n   413\t        self.handletextpad = val_or_rc(handletextpad, 'legend.handletextpad')\n   414\t        self.borderaxespad = val_or_rc(borderaxespad, 'legend.borderaxespad')\n   415\t        self.columnspacing = val_or_rc(columnspacing, 'legend.columnspacing')\n   416\t        self.shadow = val_or_rc(shadow, 'legend.shadow')\n   417\t        # trim handles and labels if illegal label...\n   418\t        _lab, _hand = [], []\n   419\t        for label, handle in zip(labels, handles):\n   420\t            if isinstance(label, str) and label.startswith('_'):\n   421\t                _api.warn_external(f\"The label {label!r} of {handle!r} starts \"\n   422\t                                   \"with '_'. It is thus excluded from the \"\n   423\t                                   \"legend.\")\n   424\t            else:\n   425\t                _lab.append(label)\n   426\t                _hand.append(handle)\n   427\t        labels, handles = _lab, _hand\n   428\t\n   429\t        handles = list(handles)\n   430\t        if len(handles) < 2:\n   431\t            ncols = 1\n   432\t        self._ncols = ncols if ncols != 1 else ncol\n   433\t\n   434\t        if self.numpoints <= 0:\n   435\t            raise ValueError(\"numpoints must be > 0; it was %d\" % numpoints)\n   436\t\n   437\t        # introduce y-offset for handles of the scatter plot\n   438\t        if scatteryoffsets is None:\n   439\t            self._scatteryoffsets = np.array([3. / 8., 4. / 8., 2.5 / 8.])\n   440\t        else:\n   441\t            self._scatteryoffsets = np.asarray(scatteryoffsets)\n   442\t        reps = self.scatterpoints // len(self._scatteryoffsets) + 1\n   443\t        self._scatteryoffsets = np.tile(self._scatteryoffsets,\n   444\t                                        reps)[:self.scatterpoints]\n   445\t\n   446\t        # _legend_box is a VPacker instance that contains all\n   447\t        # legend items and will be initialized from _init_legend_box()\n   448\t        # method.\n   449\t        self._legend_box = None\n   450\t\n   451\t        if isinstance(parent, Axes):\n   452\t            self.isaxes = True\n   453\t            self.axes = parent\n   454\t            self.set_figure(parent.figure)\n   455\t        elif isinstance(parent, FigureBase):\n   456\t            self.isaxes = False\n   457\t            self.set_figure(parent)\n   458\t        else:\n   459\t            raise TypeError(\n   460\t                \"Legend needs either Axes or FigureBase as parent\"\n   461\t            )\n   462\t        self.parent = parent\n   463\t\n   464\t        self._loc_used_default = loc is None\n   465\t        if loc is None:\n   466\t            loc = mpl.rcParams[\"legend.loc\"]\n   467\t            if not self.isaxes and loc in [0, 'best']:\n   468\t                loc = 'upper right'\n   469\t        if isinstance(loc, str):\n   470\t            loc = _api.check_getitem(self.codes, loc=loc)\n   471\t        if not self.isaxes and loc == 0:\n   472\t            raise ValueError(\n   473\t                \"Automatic legend placement (loc='best') not implemented for \"\n   474\t                \"figure legend\")\n   475\t\n   476\t        self._mode = mode\n   477\t        self.set_bbox_to_anchor(bbox_to_anchor, bbox_transform)\n   478\t\n   479\t        # We use FancyBboxPatch to draw a legend frame. The location\n   480\t        # and size of the box will be updated during the drawing time.\n   481\t\n   482\t        if facecolor is None:\n   483\t            facecolor = mpl.rcParams[\"legend.facecolor\"]\n   484\t        if facecolor == 'inherit':\n   485\t            facecolor = mpl.rcParams[\"axes.facecolor\"]\n   486\t\n   487\t        if edgecolor is None:\n   488\t            edgecolor = mpl.rcParams[\"legend.edgecolor\"]\n   489\t        if edgecolor == 'inherit':\n   490\t            edgecolor = mpl.rcParams[\"axes.edgecolor\"]\n   491\t\n   492\t        if fancybox is None:\n   493\t            fancybox = mpl.rcParams[\"legend.fancybox\"]\n   494\t\n   495\t        self.legendPatch = FancyBboxPatch(\n   496\t            xy=(0, 0), width=1, height=1,\n   497\t            facecolor=facecolor, edgecolor=edgecolor,\n   498\t            # If shadow is used, default to alpha=1 (#8943).\n   499\t            alpha=(framealpha if framealpha is not None\n   500\t                   else 1 if shadow\n   501\t                   else mpl.rcParams[\"legend.framealpha\"]),\n   502\t            # The width and height of the legendPatch will be set (in draw())\n   503\t            # to the length that includes the padding. Thus we set pad=0 here.\n   504\t            boxstyle=(\"round,pad=0,rounding_size=0.2\" if fancybox\n   505\t                      else \"square,pad=0\"),\n   506\t            mutation_scale=self._fontsize,\n   507\t            snap=True,\n   508\t            visible=(frameon if frameon is not None\n   509\t                     else mpl.rcParams[\"legend.frameon\"])\n   510\t        )\n   511\t        self._set_artist_props(self.legendPatch)\n   512\t\n   513\t        _api.check_in_list([\"center\", \"left\", \"right\"], alignment=alignment)\n   514\t        self._alignment = alignment\n   515\t\n   516\t        # init with null renderer\n   517\t        self._init_legend_box(handles, labels, markerfirst)\n   518\t\n   519\t        tmp = self._loc_used_default\n   520\t        self._set_loc(loc)\n   521\t        self._loc_used_default = tmp  # ignore changes done by _set_loc\n   522\t\n   523\t        # figure out title font properties:\n   524\t        if title_fontsize is not None and title_fontproperties is not None:\n   525\t            raise ValueError(\n   526\t                \"title_fontsize and title_fontproperties can't be specified \"\n   527\t                \"at the same time. Only use one of them. \")\n   528\t        title_prop_fp = FontProperties._from_any(title_fontproperties)\n   529\t        if isinstance(title_fontproperties, dict):\n   530\t            if \"size\" not in title_fontproperties:\n   531\t                title_fontsize = mpl.rcParams[\"legend.title_fontsize\"]\n   532\t                title_prop_fp.set_size(title_fontsize)\n   533\t        elif title_fontsize is not None:\n   534\t            title_prop_fp.set_size(title_fontsize)\n   535\t        elif not isinstance(title_fontproperties, FontProperties):\n   536\t            title_fontsize = mpl.rcParams[\"legend.title_fontsize\"]\n   537\t            title_prop_fp.set_size(title_fontsize)\n   538\t\n   539\t        self.set_title(title, prop=title_prop_fp)\n   540\t        self._draggable = None\n   541\t\n   542\t        # set the text color\n   543\t\n   544\t        color_getters = {  # getter function depends on line or patch\n   545\t            'linecolor':       ['get_color',           'get_facecolor'],\n   546\t            'markerfacecolor': ['get_markerfacecolor', 'get_facecolor'],\n   547\t            'mfc':             ['get_markerfacecolor', 'get_facecolor'],\n   548\t            'markeredgecolor': ['get_markeredgecolor', 'get_edgecolor'],\n   549\t            'mec':             ['get_markeredgecolor', 'get_edgecolor'],\n   550\t        }\n   551\t        if labelcolor is None:\n   552\t            if mpl.rcParams['legend.labelcolor'] is not None:\n   553\t                labelcolor = mpl.rcParams['legend.labelcolor']\n   554\t            else:\n   555\t                labelcolor = mpl.rcParams['text.color']\n   556\t        if isinstance(labelcolor, str) and labelcolor in color_getters:\n   557\t            getter_names = color_getters[labelcolor]\n   558\t            for handle, text in zip(self.legendHandles, self.texts):\n   559\t                for getter_name in getter_names:\n   560\t                    try:\n   561\t                        color = getattr(handle, getter_name)()\n   562\t                        text.set_color(color)\n   563\t                        break\n   564\t                    except AttributeError:\n   565\t                        pass\n   566\t        elif isinstance(labelcolor, str) and labelcolor == 'none':\n   567\t            for text in self.texts:\n   568\t                text.set_color(labelcolor)\n   569\t        elif np.iterable(labelcolor):\n   570\t            for text, color in zip(self.texts,\n   571\t                                   itertools.cycle(\n   572\t                                       colors.to_rgba_array(labelcolor))):\n   573\t                text.set_color(color)\n   574\t        else:\n   575\t            raise ValueError(f\"Invalid labelcolor: {labelcolor!r}\")\n\n\n<span id='Legend._set_artist_props'>\n   576\t\n   577\t    def _set_artist_props(self, a):\n   578\t        \"\"\"\n   579\t        Set the boilerplate props for artists added to axes.\n   580\t        \"\"\"\n   581\t        a.set_figure(self.figure)\n   582\t        if self.isaxes:\n   583\t            # a.set_axes(self.axes)\n   584\t            a.axes = self.axes\n   585\t\n   586\t        a.set_transform(self.get_transform())\n\n\n<span id='Legend._set_loc'>\n   587\t\n   588\t    def _set_loc(self, loc):\n   589\t        # find_offset function will be provided to _legend_box and\n   590\t        # _legend_box will draw itself at the location of the return\n   591\t        # value of the find_offset.\n   592\t        self._loc_used_default = False\n   593\t        self._loc_real = loc\n   594\t        self.stale = True\n   595\t        self._legend_box.set_offset(self._findoffset)\n\n\n<span id='Legend.set_ncols'>\n   596\t\n   597\t    def set_ncols(self, ncols):\n   598\t        \"\"\"Set the number of columns.\"\"\"\n   599\t        self._ncols = ncols\n\n\n<span id='Legend._get_loc'>\n   600\t\n   601\t    def _get_loc(self):\n   602\t        return self._loc_real\n\n\n<span id='Legend:7'>\n   603\t\n   604\t    _loc = property(_get_loc, _set_loc)\n\n\n<span id='Legend._findoffset'>\n   605\t\n   606\t    def _findoffset(self, width, height, xdescent, ydescent, renderer):\n   607\t        \"\"\"Helper function to locate the legend.\"\"\"\n   608\t\n   609\t        if self._loc == 0:  # \"best\".\n   610\t            x, y = self._find_best_position(width, height, renderer)\n   611\t        elif self._loc in Legend.codes.values():  # Fixed location.\n   612\t            bbox = Bbox.from_bounds(0, 0, width, height)\n   613\t            x, y = self._get_anchored_bbox(self._loc, bbox,\n   614\t                                           self.get_bbox_to_anchor(),\n   615\t                                           renderer)\n   616\t        else:  # Axes or figure coordinates.\n   617\t            fx, fy = self._loc\n   618\t            bbox = self.get_bbox_to_anchor()\n   619\t            x, y = bbox.x0 + bbox.width * fx, bbox.y0 + bbox.height * fy\n   620\t\n   621\t        return x + xdescent, y + ydescent\n\n\n<span id='Legend.draw'>\n   622\t\n   623\t    @allow_rasterization\n   624\t    def draw(self, renderer):\n   625\t        # docstring inherited\n   626\t        if not self.get_visible():\n   627\t            return\n   628\t\n   629\t        renderer.open_group('legend', gid=self.get_gid())\n   630\t\n   631\t        fontsize = renderer.points_to_pixels(self._fontsize)\n   632\t\n   633\t        # if mode == fill, set the width of the legend_box to the\n   634\t        # width of the parent (minus pads)\n   635\t        if self._mode in [\"expand\"]:\n   636\t            pad = 2 * (self.borderaxespad + self.borderpad) * fontsize\n   637\t            self._legend_box.set_width(self.get_bbox_to_anchor().width - pad)\n   638\t\n   639\t        # update the location and size of the legend. This needs to\n   640\t        # be done in any case to clip the figure right.\n   641\t        bbox = self._legend_box.get_window_extent(renderer)\n   642\t        self.legendPatch.set_bounds(bbox.bounds)\n   643\t        self.legendPatch.set_mutation_scale(fontsize)\n   644\t\n   645\t        if self.shadow:\n   646\t            Shadow(self.legendPatch, 2, -2).draw(renderer)\n   647\t\n   648\t        self.legendPatch.draw(renderer)\n   649\t        self._legend_box.draw(renderer)\n   650\t\n   651\t        renderer.close_group('legend')\n   652\t        self.stale = False\n   653\t\n   654\t    # _default_handler_map defines the default mapping between plot\n   655\t    # elements and the legend handlers.\n\n\n<span id='Legend:9'>\n   656\t\n   657\t    _default_handler_map = {\n   658\t        StemContainer: legend_handler.HandlerStem(),\n   659\t        ErrorbarContainer: legend_handler.HandlerErrorbar(),\n   660\t        Line2D: legend_handler.HandlerLine2D(),\n   661\t        Patch: legend_handler.HandlerPatch(),\n   662\t        StepPatch: legend_handler.HandlerStepPatch(),\n   663\t        LineCollection: legend_handler.HandlerLineCollection(),\n   664\t        RegularPolyCollection: legend_handler.HandlerRegularPolyCollection(),\n   665\t        CircleCollection: legend_handler.HandlerCircleCollection(),\n   666\t        BarContainer: legend_handler.HandlerPatch(\n   667\t            update_func=legend_handler.update_from_first_child),\n   668\t        tuple: legend_handler.HandlerTuple(),\n   669\t        PathCollection: legend_handler.HandlerPathCollection(),\n   670\t        PolyCollection: legend_handler.HandlerPolyCollection()\n   671\t        }\n   672\t\n   673\t    # (get|set|update)_default_handler_maps are public interfaces to\n   674\t    # modify the default handler map.\n\n\n<span id='Legend.get_default_handler_map'>\n   675\t\n   676\t    @classmethod\n   677\t    def get_default_handler_map(cls):\n   678\t        \"\"\"Return the global default handler map, shared by all legends.\"\"\"\n   679\t        return cls._default_handler_map\n\n\n<span id='Legend.set_default_handler_map'>\n   680\t\n   681\t    @classmethod\n   682\t    def set_default_handler_map(cls, handler_map):\n   683\t        \"\"\"Set the global default handler map, shared by all legends.\"\"\"\n   684\t        cls._default_handler_map = handler_map\n\n\n<span id='Legend.update_default_handler_map'>\n   685\t\n   686\t    @classmethod\n   687\t    def update_default_handler_map(cls, handler_map):\n   688\t        \"\"\"Update the global default handler map, shared by all legends.\"\"\"\n   689\t        cls._default_handler_map.update(handler_map)\n\n\n<span id='Legend.get_legend_handler_map'>\n   690\t\n   691\t    def get_legend_handler_map(self):\n   692\t        \"\"\"Return this legend instance's handler map.\"\"\"\n   693\t        default_handler_map = self.get_default_handler_map()\n   694\t        return ({**default_handler_map, **self._custom_handler_map}\n   695\t                if self._custom_handler_map else default_handler_map)\n\n\n<span id='Legend.get_legend_handler'>\n   696\t\n   697\t    @staticmethod\n   698\t    def get_legend_handler(legend_handler_map, orig_handle):\n   699\t        \"\"\"\n   700\t        Return a legend handler from *legend_handler_map* that\n   701\t        corresponds to *orig_handler*.\n   702\t\n   703\t        *legend_handler_map* should be a dictionary object (that is\n   704\t        returned by the get_legend_handler_map method).\n   705\t\n   706\t        It first checks if the *orig_handle* itself is a key in the\n   707\t        *legend_handler_map* and return the associated value.\n   708\t        Otherwise, it checks for each of the classes in its\n   709\t        method-resolution-order. If no matching key is found, it\n   710\t        returns ``None``.\n   711\t        \"\"\"\n   712\t        try:\n   713\t            return legend_handler_map[orig_handle]\n   714\t        except (TypeError, KeyError):  # TypeError if unhashable.\n   715\t            pass\n   716\t        for handle_type in type(orig_handle).mro():\n   717\t            try:\n   718\t                return legend_handler_map[handle_type]\n   719\t            except KeyError:\n   720\t                pass\n   721\t        return None\n\n\n<span id='Legend._init_legend_box'>\n   722\t\n   723\t    def _init_legend_box(self, handles, labels, markerfirst=True):\n   724\t        \"\"\"\n   725\t        Initialize the legend_box. The legend_box is an instance of\n   726\t        the OffsetBox, which is packed with legend handles and\n   727\t        texts. Once packed, their location is calculated during the\n   728\t        drawing time.\n   729\t        \"\"\"\n   730\t\n   731\t        fontsize = self._fontsize\n   732\t\n   733\t        # legend_box is a HPacker, horizontally packed with columns.\n   734\t        # Each column is a VPacker, vertically packed with legend items.\n   735\t        # Each legend item is a HPacker packed with:\n   736\t        # - handlebox: a DrawingArea which contains the legend handle.\n   737\t        # - labelbox: a TextArea which contains the legend text.\n   738\t\n   739\t        text_list = []  # the list of text instances\n   740\t        handle_list = []  # the list of handle instances\n   741\t        handles_and_labels = []\n   742\t\n   743\t        # The approximate height and descent of text. These values are\n   744\t        # only used for plotting the legend handle.\n   745\t        descent = 0.35 * fontsize * (self.handleheight - 0.7)  # heuristic.\n   746\t        height = fontsize * self.handleheight - descent\n   747\t        # each handle needs to be drawn inside a box of (x, y, w, h) =\n   748\t        # (0, -descent, width, height).  And their coordinates should\n   749\t        # be given in the display coordinates.\n   750\t\n   751\t        # The transformation of each handle will be automatically set\n   752\t        # to self.get_transform(). If the artist does not use its\n   753\t        # default transform (e.g., Collections), you need to\n   754\t        # manually set their transform to the self.get_transform().\n   755\t        legend_handler_map = self.get_legend_handler_map()\n   756\t\n   757\t        for orig_handle, label in zip(handles, labels):\n   758\t            handler = self.get_legend_handler(legend_handler_map, orig_handle)\n   759\t            if handler is None:\n   760\t                _api.warn_external(\n   761\t                             \"Legend does not support handles for {0} \"\n   762\t                             \"instances.\\nA proxy artist may be used \"\n   763\t                             \"instead.\\nSee: https://matplotlib.org/\"\n   764\t                             \"stable/tutorials/intermediate/legend_guide.html\"\n   765\t                             \"#controlling-the-legend-entries\".format(\n   766\t                                 type(orig_handle).__name__))\n   767\t                # No handle for this artist, so we just defer to None.\n   768\t                handle_list.append(None)\n   769\t            else:\n   770\t                textbox = TextArea(label, multilinebaseline=True,\n   771\t                                   textprops=dict(\n   772\t                                       verticalalignment='baseline',\n   773\t                                       horizontalalignment='left',\n   774\t                                       fontproperties=self.prop))\n   775\t                handlebox = DrawingArea(width=self.handlelength * fontsize,\n   776\t                                        height=height,\n   777\t                                        xdescent=0., ydescent=descent)\n   778\t\n   779\t                text_list.append(textbox._text)\n   780\t                # Create the artist for the legend which represents the\n   781\t                # original artist/handle.\n   782\t                handle_list.append(handler.legend_artist(self, orig_handle,\n   783\t                                                         fontsize, handlebox))\n   784\t                handles_and_labels.append((handlebox, textbox))\n   785\t\n   786\t        columnbox = []\n   787\t        # array_split splits n handles_and_labels into ncols columns, with the\n   788\t        # first n%ncols columns having an extra entry.  filter(len, ...)\n   789\t        # handles the case where n < ncols: the last ncols-n columns are empty\n   790\t        # and get filtered out.\n   791\t        for handles_and_labels_column in filter(\n   792\t                len, np.array_split(handles_and_labels, self._ncols)):\n   793\t            # pack handlebox and labelbox into itembox\n   794\t            itemboxes = [HPacker(pad=0,\n   795\t                                 sep=self.handletextpad * fontsize,\n   796\t                                 children=[h, t] if markerfirst else [t, h],\n   797\t                                 align=\"baseline\")\n   798\t                         for h, t in handles_and_labels_column]\n   799\t            # pack columnbox\n   800\t            alignment = \"baseline\" if markerfirst else \"right\"\n   801\t            columnbox.append(VPacker(pad=0,\n   802\t                                     sep=self.labelspacing * fontsize,\n   803\t                                     align=alignment,\n   804\t                                     children=itemboxes))\n   805\t\n   806\t        mode = \"expand\" if self._mode == \"expand\" else \"fixed\"\n   807\t        sep = self.columnspacing * fontsize\n   808\t        self._legend_handle_box = HPacker(pad=0,\n   809\t                                          sep=sep, align=\"baseline\",\n   810\t                                          mode=mode,\n   811\t                                          children=columnbox)\n   812\t        self._legend_title_box = TextArea(\"\")\n   813\t        self._legend_box = VPacker(pad=self.borderpad * fontsize,\n   814\t                                   sep=self.labelspacing * fontsize,\n   815\t                                   align=self._alignment,\n   816\t                                   children=[self._legend_title_box,\n   817\t                                             self._legend_handle_box])\n   818\t        self._legend_box.set_figure(self.figure)\n   819\t        self._legend_box.axes = self.axes\n   820\t        self.texts = text_list\n   821\t        self.legendHandles = handle_list\n\n\n<span id='Legend._auto_legend_data'>\n   822\t\n   823\t    def _auto_legend_data(self):\n   824\t        \"\"\"\n   825\t        Return display coordinates for hit testing for \"best\" positioning.\n   826\t\n   827\t        Returns\n   828\t        -------\n   829\t        bboxes\n   830\t            List of bounding boxes of all patches.\n   831\t        lines\n   832\t            List of `.Path` corresponding to each line.\n   833\t        offsets\n   834\t            List of (x, y) offsets of all collection.\n   835\t        \"\"\"\n   836\t        assert self.isaxes  # always holds, as this is only called internally\n   837\t        bboxes = []\n   838\t        lines = []\n   839\t        offsets = []\n   840\t        for artist in self.parent._children:\n   841\t            if isinstance(artist, Line2D):\n   842\t                lines.append(\n   843\t                    artist.get_transform().transform_path(artist.get_path()))\n   844\t            elif isinstance(artist, Rectangle):\n   845\t                bboxes.append(\n   846\t                    artist.get_bbox().transformed(artist.get_data_transform()))\n   847\t            elif isinstance(artist, Patch):\n   848\t                bboxes.append(\n   849\t                    artist.get_path().get_extents(artist.get_transform()))\n   850\t            elif isinstance(artist, Collection):\n   851\t                _, offset_trf, hoffsets, _ = artist._prepare_points()\n   852\t                for offset in offset_trf.transform(hoffsets):\n   853\t                    offsets.append(offset)\n   854\t        return bboxes, lines, offsets\n\n\n<span id='Legend.get_children'>\n   855\t\n   856\t    def get_children(self):\n   857\t        # docstring inherited\n   858\t        return [self._legend_box, self.get_frame()]\n\n\n<span id='Legend.get_frame'>\n   859\t\n   860\t    def get_frame(self):\n   861\t        \"\"\"Return the `~.patches.Rectangle` used to frame the legend.\"\"\"\n   862\t        return self.legendPatch\n\n\n<span id='Legend.get_lines'>\n   863\t\n   864\t    def get_lines(self):\n   865\t        r\"\"\"Return the list of `~.lines.Line2D`\\s in the legend.\"\"\"\n   866\t        return [h for h in self.legendHandles if isinstance(h, Line2D)]\n\n\n<span id='Legend.get_patches'>\n   867\t\n   868\t    def get_patches(self):\n   869\t        r\"\"\"Return the list of `~.patches.Patch`\\s in the legend.\"\"\"\n   870\t        return silent_list('Patch',\n   871\t                           [h for h in self.legendHandles\n   872\t                            if isinstance(h, Patch)])\n\n\n<span id='Legend.get_texts'>\n   873\t\n   874\t    def get_texts(self):\n   875\t        r\"\"\"Return the list of `~.text.Text`\\s in the legend.\"\"\"\n   876\t        return silent_list('Text', self.texts)\n\n\n<span id='Legend.set_alignment'>\n   877\t\n   878\t    def set_alignment(self, alignment):\n   879\t        \"\"\"\n   880\t        Set the alignment of the legend title and the box of entries.\n   881\t\n   882\t        The entries are aligned as a single block, so that markers always\n   883\t        lined up.\n   884\t\n   885\t        Parameters\n   886\t        ----------\n   887\t        alignment : {'center', 'left', 'right'}.\n   888\t\n   889\t        \"\"\"\n   890\t        _api.check_in_list([\"center\", \"left\", \"right\"], alignment=alignment)\n   891\t        self._alignment = alignment\n   892\t        self._legend_box.align = alignment\n\n\n<span id='Legend.get_alignment'>\n   893\t\n   894\t    def get_alignment(self):\n   895\t        \"\"\"Get the alignment value of the legend box\"\"\"\n   896\t        return self._legend_box.align\n\n\n<span id='Legend.set_title'>\n   897\t\n   898\t    def set_title(self, title, prop=None):\n   899\t        \"\"\"\n   900\t        Set legend title and title style.\n   901\t\n   902\t        Parameters\n   903\t        ----------\n   904\t        title : str\n   905\t            The legend title.\n   906\t\n   907\t        prop : `.font_manager.FontProperties` or `str` or `pathlib.Path`\n   908\t            The font properties of the legend title.\n   909\t            If a `str`, it is interpreted as a fontconfig pattern parsed by\n   910\t            `.FontProperties`.  If a `pathlib.Path`, it is interpreted as the\n   911\t            absolute path to a font file.\n   912\t\n   913\t        \"\"\"\n   914\t        self._legend_title_box._text.set_text(title)\n   915\t        if title:\n   916\t            self._legend_title_box._text.set_visible(True)\n   917\t            self._legend_title_box.set_visible(True)\n   918\t        else:\n   919\t            self._legend_title_box._text.set_visible(False)\n   920\t            self._legend_title_box.set_visible(False)\n   921\t\n   922\t        if prop is not None:\n   923\t            self._legend_title_box._text.set_fontproperties(prop)\n   924\t\n   925\t        self.stale = True\n\n\n<span id='Legend.get_title'>\n   926\t\n   927\t    def get_title(self):\n   928\t        \"\"\"Return the `.Text` instance for the legend title.\"\"\"\n   929\t        return self._legend_title_box._text\n\n\n<span id='Legend.get_window_extent'>\n   930\t\n   931\t    def get_window_extent(self, renderer=None):\n   932\t        # docstring inherited\n   933\t        if renderer is None:\n   934\t            renderer = self.figure._get_renderer()\n   935\t        return self._legend_box.get_window_extent(renderer=renderer)\n\n\n<span id='Legend.get_tightbbox'>\n   936\t\n   937\t    def get_tightbbox(self, renderer=None):\n   938\t        # docstring inherited\n   939\t        return self._legend_box.get_window_extent(renderer)\n\n\n<span id='Legend.get_frame_on'>\n   940\t\n   941\t    def get_frame_on(self):\n   942\t        \"\"\"Get whether the legend box patch is drawn.\"\"\"\n   943\t        return self.legendPatch.get_visible()\n\n\n<span id='Legend.set_frame_on'>\n   944\t\n   945\t    def set_frame_on(self, b):\n   946\t        \"\"\"\n   947\t        Set whether the legend box patch is drawn.\n   948\t\n   949\t        Parameters\n   950\t        ----------\n   951\t        b : bool\n   952\t        \"\"\"\n   953\t        self.legendPatch.set_visible(b)\n   954\t        self.stale = True\n\n\n<span id='Legend:11'>\n   955\t\n   956\t    draw_frame = set_frame_on  # Backcompat alias.\n\n\n<span id='Legend.get_bbox_to_anchor'>\n   957\t\n   958\t    def get_bbox_to_anchor(self):\n   959\t        \"\"\"Return the bbox that the legend will be anchored to.\"\"\"\n   960\t        if self._bbox_to_anchor is None:\n   961\t            return self.parent.bbox\n   962\t        else:\n   963\t            return self._bbox_to_anchor\n\n\n<span id='Legend.set_bbox_to_anchor'>\n   964\t\n   965\t    def set_bbox_to_anchor(self, bbox, transform=None):\n   966\t        \"\"\"\n   967\t        Set the bbox that the legend will be anchored to.\n   968\t\n   969\t        Parameters\n   970\t        ----------\n   971\t        bbox : `~matplotlib.transforms.BboxBase` or tuple\n   972\t            The bounding box can be specified in the following ways:\n   973\t\n   974\t            - A `.BboxBase` instance\n   975\t            - A tuple of ``(left, bottom, width, height)`` in the given\n   976\t              transform (normalized axes coordinate if None)\n   977\t            - A tuple of ``(left, bottom)`` where the width and height will be\n   978\t              assumed to be zero.\n   979\t            - *None*, to remove the bbox anchoring, and use the parent bbox.\n   980\t\n   981\t        transform : `~matplotlib.transforms.Transform`, optional\n   982\t            A transform to apply to the bounding box. If not specified, this\n   983\t            will use a transform to the bounding box of the parent.\n   984\t        \"\"\"\n   985\t        if bbox is None:\n   986\t            self._bbox_to_anchor = None\n   987\t            return\n   988\t        elif isinstance(bbox, BboxBase):\n   989\t            self._bbox_to_anchor = bbox\n   990\t        else:\n   991\t            try:\n   992\t                l = len(bbox)\n   993\t            except TypeError as err:\n   994\t                raise ValueError(f\"Invalid bbox: {bbox}\") from err\n   995\t\n   996\t            if l == 2:\n   997\t                bbox = [bbox[0], bbox[1], 0, 0]\n   998\t\n   999\t            self._bbox_to_anchor = Bbox.from_bounds(*bbox)\n  1000\t\n  1001\t        if transform is None:\n  1002\t            transform = BboxTransformTo(self.parent.bbox)\n  1003\t\n  1004\t        self._bbox_to_anchor = TransformedBbox(self._bbox_to_anchor,\n  1005\t                                               transform)\n  1006\t        self.stale = True\n\n\n<span id='Legend._get_anchored_bbox'>\n  1007\t\n  1008\t    def _get_anchored_bbox(self, loc, bbox, parentbbox, renderer):\n  1009\t        \"\"\"\n  1010\t        Place the *bbox* inside the *parentbbox* according to a given\n  1011\t        location code. Return the (x, y) coordinate of the bbox.\n  1012\t\n  1013\t        Parameters\n  1014\t        ----------\n  1015\t        loc : int\n  1016\t            A location code in range(1, 11). This corresponds to the possible\n  1017\t            values for ``self._loc``, excluding \"best\".\n  1018\t        bbox : `~matplotlib.transforms.Bbox`\n  1019\t            bbox to be placed, in display coordinates.\n  1020\t        parentbbox : `~matplotlib.transforms.Bbox`\n  1021\t            A parent box which will contain the bbox, in display coordinates.\n  1022\t        \"\"\"\n  1023\t        return offsetbox._get_anchored_bbox(\n  1024\t            loc, bbox, parentbbox,\n  1025\t            self.borderaxespad * renderer.points_to_pixels(self._fontsize))\n\n\n<span id='Legend._find_best_position'>\n  1026\t\n  1027\t    def _find_best_position(self, width, height, renderer, consider=None):\n  1028\t        \"\"\"\n  1029\t        Determine the best location to place the legend.\n  1030\t\n  1031\t        *consider* is a list of ``(x, y)`` pairs to consider as a potential\n  1032\t        lower-left corner of the legend. All are display coords.\n  1033\t        \"\"\"\n  1034\t        assert self.isaxes  # always holds, as this is only called internally\n  1035\t\n  1036\t        start_time = time.perf_counter()\n  1037\t\n  1038\t        bboxes, lines, offsets = self._auto_legend_data()\n  1039\t\n  1040\t        bbox = Bbox.from_bounds(0, 0, width, height)\n  1041\t        if consider is None:\n  1042\t            consider = [self._get_anchored_bbox(x, bbox,\n  1043\t                                                self.get_bbox_to_anchor(),\n  1044\t                                                renderer)\n  1045\t                        for x in range(1, len(self.codes))]\n  1046\t\n  1047\t        candidates = []\n  1048\t        for idx, (l, b) in enumerate(consider):\n  1049\t            legendBox = Bbox.from_bounds(l, b, width, height)\n  1050\t            badness = 0\n  1051\t            # XXX TODO: If markers are present, it would be good to take them\n  1052\t            # into account when checking vertex overlaps in the next line.\n  1053\t            badness = (sum(legendBox.count_contains(line.vertices)\n  1054\t                           for line in lines)\n  1055\t                       + legendBox.count_contains(offsets)\n  1056\t                       + legendBox.count_overlaps(bboxes)\n  1057\t                       + sum(line.intersects_bbox(legendBox, filled=False)\n  1058\t                             for line in lines))\n  1059\t            if badness == 0:\n  1060\t                return l, b\n  1061\t            # Include the index to favor lower codes in case of a tie.\n  1062\t            candidates.append((badness, idx, (l, b)))\n  1063\t\n  1064\t        _, _, (l, b) = min(candidates)\n  1065\t\n  1066\t        if self._loc_used_default and time.perf_counter() - start_time > 1:\n  1067\t            _api.warn_external(\n  1068\t                'Creating legend with loc=\"best\" can be slow with large '\n  1069\t                'amounts of data.')\n  1070\t\n  1071\t        return l, b\n\n\n<span id='Legend.contains'>\n  1072\t\n  1073\t    def contains(self, event):\n  1074\t        inside, info = self._default_contains(event)\n  1075\t        if inside is not None:\n  1076\t            return inside, info\n  1077\t        return self.legendPatch.contains(event)\n\n\n<span id='Legend.set_draggable'>\n  1078\t\n  1079\t    def set_draggable(self, state, use_blit=False, update='loc'):\n  1080\t        \"\"\"\n  1081\t        Enable or disable mouse dragging support of the legend.\n  1082\t\n  1083\t        Parameters\n  1084\t        ----------\n  1085\t        state : bool\n  1086\t            Whether mouse dragging is enabled.\n  1087\t        use_blit : bool, optional\n  1088\t            Use blitting for faster image composition. For details see\n  1089\t            :ref:`func-animation`.\n  1090\t        update : {'loc', 'bbox'}, optional\n  1091\t            The legend parameter to be changed when dragged:\n  1092\t\n  1093\t            - 'loc': update the *loc* parameter of the legend\n  1094\t            - 'bbox': update the *bbox_to_anchor* parameter of the legend\n  1095\t\n  1096\t        Returns\n  1097\t        -------\n  1098\t        `.DraggableLegend` or *None*\n  1099\t            If *state* is ``True`` this returns the `.DraggableLegend` helper\n  1100\t            instance. Otherwise this returns *None*.\n  1101\t        \"\"\"\n  1102\t        if state:\n  1103\t            if self._draggable is None:\n  1104\t                self._draggable = DraggableLegend(self,\n  1105\t                                                  use_blit,\n  1106\t                                                  update=update)\n  1107\t        else:\n  1108\t            if self._draggable is not None:\n  1109\t                self._draggable.disconnect()\n  1110\t            self._draggable = None\n  1111\t        return self._draggable\n\n\n<span id='Legend.get_draggable'>\n  1112\t\n  1113\t    def get_draggable(self):\n  1114\t        \"\"\"Return ``True`` if the legend is draggable, ``False`` otherwise.\"\"\"\n  1115\t        return self._draggable is not None\n\n\n<span id='Legend.get_draggable'>\n  1116\t\n  1117\t\n  1118\t# Helper functions to parse legend arguments for both `figure.legend` and\n  1119\t# `axes.legend`:\n      # ...\n```\n\n</search_result>\n"
            }
          ],
          "response": {
            "id": "msg_01SWwtDHbKBZFPYgRoPrLAhK",
            "content": [
              {
                "text": "I'll analyze the search results and identify the relevant code sections for the Legend class. Here's my response using the Action tool:",
                "type": "text"
              },
              {
                "id": "toolu_01UE2ERJsT1QJ6v3JYHdd1HR",
                "input": {
                  "scratch_pad": "The search results contain the complete Legend class definition from matplotlib's legend.py file. The key sections include:\n\n1. The main Legend class definition and docstring (lines 292-296)\n2. Core initialization method __init__ (lines 304-575)\n3. Important properties and methods for legend functionality:\n   - Drawing and rendering (draw method)\n   - Location and positioning methods (_set_loc, _get_loc)\n   - Frame and appearance control methods\n   - Handler mapping for different plot elements\n   - Title and text management\n   - Dragging support\n\nThe Legend class is a fundamental component for creating and managing plot legends in matplotlib.",
                  "identified_spans": [
                    {
                      "file_path": "lib/matplotlib/legend.py",
                      "start_line": 292,
                      "end_line": 296
                    },
                    {
                      "file_path": "lib/matplotlib/legend.py",
                      "start_line": 304,
                      "end_line": 575
                    },
                    {
                      "file_path": "lib/matplotlib/legend.py",
                      "start_line": 622,
                      "end_line": 652
                    }
                  ]
                },
                "name": "Action",
                "type": "tool_use"
              }
            ],
            "model": "claude-3-5-sonnet-20241022",
            "role": "assistant",
            "stop_reason": "tool_use",
            "stop_sequence": null,
            "type": "message",
            "usage": {
              "cache_creation_input_tokens": 0,
              "cache_read_input_tokens": 0,
              "input_tokens": 13358,
              "output_tokens": 364
            }
          },
          "usage": {
            "completion_cost": 0.045534,
            "completion_tokens": 364,
            "prompt_tokens": 13358,
            "cached_tokens": 0
          }
        }
      },
      "parent_id": 0
    },
    {
      "node_id": 2,
      "action": {
        "scratch_pad": "1. I found the Legend class implementation in lib/matplotlib/legend.py\n2. I notice that:\n   - The Legend class already has a `_draggable` attribute initialized as None in __init__ (line 540)\n   - The class inherits from Artist and uses DraggableOffsetBox (imported on line 45)\n3. Let me search for the draggable functionality to understand how it's currently implemented",
        "query": "legend draggable method implementation",
        "category": "implementation",
        "action_args_class": "moatless.actions.semantic_search.SemanticSearchArgs"
      },
      "observation": {
        "message": "Found 14 code sections.\n\nViewed relevant code:\nlib/matplotlib/legend.py\n```\n\n    23\t\n    24\timport itertools\n    25\timport logging\n    26\timport time\n    27\t\n    28\timport numpy as np\n    29\t\n    30\timport matplotlib as mpl\n    31\tfrom matplotlib import _api, _docstring, colors, offsetbox\n    32\tfrom matplotlib.artist import Artist, allow_rasterization\n    33\tfrom matplotlib.cbook import silent_list\n    34\tfrom matplotlib.font_manager import FontProperties\n    35\tfrom matplotlib.lines import Line2D\n    36\tfrom matplotlib.patches import (Patch, Rectangle, Shadow, FancyBboxPatch,\n    37\t                                StepPatch)\n    38\tfrom matplotlib.collections import (\n    39\t    Collection, CircleCollection, LineCollection, PathCollection,\n    40\t    PolyCollection, RegularPolyCollection)\n    41\tfrom matplotlib.text import Text\n    42\tfrom matplotlib.transforms import Bbox, BboxBase, TransformedBbox\n    43\tfrom matplotlib.transforms import BboxTransformTo, BboxTransformFrom\n    44\tfrom matplotlib.offsetbox import (\n    45\t    AnchoredOffsetbox, DraggableOffsetBox,\n    46\t    HPacker, VPacker,\n    47\t    DrawingArea, TextArea,\n    48\t)\n    49\tfrom matplotlib.container import ErrorbarContainer, BarContainer, StemContainer\n    50\tfrom . import legend_handler\n    51\t\n    52\t\n    53\tclass DraggableLegend(DraggableOffsetBox):\n    54\t    def __init__(self, legend, use_blit=False, update=\"loc\"):\n    55\t        \"\"\"\n    56\t        Wrapper around a `.Legend` to support mouse dragging.\n    57\t\n    58\t        Parameters\n    59\t        ----------\n    60\t        legend : `.Legend`\n    61\t            The `.Legend` instance to wrap.\n    62\t        use_blit : bool, optional\n    63\t            Use blitting for faster image composition. For details see\n    64\t            :ref:`func-animation`.\n    65\t        update : {'loc', 'bbox'}, optional\n    66\t            If \"loc\", update the *loc* parameter of the legend upon finalizing.\n    67\t            If \"bbox\", update the *bbox_to_anchor* parameter.\n    68\t        \"\"\"\n    69\t        self.legend = legend\n    70\t\n    71\t        _api.check_in_list([\"loc\", \"bbox\"], update=update)\n    72\t        self._update = update\n    73\t\n    74\t        super().__init__(legend, legend._legend_box, use_blit=use_blit)\n    75\t\n    76\t    def finalize_offset(self):\n    77\t        if self._update == \"loc\":\n    78\t            self._update_loc(self.get_loc_in_canvas())\n    79\t        elif self._update == \"bbox\":\n    80\t            self._bbox_to_anchor(self.get_loc_in_canvas())\n    81\t\n    82\t    def _update_loc(self, loc_in_canvas):\n    83\t        bbox = self.legend.get_bbox_to_anchor()\n    84\t        # if bbox has zero width or height, the transformation is\n    85\t        # ill-defined. Fall back to the default bbox_to_anchor.\n    86\t        if bbox.width == 0 or bbox.height == 0:\n    87\t            self.legend.set_bbox_to_anchor(None)\n    88\t            bbox = self.legend.get_bbox_to_anchor()\n    89\t        _bbox_transform = BboxTransformFrom(bbox)\n    90\t        self.legend._loc = tuple(_bbox_transform.transform(loc_in_canvas))\n    91\t\n    92\t    def _update_bbox_to_anchor(self, loc_in_canvas):\n    93\t        loc_in_bbox = self.legend.axes.transAxes.transform(loc_in_canvas)\n    94\t        self.legend.set_bbox_to_anchor(loc_in_bbox)\n      # ...\n   290\t\n   291\t\n   292\tclass Legend(Artist):\n   293\t    \"\"\"\n   294\t    Place a legend on the axes at location loc.\n   295\t    \"\"\"\n   296\t\n   297\t    # 'best' is only implemented for axes legends\n   298\t    codes = {'best': 0, **AnchoredOffsetbox.codes}\n   299\t    zorder = 5\n          # ...\n  1078\t\n  1079\t    def set_draggable(self, state, use_blit=False, update='loc'):\n  1080\t        \"\"\"\n  1081\t        Enable or disable mouse dragging support of the legend.\n  1082\t\n  1083\t        Parameters\n  1084\t        ----------\n  1085\t        state : bool\n  1086\t            Whether mouse dragging is enabled.\n  1087\t        use_blit : bool, optional\n  1088\t            Use blitting for faster image composition. For details see\n  1089\t            :ref:`func-animation`.\n  1090\t        update : {'loc', 'bbox'}, optional\n  1091\t            The legend parameter to be changed when dragged:\n  1092\t\n  1093\t            - 'loc': update the *loc* parameter of the legend\n  1094\t            - 'bbox': update the *bbox_to_anchor* parameter of the legend\n  1095\t\n  1096\t        Returns\n  1097\t        -------\n  1098\t        `.DraggableLegend` or *None*\n  1099\t            If *state* is ``True`` this returns the `.DraggableLegend` helper\n  1100\t            instance. Otherwise this returns *None*.\n  1101\t        \"\"\"\n  1102\t        if state:\n  1103\t            if self._draggable is None:\n  1104\t                self._draggable = DraggableLegend(self,\n  1105\t                                                  use_blit,\n  1106\t                                                  update=update)\n  1107\t        else:\n  1108\t            if self._draggable is not None:\n  1109\t                self._draggable.disconnect()\n  1110\t            self._draggable = None\n  1111\t        return self._draggable\n  1112\t\n  1113\t    def get_draggable(self):\n  1114\t        \"\"\"Return ``True`` if the legend is draggable, ``False`` otherwise.\"\"\"\n  1115\t        return self._draggable is not None\n  1116\t\n  1117\t\n  1118\t# Helper functions to parse legend arguments for both `figure.legend` and\n  1119\t# `axes.legend`:\n      # ...\n```\n",
        "summary": "Found relevant code sections in the search results.",
        "terminal": false,
        "expect_correction": false,
        "properties": {
          "search_hits": [],
          "search_tokens": 3743,
          "new_span_ids": [
            "DraggableLegend",
            "DraggableLegend.__init__",
            "DraggableLegend.finalize_offset",
            "DraggableLegend._update_loc",
            "DraggableLegend._update_bbox_to_anchor",
            "Legend.set_draggable",
            "Legend.get_draggable"
          ]
        },
        "execution_completion": {
          "model": "claude-3-5-sonnet-20241022",
          "input": [
            {
              "role": "user",
              "content": "Search request:\nSearching for code using the query: legend draggable method implementation\n\nIdentify the relevant code sections in the search results to use them. \n\n<search_results>\nlib/matplotlib/legend.py\n```\n\n\n\n<span id='imports'>\n    23\t\n    24\timport itertools\n    25\timport logging\n    26\timport time\n    27\t\n    28\timport numpy as np\n    29\t\n    30\timport matplotlib as mpl\n    31\tfrom matplotlib import _api, _docstring, colors, offsetbox\n    32\tfrom matplotlib.artist import Artist, allow_rasterization\n    33\tfrom matplotlib.cbook import silent_list\n    34\tfrom matplotlib.font_manager import FontProperties\n    35\tfrom matplotlib.lines import Line2D\n    36\tfrom matplotlib.patches import (Patch, Rectangle, Shadow, FancyBboxPatch,\n    37\t                                StepPatch)\n    38\tfrom matplotlib.collections import (\n    39\t    Collection, CircleCollection, LineCollection, PathCollection,\n    40\t    PolyCollection, RegularPolyCollection)\n    41\tfrom matplotlib.text import Text\n    42\tfrom matplotlib.transforms import Bbox, BboxBase, TransformedBbox\n    43\tfrom matplotlib.transforms import BboxTransformTo, BboxTransformFrom\n    44\tfrom matplotlib.offsetbox import (\n    45\t    AnchoredOffsetbox, DraggableOffsetBox,\n    46\t    HPacker, VPacker,\n    47\t    DrawingArea, TextArea,\n    48\t)\n    49\tfrom matplotlib.container import ErrorbarContainer, BarContainer, StemContainer\n    50\tfrom . import legend_handler\n\n\n<span id='DraggableLegend'>\n    51\t\n    52\t\n    53\tclass DraggableLegend(DraggableOffsetBox):\n\n\n<span id='DraggableLegend.__init__'>\n    54\t    def __init__(self, legend, use_blit=False, update=\"loc\"):\n    55\t        \"\"\"\n    56\t        Wrapper around a `.Legend` to support mouse dragging.\n    57\t\n    58\t        Parameters\n    59\t        ----------\n    60\t        legend : `.Legend`\n    61\t            The `.Legend` instance to wrap.\n    62\t        use_blit : bool, optional\n    63\t            Use blitting for faster image composition. For details see\n    64\t            :ref:`func-animation`.\n    65\t        update : {'loc', 'bbox'}, optional\n    66\t            If \"loc\", update the *loc* parameter of the legend upon finalizing.\n    67\t            If \"bbox\", update the *bbox_to_anchor* parameter.\n    68\t        \"\"\"\n    69\t        self.legend = legend\n    70\t\n    71\t        _api.check_in_list([\"loc\", \"bbox\"], update=update)\n    72\t        self._update = update\n    73\t\n    74\t        super().__init__(legend, legend._legend_box, use_blit=use_blit)\n\n\n<span id='DraggableLegend.finalize_offset'>\n    75\t\n    76\t    def finalize_offset(self):\n    77\t        if self._update == \"loc\":\n    78\t            self._update_loc(self.get_loc_in_canvas())\n    79\t        elif self._update == \"bbox\":\n    80\t            self._bbox_to_anchor(self.get_loc_in_canvas())\n\n\n<span id='DraggableLegend._update_loc'>\n    81\t\n    82\t    def _update_loc(self, loc_in_canvas):\n    83\t        bbox = self.legend.get_bbox_to_anchor()\n    84\t        # if bbox has zero width or height, the transformation is\n    85\t        # ill-defined. Fall back to the default bbox_to_anchor.\n    86\t        if bbox.width == 0 or bbox.height == 0:\n    87\t            self.legend.set_bbox_to_anchor(None)\n    88\t            bbox = self.legend.get_bbox_to_anchor()\n    89\t        _bbox_transform = BboxTransformFrom(bbox)\n    90\t        self.legend._loc = tuple(_bbox_transform.transform(loc_in_canvas))\n\n\n<span id='DraggableLegend._update_bbox_to_anchor'>\n    91\t\n    92\t    def _update_bbox_to_anchor(self, loc_in_canvas):\n    93\t        loc_in_bbox = self.legend.axes.transAxes.transform(loc_in_canvas)\n    94\t        self.legend.set_bbox_to_anchor(loc_in_bbox)\n      # ...\n\n\n<span id='Legend'>\n   290\t\n   291\t\n   292\tclass Legend(Artist):\n   293\t    \"\"\"\n   294\t    Place a legend on the axes at location loc.\n   295\t    \"\"\"\n   296\t\n   297\t    # 'best' is only implemented for axes legends\n   298\t    codes = {'best': 0, **AnchoredOffsetbox.codes}\n   299\t    zorder = 5\n          # ...\n\n\n<span id='Legend.__init__'>\n   303\t\n   304\t    @_api.make_keyword_only(\"3.6\", \"loc\")\n   305\t    @_docstring.dedent_interpd\n   306\t    def __init__(\n   307\t        self, parent, handles, labels,\n   308\t        loc=None,\n   309\t        numpoints=None,      # number of points in the legend line\n   310\t        markerscale=None,    # relative size of legend markers vs. original\n   311\t        markerfirst=True,    # left/right ordering of legend marker and label\n   312\t        scatterpoints=None,  # number of scatter points\n   313\t        scatteryoffsets=None,\n   314\t        prop=None,           # properties for the legend texts\n   315\t        fontsize=None,       # keyword to set font size directly\n   316\t        labelcolor=None,     # keyword to set the text color\n   317\t\n   318\t        # spacing & pad defined as a fraction of the font-size\n   319\t        borderpad=None,      # whitespace inside the legend border\n   320\t        labelspacing=None,   # vertical space between the legend entries\n   321\t        handlelength=None,   # length of the legend handles\n   322\t        handleheight=None,   # height of the legend handles\n   323\t        handletextpad=None,  # pad between the legend handle and text\n   324\t        borderaxespad=None,  # pad between the axes and legend border\n   325\t        columnspacing=None,  # spacing between columns\n   326\t\n   327\t        ncols=1,     # number of columns\n   328\t        mode=None,  # horizontal distribution of columns: None or \"expand\"\n   329\t\n   330\t        fancybox=None,  # True: fancy box, False: rounded box, None: rcParam\n   331\t        shadow=None,\n   332\t        title=None,           # legend title\n   333\t        title_fontsize=None,  # legend title font size\n   334\t        framealpha=None,      # set frame alpha\n   335\t        edgecolor=None,       # frame patch edgecolor\n   336\t        facecolor=None,       # frame patch facecolor\n   337\t\n   338\t        bbox_to_anchor=None,  # bbox to which the legend will be anchored\n   339\t        bbox_transform=None,  # transform for the bbox\n   340\t        frameon=None,         # draw frame\n   341\t        handler_map=None,\n   342\t        title_fontproperties=None,  # properties for the legend title\n   343\t        alignment=\"center\",       # control the alignment within the legend box\n   344\t        *,\n   345\t        ncol=1  # synonym for ncols (backward compatibility)\n   346\t    ):\n   347\t        \"\"\"\n   348\t        Parameters\n   349\t        ----------\n   350\t        parent : `~matplotlib.axes.Axes` or `.Figure`\n   351\t            The artist that contains the legend.\n   352\t\n   353\t        handles : list of `.Artist`\n   354\t            A list of Artists (lines, patches) to be added to the legend.\n   355\t\n   356\t        labels : list of str\n   357\t            A list of labels to show next to the artists. The length of handles\n   358\t            and labels should be the same. If they are not, they are truncated\n   359\t            to the smaller of both lengths.\n   360\t\n   361\t        Other Parameters\n   362\t        ----------------\n   363\t        %(_legend_kw_doc)s\n   364\t\n   365\t        Notes\n   366\t        -----\n   367\t        Users can specify any arbitrary location for the legend using the\n   368\t        *bbox_to_anchor* keyword argument. *bbox_to_anchor* can be a\n   369\t        `.BboxBase` (or derived there from) or a tuple of 2 or 4 floats.\n   370\t        See `set_bbox_to_anchor` for more detail.\n   371\t\n   372\t        The legend location can be specified by setting *loc* with a tuple of\n   373\t        2 floats, which is interpreted as the lower-left corner of the legend\n   374\t        in the normalized axes coordinate.\n   375\t        \"\"\"\n   376\t        # local import only to avoid circularity\n   377\t        from matplotlib.axes import Axes\n   378\t        from matplotlib.figure import FigureBase\n   379\t\n   380\t        super().__init__()\n   381\t\n   382\t        if prop is None:\n   383\t            if fontsize is not None:\n   384\t                self.prop = FontProperties(size=fontsize)\n   385\t            else:\n   386\t                self.prop = FontProperties(\n   387\t                    size=mpl.rcParams[\"legend.fontsize\"])\n   388\t        else:\n   389\t            self.prop = FontProperties._from_any(prop)\n   390\t            if isinstance(prop, dict) and \"size\" not in prop:\n   391\t                self.prop.set_size(mpl.rcParams[\"legend.fontsize\"])\n   392\t\n   393\t        self._fontsize = self.prop.get_size_in_points()\n   394\t\n   395\t        self.texts = []\n   396\t        self.legendHandles = []\n   397\t        self._legend_title_box = None\n   398\t\n   399\t        #: A dictionary with the extra handler mappings for this Legend\n   400\t        #: instance.\n   401\t        self._custom_handler_map = handler_map\n   402\t\n   403\t        def val_or_rc(val, rc_name):\n   404\t            return val if val is not None else mpl.rcParams[rc_name]\n   405\t\n   406\t        self.numpoints = val_or_rc(numpoints, 'legend.numpoints')\n   407\t        self.markerscale = val_or_rc(markerscale, 'legend.markerscale')\n   408\t        self.scatterpoints = val_or_rc(scatterpoints, 'legend.scatterpoints')\n   409\t        self.borderpad = val_or_rc(borderpad, 'legend.borderpad')\n   410\t        self.labelspacing = val_or_rc(labelspacing, 'legend.labelspacing')\n   411\t        self.handlelength = val_or_rc(handlelength, 'legend.handlelength')\n   412\t        self.handleheight = val_or_rc(handleheight, 'legend.handleheight')\n   413\t        self.handletextpad = val_or_rc(handletextpad, 'legend.handletextpad')\n   414\t        self.borderaxespad = val_or_rc(borderaxespad, 'legend.borderaxespad')\n   415\t        self.columnspacing = val_or_rc(columnspacing, 'legend.columnspacing')\n   416\t        self.shadow = val_or_rc(shadow, 'legend.shadow')\n   417\t        # trim handles and labels if illegal label...\n   418\t        _lab, _hand = [], []\n   419\t        for label, handle in zip(labels, handles):\n   420\t            if isinstance(label, str) and label.startswith('_'):\n   421\t                _api.warn_external(f\"The label {label!r} of {handle!r} starts \"\n   422\t                                   \"with '_'. It is thus excluded from the \"\n   423\t                                   \"legend.\")\n   424\t            else:\n   425\t                _lab.append(label)\n   426\t                _hand.append(handle)\n   427\t        labels, handles = _lab, _hand\n   428\t\n   429\t        handles = list(handles)\n   430\t        if len(handles) < 2:\n   431\t            ncols = 1\n   432\t        self._ncols = ncols if ncols != 1 else ncol\n   433\t\n   434\t        if self.numpoints <= 0:\n   435\t            raise ValueError(\"numpoints must be > 0; it was %d\" % numpoints)\n   436\t\n   437\t        # introduce y-offset for handles of the scatter plot\n   438\t        if scatteryoffsets is None:\n   439\t            self._scatteryoffsets = np.array([3. / 8., 4. / 8., 2.5 / 8.])\n   440\t        else:\n   441\t            self._scatteryoffsets = np.asarray(scatteryoffsets)\n   442\t        reps = self.scatterpoints // len(self._scatteryoffsets) + 1\n   443\t        self._scatteryoffsets = np.tile(self._scatteryoffsets,\n   444\t                                        reps)[:self.scatterpoints]\n   445\t\n   446\t        # _legend_box is a VPacker instance that contains all\n   447\t        # legend items and will be initialized from _init_legend_box()\n   448\t        # method.\n   449\t        self._legend_box = None\n   450\t\n   451\t        if isinstance(parent, Axes):\n   452\t            self.isaxes = True\n   453\t            self.axes = parent\n   454\t            self.set_figure(parent.figure)\n   455\t        elif isinstance(parent, FigureBase):\n   456\t            self.isaxes = False\n   457\t            self.set_figure(parent)\n   458\t        else:\n   459\t            raise TypeError(\n   460\t                \"Legend needs either Axes or FigureBase as parent\"\n   461\t            )\n   462\t        self.parent = parent\n   463\t\n   464\t        self._loc_used_default = loc is None\n   465\t        if loc is None:\n   466\t            loc = mpl.rcParams[\"legend.loc\"]\n   467\t            if not self.isaxes and loc in [0, 'best']:\n   468\t                loc = 'upper right'\n   469\t        if isinstance(loc, str):\n   470\t            loc = _api.check_getitem(self.codes, loc=loc)\n   471\t        if not self.isaxes and loc == 0:\n   472\t            raise ValueError(\n   473\t                \"Automatic legend placement (loc='best') not implemented for \"\n   474\t                \"figure legend\")\n   475\t\n   476\t        self._mode = mode\n   477\t        self.set_bbox_to_anchor(bbox_to_anchor, bbox_transform)\n   478\t\n   479\t        # We use FancyBboxPatch to draw a legend frame. The location\n   480\t        # and size of the box will be updated during the drawing time.\n   481\t\n   482\t        if facecolor is None:\n   483\t            facecolor = mpl.rcParams[\"legend.facecolor\"]\n   484\t        if facecolor == 'inherit':\n   485\t            facecolor = mpl.rcParams[\"axes.facecolor\"]\n   486\t\n   487\t        if edgecolor is None:\n   488\t            edgecolor = mpl.rcParams[\"legend.edgecolor\"]\n   489\t        if edgecolor == 'inherit':\n   490\t            edgecolor = mpl.rcParams[\"axes.edgecolor\"]\n   491\t\n   492\t        if fancybox is None:\n   493\t            fancybox = mpl.rcParams[\"legend.fancybox\"]\n   494\t\n   495\t        self.legendPatch = FancyBboxPatch(\n   496\t            xy=(0, 0), width=1, height=1,\n   497\t            facecolor=facecolor, edgecolor=edgecolor,\n   498\t            # If shadow is used, default to alpha=1 (#8943).\n   499\t            alpha=(framealpha if framealpha is not None\n   500\t                   else 1 if shadow\n   501\t                   else mpl.rcParams[\"legend.framealpha\"]),\n   502\t            # The width and height of the legendPatch will be set (in draw())\n   503\t            # to the length that includes the padding. Thus we set pad=0 here.\n   504\t            boxstyle=(\"round,pad=0,rounding_size=0.2\" if fancybox\n   505\t                      else \"square,pad=0\"),\n   506\t            mutation_scale=self._fontsize,\n   507\t            snap=True,\n   508\t            visible=(frameon if frameon is not None\n   509\t                     else mpl.rcParams[\"legend.frameon\"])\n   510\t        )\n   511\t        self._set_artist_props(self.legendPatch)\n   512\t\n   513\t        _api.check_in_list([\"center\", \"left\", \"right\"], alignment=alignment)\n   514\t        self._alignment = alignment\n   515\t\n   516\t        # init with null renderer\n   517\t        self._init_legend_box(handles, labels, markerfirst)\n   518\t\n   519\t        tmp = self._loc_used_default\n   520\t        self._set_loc(loc)\n   521\t        self._loc_used_default = tmp  # ignore changes done by _set_loc\n   522\t\n   523\t        # figure out title font properties:\n   524\t        if title_fontsize is not None and title_fontproperties is not None:\n   525\t            raise ValueError(\n   526\t                \"title_fontsize and title_fontproperties can't be specified \"\n   527\t                \"at the same time. Only use one of them. \")\n   528\t        title_prop_fp = FontProperties._from_any(title_fontproperties)\n   529\t        if isinstance(title_fontproperties, dict):\n   530\t            if \"size\" not in title_fontproperties:\n   531\t                title_fontsize = mpl.rcParams[\"legend.title_fontsize\"]\n   532\t                title_prop_fp.set_size(title_fontsize)\n   533\t        elif title_fontsize is not None:\n   534\t            title_prop_fp.set_size(title_fontsize)\n   535\t        elif not isinstance(title_fontproperties, FontProperties):\n   536\t            title_fontsize = mpl.rcParams[\"legend.title_fontsize\"]\n   537\t            title_prop_fp.set_size(title_fontsize)\n   538\t\n   539\t        self.set_title(title, prop=title_prop_fp)\n   540\t        self._draggable = None\n   541\t\n   542\t        # set the text color\n   543\t\n   544\t        color_getters = {  # getter function depends on line or patch\n   545\t            'linecolor':       ['get_color',           'get_facecolor'],\n   546\t            'markerfacecolor': ['get_markerfacecolor', 'get_facecolor'],\n   547\t            'mfc':             ['get_markerfacecolor', 'get_facecolor'],\n   548\t            'markeredgecolor': ['get_markeredgecolor', 'get_edgecolor'],\n   549\t            'mec':             ['get_markeredgecolor', 'get_edgecolor'],\n   550\t        }\n   551\t        if labelcolor is None:\n   552\t            if mpl.rcParams['legend.labelcolor'] is not None:\n   553\t                labelcolor = mpl.rcParams['legend.labelcolor']\n   554\t            else:\n   555\t                labelcolor = mpl.rcParams['text.color']\n   556\t        if isinstance(labelcolor, str) and labelcolor in color_getters:\n   557\t            getter_names = color_getters[labelcolor]\n   558\t            for handle, text in zip(self.legendHandles, self.texts):\n   559\t                for getter_name in getter_names:\n   560\t                    try:\n   561\t                        color = getattr(handle, getter_name)()\n   562\t                        text.set_color(color)\n   563\t                        break\n   564\t                    except AttributeError:\n   565\t                        pass\n   566\t        elif isinstance(labelcolor, str) and labelcolor == 'none':\n   567\t            for text in self.texts:\n   568\t                text.set_color(labelcolor)\n   569\t        elif np.iterable(labelcolor):\n   570\t            for text, color in zip(self.texts,\n   571\t                                   itertools.cycle(\n   572\t                                       colors.to_rgba_array(labelcolor))):\n   573\t                text.set_color(color)\n   574\t        else:\n   575\t            raise ValueError(f\"Invalid labelcolor: {labelcolor!r}\")\n          # ...\n\n\n<span id='Legend.draw'>\n   622\t\n   623\t    @allow_rasterization\n   624\t    def draw(self, renderer):\n   625\t        # docstring inherited\n   626\t        if not self.get_visible():\n   627\t            return\n   628\t\n   629\t        renderer.open_group('legend', gid=self.get_gid())\n   630\t\n   631\t        fontsize = renderer.points_to_pixels(self._fontsize)\n   632\t\n   633\t        # if mode == fill, set the width of the legend_box to the\n   634\t        # width of the parent (minus pads)\n   635\t        if self._mode in [\"expand\"]:\n   636\t            pad = 2 * (self.borderaxespad + self.borderpad) * fontsize\n   637\t            self._legend_box.set_width(self.get_bbox_to_anchor().width - pad)\n   638\t\n   639\t        # update the location and size of the legend. This needs to\n   640\t        # be done in any case to clip the figure right.\n   641\t        bbox = self._legend_box.get_window_extent(renderer)\n   642\t        self.legendPatch.set_bounds(bbox.bounds)\n   643\t        self.legendPatch.set_mutation_scale(fontsize)\n   644\t\n   645\t        if self.shadow:\n   646\t            Shadow(self.legendPatch, 2, -2).draw(renderer)\n   647\t\n   648\t        self.legendPatch.draw(renderer)\n   649\t        self._legend_box.draw(renderer)\n   650\t\n   651\t        renderer.close_group('legend')\n   652\t        self.stale = False\n   653\t\n   654\t    # _default_handler_map defines the default mapping between plot\n   655\t    # elements and the legend handlers.\n          # ...\n\n\n<span id='Legend.contains'>\n  1072\t\n  1073\t    def contains(self, event):\n  1074\t        inside, info = self._default_contains(event)\n  1075\t        if inside is not None:\n  1076\t            return inside, info\n  1077\t        return self.legendPatch.contains(event)\n\n\n<span id='Legend.set_draggable'>\n  1078\t\n  1079\t    def set_draggable(self, state, use_blit=False, update='loc'):\n  1080\t        \"\"\"\n  1081\t        Enable or disable mouse dragging support of the legend.\n  1082\t\n  1083\t        Parameters\n  1084\t        ----------\n  1085\t        state : bool\n  1086\t            Whether mouse dragging is enabled.\n  1087\t        use_blit : bool, optional\n  1088\t            Use blitting for faster image composition. For details see\n  1089\t            :ref:`func-animation`.\n  1090\t        update : {'loc', 'bbox'}, optional\n  1091\t            The legend parameter to be changed when dragged:\n  1092\t\n  1093\t            - 'loc': update the *loc* parameter of the legend\n  1094\t            - 'bbox': update the *bbox_to_anchor* parameter of the legend\n  1095\t\n  1096\t        Returns\n  1097\t        -------\n  1098\t        `.DraggableLegend` or *None*\n  1099\t            If *state* is ``True`` this returns the `.DraggableLegend` helper\n  1100\t            instance. Otherwise this returns *None*.\n  1101\t        \"\"\"\n  1102\t        if state:\n  1103\t            if self._draggable is None:\n  1104\t                self._draggable = DraggableLegend(self,\n  1105\t                                                  use_blit,\n  1106\t                                                  update=update)\n  1107\t        else:\n  1108\t            if self._draggable is not None:\n  1109\t                self._draggable.disconnect()\n  1110\t            self._draggable = None\n  1111\t        return self._draggable\n\n\n<span id='Legend.get_draggable'>\n  1112\t\n  1113\t    def get_draggable(self):\n  1114\t        \"\"\"Return ``True`` if the legend is draggable, ``False`` otherwise.\"\"\"\n  1115\t        return self._draggable is not None\n\n\n<span id='Legend.get_draggable'>\n  1116\t\n  1117\t\n  1118\t# Helper functions to parse legend arguments for both `figure.legend` and\n  1119\t# `axes.legend`:\n      # ...\n```\n\n\nlib/matplotlib/offsetbox.py\n```\n\n\n\n<span id='imports'>\n    24\t\n    25\timport numpy as np\n    26\t\n    27\timport matplotlib as mpl\n    28\tfrom matplotlib import _api, _docstring\n    29\timport matplotlib.artist as martist\n    30\timport matplotlib.path as mpath\n    31\timport matplotlib.text as mtext\n    32\timport matplotlib.transforms as mtransforms\n    33\tfrom matplotlib.font_manager import FontProperties\n    34\tfrom matplotlib.image import BboxImage\n    35\tfrom matplotlib.patches import (\n    36\t    FancyBboxPatch, FancyArrowPatch, bbox_artist as mbbox_artist)\n    37\tfrom matplotlib.transforms import Bbox, BboxBase, TransformedBbox\n    38\t\n    39\t\n    40\tDEBUG = False\n    41\t\n    42\t\n    43\t# for debugging use\n      # ...\n\n\n<span id='DraggableBase'>\n  1476\t\n  1477\t\n  1478\tclass DraggableBase:\n  1479\t    \"\"\"\n  1480\t    Helper base class for a draggable artist (legend, offsetbox).\n  1481\t\n  1482\t    Derived classes must override the following methods::\n  1483\t\n  1484\t        def save_offset(self):\n  1485\t            '''\n  1486\t            Called when the object is picked for dragging; should save the\n  1487\t            reference position of the artist.\n  1488\t            '''\n  1489\t\n  1490\t        def update_offset(self, dx, dy):\n  1491\t            '''\n  1492\t            Called during the dragging; (*dx*, *dy*) is the pixel offset from\n  1493\t            the point where the mouse drag started.\n  1494\t            '''\n  1495\t\n  1496\t    Optionally, you may override the following method::\n  1497\t\n  1498\t        def finalize_offset(self):\n  1499\t            '''Called when the mouse is released.'''\n  1500\t\n  1501\t    In the current implementation of `.DraggableLegend` and\n  1502\t    `DraggableAnnotation`, `update_offset` places the artists in display\n  1503\t    coordinates, and `finalize_offset` recalculates their position in axes\n  1504\t    coordinate and set a relevant attribute.\n  1505\t    \"\"\"\n          # ...\n      # ...\n```\n\n</search_result>\n"
            }
          ],
          "response": {
            "id": "msg_01Fvjowx1tpjDviBev57PU2f",
            "content": [
              {
                "text": "I'll analyze the search results for code related to legend draggable method implementation.\n\nThe most relevant code sections are found in `lib/matplotlib/legend.py` and involve the `DraggableLegend` class and the `Legend.set_draggable()` method. Here's my analysis:\n\n1. The main implementation of draggable functionality is in the `DraggableLegend` class (lines 53-94) which inherits from `DraggableOffsetBox`. This class handles the mouse dragging behavior of the legend.\n\n2. The `Legend.set_draggable()` method (lines 1079-1111) is the primary interface for enabling/disabling legend dragging functionality.\n\n3. These sections contain the core implementation of making legends draggable in matplotlib.\n\nLet me identify the relevant code spans:",
                "type": "text"
              },
              {
                "id": "toolu_01VFkXGbaSF8iv9QSFHq56KE",
                "input": {
                  "scratch_pad": "The most relevant code sections for legend draggable functionality are:\n\n1. DraggableLegend class definition and implementation (lines 53-94)\n   - Contains the core dragging functionality\n   - Includes methods for initializing dragging and updating legend position\n\n2. Legend.set_draggable method (lines 1079-1111)\n   - Main interface for enabling/disabling dragging\n   - Creates DraggableLegend instance when dragging is enabled\n\n3. Legend.get_draggable method (lines 1113-1115)\n   - Helper method to check if legend is currently draggable",
                  "identified_spans": [
                    {
                      "file_path": "lib/matplotlib/legend.py",
                      "start_line": 53,
                      "end_line": 94
                    },
                    {
                      "file_path": "lib/matplotlib/legend.py",
                      "start_line": 1079,
                      "end_line": 1111
                    },
                    {
                      "file_path": "lib/matplotlib/legend.py",
                      "start_line": 1113,
                      "end_line": 1115
                    }
                  ]
                },
                "name": "Action",
                "type": "tool_use"
              }
            ],
            "model": "claude-3-5-sonnet-20241022",
            "role": "assistant",
            "stop_reason": "tool_use",
            "stop_sequence": null,
            "type": "message",
            "usage": {
              "cache_creation_input_tokens": 0,
              "cache_read_input_tokens": 0,
              "input_tokens": 7955,
              "output_tokens": 530
            }
          },
          "usage": {
            "completion_cost": 0.031815,
            "completion_tokens": 530,
            "prompt_tokens": 7955,
            "cached_tokens": 0
          }
        }
      },
      "file_context": {
        "max_tokens": 8000,
        "files": [
          {
            "file_path": "lib/matplotlib/legend.py",
            "spans": [
              {
                "span_id": "imports",
                "pinned": false
              },
              {
                "span_id": "Legend",
                "pinned": false
              },
              {
                "span_id": "Legend.__init__",
                "pinned": false
              },
              {
                "span_id": "Legend.draw",
                "pinned": false
              },
              {
                "span_id": "DraggableLegend",
                "pinned": false
              },
              {
                "span_id": "DraggableLegend.__init__",
                "pinned": false
              },
              {
                "span_id": "DraggableLegend.finalize_offset",
                "pinned": false
              },
              {
                "span_id": "DraggableLegend._update_loc",
                "pinned": false
              },
              {
                "span_id": "DraggableLegend._update_bbox_to_anchor",
                "pinned": false
              },
              {
                "span_id": "Legend.set_draggable",
                "pinned": false
              },
              {
                "span_id": "Legend.get_draggable",
                "pinned": false
              }
            ],
            "show_all_spans": false,
            "patch": null
          }
        ]
      },
      "completions": {
        "build_action": {
          "model": "claude-3-5-sonnet-20241022",
          "input": [
            {
              "role": "user",
              "content": "<task>\nlegend draggable as keyword\n<!--To help us understand and resolve your issue, please fill out the form to the best of your ability.-->\r\n<!--You can feel free to delete the sections that do not apply.-->\r\n\r\n### Feature request\r\n\r\n**There is not keyword to make legend draggable at creation**\r\n\r\n<!--A short 1-2 sentences that succinctly describes the bug-->\r\n\r\nIs there a code reason why one can not add a \"draggable=True\" keyword to the __init__ function for Legend?  This would be more handy than having to call it after legend creation.  And, naively, it would seem simple to do.  But maybe there is a reason why it would not work?\n\n</task>"
            },
            {
              "role": "assistant",
              "content": [
                {
                  "type": "text",
                  "text": "<thoughts>\n1. First, I need to locate the Legend class implementation to understand its current initialization\n2. Then I'll check if there are any technical limitations for adding the draggable parameter\n3. I'll also look for any tests related to legend draggability to understand the current testing approach\n4. Finally, I'll implement the change if there are no blockers\n</thoughts>"
                },
                {
                  "id": "call_85bc3e3e",
                  "input": {
                    "file_pattern": null,
                    "class_name": "Legend"
                  },
                  "type": "tool_use",
                  "name": "FindClass",
                  "cache_control": {
                    "type": "ephemeral"
                  }
                }
              ]
            },
            {
              "role": "user",
              "content": [
                {
                  "tool_use_id": "call_85bc3e3e",
                  "content": "<observation>\nFound 40 code sections.\n\nViewed relevant code:\nlib/matplotlib/legend.py\n```\n\n    23\t\n    24\timport itertools\n    25\timport logging\n    26\timport time\n    27\t\n    28\timport numpy as np\n    29\t\n    30\timport matplotlib as mpl\n    31\tfrom matplotlib import _api, _docstring, colors, offsetbox\n    32\tfrom matplotlib.artist import Artist, allow_rasterization\n    33\tfrom matplotlib.cbook import silent_list\n    34\tfrom matplotlib.font_manager import FontProperties\n    35\tfrom matplotlib.lines import Line2D\n    36\tfrom matplotlib.patches import (Patch, Rectangle, Shadow, FancyBboxPatch,\n    37\t                                StepPatch)\n    38\tfrom matplotlib.collections import (\n    39\t    Collection, CircleCollection, LineCollection, PathCollection,\n    40\t    PolyCollection, RegularPolyCollection)\n    41\tfrom matplotlib.text import Text\n    42\tfrom matplotlib.transforms import Bbox, BboxBase, TransformedBbox\n    43\tfrom matplotlib.transforms import BboxTransformTo, BboxTransformFrom\n    44\tfrom matplotlib.offsetbox import (\n    45\t    AnchoredOffsetbox, DraggableOffsetBox,\n    46\t    HPacker, VPacker,\n    47\t    DrawingArea, TextArea,\n    48\t)\n    49\tfrom matplotlib.container import ErrorbarContainer, BarContainer, StemContainer\n    50\tfrom . import legend_handler\n      # ...\n   290\t\n   291\t\n   292\tclass Legend(Artist):\n   293\t    \"\"\"\n   294\t    Place a legend on the axes at location loc.\n   295\t    \"\"\"\n   296\t\n   297\t    # 'best' is only implemented for axes legends\n   298\t    codes = {'best': 0, **AnchoredOffsetbox.codes}\n   299\t    zorder = 5\n          # ...\n   303\t\n   304\t    @_api.make_keyword_only(\"3.6\", \"loc\")\n   305\t    @_docstring.dedent_interpd\n   306\t    def __init__(\n   307\t        self, parent, handles, labels,\n   308\t        loc=None,\n   309\t        numpoints=None,      # number of points in the legend line\n   310\t        markerscale=None,    # relative size of legend markers vs. original\n   311\t        markerfirst=True,    # left/right ordering of legend marker and label\n   312\t        scatterpoints=None,  # number of scatter points\n   313\t        scatteryoffsets=None,\n   314\t        prop=None,           # properties for the legend texts\n   315\t        fontsize=None,       # keyword to set font size directly\n   316\t        labelcolor=None,     # keyword to set the text color\n   317\t\n   318\t        # spacing & pad defined as a fraction of the font-size\n   319\t        borderpad=None,      # whitespace inside the legend border\n   320\t        labelspacing=None,   # vertical space between the legend entries\n   321\t        handlelength=None,   # length of the legend handles\n   322\t        handleheight=None,   # height of the legend handles\n   323\t        handletextpad=None,  # pad between the legend handle and text\n   324\t        borderaxespad=None,  # pad between the axes and legend border\n   325\t        columnspacing=None,  # spacing between columns\n   326\t\n   327\t        ncols=1,     # number of columns\n   328\t        mode=None,  # horizontal distribution of columns: None or \"expand\"\n   329\t\n   330\t        fancybox=None,  # True: fancy box, False: rounded box, None: rcParam\n   331\t        shadow=None,\n   332\t        title=None,           # legend title\n   333\t        title_fontsize=None,  # legend title font size\n   334\t        framealpha=None,      # set frame alpha\n   335\t        edgecolor=None,       # frame patch edgecolor\n   336\t        facecolor=None,       # frame patch facecolor\n   337\t\n   338\t        bbox_to_anchor=None,  # bbox to which the legend will be anchored\n   339\t        bbox_transform=None,  # transform for the bbox\n   340\t        frameon=None,         # draw frame\n   341\t        handler_map=None,\n   342\t        title_fontproperties=None,  # properties for the legend title\n   343\t        alignment=\"center\",       # control the alignment within the legend box\n   344\t        *,\n   345\t        ncol=1  # synonym for ncols (backward compatibility)\n   346\t    ):\n   347\t        \"\"\"\n   348\t        Parameters\n   349\t        ----------\n   350\t        parent : `~matplotlib.axes.Axes` or `.Figure`\n   351\t            The artist that contains the legend.\n   352\t\n   353\t        handles : list of `.Artist`\n   354\t            A list of Artists (lines, patches) to be added to the legend.\n   355\t\n   356\t        labels : list of str\n   357\t            A list of labels to show next to the artists. The length of handles\n   358\t            and labels should be the same. If they are not, they are truncated\n   359\t            to the smaller of both lengths.\n   360\t\n   361\t        Other Parameters\n   362\t        ----------------\n   363\t        %(_legend_kw_doc)s\n   364\t\n   365\t        Notes\n   366\t        -----\n   367\t        Users can specify any arbitrary location for the legend using the\n   368\t        *bbox_to_anchor* keyword argument. *bbox_to_anchor* can be a\n   369\t        `.BboxBase` (or derived there from) or a tuple of 2 or 4 floats.\n   370\t        See `set_bbox_to_anchor` for more detail.\n   371\t\n   372\t        The legend location can be specified by setting *loc* with a tuple of\n   373\t        2 floats, which is interpreted as the lower-left corner of the legend\n   374\t        in the normalized axes coordinate.\n   375\t        \"\"\"\n   376\t        # local import only to avoid circularity\n   377\t        from matplotlib.axes import Axes\n   378\t        from matplotlib.figure import FigureBase\n   379\t\n   380\t        super().__init__()\n   381\t\n   382\t        if prop is None:\n   383\t            if fontsize is not None:\n   384\t                self.prop = FontProperties(size=fontsize)\n   385\t            else:\n   386\t                self.prop = FontProperties(\n   387\t                    size=mpl.rcParams[\"legend.fontsize\"])\n   388\t        else:\n   389\t            self.prop = FontProperties._from_any(prop)\n   390\t            if isinstance(prop, dict) and \"size\" not in prop:\n   391\t                self.prop.set_size(mpl.rcParams[\"legend.fontsize\"])\n   392\t\n   393\t        self._fontsize = self.prop.get_size_in_points()\n   394\t\n   395\t        self.texts = []\n   396\t        self.legendHandles = []\n   397\t        self._legend_title_box = None\n   398\t\n   399\t        #: A dictionary with the extra handler mappings for this Legend\n   400\t        #: instance.\n   401\t        self._custom_handler_map = handler_map\n   402\t\n   403\t        def val_or_rc(val, rc_name):\n   404\t            return val if val is not None else mpl.rcParams[rc_name]\n   405\t\n   406\t        self.numpoints = val_or_rc(numpoints, 'legend.numpoints')\n   407\t        self.markerscale = val_or_rc(markerscale, 'legend.markerscale')\n   408\t        self.scatterpoints = val_or_rc(scatterpoints, 'legend.scatterpoints')\n   409\t        self.borderpad = val_or_rc(borderpad, 'legend.borderpad')\n   410\t        self.labelspacing = val_or_rc(labelspacing, 'legend.labelspacing')\n   411\t        self.handlelength = val_or_rc(handlelength, 'legend.handlelength')\n   412\t        self.handleheight = val_or_rc(handleheight, 'legend.handleheight')\n   413\t        self.handletextpad = val_or_rc(handletextpad, 'legend.handletextpad')\n   414\t        self.borderaxespad = val_or_rc(borderaxespad, 'legend.borderaxespad')\n   415\t        self.columnspacing = val_or_rc(columnspacing, 'legend.columnspacing')\n   416\t        self.shadow = val_or_rc(shadow, 'legend.shadow')\n   417\t        # trim handles and labels if illegal label...\n   418\t        _lab, _hand = [], []\n   419\t        for label, handle in zip(labels, handles):\n   420\t            if isinstance(label, str) and label.startswith('_'):\n   421\t                _api.warn_external(f\"The label {label!r} of {handle!r} starts \"\n   422\t                                   \"with '_'. It is thus excluded from the \"\n   423\t                                   \"legend.\")\n   424\t            else:\n   425\t                _lab.append(label)\n   426\t                _hand.append(handle)\n   427\t        labels, handles = _lab, _hand\n   428\t\n   429\t        handles = list(handles)\n   430\t        if len(handles) < 2:\n   431\t            ncols = 1\n   432\t        self._ncols = ncols if ncols != 1 else ncol\n   433\t\n   434\t        if self.numpoints <= 0:\n   435\t            raise ValueError(\"numpoints must be > 0; it was %d\" % numpoints)\n   436\t\n   437\t        # introduce y-offset for handles of the scatter plot\n   438\t        if scatteryoffsets is None:\n   439\t            self._scatteryoffsets = np.array([3. / 8., 4. / 8., 2.5 / 8.])\n   440\t        else:\n   441\t            self._scatteryoffsets = np.asarray(scatteryoffsets)\n   442\t        reps = self.scatterpoints // len(self._scatteryoffsets) + 1\n   443\t        self._scatteryoffsets = np.tile(self._scatteryoffsets,\n   444\t                                        reps)[:self.scatterpoints]\n   445\t\n   446\t        # _legend_box is a VPacker instance that contains all\n   447\t        # legend items and will be initialized from _init_legend_box()\n   448\t        # method.\n   449\t        self._legend_box = None\n   450\t\n   451\t        if isinstance(parent, Axes):\n   452\t            self.isaxes = True\n   453\t            self.axes = parent\n   454\t            self.set_figure(parent.figure)\n   455\t        elif isinstance(parent, FigureBase):\n   456\t            self.isaxes = False\n   457\t            self.set_figure(parent)\n   458\t        else:\n   459\t            raise TypeError(\n   460\t                \"Legend needs either Axes or FigureBase as parent\"\n   461\t            )\n   462\t        self.parent = parent\n   463\t\n   464\t        self._loc_used_default = loc is None\n   465\t        if loc is None:\n   466\t            loc = mpl.rcParams[\"legend.loc\"]\n   467\t            if not self.isaxes and loc in [0, 'best']:\n   468\t                loc = 'upper right'\n   469\t        if isinstance(loc, str):\n   470\t            loc = _api.check_getitem(self.codes, loc=loc)\n   471\t        if not self.isaxes and loc == 0:\n   472\t            raise ValueError(\n   473\t                \"Automatic legend placement (loc='best') not implemented for \"\n   474\t                \"figure legend\")\n   475\t\n   476\t        self._mode = mode\n   477\t        self.set_bbox_to_anchor(bbox_to_anchor, bbox_transform)\n   478\t\n   479\t        # We use FancyBboxPatch to draw a legend frame. The location\n   480\t        # and size of the box will be updated during the drawing time.\n   481\t\n   482\t        if facecolor is None:\n   483\t            facecolor = mpl.rcParams[\"legend.facecolor\"]\n   484\t        if facecolor == 'inherit':\n   485\t            facecolor = mpl.rcParams[\"axes.facecolor\"]\n   486\t\n   487\t        if edgecolor is None:\n   488\t            edgecolor = mpl.rcParams[\"legend.edgecolor\"]\n   489\t        if edgecolor == 'inherit':\n   490\t            edgecolor = mpl.rcParams[\"axes.edgecolor\"]\n   491\t\n   492\t        if fancybox is None:\n   493\t            fancybox = mpl.rcParams[\"legend.fancybox\"]\n   494\t\n   495\t        self.legendPatch = FancyBboxPatch(\n   496\t            xy=(0, 0), width=1, height=1,\n   497\t            facecolor=facecolor, edgecolor=edgecolor,\n   498\t            # If shadow is used, default to alpha=1 (#8943).\n   499\t            alpha=(framealpha if framealpha is not None\n   500\t                   else 1 if shadow\n   501\t                   else mpl.rcParams[\"legend.framealpha\"]),\n   502\t            # The width and height of the legendPatch will be set (in draw())\n   503\t            # to the length that includes the padding. Thus we set pad=0 here.\n   504\t            boxstyle=(\"round,pad=0,rounding_size=0.2\" if fancybox\n   505\t                      else \"square,pad=0\"),\n   506\t            mutation_scale=self._fontsize,\n   507\t            snap=True,\n   508\t            visible=(frameon if frameon is not None\n   509\t                     else mpl.rcParams[\"legend.frameon\"])\n   510\t        )\n   511\t        self._set_artist_props(self.legendPatch)\n   512\t\n   513\t        _api.check_in_list([\"center\", \"left\", \"right\"], alignment=alignment)\n   514\t        self._alignment = alignment\n   515\t\n   516\t        # init with null renderer\n   517\t        self._init_legend_box(handles, labels, markerfirst)\n   518\t\n   519\t        tmp = self._loc_used_default\n   520\t        self._set_loc(loc)\n   521\t        self._loc_used_default = tmp  # ignore changes done by _set_loc\n   522\t\n   523\t        # figure out title font properties:\n   524\t        if title_fontsize is not None and title_fontproperties is not None:\n   525\t            raise ValueError(\n   526\t                \"title_fontsize and title_fontproperties can't be specified \"\n   527\t                \"at the same time. Only use one of them. \")\n   528\t        title_prop_fp = FontProperties._from_any(title_fontproperties)\n   529\t        if isinstance(title_fontproperties, dict):\n   530\t            if \"size\" not in title_fontproperties:\n   531\t                title_fontsize = mpl.rcParams[\"legend.title_fontsize\"]\n   532\t                title_prop_fp.set_size(title_fontsize)\n   533\t        elif title_fontsize is not None:\n   534\t            title_prop_fp.set_size(title_fontsize)\n   535\t        elif not isinstance(title_fontproperties, FontProperties):\n   536\t            title_fontsize = mpl.rcParams[\"legend.title_fontsize\"]\n   537\t            title_prop_fp.set_size(title_fontsize)\n   538\t\n   539\t        self.set_title(title, prop=title_prop_fp)\n   540\t        self._draggable = None\n   541\t\n   542\t        # set the text color\n   543\t\n   544\t        color_getters = {  # getter function depends on line or patch\n   545\t            'linecolor':       ['get_color',           'get_facecolor'],\n   546\t            'markerfacecolor': ['get_markerfacecolor', 'get_facecolor'],\n   547\t            'mfc':             ['get_markerfacecolor', 'get_facecolor'],\n   548\t            'markeredgecolor': ['get_markeredgecolor', 'get_edgecolor'],\n   549\t            'mec':             ['get_markeredgecolor', 'get_edgecolor'],\n   550\t        }\n   551\t        if labelcolor is None:\n   552\t            if mpl.rcParams['legend.labelcolor'] is not None:\n   553\t                labelcolor = mpl.rcParams['legend.labelcolor']\n   554\t            else:\n   555\t                labelcolor = mpl.rcParams['text.color']\n   556\t        if isinstance(labelcolor, str) and labelcolor in color_getters:\n   557\t            getter_names = color_getters[labelcolor]\n   558\t            for handle, text in zip(self.legendHandles, self.texts):\n   559\t                for getter_name in getter_names:\n   560\t                    try:\n   561\t                        color = getattr(handle, getter_name)()\n   562\t                        text.set_color(color)\n   563\t                        break\n   564\t                    except AttributeError:\n   565\t                        pass\n   566\t        elif isinstance(labelcolor, str) and labelcolor == 'none':\n   567\t            for text in self.texts:\n   568\t                text.set_color(labelcolor)\n   569\t        elif np.iterable(labelcolor):\n   570\t            for text, color in zip(self.texts,\n   571\t                                   itertools.cycle(\n   572\t                                       colors.to_rgba_array(labelcolor))):\n   573\t                text.set_color(color)\n   574\t        else:\n   575\t            raise ValueError(f\"Invalid labelcolor: {labelcolor!r}\")\n          # ...\n   622\t\n   623\t    @allow_rasterization\n   624\t    def draw(self, renderer):\n   625\t        # docstring inherited\n   626\t        if not self.get_visible():\n   627\t            return\n   628\t\n   629\t        renderer.open_group('legend', gid=self.get_gid())\n   630\t\n   631\t        fontsize = renderer.points_to_pixels(self._fontsize)\n   632\t\n   633\t        # if mode == fill, set the width of the legend_box to the\n   634\t        # width of the parent (minus pads)\n   635\t        if self._mode in [\"expand\"]:\n   636\t            pad = 2 * (self.borderaxespad + self.borderpad) * fontsize\n   637\t            self._legend_box.set_width(self.get_bbox_to_anchor().width - pad)\n   638\t\n   639\t        # update the location and size of the legend. This needs to\n   640\t        # be done in any case to clip the figure right.\n   641\t        bbox = self._legend_box.get_window_extent(renderer)\n   642\t        self.legendPatch.set_bounds(bbox.bounds)\n   643\t        self.legendPatch.set_mutation_scale(fontsize)\n   644\t\n   645\t        if self.shadow:\n   646\t            Shadow(self.legendPatch, 2, -2).draw(renderer)\n   647\t\n   648\t        self.legendPatch.draw(renderer)\n   649\t        self._legend_box.draw(renderer)\n   650\t\n   651\t        renderer.close_group('legend')\n   652\t        self.stale = False\n   653\t\n   654\t    # _default_handler_map defines the default mapping between plot\n   655\t    # elements and the legend handlers.\n          # ...\n      # ...\n```\n\n</observation>",
                  "type": "tool_result",
                  "cache_control": {
                    "type": "ephemeral"
                  }
                }
              ]
            }
          ],
          "response": {
            "id": "msg_015Z2mD9NwTv1D7nJEjXYGip",
            "content": [
              {
                "text": "<thoughts>\n1. I found the Legend class implementation in lib/matplotlib/legend.py\n2. I notice that:\n   - The Legend class already has a `_draggable` attribute initialized as None in __init__ (line 540)\n   - The class inherits from Artist and uses DraggableOffsetBox (imported on line 45)\n3. Let me search for the draggable functionality to understand how it's currently implemented\n</thoughts>",
                "type": "text"
              },
              {
                "id": "toolu_0123Jy3x7qM2nKmPvmuFPnWf",
                "input": {
                  "query": "legend draggable method implementation",
                  "category": "implementation"
                },
                "name": "SemanticSearch",
                "type": "tool_use"
              }
            ],
            "model": "claude-3-5-sonnet-20241022",
            "role": "assistant",
            "stop_reason": "tool_use",
            "stop_sequence": null,
            "type": "message",
            "usage": {
              "cache_creation_input_tokens": 5506,
              "cache_read_input_tokens": 3981,
              "input_tokens": 5,
              "output_tokens": 181
            }
          },
          "usage": {
            "completion_cost": 0.019247999999999998,
            "completion_tokens": 181,
            "prompt_tokens": 5511,
            "cached_tokens": 3981
          }
        },
        "execute_action": {
          "model": "claude-3-5-sonnet-20241022",
          "input": [
            {
              "role": "user",
              "content": "Search request:\nSearching for code using the query: legend draggable method implementation\n\nIdentify the relevant code sections in the search results to use them. \n\n<search_results>\nlib/matplotlib/legend.py\n```\n\n\n\n<span id='imports'>\n    23\t\n    24\timport itertools\n    25\timport logging\n    26\timport time\n    27\t\n    28\timport numpy as np\n    29\t\n    30\timport matplotlib as mpl\n    31\tfrom matplotlib import _api, _docstring, colors, offsetbox\n    32\tfrom matplotlib.artist import Artist, allow_rasterization\n    33\tfrom matplotlib.cbook import silent_list\n    34\tfrom matplotlib.font_manager import FontProperties\n    35\tfrom matplotlib.lines import Line2D\n    36\tfrom matplotlib.patches import (Patch, Rectangle, Shadow, FancyBboxPatch,\n    37\t                                StepPatch)\n    38\tfrom matplotlib.collections import (\n    39\t    Collection, CircleCollection, LineCollection, PathCollection,\n    40\t    PolyCollection, RegularPolyCollection)\n    41\tfrom matplotlib.text import Text\n    42\tfrom matplotlib.transforms import Bbox, BboxBase, TransformedBbox\n    43\tfrom matplotlib.transforms import BboxTransformTo, BboxTransformFrom\n    44\tfrom matplotlib.offsetbox import (\n    45\t    AnchoredOffsetbox, DraggableOffsetBox,\n    46\t    HPacker, VPacker,\n    47\t    DrawingArea, TextArea,\n    48\t)\n    49\tfrom matplotlib.container import ErrorbarContainer, BarContainer, StemContainer\n    50\tfrom . import legend_handler\n\n\n<span id='DraggableLegend'>\n    51\t\n    52\t\n    53\tclass DraggableLegend(DraggableOffsetBox):\n\n\n<span id='DraggableLegend.__init__'>\n    54\t    def __init__(self, legend, use_blit=False, update=\"loc\"):\n    55\t        \"\"\"\n    56\t        Wrapper around a `.Legend` to support mouse dragging.\n    57\t\n    58\t        Parameters\n    59\t        ----------\n    60\t        legend : `.Legend`\n    61\t            The `.Legend` instance to wrap.\n    62\t        use_blit : bool, optional\n    63\t            Use blitting for faster image composition. For details see\n    64\t            :ref:`func-animation`.\n    65\t        update : {'loc', 'bbox'}, optional\n    66\t            If \"loc\", update the *loc* parameter of the legend upon finalizing.\n    67\t            If \"bbox\", update the *bbox_to_anchor* parameter.\n    68\t        \"\"\"\n    69\t        self.legend = legend\n    70\t\n    71\t        _api.check_in_list([\"loc\", \"bbox\"], update=update)\n    72\t        self._update = update\n    73\t\n    74\t        super().__init__(legend, legend._legend_box, use_blit=use_blit)\n\n\n<span id='DraggableLegend.finalize_offset'>\n    75\t\n    76\t    def finalize_offset(self):\n    77\t        if self._update == \"loc\":\n    78\t            self._update_loc(self.get_loc_in_canvas())\n    79\t        elif self._update == \"bbox\":\n    80\t            self._bbox_to_anchor(self.get_loc_in_canvas())\n\n\n<span id='DraggableLegend._update_loc'>\n    81\t\n    82\t    def _update_loc(self, loc_in_canvas):\n    83\t        bbox = self.legend.get_bbox_to_anchor()\n    84\t        # if bbox has zero width or height, the transformation is\n    85\t        # ill-defined. Fall back to the default bbox_to_anchor.\n    86\t        if bbox.width == 0 or bbox.height == 0:\n    87\t            self.legend.set_bbox_to_anchor(None)\n    88\t            bbox = self.legend.get_bbox_to_anchor()\n    89\t        _bbox_transform = BboxTransformFrom(bbox)\n    90\t        self.legend._loc = tuple(_bbox_transform.transform(loc_in_canvas))\n\n\n<span id='DraggableLegend._update_bbox_to_anchor'>\n    91\t\n    92\t    def _update_bbox_to_anchor(self, loc_in_canvas):\n    93\t        loc_in_bbox = self.legend.axes.transAxes.transform(loc_in_canvas)\n    94\t        self.legend.set_bbox_to_anchor(loc_in_bbox)\n      # ...\n\n\n<span id='Legend'>\n   290\t\n   291\t\n   292\tclass Legend(Artist):\n   293\t    \"\"\"\n   294\t    Place a legend on the axes at location loc.\n   295\t    \"\"\"\n   296\t\n   297\t    # 'best' is only implemented for axes legends\n   298\t    codes = {'best': 0, **AnchoredOffsetbox.codes}\n   299\t    zorder = 5\n          # ...\n\n\n<span id='Legend.__init__'>\n   303\t\n   304\t    @_api.make_keyword_only(\"3.6\", \"loc\")\n   305\t    @_docstring.dedent_interpd\n   306\t    def __init__(\n   307\t        self, parent, handles, labels,\n   308\t        loc=None,\n   309\t        numpoints=None,      # number of points in the legend line\n   310\t        markerscale=None,    # relative size of legend markers vs. original\n   311\t        markerfirst=True,    # left/right ordering of legend marker and label\n   312\t        scatterpoints=None,  # number of scatter points\n   313\t        scatteryoffsets=None,\n   314\t        prop=None,           # properties for the legend texts\n   315\t        fontsize=None,       # keyword to set font size directly\n   316\t        labelcolor=None,     # keyword to set the text color\n   317\t\n   318\t        # spacing & pad defined as a fraction of the font-size\n   319\t        borderpad=None,      # whitespace inside the legend border\n   320\t        labelspacing=None,   # vertical space between the legend entries\n   321\t        handlelength=None,   # length of the legend handles\n   322\t        handleheight=None,   # height of the legend handles\n   323\t        handletextpad=None,  # pad between the legend handle and text\n   324\t        borderaxespad=None,  # pad between the axes and legend border\n   325\t        columnspacing=None,  # spacing between columns\n   326\t\n   327\t        ncols=1,     # number of columns\n   328\t        mode=None,  # horizontal distribution of columns: None or \"expand\"\n   329\t\n   330\t        fancybox=None,  # True: fancy box, False: rounded box, None: rcParam\n   331\t        shadow=None,\n   332\t        title=None,           # legend title\n   333\t        title_fontsize=None,  # legend title font size\n   334\t        framealpha=None,      # set frame alpha\n   335\t        edgecolor=None,       # frame patch edgecolor\n   336\t        facecolor=None,       # frame patch facecolor\n   337\t\n   338\t        bbox_to_anchor=None,  # bbox to which the legend will be anchored\n   339\t        bbox_transform=None,  # transform for the bbox\n   340\t        frameon=None,         # draw frame\n   341\t        handler_map=None,\n   342\t        title_fontproperties=None,  # properties for the legend title\n   343\t        alignment=\"center\",       # control the alignment within the legend box\n   344\t        *,\n   345\t        ncol=1  # synonym for ncols (backward compatibility)\n   346\t    ):\n   347\t        \"\"\"\n   348\t        Parameters\n   349\t        ----------\n   350\t        parent : `~matplotlib.axes.Axes` or `.Figure`\n   351\t            The artist that contains the legend.\n   352\t\n   353\t        handles : list of `.Artist`\n   354\t            A list of Artists (lines, patches) to be added to the legend.\n   355\t\n   356\t        labels : list of str\n   357\t            A list of labels to show next to the artists. The length of handles\n   358\t            and labels should be the same. If they are not, they are truncated\n   359\t            to the smaller of both lengths.\n   360\t\n   361\t        Other Parameters\n   362\t        ----------------\n   363\t        %(_legend_kw_doc)s\n   364\t\n   365\t        Notes\n   366\t        -----\n   367\t        Users can specify any arbitrary location for the legend using the\n   368\t        *bbox_to_anchor* keyword argument. *bbox_to_anchor* can be a\n   369\t        `.BboxBase` (or derived there from) or a tuple of 2 or 4 floats.\n   370\t        See `set_bbox_to_anchor` for more detail.\n   371\t\n   372\t        The legend location can be specified by setting *loc* with a tuple of\n   373\t        2 floats, which is interpreted as the lower-left corner of the legend\n   374\t        in the normalized axes coordinate.\n   375\t        \"\"\"\n   376\t        # local import only to avoid circularity\n   377\t        from matplotlib.axes import Axes\n   378\t        from matplotlib.figure import FigureBase\n   379\t\n   380\t        super().__init__()\n   381\t\n   382\t        if prop is None:\n   383\t            if fontsize is not None:\n   384\t                self.prop = FontProperties(size=fontsize)\n   385\t            else:\n   386\t                self.prop = FontProperties(\n   387\t                    size=mpl.rcParams[\"legend.fontsize\"])\n   388\t        else:\n   389\t            self.prop = FontProperties._from_any(prop)\n   390\t            if isinstance(prop, dict) and \"size\" not in prop:\n   391\t                self.prop.set_size(mpl.rcParams[\"legend.fontsize\"])\n   392\t\n   393\t        self._fontsize = self.prop.get_size_in_points()\n   394\t\n   395\t        self.texts = []\n   396\t        self.legendHandles = []\n   397\t        self._legend_title_box = None\n   398\t\n   399\t        #: A dictionary with the extra handler mappings for this Legend\n   400\t        #: instance.\n   401\t        self._custom_handler_map = handler_map\n   402\t\n   403\t        def val_or_rc(val, rc_name):\n   404\t            return val if val is not None else mpl.rcParams[rc_name]\n   405\t\n   406\t        self.numpoints = val_or_rc(numpoints, 'legend.numpoints')\n   407\t        self.markerscale = val_or_rc(markerscale, 'legend.markerscale')\n   408\t        self.scatterpoints = val_or_rc(scatterpoints, 'legend.scatterpoints')\n   409\t        self.borderpad = val_or_rc(borderpad, 'legend.borderpad')\n   410\t        self.labelspacing = val_or_rc(labelspacing, 'legend.labelspacing')\n   411\t        self.handlelength = val_or_rc(handlelength, 'legend.handlelength')\n   412\t        self.handleheight = val_or_rc(handleheight, 'legend.handleheight')\n   413\t        self.handletextpad = val_or_rc(handletextpad, 'legend.handletextpad')\n   414\t        self.borderaxespad = val_or_rc(borderaxespad, 'legend.borderaxespad')\n   415\t        self.columnspacing = val_or_rc(columnspacing, 'legend.columnspacing')\n   416\t        self.shadow = val_or_rc(shadow, 'legend.shadow')\n   417\t        # trim handles and labels if illegal label...\n   418\t        _lab, _hand = [], []\n   419\t        for label, handle in zip(labels, handles):\n   420\t            if isinstance(label, str) and label.startswith('_'):\n   421\t                _api.warn_external(f\"The label {label!r} of {handle!r} starts \"\n   422\t                                   \"with '_'. It is thus excluded from the \"\n   423\t                                   \"legend.\")\n   424\t            else:\n   425\t                _lab.append(label)\n   426\t                _hand.append(handle)\n   427\t        labels, handles = _lab, _hand\n   428\t\n   429\t        handles = list(handles)\n   430\t        if len(handles) < 2:\n   431\t            ncols = 1\n   432\t        self._ncols = ncols if ncols != 1 else ncol\n   433\t\n   434\t        if self.numpoints <= 0:\n   435\t            raise ValueError(\"numpoints must be > 0; it was %d\" % numpoints)\n   436\t\n   437\t        # introduce y-offset for handles of the scatter plot\n   438\t        if scatteryoffsets is None:\n   439\t            self._scatteryoffsets = np.array([3. / 8., 4. / 8., 2.5 / 8.])\n   440\t        else:\n   441\t            self._scatteryoffsets = np.asarray(scatteryoffsets)\n   442\t        reps = self.scatterpoints // len(self._scatteryoffsets) + 1\n   443\t        self._scatteryoffsets = np.tile(self._scatteryoffsets,\n   444\t                                        reps)[:self.scatterpoints]\n   445\t\n   446\t        # _legend_box is a VPacker instance that contains all\n   447\t        # legend items and will be initialized from _init_legend_box()\n   448\t        # method.\n   449\t        self._legend_box = None\n   450\t\n   451\t        if isinstance(parent, Axes):\n   452\t            self.isaxes = True\n   453\t            self.axes = parent\n   454\t            self.set_figure(parent.figure)\n   455\t        elif isinstance(parent, FigureBase):\n   456\t            self.isaxes = False\n   457\t            self.set_figure(parent)\n   458\t        else:\n   459\t            raise TypeError(\n   460\t                \"Legend needs either Axes or FigureBase as parent\"\n   461\t            )\n   462\t        self.parent = parent\n   463\t\n   464\t        self._loc_used_default = loc is None\n   465\t        if loc is None:\n   466\t            loc = mpl.rcParams[\"legend.loc\"]\n   467\t            if not self.isaxes and loc in [0, 'best']:\n   468\t                loc = 'upper right'\n   469\t        if isinstance(loc, str):\n   470\t            loc = _api.check_getitem(self.codes, loc=loc)\n   471\t        if not self.isaxes and loc == 0:\n   472\t            raise ValueError(\n   473\t                \"Automatic legend placement (loc='best') not implemented for \"\n   474\t                \"figure legend\")\n   475\t\n   476\t        self._mode = mode\n   477\t        self.set_bbox_to_anchor(bbox_to_anchor, bbox_transform)\n   478\t\n   479\t        # We use FancyBboxPatch to draw a legend frame. The location\n   480\t        # and size of the box will be updated during the drawing time.\n   481\t\n   482\t        if facecolor is None:\n   483\t            facecolor = mpl.rcParams[\"legend.facecolor\"]\n   484\t        if facecolor == 'inherit':\n   485\t            facecolor = mpl.rcParams[\"axes.facecolor\"]\n   486\t\n   487\t        if edgecolor is None:\n   488\t            edgecolor = mpl.rcParams[\"legend.edgecolor\"]\n   489\t        if edgecolor == 'inherit':\n   490\t            edgecolor = mpl.rcParams[\"axes.edgecolor\"]\n   491\t\n   492\t        if fancybox is None:\n   493\t            fancybox = mpl.rcParams[\"legend.fancybox\"]\n   494\t\n   495\t        self.legendPatch = FancyBboxPatch(\n   496\t            xy=(0, 0), width=1, height=1,\n   497\t            facecolor=facecolor, edgecolor=edgecolor,\n   498\t            # If shadow is used, default to alpha=1 (#8943).\n   499\t            alpha=(framealpha if framealpha is not None\n   500\t                   else 1 if shadow\n   501\t                   else mpl.rcParams[\"legend.framealpha\"]),\n   502\t            # The width and height of the legendPatch will be set (in draw())\n   503\t            # to the length that includes the padding. Thus we set pad=0 here.\n   504\t            boxstyle=(\"round,pad=0,rounding_size=0.2\" if fancybox\n   505\t                      else \"square,pad=0\"),\n   506\t            mutation_scale=self._fontsize,\n   507\t            snap=True,\n   508\t            visible=(frameon if frameon is not None\n   509\t                     else mpl.rcParams[\"legend.frameon\"])\n   510\t        )\n   511\t        self._set_artist_props(self.legendPatch)\n   512\t\n   513\t        _api.check_in_list([\"center\", \"left\", \"right\"], alignment=alignment)\n   514\t        self._alignment = alignment\n   515\t\n   516\t        # init with null renderer\n   517\t        self._init_legend_box(handles, labels, markerfirst)\n   518\t\n   519\t        tmp = self._loc_used_default\n   520\t        self._set_loc(loc)\n   521\t        self._loc_used_default = tmp  # ignore changes done by _set_loc\n   522\t\n   523\t        # figure out title font properties:\n   524\t        if title_fontsize is not None and title_fontproperties is not None:\n   525\t            raise ValueError(\n   526\t                \"title_fontsize and title_fontproperties can't be specified \"\n   527\t                \"at the same time. Only use one of them. \")\n   528\t        title_prop_fp = FontProperties._from_any(title_fontproperties)\n   529\t        if isinstance(title_fontproperties, dict):\n   530\t            if \"size\" not in title_fontproperties:\n   531\t                title_fontsize = mpl.rcParams[\"legend.title_fontsize\"]\n   532\t                title_prop_fp.set_size(title_fontsize)\n   533\t        elif title_fontsize is not None:\n   534\t            title_prop_fp.set_size(title_fontsize)\n   535\t        elif not isinstance(title_fontproperties, FontProperties):\n   536\t            title_fontsize = mpl.rcParams[\"legend.title_fontsize\"]\n   537\t            title_prop_fp.set_size(title_fontsize)\n   538\t\n   539\t        self.set_title(title, prop=title_prop_fp)\n   540\t        self._draggable = None\n   541\t\n   542\t        # set the text color\n   543\t\n   544\t        color_getters = {  # getter function depends on line or patch\n   545\t            'linecolor':       ['get_color',           'get_facecolor'],\n   546\t            'markerfacecolor': ['get_markerfacecolor', 'get_facecolor'],\n   547\t            'mfc':             ['get_markerfacecolor', 'get_facecolor'],\n   548\t            'markeredgecolor': ['get_markeredgecolor', 'get_edgecolor'],\n   549\t            'mec':             ['get_markeredgecolor', 'get_edgecolor'],\n   550\t        }\n   551\t        if labelcolor is None:\n   552\t            if mpl.rcParams['legend.labelcolor'] is not None:\n   553\t                labelcolor = mpl.rcParams['legend.labelcolor']\n   554\t            else:\n   555\t                labelcolor = mpl.rcParams['text.color']\n   556\t        if isinstance(labelcolor, str) and labelcolor in color_getters:\n   557\t            getter_names = color_getters[labelcolor]\n   558\t            for handle, text in zip(self.legendHandles, self.texts):\n   559\t                for getter_name in getter_names:\n   560\t                    try:\n   561\t                        color = getattr(handle, getter_name)()\n   562\t                        text.set_color(color)\n   563\t                        break\n   564\t                    except AttributeError:\n   565\t                        pass\n   566\t        elif isinstance(labelcolor, str) and labelcolor == 'none':\n   567\t            for text in self.texts:\n   568\t                text.set_color(labelcolor)\n   569\t        elif np.iterable(labelcolor):\n   570\t            for text, color in zip(self.texts,\n   571\t                                   itertools.cycle(\n   572\t                                       colors.to_rgba_array(labelcolor))):\n   573\t                text.set_color(color)\n   574\t        else:\n   575\t            raise ValueError(f\"Invalid labelcolor: {labelcolor!r}\")\n          # ...\n\n\n<span id='Legend.draw'>\n   622\t\n   623\t    @allow_rasterization\n   624\t    def draw(self, renderer):\n   625\t        # docstring inherited\n   626\t        if not self.get_visible():\n   627\t            return\n   628\t\n   629\t        renderer.open_group('legend', gid=self.get_gid())\n   630\t\n   631\t        fontsize = renderer.points_to_pixels(self._fontsize)\n   632\t\n   633\t        # if mode == fill, set the width of the legend_box to the\n   634\t        # width of the parent (minus pads)\n   635\t        if self._mode in [\"expand\"]:\n   636\t            pad = 2 * (self.borderaxespad + self.borderpad) * fontsize\n   637\t            self._legend_box.set_width(self.get_bbox_to_anchor().width - pad)\n   638\t\n   639\t        # update the location and size of the legend. This needs to\n   640\t        # be done in any case to clip the figure right.\n   641\t        bbox = self._legend_box.get_window_extent(renderer)\n   642\t        self.legendPatch.set_bounds(bbox.bounds)\n   643\t        self.legendPatch.set_mutation_scale(fontsize)\n   644\t\n   645\t        if self.shadow:\n   646\t            Shadow(self.legendPatch, 2, -2).draw(renderer)\n   647\t\n   648\t        self.legendPatch.draw(renderer)\n   649\t        self._legend_box.draw(renderer)\n   650\t\n   651\t        renderer.close_group('legend')\n   652\t        self.stale = False\n   653\t\n   654\t    # _default_handler_map defines the default mapping between plot\n   655\t    # elements and the legend handlers.\n          # ...\n\n\n<span id='Legend.contains'>\n  1072\t\n  1073\t    def contains(self, event):\n  1074\t        inside, info = self._default_contains(event)\n  1075\t        if inside is not None:\n  1076\t            return inside, info\n  1077\t        return self.legendPatch.contains(event)\n\n\n<span id='Legend.set_draggable'>\n  1078\t\n  1079\t    def set_draggable(self, state, use_blit=False, update='loc'):\n  1080\t        \"\"\"\n  1081\t        Enable or disable mouse dragging support of the legend.\n  1082\t\n  1083\t        Parameters\n  1084\t        ----------\n  1085\t        state : bool\n  1086\t            Whether mouse dragging is enabled.\n  1087\t        use_blit : bool, optional\n  1088\t            Use blitting for faster image composition. For details see\n  1089\t            :ref:`func-animation`.\n  1090\t        update : {'loc', 'bbox'}, optional\n  1091\t            The legend parameter to be changed when dragged:\n  1092\t\n  1093\t            - 'loc': update the *loc* parameter of the legend\n  1094\t            - 'bbox': update the *bbox_to_anchor* parameter of the legend\n  1095\t\n  1096\t        Returns\n  1097\t        -------\n  1098\t        `.DraggableLegend` or *None*\n  1099\t            If *state* is ``True`` this returns the `.DraggableLegend` helper\n  1100\t            instance. Otherwise this returns *None*.\n  1101\t        \"\"\"\n  1102\t        if state:\n  1103\t            if self._draggable is None:\n  1104\t                self._draggable = DraggableLegend(self,\n  1105\t                                                  use_blit,\n  1106\t                                                  update=update)\n  1107\t        else:\n  1108\t            if self._draggable is not None:\n  1109\t                self._draggable.disconnect()\n  1110\t            self._draggable = None\n  1111\t        return self._draggable\n\n\n<span id='Legend.get_draggable'>\n  1112\t\n  1113\t    def get_draggable(self):\n  1114\t        \"\"\"Return ``True`` if the legend is draggable, ``False`` otherwise.\"\"\"\n  1115\t        return self._draggable is not None\n\n\n<span id='Legend.get_draggable'>\n  1116\t\n  1117\t\n  1118\t# Helper functions to parse legend arguments for both `figure.legend` and\n  1119\t# `axes.legend`:\n      # ...\n```\n\n\nlib/matplotlib/offsetbox.py\n```\n\n\n\n<span id='imports'>\n    24\t\n    25\timport numpy as np\n    26\t\n    27\timport matplotlib as mpl\n    28\tfrom matplotlib import _api, _docstring\n    29\timport matplotlib.artist as martist\n    30\timport matplotlib.path as mpath\n    31\timport matplotlib.text as mtext\n    32\timport matplotlib.transforms as mtransforms\n    33\tfrom matplotlib.font_manager import FontProperties\n    34\tfrom matplotlib.image import BboxImage\n    35\tfrom matplotlib.patches import (\n    36\t    FancyBboxPatch, FancyArrowPatch, bbox_artist as mbbox_artist)\n    37\tfrom matplotlib.transforms import Bbox, BboxBase, TransformedBbox\n    38\t\n    39\t\n    40\tDEBUG = False\n    41\t\n    42\t\n    43\t# for debugging use\n      # ...\n\n\n<span id='DraggableBase'>\n  1476\t\n  1477\t\n  1478\tclass DraggableBase:\n  1479\t    \"\"\"\n  1480\t    Helper base class for a draggable artist (legend, offsetbox).\n  1481\t\n  1482\t    Derived classes must override the following methods::\n  1483\t\n  1484\t        def save_offset(self):\n  1485\t            '''\n  1486\t            Called when the object is picked for dragging; should save the\n  1487\t            reference position of the artist.\n  1488\t            '''\n  1489\t\n  1490\t        def update_offset(self, dx, dy):\n  1491\t            '''\n  1492\t            Called during the dragging; (*dx*, *dy*) is the pixel offset from\n  1493\t            the point where the mouse drag started.\n  1494\t            '''\n  1495\t\n  1496\t    Optionally, you may override the following method::\n  1497\t\n  1498\t        def finalize_offset(self):\n  1499\t            '''Called when the mouse is released.'''\n  1500\t\n  1501\t    In the current implementation of `.DraggableLegend` and\n  1502\t    `DraggableAnnotation`, `update_offset` places the artists in display\n  1503\t    coordinates, and `finalize_offset` recalculates their position in axes\n  1504\t    coordinate and set a relevant attribute.\n  1505\t    \"\"\"\n          # ...\n      # ...\n```\n\n</search_result>\n"
            }
          ],
          "response": {
            "id": "msg_01Fvjowx1tpjDviBev57PU2f",
            "content": [
              {
                "text": "I'll analyze the search results for code related to legend draggable method implementation.\n\nThe most relevant code sections are found in `lib/matplotlib/legend.py` and involve the `DraggableLegend` class and the `Legend.set_draggable()` method. Here's my analysis:\n\n1. The main implementation of draggable functionality is in the `DraggableLegend` class (lines 53-94) which inherits from `DraggableOffsetBox`. This class handles the mouse dragging behavior of the legend.\n\n2. The `Legend.set_draggable()` method (lines 1079-1111) is the primary interface for enabling/disabling legend dragging functionality.\n\n3. These sections contain the core implementation of making legends draggable in matplotlib.\n\nLet me identify the relevant code spans:",
                "type": "text"
              },
              {
                "id": "toolu_01VFkXGbaSF8iv9QSFHq56KE",
                "input": {
                  "scratch_pad": "The most relevant code sections for legend draggable functionality are:\n\n1. DraggableLegend class definition and implementation (lines 53-94)\n   - Contains the core dragging functionality\n   - Includes methods for initializing dragging and updating legend position\n\n2. Legend.set_draggable method (lines 1079-1111)\n   - Main interface for enabling/disabling dragging\n   - Creates DraggableLegend instance when dragging is enabled\n\n3. Legend.get_draggable method (lines 1113-1115)\n   - Helper method to check if legend is currently draggable",
                  "identified_spans": [
                    {
                      "file_path": "lib/matplotlib/legend.py",
                      "start_line": 53,
                      "end_line": 94
                    },
                    {
                      "file_path": "lib/matplotlib/legend.py",
                      "start_line": 1079,
                      "end_line": 1111
                    },
                    {
                      "file_path": "lib/matplotlib/legend.py",
                      "start_line": 1113,
                      "end_line": 1115
                    }
                  ]
                },
                "name": "Action",
                "type": "tool_use"
              }
            ],
            "model": "claude-3-5-sonnet-20241022",
            "role": "assistant",
            "stop_reason": "tool_use",
            "stop_sequence": null,
            "type": "message",
            "usage": {
              "cache_creation_input_tokens": 0,
              "cache_read_input_tokens": 0,
              "input_tokens": 7955,
              "output_tokens": 530
            }
          },
          "usage": {
            "completion_cost": 0.031815,
            "completion_tokens": 530,
            "prompt_tokens": 7955,
            "cached_tokens": 0
          }
        }
      },
      "possible_actions": [
        "SemanticSearch",
        "FindClass",
        "FindFunction",
        "FindCodeSnippet",
        "RequestMoreContext",
        "ClaudeEditTool"
      ],
      "output": {
        "message": "Found 14 code sections.\n\nViewed relevant code:\nlib/matplotlib/legend.py\n```\n\n    23\t\n    24\timport itertools\n    25\timport logging\n    26\timport time\n    27\t\n    28\timport numpy as np\n    29\t\n    30\timport matplotlib as mpl\n    31\tfrom matplotlib import _api, _docstring, colors, offsetbox\n    32\tfrom matplotlib.artist import Artist, allow_rasterization\n    33\tfrom matplotlib.cbook import silent_list\n    34\tfrom matplotlib.font_manager import FontProperties\n    35\tfrom matplotlib.lines import Line2D\n    36\tfrom matplotlib.patches import (Patch, Rectangle, Shadow, FancyBboxPatch,\n    37\t                                StepPatch)\n    38\tfrom matplotlib.collections import (\n    39\t    Collection, CircleCollection, LineCollection, PathCollection,\n    40\t    PolyCollection, RegularPolyCollection)\n    41\tfrom matplotlib.text import Text\n    42\tfrom matplotlib.transforms import Bbox, BboxBase, TransformedBbox\n    43\tfrom matplotlib.transforms import BboxTransformTo, BboxTransformFrom\n    44\tfrom matplotlib.offsetbox import (\n    45\t    AnchoredOffsetbox, DraggableOffsetBox,\n    46\t    HPacker, VPacker,\n    47\t    DrawingArea, TextArea,\n    48\t)\n    49\tfrom matplotlib.container import ErrorbarContainer, BarContainer, StemContainer\n    50\tfrom . import legend_handler\n    51\t\n    52\t\n    53\tclass DraggableLegend(DraggableOffsetBox):\n    54\t    def __init__(self, legend, use_blit=False, update=\"loc\"):\n    55\t        \"\"\"\n    56\t        Wrapper around a `.Legend` to support mouse dragging.\n    57\t\n    58\t        Parameters\n    59\t        ----------\n    60\t        legend : `.Legend`\n    61\t            The `.Legend` instance to wrap.\n    62\t        use_blit : bool, optional\n    63\t            Use blitting for faster image composition. For details see\n    64\t            :ref:`func-animation`.\n    65\t        update : {'loc', 'bbox'}, optional\n    66\t            If \"loc\", update the *loc* parameter of the legend upon finalizing.\n    67\t            If \"bbox\", update the *bbox_to_anchor* parameter.\n    68\t        \"\"\"\n    69\t        self.legend = legend\n    70\t\n    71\t        _api.check_in_list([\"loc\", \"bbox\"], update=update)\n    72\t        self._update = update\n    73\t\n    74\t        super().__init__(legend, legend._legend_box, use_blit=use_blit)\n    75\t\n    76\t    def finalize_offset(self):\n    77\t        if self._update == \"loc\":\n    78\t            self._update_loc(self.get_loc_in_canvas())\n    79\t        elif self._update == \"bbox\":\n    80\t            self._bbox_to_anchor(self.get_loc_in_canvas())\n    81\t\n    82\t    def _update_loc(self, loc_in_canvas):\n    83\t        bbox = self.legend.get_bbox_to_anchor()\n    84\t        # if bbox has zero width or height, the transformation is\n    85\t        # ill-defined. Fall back to the default bbox_to_anchor.\n    86\t        if bbox.width == 0 or bbox.height == 0:\n    87\t            self.legend.set_bbox_to_anchor(None)\n    88\t            bbox = self.legend.get_bbox_to_anchor()\n    89\t        _bbox_transform = BboxTransformFrom(bbox)\n    90\t        self.legend._loc = tuple(_bbox_transform.transform(loc_in_canvas))\n    91\t\n    92\t    def _update_bbox_to_anchor(self, loc_in_canvas):\n    93\t        loc_in_bbox = self.legend.axes.transAxes.transform(loc_in_canvas)\n    94\t        self.legend.set_bbox_to_anchor(loc_in_bbox)\n      # ...\n   290\t\n   291\t\n   292\tclass Legend(Artist):\n   293\t    \"\"\"\n   294\t    Place a legend on the axes at location loc.\n   295\t    \"\"\"\n   296\t\n   297\t    # 'best' is only implemented for axes legends\n   298\t    codes = {'best': 0, **AnchoredOffsetbox.codes}\n   299\t    zorder = 5\n          # ...\n  1078\t\n  1079\t    def set_draggable(self, state, use_blit=False, update='loc'):\n  1080\t        \"\"\"\n  1081\t        Enable or disable mouse dragging support of the legend.\n  1082\t\n  1083\t        Parameters\n  1084\t        ----------\n  1085\t        state : bool\n  1086\t            Whether mouse dragging is enabled.\n  1087\t        use_blit : bool, optional\n  1088\t            Use blitting for faster image composition. For details see\n  1089\t            :ref:`func-animation`.\n  1090\t        update : {'loc', 'bbox'}, optional\n  1091\t            The legend parameter to be changed when dragged:\n  1092\t\n  1093\t            - 'loc': update the *loc* parameter of the legend\n  1094\t            - 'bbox': update the *bbox_to_anchor* parameter of the legend\n  1095\t\n  1096\t        Returns\n  1097\t        -------\n  1098\t        `.DraggableLegend` or *None*\n  1099\t            If *state* is ``True`` this returns the `.DraggableLegend` helper\n  1100\t            instance. Otherwise this returns *None*.\n  1101\t        \"\"\"\n  1102\t        if state:\n  1103\t            if self._draggable is None:\n  1104\t                self._draggable = DraggableLegend(self,\n  1105\t                                                  use_blit,\n  1106\t                                                  update=update)\n  1107\t        else:\n  1108\t            if self._draggable is not None:\n  1109\t                self._draggable.disconnect()\n  1110\t            self._draggable = None\n  1111\t        return self._draggable\n  1112\t\n  1113\t    def get_draggable(self):\n  1114\t        \"\"\"Return ``True`` if the legend is draggable, ``False`` otherwise.\"\"\"\n  1115\t        return self._draggable is not None\n  1116\t\n  1117\t\n  1118\t# Helper functions to parse legend arguments for both `figure.legend` and\n  1119\t# `axes.legend`:\n      # ...\n```\n",
        "summary": "Found relevant code sections in the search results.",
        "terminal": false,
        "expect_correction": false,
        "properties": {
          "search_hits": [],
          "search_tokens": 3743,
          "new_span_ids": [
            "DraggableLegend",
            "DraggableLegend.__init__",
            "DraggableLegend.finalize_offset",
            "DraggableLegend._update_loc",
            "DraggableLegend._update_bbox_to_anchor",
            "Legend.set_draggable",
            "Legend.get_draggable"
          ]
        },
        "execution_completion": {
          "model": "claude-3-5-sonnet-20241022",
          "input": [
            {
              "role": "user",
              "content": "Search request:\nSearching for code using the query: legend draggable method implementation\n\nIdentify the relevant code sections in the search results to use them. \n\n<search_results>\nlib/matplotlib/legend.py\n```\n\n\n\n<span id='imports'>\n    23\t\n    24\timport itertools\n    25\timport logging\n    26\timport time\n    27\t\n    28\timport numpy as np\n    29\t\n    30\timport matplotlib as mpl\n    31\tfrom matplotlib import _api, _docstring, colors, offsetbox\n    32\tfrom matplotlib.artist import Artist, allow_rasterization\n    33\tfrom matplotlib.cbook import silent_list\n    34\tfrom matplotlib.font_manager import FontProperties\n    35\tfrom matplotlib.lines import Line2D\n    36\tfrom matplotlib.patches import (Patch, Rectangle, Shadow, FancyBboxPatch,\n    37\t                                StepPatch)\n    38\tfrom matplotlib.collections import (\n    39\t    Collection, CircleCollection, LineCollection, PathCollection,\n    40\t    PolyCollection, RegularPolyCollection)\n    41\tfrom matplotlib.text import Text\n    42\tfrom matplotlib.transforms import Bbox, BboxBase, TransformedBbox\n    43\tfrom matplotlib.transforms import BboxTransformTo, BboxTransformFrom\n    44\tfrom matplotlib.offsetbox import (\n    45\t    AnchoredOffsetbox, DraggableOffsetBox,\n    46\t    HPacker, VPacker,\n    47\t    DrawingArea, TextArea,\n    48\t)\n    49\tfrom matplotlib.container import ErrorbarContainer, BarContainer, StemContainer\n    50\tfrom . import legend_handler\n\n\n<span id='DraggableLegend'>\n    51\t\n    52\t\n    53\tclass DraggableLegend(DraggableOffsetBox):\n\n\n<span id='DraggableLegend.__init__'>\n    54\t    def __init__(self, legend, use_blit=False, update=\"loc\"):\n    55\t        \"\"\"\n    56\t        Wrapper around a `.Legend` to support mouse dragging.\n    57\t\n    58\t        Parameters\n    59\t        ----------\n    60\t        legend : `.Legend`\n    61\t            The `.Legend` instance to wrap.\n    62\t        use_blit : bool, optional\n    63\t            Use blitting for faster image composition. For details see\n    64\t            :ref:`func-animation`.\n    65\t        update : {'loc', 'bbox'}, optional\n    66\t            If \"loc\", update the *loc* parameter of the legend upon finalizing.\n    67\t            If \"bbox\", update the *bbox_to_anchor* parameter.\n    68\t        \"\"\"\n    69\t        self.legend = legend\n    70\t\n    71\t        _api.check_in_list([\"loc\", \"bbox\"], update=update)\n    72\t        self._update = update\n    73\t\n    74\t        super().__init__(legend, legend._legend_box, use_blit=use_blit)\n\n\n<span id='DraggableLegend.finalize_offset'>\n    75\t\n    76\t    def finalize_offset(self):\n    77\t        if self._update == \"loc\":\n    78\t            self._update_loc(self.get_loc_in_canvas())\n    79\t        elif self._update == \"bbox\":\n    80\t            self._bbox_to_anchor(self.get_loc_in_canvas())\n\n\n<span id='DraggableLegend._update_loc'>\n    81\t\n    82\t    def _update_loc(self, loc_in_canvas):\n    83\t        bbox = self.legend.get_bbox_to_anchor()\n    84\t        # if bbox has zero width or height, the transformation is\n    85\t        # ill-defined. Fall back to the default bbox_to_anchor.\n    86\t        if bbox.width == 0 or bbox.height == 0:\n    87\t            self.legend.set_bbox_to_anchor(None)\n    88\t            bbox = self.legend.get_bbox_to_anchor()\n    89\t        _bbox_transform = BboxTransformFrom(bbox)\n    90\t        self.legend._loc = tuple(_bbox_transform.transform(loc_in_canvas))\n\n\n<span id='DraggableLegend._update_bbox_to_anchor'>\n    91\t\n    92\t    def _update_bbox_to_anchor(self, loc_in_canvas):\n    93\t        loc_in_bbox = self.legend.axes.transAxes.transform(loc_in_canvas)\n    94\t        self.legend.set_bbox_to_anchor(loc_in_bbox)\n      # ...\n\n\n<span id='Legend'>\n   290\t\n   291\t\n   292\tclass Legend(Artist):\n   293\t    \"\"\"\n   294\t    Place a legend on the axes at location loc.\n   295\t    \"\"\"\n   296\t\n   297\t    # 'best' is only implemented for axes legends\n   298\t    codes = {'best': 0, **AnchoredOffsetbox.codes}\n   299\t    zorder = 5\n          # ...\n\n\n<span id='Legend.__init__'>\n   303\t\n   304\t    @_api.make_keyword_only(\"3.6\", \"loc\")\n   305\t    @_docstring.dedent_interpd\n   306\t    def __init__(\n   307\t        self, parent, handles, labels,\n   308\t        loc=None,\n   309\t        numpoints=None,      # number of points in the legend line\n   310\t        markerscale=None,    # relative size of legend markers vs. original\n   311\t        markerfirst=True,    # left/right ordering of legend marker and label\n   312\t        scatterpoints=None,  # number of scatter points\n   313\t        scatteryoffsets=None,\n   314\t        prop=None,           # properties for the legend texts\n   315\t        fontsize=None,       # keyword to set font size directly\n   316\t        labelcolor=None,     # keyword to set the text color\n   317\t\n   318\t        # spacing & pad defined as a fraction of the font-size\n   319\t        borderpad=None,      # whitespace inside the legend border\n   320\t        labelspacing=None,   # vertical space between the legend entries\n   321\t        handlelength=None,   # length of the legend handles\n   322\t        handleheight=None,   # height of the legend handles\n   323\t        handletextpad=None,  # pad between the legend handle and text\n   324\t        borderaxespad=None,  # pad between the axes and legend border\n   325\t        columnspacing=None,  # spacing between columns\n   326\t\n   327\t        ncols=1,     # number of columns\n   328\t        mode=None,  # horizontal distribution of columns: None or \"expand\"\n   329\t\n   330\t        fancybox=None,  # True: fancy box, False: rounded box, None: rcParam\n   331\t        shadow=None,\n   332\t        title=None,           # legend title\n   333\t        title_fontsize=None,  # legend title font size\n   334\t        framealpha=None,      # set frame alpha\n   335\t        edgecolor=None,       # frame patch edgecolor\n   336\t        facecolor=None,       # frame patch facecolor\n   337\t\n   338\t        bbox_to_anchor=None,  # bbox to which the legend will be anchored\n   339\t        bbox_transform=None,  # transform for the bbox\n   340\t        frameon=None,         # draw frame\n   341\t        handler_map=None,\n   342\t        title_fontproperties=None,  # properties for the legend title\n   343\t        alignment=\"center\",       # control the alignment within the legend box\n   344\t        *,\n   345\t        ncol=1  # synonym for ncols (backward compatibility)\n   346\t    ):\n   347\t        \"\"\"\n   348\t        Parameters\n   349\t        ----------\n   350\t        parent : `~matplotlib.axes.Axes` or `.Figure`\n   351\t            The artist that contains the legend.\n   352\t\n   353\t        handles : list of `.Artist`\n   354\t            A list of Artists (lines, patches) to be added to the legend.\n   355\t\n   356\t        labels : list of str\n   357\t            A list of labels to show next to the artists. The length of handles\n   358\t            and labels should be the same. If they are not, they are truncated\n   359\t            to the smaller of both lengths.\n   360\t\n   361\t        Other Parameters\n   362\t        ----------------\n   363\t        %(_legend_kw_doc)s\n   364\t\n   365\t        Notes\n   366\t        -----\n   367\t        Users can specify any arbitrary location for the legend using the\n   368\t        *bbox_to_anchor* keyword argument. *bbox_to_anchor* can be a\n   369\t        `.BboxBase` (or derived there from) or a tuple of 2 or 4 floats.\n   370\t        See `set_bbox_to_anchor` for more detail.\n   371\t\n   372\t        The legend location can be specified by setting *loc* with a tuple of\n   373\t        2 floats, which is interpreted as the lower-left corner of the legend\n   374\t        in the normalized axes coordinate.\n   375\t        \"\"\"\n   376\t        # local import only to avoid circularity\n   377\t        from matplotlib.axes import Axes\n   378\t        from matplotlib.figure import FigureBase\n   379\t\n   380\t        super().__init__()\n   381\t\n   382\t        if prop is None:\n   383\t            if fontsize is not None:\n   384\t                self.prop = FontProperties(size=fontsize)\n   385\t            else:\n   386\t                self.prop = FontProperties(\n   387\t                    size=mpl.rcParams[\"legend.fontsize\"])\n   388\t        else:\n   389\t            self.prop = FontProperties._from_any(prop)\n   390\t            if isinstance(prop, dict) and \"size\" not in prop:\n   391\t                self.prop.set_size(mpl.rcParams[\"legend.fontsize\"])\n   392\t\n   393\t        self._fontsize = self.prop.get_size_in_points()\n   394\t\n   395\t        self.texts = []\n   396\t        self.legendHandles = []\n   397\t        self._legend_title_box = None\n   398\t\n   399\t        #: A dictionary with the extra handler mappings for this Legend\n   400\t        #: instance.\n   401\t        self._custom_handler_map = handler_map\n   402\t\n   403\t        def val_or_rc(val, rc_name):\n   404\t            return val if val is not None else mpl.rcParams[rc_name]\n   405\t\n   406\t        self.numpoints = val_or_rc(numpoints, 'legend.numpoints')\n   407\t        self.markerscale = val_or_rc(markerscale, 'legend.markerscale')\n   408\t        self.scatterpoints = val_or_rc(scatterpoints, 'legend.scatterpoints')\n   409\t        self.borderpad = val_or_rc(borderpad, 'legend.borderpad')\n   410\t        self.labelspacing = val_or_rc(labelspacing, 'legend.labelspacing')\n   411\t        self.handlelength = val_or_rc(handlelength, 'legend.handlelength')\n   412\t        self.handleheight = val_or_rc(handleheight, 'legend.handleheight')\n   413\t        self.handletextpad = val_or_rc(handletextpad, 'legend.handletextpad')\n   414\t        self.borderaxespad = val_or_rc(borderaxespad, 'legend.borderaxespad')\n   415\t        self.columnspacing = val_or_rc(columnspacing, 'legend.columnspacing')\n   416\t        self.shadow = val_or_rc(shadow, 'legend.shadow')\n   417\t        # trim handles and labels if illegal label...\n   418\t        _lab, _hand = [], []\n   419\t        for label, handle in zip(labels, handles):\n   420\t            if isinstance(label, str) and label.startswith('_'):\n   421\t                _api.warn_external(f\"The label {label!r} of {handle!r} starts \"\n   422\t                                   \"with '_'. It is thus excluded from the \"\n   423\t                                   \"legend.\")\n   424\t            else:\n   425\t                _lab.append(label)\n   426\t                _hand.append(handle)\n   427\t        labels, handles = _lab, _hand\n   428\t\n   429\t        handles = list(handles)\n   430\t        if len(handles) < 2:\n   431\t            ncols = 1\n   432\t        self._ncols = ncols if ncols != 1 else ncol\n   433\t\n   434\t        if self.numpoints <= 0:\n   435\t            raise ValueError(\"numpoints must be > 0; it was %d\" % numpoints)\n   436\t\n   437\t        # introduce y-offset for handles of the scatter plot\n   438\t        if scatteryoffsets is None:\n   439\t            self._scatteryoffsets = np.array([3. / 8., 4. / 8., 2.5 / 8.])\n   440\t        else:\n   441\t            self._scatteryoffsets = np.asarray(scatteryoffsets)\n   442\t        reps = self.scatterpoints // len(self._scatteryoffsets) + 1\n   443\t        self._scatteryoffsets = np.tile(self._scatteryoffsets,\n   444\t                                        reps)[:self.scatterpoints]\n   445\t\n   446\t        # _legend_box is a VPacker instance that contains all\n   447\t        # legend items and will be initialized from _init_legend_box()\n   448\t        # method.\n   449\t        self._legend_box = None\n   450\t\n   451\t        if isinstance(parent, Axes):\n   452\t            self.isaxes = True\n   453\t            self.axes = parent\n   454\t            self.set_figure(parent.figure)\n   455\t        elif isinstance(parent, FigureBase):\n   456\t            self.isaxes = False\n   457\t            self.set_figure(parent)\n   458\t        else:\n   459\t            raise TypeError(\n   460\t                \"Legend needs either Axes or FigureBase as parent\"\n   461\t            )\n   462\t        self.parent = parent\n   463\t\n   464\t        self._loc_used_default = loc is None\n   465\t        if loc is None:\n   466\t            loc = mpl.rcParams[\"legend.loc\"]\n   467\t            if not self.isaxes and loc in [0, 'best']:\n   468\t                loc = 'upper right'\n   469\t        if isinstance(loc, str):\n   470\t            loc = _api.check_getitem(self.codes, loc=loc)\n   471\t        if not self.isaxes and loc == 0:\n   472\t            raise ValueError(\n   473\t                \"Automatic legend placement (loc='best') not implemented for \"\n   474\t                \"figure legend\")\n   475\t\n   476\t        self._mode = mode\n   477\t        self.set_bbox_to_anchor(bbox_to_anchor, bbox_transform)\n   478\t\n   479\t        # We use FancyBboxPatch to draw a legend frame. The location\n   480\t        # and size of the box will be updated during the drawing time.\n   481\t\n   482\t        if facecolor is None:\n   483\t            facecolor = mpl.rcParams[\"legend.facecolor\"]\n   484\t        if facecolor == 'inherit':\n   485\t            facecolor = mpl.rcParams[\"axes.facecolor\"]\n   486\t\n   487\t        if edgecolor is None:\n   488\t            edgecolor = mpl.rcParams[\"legend.edgecolor\"]\n   489\t        if edgecolor == 'inherit':\n   490\t            edgecolor = mpl.rcParams[\"axes.edgecolor\"]\n   491\t\n   492\t        if fancybox is None:\n   493\t            fancybox = mpl.rcParams[\"legend.fancybox\"]\n   494\t\n   495\t        self.legendPatch = FancyBboxPatch(\n   496\t            xy=(0, 0), width=1, height=1,\n   497\t            facecolor=facecolor, edgecolor=edgecolor,\n   498\t            # If shadow is used, default to alpha=1 (#8943).\n   499\t            alpha=(framealpha if framealpha is not None\n   500\t                   else 1 if shadow\n   501\t                   else mpl.rcParams[\"legend.framealpha\"]),\n   502\t            # The width and height of the legendPatch will be set (in draw())\n   503\t            # to the length that includes the padding. Thus we set pad=0 here.\n   504\t            boxstyle=(\"round,pad=0,rounding_size=0.2\" if fancybox\n   505\t                      else \"square,pad=0\"),\n   506\t            mutation_scale=self._fontsize,\n   507\t            snap=True,\n   508\t            visible=(frameon if frameon is not None\n   509\t                     else mpl.rcParams[\"legend.frameon\"])\n   510\t        )\n   511\t        self._set_artist_props(self.legendPatch)\n   512\t\n   513\t        _api.check_in_list([\"center\", \"left\", \"right\"], alignment=alignment)\n   514\t        self._alignment = alignment\n   515\t\n   516\t        # init with null renderer\n   517\t        self._init_legend_box(handles, labels, markerfirst)\n   518\t\n   519\t        tmp = self._loc_used_default\n   520\t        self._set_loc(loc)\n   521\t        self._loc_used_default = tmp  # ignore changes done by _set_loc\n   522\t\n   523\t        # figure out title font properties:\n   524\t        if title_fontsize is not None and title_fontproperties is not None:\n   525\t            raise ValueError(\n   526\t                \"title_fontsize and title_fontproperties can't be specified \"\n   527\t                \"at the same time. Only use one of them. \")\n   528\t        title_prop_fp = FontProperties._from_any(title_fontproperties)\n   529\t        if isinstance(title_fontproperties, dict):\n   530\t            if \"size\" not in title_fontproperties:\n   531\t                title_fontsize = mpl.rcParams[\"legend.title_fontsize\"]\n   532\t                title_prop_fp.set_size(title_fontsize)\n   533\t        elif title_fontsize is not None:\n   534\t            title_prop_fp.set_size(title_fontsize)\n   535\t        elif not isinstance(title_fontproperties, FontProperties):\n   536\t            title_fontsize = mpl.rcParams[\"legend.title_fontsize\"]\n   537\t            title_prop_fp.set_size(title_fontsize)\n   538\t\n   539\t        self.set_title(title, prop=title_prop_fp)\n   540\t        self._draggable = None\n   541\t\n   542\t        # set the text color\n   543\t\n   544\t        color_getters = {  # getter function depends on line or patch\n   545\t            'linecolor':       ['get_color',           'get_facecolor'],\n   546\t            'markerfacecolor': ['get_markerfacecolor', 'get_facecolor'],\n   547\t            'mfc':             ['get_markerfacecolor', 'get_facecolor'],\n   548\t            'markeredgecolor': ['get_markeredgecolor', 'get_edgecolor'],\n   549\t            'mec':             ['get_markeredgecolor', 'get_edgecolor'],\n   550\t        }\n   551\t        if labelcolor is None:\n   552\t            if mpl.rcParams['legend.labelcolor'] is not None:\n   553\t                labelcolor = mpl.rcParams['legend.labelcolor']\n   554\t            else:\n   555\t                labelcolor = mpl.rcParams['text.color']\n   556\t        if isinstance(labelcolor, str) and labelcolor in color_getters:\n   557\t            getter_names = color_getters[labelcolor]\n   558\t            for handle, text in zip(self.legendHandles, self.texts):\n   559\t                for getter_name in getter_names:\n   560\t                    try:\n   561\t                        color = getattr(handle, getter_name)()\n   562\t                        text.set_color(color)\n   563\t                        break\n   564\t                    except AttributeError:\n   565\t                        pass\n   566\t        elif isinstance(labelcolor, str) and labelcolor == 'none':\n   567\t            for text in self.texts:\n   568\t                text.set_color(labelcolor)\n   569\t        elif np.iterable(labelcolor):\n   570\t            for text, color in zip(self.texts,\n   571\t                                   itertools.cycle(\n   572\t                                       colors.to_rgba_array(labelcolor))):\n   573\t                text.set_color(color)\n   574\t        else:\n   575\t            raise ValueError(f\"Invalid labelcolor: {labelcolor!r}\")\n          # ...\n\n\n<span id='Legend.draw'>\n   622\t\n   623\t    @allow_rasterization\n   624\t    def draw(self, renderer):\n   625\t        # docstring inherited\n   626\t        if not self.get_visible():\n   627\t            return\n   628\t\n   629\t        renderer.open_group('legend', gid=self.get_gid())\n   630\t\n   631\t        fontsize = renderer.points_to_pixels(self._fontsize)\n   632\t\n   633\t        # if mode == fill, set the width of the legend_box to the\n   634\t        # width of the parent (minus pads)\n   635\t        if self._mode in [\"expand\"]:\n   636\t            pad = 2 * (self.borderaxespad + self.borderpad) * fontsize\n   637\t            self._legend_box.set_width(self.get_bbox_to_anchor().width - pad)\n   638\t\n   639\t        # update the location and size of the legend. This needs to\n   640\t        # be done in any case to clip the figure right.\n   641\t        bbox = self._legend_box.get_window_extent(renderer)\n   642\t        self.legendPatch.set_bounds(bbox.bounds)\n   643\t        self.legendPatch.set_mutation_scale(fontsize)\n   644\t\n   645\t        if self.shadow:\n   646\t            Shadow(self.legendPatch, 2, -2).draw(renderer)\n   647\t\n   648\t        self.legendPatch.draw(renderer)\n   649\t        self._legend_box.draw(renderer)\n   650\t\n   651\t        renderer.close_group('legend')\n   652\t        self.stale = False\n   653\t\n   654\t    # _default_handler_map defines the default mapping between plot\n   655\t    # elements and the legend handlers.\n          # ...\n\n\n<span id='Legend.contains'>\n  1072\t\n  1073\t    def contains(self, event):\n  1074\t        inside, info = self._default_contains(event)\n  1075\t        if inside is not None:\n  1076\t            return inside, info\n  1077\t        return self.legendPatch.contains(event)\n\n\n<span id='Legend.set_draggable'>\n  1078\t\n  1079\t    def set_draggable(self, state, use_blit=False, update='loc'):\n  1080\t        \"\"\"\n  1081\t        Enable or disable mouse dragging support of the legend.\n  1082\t\n  1083\t        Parameters\n  1084\t        ----------\n  1085\t        state : bool\n  1086\t            Whether mouse dragging is enabled.\n  1087\t        use_blit : bool, optional\n  1088\t            Use blitting for faster image composition. For details see\n  1089\t            :ref:`func-animation`.\n  1090\t        update : {'loc', 'bbox'}, optional\n  1091\t            The legend parameter to be changed when dragged:\n  1092\t\n  1093\t            - 'loc': update the *loc* parameter of the legend\n  1094\t            - 'bbox': update the *bbox_to_anchor* parameter of the legend\n  1095\t\n  1096\t        Returns\n  1097\t        -------\n  1098\t        `.DraggableLegend` or *None*\n  1099\t            If *state* is ``True`` this returns the `.DraggableLegend` helper\n  1100\t            instance. Otherwise this returns *None*.\n  1101\t        \"\"\"\n  1102\t        if state:\n  1103\t            if self._draggable is None:\n  1104\t                self._draggable = DraggableLegend(self,\n  1105\t                                                  use_blit,\n  1106\t                                                  update=update)\n  1107\t        else:\n  1108\t            if self._draggable is not None:\n  1109\t                self._draggable.disconnect()\n  1110\t            self._draggable = None\n  1111\t        return self._draggable\n\n\n<span id='Legend.get_draggable'>\n  1112\t\n  1113\t    def get_draggable(self):\n  1114\t        \"\"\"Return ``True`` if the legend is draggable, ``False`` otherwise.\"\"\"\n  1115\t        return self._draggable is not None\n\n\n<span id='Legend.get_draggable'>\n  1116\t\n  1117\t\n  1118\t# Helper functions to parse legend arguments for both `figure.legend` and\n  1119\t# `axes.legend`:\n      # ...\n```\n\n\nlib/matplotlib/offsetbox.py\n```\n\n\n\n<span id='imports'>\n    24\t\n    25\timport numpy as np\n    26\t\n    27\timport matplotlib as mpl\n    28\tfrom matplotlib import _api, _docstring\n    29\timport matplotlib.artist as martist\n    30\timport matplotlib.path as mpath\n    31\timport matplotlib.text as mtext\n    32\timport matplotlib.transforms as mtransforms\n    33\tfrom matplotlib.font_manager import FontProperties\n    34\tfrom matplotlib.image import BboxImage\n    35\tfrom matplotlib.patches import (\n    36\t    FancyBboxPatch, FancyArrowPatch, bbox_artist as mbbox_artist)\n    37\tfrom matplotlib.transforms import Bbox, BboxBase, TransformedBbox\n    38\t\n    39\t\n    40\tDEBUG = False\n    41\t\n    42\t\n    43\t# for debugging use\n      # ...\n\n\n<span id='DraggableBase'>\n  1476\t\n  1477\t\n  1478\tclass DraggableBase:\n  1479\t    \"\"\"\n  1480\t    Helper base class for a draggable artist (legend, offsetbox).\n  1481\t\n  1482\t    Derived classes must override the following methods::\n  1483\t\n  1484\t        def save_offset(self):\n  1485\t            '''\n  1486\t            Called when the object is picked for dragging; should save the\n  1487\t            reference position of the artist.\n  1488\t            '''\n  1489\t\n  1490\t        def update_offset(self, dx, dy):\n  1491\t            '''\n  1492\t            Called during the dragging; (*dx*, *dy*) is the pixel offset from\n  1493\t            the point where the mouse drag started.\n  1494\t            '''\n  1495\t\n  1496\t    Optionally, you may override the following method::\n  1497\t\n  1498\t        def finalize_offset(self):\n  1499\t            '''Called when the mouse is released.'''\n  1500\t\n  1501\t    In the current implementation of `.DraggableLegend` and\n  1502\t    `DraggableAnnotation`, `update_offset` places the artists in display\n  1503\t    coordinates, and `finalize_offset` recalculates their position in axes\n  1504\t    coordinate and set a relevant attribute.\n  1505\t    \"\"\"\n          # ...\n      # ...\n```\n\n</search_result>\n"
            }
          ],
          "response": {
            "id": "msg_01Fvjowx1tpjDviBev57PU2f",
            "content": [
              {
                "text": "I'll analyze the search results for code related to legend draggable method implementation.\n\nThe most relevant code sections are found in `lib/matplotlib/legend.py` and involve the `DraggableLegend` class and the `Legend.set_draggable()` method. Here's my analysis:\n\n1. The main implementation of draggable functionality is in the `DraggableLegend` class (lines 53-94) which inherits from `DraggableOffsetBox`. This class handles the mouse dragging behavior of the legend.\n\n2. The `Legend.set_draggable()` method (lines 1079-1111) is the primary interface for enabling/disabling legend dragging functionality.\n\n3. These sections contain the core implementation of making legends draggable in matplotlib.\n\nLet me identify the relevant code spans:",
                "type": "text"
              },
              {
                "id": "toolu_01VFkXGbaSF8iv9QSFHq56KE",
                "input": {
                  "scratch_pad": "The most relevant code sections for legend draggable functionality are:\n\n1. DraggableLegend class definition and implementation (lines 53-94)\n   - Contains the core dragging functionality\n   - Includes methods for initializing dragging and updating legend position\n\n2. Legend.set_draggable method (lines 1079-1111)\n   - Main interface for enabling/disabling dragging\n   - Creates DraggableLegend instance when dragging is enabled\n\n3. Legend.get_draggable method (lines 1113-1115)\n   - Helper method to check if legend is currently draggable",
                  "identified_spans": [
                    {
                      "file_path": "lib/matplotlib/legend.py",
                      "start_line": 53,
                      "end_line": 94
                    },
                    {
                      "file_path": "lib/matplotlib/legend.py",
                      "start_line": 1079,
                      "end_line": 1111
                    },
                    {
                      "file_path": "lib/matplotlib/legend.py",
                      "start_line": 1113,
                      "end_line": 1115
                    }
                  ]
                },
                "name": "Action",
                "type": "tool_use"
              }
            ],
            "model": "claude-3-5-sonnet-20241022",
            "role": "assistant",
            "stop_reason": "tool_use",
            "stop_sequence": null,
            "type": "message",
            "usage": {
              "cache_creation_input_tokens": 0,
              "cache_read_input_tokens": 0,
              "input_tokens": 7955,
              "output_tokens": 530
            }
          },
          "usage": {
            "completion_cost": 0.031815,
            "completion_tokens": 530,
            "prompt_tokens": 7955,
            "cached_tokens": 0
          }
        }
      },
      "parent_id": 1
    },
    {
      "node_id": 3,
      "action": {
        "scratch_pad": "1. I found the draggable functionality implementation:\n   - There's a DraggableLegend class that inherits from DraggableOffsetBox\n   - Legend class has set_draggable() and get_draggable() methods\n   - The _draggable attribute is initialized as None in __init__\n2. Adding a draggable parameter to __init__ seems feasible since:\n   - The infrastructure for draggable legends already exists\n   - It would just need to call set_draggable() during initialization\n3. Let me check if there are any tests for the draggable functionality to understand how to test the new parameter",
        "query": "legend draggable tests",
        "category": "test",
        "action_args_class": "moatless.actions.semantic_search.SemanticSearchArgs"
      },
      "observation": {
        "message": "Found 12 code sections.\n\nViewed relevant code:\nlib/matplotlib/tests/test_legend.py\n```\n     1\timport collections\n     2\timport platform\n     3\tfrom unittest import mock\n     4\timport warnings\n     5\t\n     6\timport numpy as np\n     7\timport pytest\n     8\t\n     9\tfrom matplotlib.testing.decorators import check_figures_equal, image_comparison\n    10\tfrom matplotlib.testing._markers import needs_usetex\n    11\timport matplotlib.pyplot as plt\n    12\timport matplotlib as mpl\n    13\timport matplotlib.transforms as mtransforms\n    14\timport matplotlib.collections as mcollections\n    15\timport matplotlib.lines as mlines\n    16\tfrom matplotlib.legend_handler import HandlerTuple\n    17\timport matplotlib.legend as mlegend\n    18\tfrom matplotlib import rc_context\n    19\tfrom matplotlib.font_manager import FontProperties\n      # ...\n   775\t\n   776\t\n   777\tdef test_get_set_draggable():\n   778\t    legend = plt.legend()\n   779\t    assert not legend.get_draggable()\n   780\t    legend.set_draggable(True)\n   781\t    assert legend.get_draggable()\n   782\t    legend.set_draggable(False)\n   783\t    assert not legend.get_draggable()\n      # ...\n```\n",
        "summary": "Found relevant code sections in the search results.",
        "terminal": false,
        "expect_correction": false,
        "properties": {
          "search_hits": [],
          "search_tokens": 1224,
          "new_span_ids": [
            "test_get_set_draggable"
          ]
        },
        "execution_completion": {
          "model": "claude-3-5-sonnet-20241022",
          "input": [
            {
              "role": "user",
              "content": "Search request:\nSearching for code using the query: legend draggable tests\n\nIdentify the relevant code sections in the search results to use them. \n\n<search_results>\nlib/matplotlib/tests/test_legend.py\n```\n\n\n\n<span id='imports'>\n     1\timport collections\n     2\timport platform\n     3\tfrom unittest import mock\n     4\timport warnings\n     5\t\n     6\timport numpy as np\n     7\timport pytest\n     8\t\n     9\tfrom matplotlib.testing.decorators import check_figures_equal, image_comparison\n    10\tfrom matplotlib.testing._markers import needs_usetex\n    11\timport matplotlib.pyplot as plt\n    12\timport matplotlib as mpl\n    13\timport matplotlib.transforms as mtransforms\n    14\timport matplotlib.collections as mcollections\n    15\timport matplotlib.lines as mlines\n    16\tfrom matplotlib.legend_handler import HandlerTuple\n    17\timport matplotlib.legend as mlegend\n    18\tfrom matplotlib import rc_context\n    19\tfrom matplotlib.font_manager import FontProperties\n      # ...\n\n\n<span id='test_legend_labelcolor_rcparam_markeredgecolor_short'>\n   736\t\n   737\t\n   738\tdef test_legend_labelcolor_rcparam_markeredgecolor_short():\n   739\t    # test the labelcolor for labelcolor='markeredgecolor'\n   740\t    fig, ax = plt.subplots()\n   741\t    ax.plot(np.arange(10), np.arange(10)*1, label='#1', markeredgecolor='r')\n   742\t    ax.plot(np.arange(10), np.arange(10)*2, label='#2', markeredgecolor='g')\n   743\t    ax.plot(np.arange(10), np.arange(10)*3, label='#3', markeredgecolor='b')\n   744\t\n   745\t    mpl.rcParams['legend.labelcolor'] = 'mec'\n   746\t    leg = ax.legend()\n   747\t    for text, color in zip(leg.get_texts(), ['r', 'g', 'b']):\n   748\t        assert mpl.colors.same_color(text.get_color(), color)\n\n\n<span id='test_legend_labelcolor_rcparam_markerfacecolor'>\n   749\t\n   750\t\n   751\tdef test_legend_labelcolor_rcparam_markerfacecolor():\n   752\t    # test the labelcolor for labelcolor='markeredgecolor'\n   753\t    fig, ax = plt.subplots()\n   754\t    ax.plot(np.arange(10), np.arange(10)*1, label='#1', markerfacecolor='r')\n   755\t    ax.plot(np.arange(10), np.arange(10)*2, label='#2', markerfacecolor='g')\n   756\t    ax.plot(np.arange(10), np.arange(10)*3, label='#3', markerfacecolor='b')\n   757\t\n   758\t    mpl.rcParams['legend.labelcolor'] = 'markerfacecolor'\n   759\t    leg = ax.legend()\n   760\t    for text, color in zip(leg.get_texts(), ['r', 'g', 'b']):\n   761\t        assert mpl.colors.same_color(text.get_color(), color)\n\n\n<span id='test_legend_labelcolor_rcparam_markerfacecolor_short'>\n   762\t\n   763\t\n   764\tdef test_legend_labelcolor_rcparam_markerfacecolor_short():\n   765\t    # test the labelcolor for labelcolor='markeredgecolor'\n   766\t    fig, ax = plt.subplots()\n   767\t    ax.plot(np.arange(10), np.arange(10)*1, label='#1', markerfacecolor='r')\n   768\t    ax.plot(np.arange(10), np.arange(10)*2, label='#2', markerfacecolor='g')\n   769\t    ax.plot(np.arange(10), np.arange(10)*3, label='#3', markerfacecolor='b')\n   770\t\n   771\t    mpl.rcParams['legend.labelcolor'] = 'mfc'\n   772\t    leg = ax.legend()\n   773\t    for text, color in zip(leg.get_texts(), ['r', 'g', 'b']):\n   774\t        assert mpl.colors.same_color(text.get_color(), color)\n\n\n<span id='test_get_set_draggable'>\n   775\t\n   776\t\n   777\tdef test_get_set_draggable():\n   778\t    legend = plt.legend()\n   779\t    assert not legend.get_draggable()\n   780\t    legend.set_draggable(True)\n   781\t    assert legend.get_draggable()\n   782\t    legend.set_draggable(False)\n   783\t    assert not legend.get_draggable()\n\n\n<span id='test_alpha_handles'>\n   784\t\n   785\t\n   786\tdef test_alpha_handles():\n   787\t    x, n, hh = plt.hist([1, 2, 3], alpha=0.25, label='data', color='red')\n   788\t    legend = plt.legend()\n   789\t    for lh in legend.legendHandles:\n   790\t        lh.set_alpha(1.0)\n   791\t    assert lh.get_facecolor()[:-1] == hh[1].get_facecolor()[:-1]\n   792\t    assert lh.get_edgecolor()[:-1] == hh[1].get_edgecolor()[:-1]\n\n\n<span id='test_usetex_no_warn'>\n   793\t\n   794\t\n   795\t@needs_usetex\n   796\tdef test_usetex_no_warn(caplog):\n   797\t    mpl.rcParams['font.family'] = 'serif'\n   798\t    mpl.rcParams['font.serif'] = 'Computer Modern'\n   799\t    mpl.rcParams['text.usetex'] = True\n   800\t\n   801\t    fig, ax = plt.subplots()\n   802\t    ax.plot(0, 0, label='input')\n   803\t    ax.legend(title=\"My legend\")\n   804\t\n   805\t    fig.canvas.draw()\n   806\t    assert \"Font family ['serif'] not found.\" not in caplog.text\n      # ...\n\n\n<span id='test_legend_face_edgecolor'>\n   896\t\n   897\t\n   898\tdef test_legend_face_edgecolor():\n   899\t    # Smoke test for PolyCollection legend handler with 'face' edgecolor.\n   900\t    fig, ax = plt.subplots()\n   901\t    ax.fill_between([0, 1, 2], [1, 2, 3], [2, 3, 4],\n   902\t                    facecolor='r', edgecolor='face', label='Fill')\n   903\t    ax.legend()\n\n\n<span id='test_legend_text_axes'>\n   904\t\n   905\t\n   906\tdef test_legend_text_axes():\n   907\t    fig, ax = plt.subplots()\n   908\t    ax.plot([1, 2], [3, 4], label='line')\n   909\t    leg = ax.legend()\n   910\t\n   911\t    assert leg.axes is ax\n   912\t    assert leg.get_texts()[0].axes is ax\n\n\n<span id='test_handlerline2d'>\n   913\t\n   914\t\n   915\tdef test_handlerline2d():\n   916\t    # Test marker consistency for monolithic Line2D legend handler (#11357).\n   917\t    fig, ax = plt.subplots()\n   918\t    ax.scatter([0, 1], [0, 1], marker=\"v\")\n   919\t    handles = [mlines.Line2D([0], [0], marker=\"v\")]\n   920\t    leg = ax.legend(handles, [\"Aardvark\"], numpoints=1)\n   921\t    assert handles[0].get_marker() == leg.legendHandles[0].get_marker()\n      # ...\n\n\n<span id='test_legend_markers_from_line2d'>\n   939\t\n   940\t\n   941\tdef test_legend_markers_from_line2d():\n   942\t    # Test that markers can be copied for legend lines (#17960)\n   943\t    _markers = ['.', '*', 'v']\n   944\t    fig, ax = plt.subplots()\n   945\t    lines = [mlines.Line2D([0], [0], ls='None', marker=mark)\n   946\t             for mark in _markers]\n   947\t    labels = [\"foo\", \"bar\", \"xyzzy\"]\n   948\t    markers = [line.get_marker() for line in lines]\n   949\t    legend = ax.legend(lines, labels)\n   950\t\n   951\t    new_markers = [line.get_marker() for line in legend.get_lines()]\n   952\t    new_labels = [text.get_text() for text in legend.get_texts()]\n   953\t\n   954\t    assert markers == new_markers == _markers\n   955\t    assert labels == new_labels\n\n\n<span id='test_ncol_ncols'>\n   956\t\n   957\t\n   958\t@check_figures_equal()\n   959\tdef test_ncol_ncols(fig_test, fig_ref):\n   960\t    # Test that both ncol and ncols work\n   961\t    strings = [\"a\", \"b\", \"c\", \"d\", \"e\", \"f\"]\n   962\t    ncols = 3\n   963\t    fig_test.legend(strings, ncol=ncols)\n   964\t    fig_ref.legend(strings, ncols=ncols)\n```\n\n</search_result>\n"
            }
          ],
          "response": {
            "id": "msg_01E9WPS9wef6E3KAsXWVLBqc",
            "content": [
              {
                "text": "I'll analyze the search results for code related to legend draggable tests.\n\nFrom the search results, I can identify one directly relevant test section that deals with legend draggability - the `test_get_set_draggable` function. This test checks the basic functionality of making a legend draggable or not draggable.\n\nLet me identify this section using the Action tool:",
                "type": "text"
              },
              {
                "id": "toolu_015MNsXxmjqkmfBc8xbXVkJG",
                "input": {
                  "scratch_pad": "The search results contain one test function that is directly relevant to testing legend draggability:\n\ntest_get_set_draggable (lines 777-783):\n- Tests the get_draggable() and set_draggable() methods of the legend\n- Verifies that:\n  1. Legend is not draggable by default\n  2. Can be made draggable\n  3. Can be made non-draggable again\n  \nThis is the most relevant section as it specifically tests the draggable functionality of legends.",
                  "identified_spans": [
                    {
                      "file_path": "lib/matplotlib/tests/test_legend.py",
                      "start_line": 777,
                      "end_line": 783
                    }
                  ]
                },
                "name": "Action",
                "type": "tool_use"
              }
            ],
            "model": "claude-3-5-sonnet-20241022",
            "role": "assistant",
            "stop_reason": "tool_use",
            "stop_sequence": null,
            "type": "message",
            "usage": {
              "cache_creation_input_tokens": 0,
              "cache_read_input_tokens": 0,
              "input_tokens": 3324,
              "output_tokens": 315
            }
          },
          "usage": {
            "completion_cost": 0.014697,
            "completion_tokens": 315,
            "prompt_tokens": 3324,
            "cached_tokens": 0
          }
        }
      },
      "file_context": {
        "max_tokens": 8000,
        "files": [
          {
            "file_path": "lib/matplotlib/legend.py",
            "spans": [
              {
                "span_id": "imports",
                "pinned": false
              },
              {
                "span_id": "Legend",
                "pinned": false
              },
              {
                "span_id": "Legend.__init__",
                "pinned": false
              },
              {
                "span_id": "Legend.draw",
                "pinned": false
              },
              {
                "span_id": "DraggableLegend",
                "pinned": false
              },
              {
                "span_id": "DraggableLegend.__init__",
                "pinned": false
              },
              {
                "span_id": "DraggableLegend.finalize_offset",
                "pinned": false
              },
              {
                "span_id": "DraggableLegend._update_loc",
                "pinned": false
              },
              {
                "span_id": "DraggableLegend._update_bbox_to_anchor",
                "pinned": false
              },
              {
                "span_id": "Legend.set_draggable",
                "pinned": false
              },
              {
                "span_id": "Legend.get_draggable",
                "pinned": false
              }
            ],
            "show_all_spans": false,
            "patch": null
          },
          {
            "file_path": "lib/matplotlib/tests/test_legend.py",
            "spans": [
              {
                "span_id": "imports",
                "pinned": false
              },
              {
                "span_id": "test_get_set_draggable",
                "pinned": false
              }
            ],
            "show_all_spans": false,
            "patch": null
          }
        ]
      },
      "completions": {
        "build_action": {
          "model": "claude-3-5-sonnet-20241022",
          "input": [
            {
              "role": "user",
              "content": "<task>\nlegend draggable as keyword\n<!--To help us understand and resolve your issue, please fill out the form to the best of your ability.-->\r\n<!--You can feel free to delete the sections that do not apply.-->\r\n\r\n### Feature request\r\n\r\n**There is not keyword to make legend draggable at creation**\r\n\r\n<!--A short 1-2 sentences that succinctly describes the bug-->\r\n\r\nIs there a code reason why one can not add a \"draggable=True\" keyword to the __init__ function for Legend?  This would be more handy than having to call it after legend creation.  And, naively, it would seem simple to do.  But maybe there is a reason why it would not work?\n\n</task>"
            },
            {
              "role": "assistant",
              "content": [
                {
                  "type": "text",
                  "text": "<thoughts>\n1. First, I need to locate the Legend class implementation to understand its current initialization\n2. Then I'll check if there are any technical limitations for adding the draggable parameter\n3. I'll also look for any tests related to legend draggability to understand the current testing approach\n4. Finally, I'll implement the change if there are no blockers\n</thoughts>"
                },
                {
                  "id": "call_85bc3e3e",
                  "input": {
                    "file_pattern": null,
                    "class_name": "Legend"
                  },
                  "type": "tool_use",
                  "name": "FindClass"
                }
              ]
            },
            {
              "role": "user",
              "content": [
                {
                  "tool_use_id": "call_85bc3e3e",
                  "content": "<observation>\nFound 40 code sections.\n\nViewed relevant code:\nlib/matplotlib/legend.py\n```\n\n    23\t\n    24\timport itertools\n    25\timport logging\n    26\timport time\n    27\t\n    28\timport numpy as np\n    29\t\n    30\timport matplotlib as mpl\n    31\tfrom matplotlib import _api, _docstring, colors, offsetbox\n    32\tfrom matplotlib.artist import Artist, allow_rasterization\n    33\tfrom matplotlib.cbook import silent_list\n    34\tfrom matplotlib.font_manager import FontProperties\n    35\tfrom matplotlib.lines import Line2D\n    36\tfrom matplotlib.patches import (Patch, Rectangle, Shadow, FancyBboxPatch,\n    37\t                                StepPatch)\n    38\tfrom matplotlib.collections import (\n    39\t    Collection, CircleCollection, LineCollection, PathCollection,\n    40\t    PolyCollection, RegularPolyCollection)\n    41\tfrom matplotlib.text import Text\n    42\tfrom matplotlib.transforms import Bbox, BboxBase, TransformedBbox\n    43\tfrom matplotlib.transforms import BboxTransformTo, BboxTransformFrom\n    44\tfrom matplotlib.offsetbox import (\n    45\t    AnchoredOffsetbox, DraggableOffsetBox,\n    46\t    HPacker, VPacker,\n    47\t    DrawingArea, TextArea,\n    48\t)\n    49\tfrom matplotlib.container import ErrorbarContainer, BarContainer, StemContainer\n    50\tfrom . import legend_handler\n      # ...\n   290\t\n   291\t\n   292\tclass Legend(Artist):\n   293\t    \"\"\"\n   294\t    Place a legend on the axes at location loc.\n   295\t    \"\"\"\n   296\t\n   297\t    # 'best' is only implemented for axes legends\n   298\t    codes = {'best': 0, **AnchoredOffsetbox.codes}\n   299\t    zorder = 5\n          # ...\n   303\t\n   304\t    @_api.make_keyword_only(\"3.6\", \"loc\")\n   305\t    @_docstring.dedent_interpd\n   306\t    def __init__(\n   307\t        self, parent, handles, labels,\n   308\t        loc=None,\n   309\t        numpoints=None,      # number of points in the legend line\n   310\t        markerscale=None,    # relative size of legend markers vs. original\n   311\t        markerfirst=True,    # left/right ordering of legend marker and label\n   312\t        scatterpoints=None,  # number of scatter points\n   313\t        scatteryoffsets=None,\n   314\t        prop=None,           # properties for the legend texts\n   315\t        fontsize=None,       # keyword to set font size directly\n   316\t        labelcolor=None,     # keyword to set the text color\n   317\t\n   318\t        # spacing & pad defined as a fraction of the font-size\n   319\t        borderpad=None,      # whitespace inside the legend border\n   320\t        labelspacing=None,   # vertical space between the legend entries\n   321\t        handlelength=None,   # length of the legend handles\n   322\t        handleheight=None,   # height of the legend handles\n   323\t        handletextpad=None,  # pad between the legend handle and text\n   324\t        borderaxespad=None,  # pad between the axes and legend border\n   325\t        columnspacing=None,  # spacing between columns\n   326\t\n   327\t        ncols=1,     # number of columns\n   328\t        mode=None,  # horizontal distribution of columns: None or \"expand\"\n   329\t\n   330\t        fancybox=None,  # True: fancy box, False: rounded box, None: rcParam\n   331\t        shadow=None,\n   332\t        title=None,           # legend title\n   333\t        title_fontsize=None,  # legend title font size\n   334\t        framealpha=None,      # set frame alpha\n   335\t        edgecolor=None,       # frame patch edgecolor\n   336\t        facecolor=None,       # frame patch facecolor\n   337\t\n   338\t        bbox_to_anchor=None,  # bbox to which the legend will be anchored\n   339\t        bbox_transform=None,  # transform for the bbox\n   340\t        frameon=None,         # draw frame\n   341\t        handler_map=None,\n   342\t        title_fontproperties=None,  # properties for the legend title\n   343\t        alignment=\"center\",       # control the alignment within the legend box\n   344\t        *,\n   345\t        ncol=1  # synonym for ncols (backward compatibility)\n   346\t    ):\n   347\t        \"\"\"\n   348\t        Parameters\n   349\t        ----------\n   350\t        parent : `~matplotlib.axes.Axes` or `.Figure`\n   351\t            The artist that contains the legend.\n   352\t\n   353\t        handles : list of `.Artist`\n   354\t            A list of Artists (lines, patches) to be added to the legend.\n   355\t\n   356\t        labels : list of str\n   357\t            A list of labels to show next to the artists. The length of handles\n   358\t            and labels should be the same. If they are not, they are truncated\n   359\t            to the smaller of both lengths.\n   360\t\n   361\t        Other Parameters\n   362\t        ----------------\n   363\t        %(_legend_kw_doc)s\n   364\t\n   365\t        Notes\n   366\t        -----\n   367\t        Users can specify any arbitrary location for the legend using the\n   368\t        *bbox_to_anchor* keyword argument. *bbox_to_anchor* can be a\n   369\t        `.BboxBase` (or derived there from) or a tuple of 2 or 4 floats.\n   370\t        See `set_bbox_to_anchor` for more detail.\n   371\t\n   372\t        The legend location can be specified by setting *loc* with a tuple of\n   373\t        2 floats, which is interpreted as the lower-left corner of the legend\n   374\t        in the normalized axes coordinate.\n   375\t        \"\"\"\n   376\t        # local import only to avoid circularity\n   377\t        from matplotlib.axes import Axes\n   378\t        from matplotlib.figure import FigureBase\n   379\t\n   380\t        super().__init__()\n   381\t\n   382\t        if prop is None:\n   383\t            if fontsize is not None:\n   384\t                self.prop = FontProperties(size=fontsize)\n   385\t            else:\n   386\t                self.prop = FontProperties(\n   387\t                    size=mpl.rcParams[\"legend.fontsize\"])\n   388\t        else:\n   389\t            self.prop = FontProperties._from_any(prop)\n   390\t            if isinstance(prop, dict) and \"size\" not in prop:\n   391\t                self.prop.set_size(mpl.rcParams[\"legend.fontsize\"])\n   392\t\n   393\t        self._fontsize = self.prop.get_size_in_points()\n   394\t\n   395\t        self.texts = []\n   396\t        self.legendHandles = []\n   397\t        self._legend_title_box = None\n   398\t\n   399\t        #: A dictionary with the extra handler mappings for this Legend\n   400\t        #: instance.\n   401\t        self._custom_handler_map = handler_map\n   402\t\n   403\t        def val_or_rc(val, rc_name):\n   404\t            return val if val is not None else mpl.rcParams[rc_name]\n   405\t\n   406\t        self.numpoints = val_or_rc(numpoints, 'legend.numpoints')\n   407\t        self.markerscale = val_or_rc(markerscale, 'legend.markerscale')\n   408\t        self.scatterpoints = val_or_rc(scatterpoints, 'legend.scatterpoints')\n   409\t        self.borderpad = val_or_rc(borderpad, 'legend.borderpad')\n   410\t        self.labelspacing = val_or_rc(labelspacing, 'legend.labelspacing')\n   411\t        self.handlelength = val_or_rc(handlelength, 'legend.handlelength')\n   412\t        self.handleheight = val_or_rc(handleheight, 'legend.handleheight')\n   413\t        self.handletextpad = val_or_rc(handletextpad, 'legend.handletextpad')\n   414\t        self.borderaxespad = val_or_rc(borderaxespad, 'legend.borderaxespad')\n   415\t        self.columnspacing = val_or_rc(columnspacing, 'legend.columnspacing')\n   416\t        self.shadow = val_or_rc(shadow, 'legend.shadow')\n   417\t        # trim handles and labels if illegal label...\n   418\t        _lab, _hand = [], []\n   419\t        for label, handle in zip(labels, handles):\n   420\t            if isinstance(label, str) and label.startswith('_'):\n   421\t                _api.warn_external(f\"The label {label!r} of {handle!r} starts \"\n   422\t                                   \"with '_'. It is thus excluded from the \"\n   423\t                                   \"legend.\")\n   424\t            else:\n   425\t                _lab.append(label)\n   426\t                _hand.append(handle)\n   427\t        labels, handles = _lab, _hand\n   428\t\n   429\t        handles = list(handles)\n   430\t        if len(handles) < 2:\n   431\t            ncols = 1\n   432\t        self._ncols = ncols if ncols != 1 else ncol\n   433\t\n   434\t        if self.numpoints <= 0:\n   435\t            raise ValueError(\"numpoints must be > 0; it was %d\" % numpoints)\n   436\t\n   437\t        # introduce y-offset for handles of the scatter plot\n   438\t        if scatteryoffsets is None:\n   439\t            self._scatteryoffsets = np.array([3. / 8., 4. / 8., 2.5 / 8.])\n   440\t        else:\n   441\t            self._scatteryoffsets = np.asarray(scatteryoffsets)\n   442\t        reps = self.scatterpoints // len(self._scatteryoffsets) + 1\n   443\t        self._scatteryoffsets = np.tile(self._scatteryoffsets,\n   444\t                                        reps)[:self.scatterpoints]\n   445\t\n   446\t        # _legend_box is a VPacker instance that contains all\n   447\t        # legend items and will be initialized from _init_legend_box()\n   448\t        # method.\n   449\t        self._legend_box = None\n   450\t\n   451\t        if isinstance(parent, Axes):\n   452\t            self.isaxes = True\n   453\t            self.axes = parent\n   454\t            self.set_figure(parent.figure)\n   455\t        elif isinstance(parent, FigureBase):\n   456\t            self.isaxes = False\n   457\t            self.set_figure(parent)\n   458\t        else:\n   459\t            raise TypeError(\n   460\t                \"Legend needs either Axes or FigureBase as parent\"\n   461\t            )\n   462\t        self.parent = parent\n   463\t\n   464\t        self._loc_used_default = loc is None\n   465\t        if loc is None:\n   466\t            loc = mpl.rcParams[\"legend.loc\"]\n   467\t            if not self.isaxes and loc in [0, 'best']:\n   468\t                loc = 'upper right'\n   469\t        if isinstance(loc, str):\n   470\t            loc = _api.check_getitem(self.codes, loc=loc)\n   471\t        if not self.isaxes and loc == 0:\n   472\t            raise ValueError(\n   473\t                \"Automatic legend placement (loc='best') not implemented for \"\n   474\t                \"figure legend\")\n   475\t\n   476\t        self._mode = mode\n   477\t        self.set_bbox_to_anchor(bbox_to_anchor, bbox_transform)\n   478\t\n   479\t        # We use FancyBboxPatch to draw a legend frame. The location\n   480\t        # and size of the box will be updated during the drawing time.\n   481\t\n   482\t        if facecolor is None:\n   483\t            facecolor = mpl.rcParams[\"legend.facecolor\"]\n   484\t        if facecolor == 'inherit':\n   485\t            facecolor = mpl.rcParams[\"axes.facecolor\"]\n   486\t\n   487\t        if edgecolor is None:\n   488\t            edgecolor = mpl.rcParams[\"legend.edgecolor\"]\n   489\t        if edgecolor == 'inherit':\n   490\t            edgecolor = mpl.rcParams[\"axes.edgecolor\"]\n   491\t\n   492\t        if fancybox is None:\n   493\t            fancybox = mpl.rcParams[\"legend.fancybox\"]\n   494\t\n   495\t        self.legendPatch = FancyBboxPatch(\n   496\t            xy=(0, 0), width=1, height=1,\n   497\t            facecolor=facecolor, edgecolor=edgecolor,\n   498\t            # If shadow is used, default to alpha=1 (#8943).\n   499\t            alpha=(framealpha if framealpha is not None\n   500\t                   else 1 if shadow\n   501\t                   else mpl.rcParams[\"legend.framealpha\"]),\n   502\t            # The width and height of the legendPatch will be set (in draw())\n   503\t            # to the length that includes the padding. Thus we set pad=0 here.\n   504\t            boxstyle=(\"round,pad=0,rounding_size=0.2\" if fancybox\n   505\t                      else \"square,pad=0\"),\n   506\t            mutation_scale=self._fontsize,\n   507\t            snap=True,\n   508\t            visible=(frameon if frameon is not None\n   509\t                     else mpl.rcParams[\"legend.frameon\"])\n   510\t        )\n   511\t        self._set_artist_props(self.legendPatch)\n   512\t\n   513\t        _api.check_in_list([\"center\", \"left\", \"right\"], alignment=alignment)\n   514\t        self._alignment = alignment\n   515\t\n   516\t        # init with null renderer\n   517\t        self._init_legend_box(handles, labels, markerfirst)\n   518\t\n   519\t        tmp = self._loc_used_default\n   520\t        self._set_loc(loc)\n   521\t        self._loc_used_default = tmp  # ignore changes done by _set_loc\n   522\t\n   523\t        # figure out title font properties:\n   524\t        if title_fontsize is not None and title_fontproperties is not None:\n   525\t            raise ValueError(\n   526\t                \"title_fontsize and title_fontproperties can't be specified \"\n   527\t                \"at the same time. Only use one of them. \")\n   528\t        title_prop_fp = FontProperties._from_any(title_fontproperties)\n   529\t        if isinstance(title_fontproperties, dict):\n   530\t            if \"size\" not in title_fontproperties:\n   531\t                title_fontsize = mpl.rcParams[\"legend.title_fontsize\"]\n   532\t                title_prop_fp.set_size(title_fontsize)\n   533\t        elif title_fontsize is not None:\n   534\t            title_prop_fp.set_size(title_fontsize)\n   535\t        elif not isinstance(title_fontproperties, FontProperties):\n   536\t            title_fontsize = mpl.rcParams[\"legend.title_fontsize\"]\n   537\t            title_prop_fp.set_size(title_fontsize)\n   538\t\n   539\t        self.set_title(title, prop=title_prop_fp)\n   540\t        self._draggable = None\n   541\t\n   542\t        # set the text color\n   543\t\n   544\t        color_getters = {  # getter function depends on line or patch\n   545\t            'linecolor':       ['get_color',           'get_facecolor'],\n   546\t            'markerfacecolor': ['get_markerfacecolor', 'get_facecolor'],\n   547\t            'mfc':             ['get_markerfacecolor', 'get_facecolor'],\n   548\t            'markeredgecolor': ['get_markeredgecolor', 'get_edgecolor'],\n   549\t            'mec':             ['get_markeredgecolor', 'get_edgecolor'],\n   550\t        }\n   551\t        if labelcolor is None:\n   552\t            if mpl.rcParams['legend.labelcolor'] is not None:\n   553\t                labelcolor = mpl.rcParams['legend.labelcolor']\n   554\t            else:\n   555\t                labelcolor = mpl.rcParams['text.color']\n   556\t        if isinstance(labelcolor, str) and labelcolor in color_getters:\n   557\t            getter_names = color_getters[labelcolor]\n   558\t            for handle, text in zip(self.legendHandles, self.texts):\n   559\t                for getter_name in getter_names:\n   560\t                    try:\n   561\t                        color = getattr(handle, getter_name)()\n   562\t                        text.set_color(color)\n   563\t                        break\n   564\t                    except AttributeError:\n   565\t                        pass\n   566\t        elif isinstance(labelcolor, str) and labelcolor == 'none':\n   567\t            for text in self.texts:\n   568\t                text.set_color(labelcolor)\n   569\t        elif np.iterable(labelcolor):\n   570\t            for text, color in zip(self.texts,\n   571\t                                   itertools.cycle(\n   572\t                                       colors.to_rgba_array(labelcolor))):\n   573\t                text.set_color(color)\n   574\t        else:\n   575\t            raise ValueError(f\"Invalid labelcolor: {labelcolor!r}\")\n          # ...\n   622\t\n   623\t    @allow_rasterization\n   624\t    def draw(self, renderer):\n   625\t        # docstring inherited\n   626\t        if not self.get_visible():\n   627\t            return\n   628\t\n   629\t        renderer.open_group('legend', gid=self.get_gid())\n   630\t\n   631\t        fontsize = renderer.points_to_pixels(self._fontsize)\n   632\t\n   633\t        # if mode == fill, set the width of the legend_box to the\n   634\t        # width of the parent (minus pads)\n   635\t        if self._mode in [\"expand\"]:\n   636\t            pad = 2 * (self.borderaxespad + self.borderpad) * fontsize\n   637\t            self._legend_box.set_width(self.get_bbox_to_anchor().width - pad)\n   638\t\n   639\t        # update the location and size of the legend. This needs to\n   640\t        # be done in any case to clip the figure right.\n   641\t        bbox = self._legend_box.get_window_extent(renderer)\n   642\t        self.legendPatch.set_bounds(bbox.bounds)\n   643\t        self.legendPatch.set_mutation_scale(fontsize)\n   644\t\n   645\t        if self.shadow:\n   646\t            Shadow(self.legendPatch, 2, -2).draw(renderer)\n   647\t\n   648\t        self.legendPatch.draw(renderer)\n   649\t        self._legend_box.draw(renderer)\n   650\t\n   651\t        renderer.close_group('legend')\n   652\t        self.stale = False\n   653\t\n   654\t    # _default_handler_map defines the default mapping between plot\n   655\t    # elements and the legend handlers.\n          # ...\n      # ...\n```\n\n</observation>",
                  "type": "tool_result",
                  "cache_control": {
                    "type": "ephemeral"
                  }
                }
              ]
            },
            {
              "role": "assistant",
              "content": [
                {
                  "type": "text",
                  "text": "<thoughts>\n1. I found the Legend class implementation in lib/matplotlib/legend.py\n2. I notice that:\n   - The Legend class already has a `_draggable` attribute initialized as None in __init__ (line 540)\n   - The class inherits from Artist and uses DraggableOffsetBox (imported on line 45)\n3. Let me search for the draggable functionality to understand how it's currently implemented\n</thoughts>"
                },
                {
                  "id": "call_05070c78",
                  "input": {
                    "file_pattern": null,
                    "query": "legend draggable method implementation",
                    "category": "implementation"
                  },
                  "type": "tool_use",
                  "name": "SemanticSearch",
                  "cache_control": {
                    "type": "ephemeral"
                  }
                }
              ]
            },
            {
              "role": "user",
              "content": [
                {
                  "tool_use_id": "call_05070c78",
                  "content": "<observation>\nFound 14 code sections.\n\nViewed relevant code:\nlib/matplotlib/legend.py\n```\n\n    23\t\n    24\timport itertools\n    25\timport logging\n    26\timport time\n    27\t\n    28\timport numpy as np\n    29\t\n    30\timport matplotlib as mpl\n    31\tfrom matplotlib import _api, _docstring, colors, offsetbox\n    32\tfrom matplotlib.artist import Artist, allow_rasterization\n    33\tfrom matplotlib.cbook import silent_list\n    34\tfrom matplotlib.font_manager import FontProperties\n    35\tfrom matplotlib.lines import Line2D\n    36\tfrom matplotlib.patches import (Patch, Rectangle, Shadow, FancyBboxPatch,\n    37\t                                StepPatch)\n    38\tfrom matplotlib.collections import (\n    39\t    Collection, CircleCollection, LineCollection, PathCollection,\n    40\t    PolyCollection, RegularPolyCollection)\n    41\tfrom matplotlib.text import Text\n    42\tfrom matplotlib.transforms import Bbox, BboxBase, TransformedBbox\n    43\tfrom matplotlib.transforms import BboxTransformTo, BboxTransformFrom\n    44\tfrom matplotlib.offsetbox import (\n    45\t    AnchoredOffsetbox, DraggableOffsetBox,\n    46\t    HPacker, VPacker,\n    47\t    DrawingArea, TextArea,\n    48\t)\n    49\tfrom matplotlib.container import ErrorbarContainer, BarContainer, StemContainer\n    50\tfrom . import legend_handler\n    51\t\n    52\t\n    53\tclass DraggableLegend(DraggableOffsetBox):\n    54\t    def __init__(self, legend, use_blit=False, update=\"loc\"):\n    55\t        \"\"\"\n    56\t        Wrapper around a `.Legend` to support mouse dragging.\n    57\t\n    58\t        Parameters\n    59\t        ----------\n    60\t        legend : `.Legend`\n    61\t            The `.Legend` instance to wrap.\n    62\t        use_blit : bool, optional\n    63\t            Use blitting for faster image composition. For details see\n    64\t            :ref:`func-animation`.\n    65\t        update : {'loc', 'bbox'}, optional\n    66\t            If \"loc\", update the *loc* parameter of the legend upon finalizing.\n    67\t            If \"bbox\", update the *bbox_to_anchor* parameter.\n    68\t        \"\"\"\n    69\t        self.legend = legend\n    70\t\n    71\t        _api.check_in_list([\"loc\", \"bbox\"], update=update)\n    72\t        self._update = update\n    73\t\n    74\t        super().__init__(legend, legend._legend_box, use_blit=use_blit)\n    75\t\n    76\t    def finalize_offset(self):\n    77\t        if self._update == \"loc\":\n    78\t            self._update_loc(self.get_loc_in_canvas())\n    79\t        elif self._update == \"bbox\":\n    80\t            self._bbox_to_anchor(self.get_loc_in_canvas())\n    81\t\n    82\t    def _update_loc(self, loc_in_canvas):\n    83\t        bbox = self.legend.get_bbox_to_anchor()\n    84\t        # if bbox has zero width or height, the transformation is\n    85\t        # ill-defined. Fall back to the default bbox_to_anchor.\n    86\t        if bbox.width == 0 or bbox.height == 0:\n    87\t            self.legend.set_bbox_to_anchor(None)\n    88\t            bbox = self.legend.get_bbox_to_anchor()\n    89\t        _bbox_transform = BboxTransformFrom(bbox)\n    90\t        self.legend._loc = tuple(_bbox_transform.transform(loc_in_canvas))\n    91\t\n    92\t    def _update_bbox_to_anchor(self, loc_in_canvas):\n    93\t        loc_in_bbox = self.legend.axes.transAxes.transform(loc_in_canvas)\n    94\t        self.legend.set_bbox_to_anchor(loc_in_bbox)\n      # ...\n   290\t\n   291\t\n   292\tclass Legend(Artist):\n   293\t    \"\"\"\n   294\t    Place a legend on the axes at location loc.\n   295\t    \"\"\"\n   296\t\n   297\t    # 'best' is only implemented for axes legends\n   298\t    codes = {'best': 0, **AnchoredOffsetbox.codes}\n   299\t    zorder = 5\n          # ...\n  1078\t\n  1079\t    def set_draggable(self, state, use_blit=False, update='loc'):\n  1080\t        \"\"\"\n  1081\t        Enable or disable mouse dragging support of the legend.\n  1082\t\n  1083\t        Parameters\n  1084\t        ----------\n  1085\t        state : bool\n  1086\t            Whether mouse dragging is enabled.\n  1087\t        use_blit : bool, optional\n  1088\t            Use blitting for faster image composition. For details see\n  1089\t            :ref:`func-animation`.\n  1090\t        update : {'loc', 'bbox'}, optional\n  1091\t            The legend parameter to be changed when dragged:\n  1092\t\n  1093\t            - 'loc': update the *loc* parameter of the legend\n  1094\t            - 'bbox': update the *bbox_to_anchor* parameter of the legend\n  1095\t\n  1096\t        Returns\n  1097\t        -------\n  1098\t        `.DraggableLegend` or *None*\n  1099\t            If *state* is ``True`` this returns the `.DraggableLegend` helper\n  1100\t            instance. Otherwise this returns *None*.\n  1101\t        \"\"\"\n  1102\t        if state:\n  1103\t            if self._draggable is None:\n  1104\t                self._draggable = DraggableLegend(self,\n  1105\t                                                  use_blit,\n  1106\t                                                  update=update)\n  1107\t        else:\n  1108\t            if self._draggable is not None:\n  1109\t                self._draggable.disconnect()\n  1110\t            self._draggable = None\n  1111\t        return self._draggable\n  1112\t\n  1113\t    def get_draggable(self):\n  1114\t        \"\"\"Return ``True`` if the legend is draggable, ``False`` otherwise.\"\"\"\n  1115\t        return self._draggable is not None\n  1116\t\n  1117\t\n  1118\t# Helper functions to parse legend arguments for both `figure.legend` and\n  1119\t# `axes.legend`:\n      # ...\n```\n\n</observation>",
                  "type": "tool_result",
                  "cache_control": {
                    "type": "ephemeral"
                  }
                }
              ]
            }
          ],
          "response": {
            "id": "msg_01N5QWDcqouaRQntS812qKvp",
            "content": [
              {
                "text": "<thoughts>\n1. I found the draggable functionality implementation:\n   - There's a DraggableLegend class that inherits from DraggableOffsetBox\n   - Legend class has set_draggable() and get_draggable() methods\n   - The _draggable attribute is initialized as None in __init__\n2. Adding a draggable parameter to __init__ seems feasible since:\n   - The infrastructure for draggable legends already exists\n   - It would just need to call set_draggable() during initialization\n3. Let me check if there are any tests for the draggable functionality to understand how to test the new parameter\n</thoughts>",
                "type": "text"
              },
              {
                "id": "toolu_01XJoFWk8ucJYURKrm3mZo17",
                "input": {
                  "file_pattern": null,
                  "query": "legend draggable tests",
                  "category": "test"
                },
                "name": "SemanticSearch",
                "type": "tool_use"
              }
            ],
            "model": "claude-3-5-sonnet-20241022",
            "role": "assistant",
            "stop_reason": "tool_use",
            "stop_sequence": null,
            "type": "message",
            "usage": {
              "cache_creation_input_tokens": 1890,
              "cache_read_input_tokens": 9487,
              "input_tokens": 4,
              "output_tokens": 249
            }
          },
          "usage": {
            "completion_cost": 0.009417,
            "completion_tokens": 249,
            "prompt_tokens": 1894,
            "cached_tokens": 9487
          }
        },
        "execute_action": {
          "model": "claude-3-5-sonnet-20241022",
          "input": [
            {
              "role": "user",
              "content": "Search request:\nSearching for code using the query: legend draggable tests\n\nIdentify the relevant code sections in the search results to use them. \n\n<search_results>\nlib/matplotlib/tests/test_legend.py\n```\n\n\n\n<span id='imports'>\n     1\timport collections\n     2\timport platform\n     3\tfrom unittest import mock\n     4\timport warnings\n     5\t\n     6\timport numpy as np\n     7\timport pytest\n     8\t\n     9\tfrom matplotlib.testing.decorators import check_figures_equal, image_comparison\n    10\tfrom matplotlib.testing._markers import needs_usetex\n    11\timport matplotlib.pyplot as plt\n    12\timport matplotlib as mpl\n    13\timport matplotlib.transforms as mtransforms\n    14\timport matplotlib.collections as mcollections\n    15\timport matplotlib.lines as mlines\n    16\tfrom matplotlib.legend_handler import HandlerTuple\n    17\timport matplotlib.legend as mlegend\n    18\tfrom matplotlib import rc_context\n    19\tfrom matplotlib.font_manager import FontProperties\n      # ...\n\n\n<span id='test_legend_labelcolor_rcparam_markeredgecolor_short'>\n   736\t\n   737\t\n   738\tdef test_legend_labelcolor_rcparam_markeredgecolor_short():\n   739\t    # test the labelcolor for labelcolor='markeredgecolor'\n   740\t    fig, ax = plt.subplots()\n   741\t    ax.plot(np.arange(10), np.arange(10)*1, label='#1', markeredgecolor='r')\n   742\t    ax.plot(np.arange(10), np.arange(10)*2, label='#2', markeredgecolor='g')\n   743\t    ax.plot(np.arange(10), np.arange(10)*3, label='#3', markeredgecolor='b')\n   744\t\n   745\t    mpl.rcParams['legend.labelcolor'] = 'mec'\n   746\t    leg = ax.legend()\n   747\t    for text, color in zip(leg.get_texts(), ['r', 'g', 'b']):\n   748\t        assert mpl.colors.same_color(text.get_color(), color)\n\n\n<span id='test_legend_labelcolor_rcparam_markerfacecolor'>\n   749\t\n   750\t\n   751\tdef test_legend_labelcolor_rcparam_markerfacecolor():\n   752\t    # test the labelcolor for labelcolor='markeredgecolor'\n   753\t    fig, ax = plt.subplots()\n   754\t    ax.plot(np.arange(10), np.arange(10)*1, label='#1', markerfacecolor='r')\n   755\t    ax.plot(np.arange(10), np.arange(10)*2, label='#2', markerfacecolor='g')\n   756\t    ax.plot(np.arange(10), np.arange(10)*3, label='#3', markerfacecolor='b')\n   757\t\n   758\t    mpl.rcParams['legend.labelcolor'] = 'markerfacecolor'\n   759\t    leg = ax.legend()\n   760\t    for text, color in zip(leg.get_texts(), ['r', 'g', 'b']):\n   761\t        assert mpl.colors.same_color(text.get_color(), color)\n\n\n<span id='test_legend_labelcolor_rcparam_markerfacecolor_short'>\n   762\t\n   763\t\n   764\tdef test_legend_labelcolor_rcparam_markerfacecolor_short():\n   765\t    # test the labelcolor for labelcolor='markeredgecolor'\n   766\t    fig, ax = plt.subplots()\n   767\t    ax.plot(np.arange(10), np.arange(10)*1, label='#1', markerfacecolor='r')\n   768\t    ax.plot(np.arange(10), np.arange(10)*2, label='#2', markerfacecolor='g')\n   769\t    ax.plot(np.arange(10), np.arange(10)*3, label='#3', markerfacecolor='b')\n   770\t\n   771\t    mpl.rcParams['legend.labelcolor'] = 'mfc'\n   772\t    leg = ax.legend()\n   773\t    for text, color in zip(leg.get_texts(), ['r', 'g', 'b']):\n   774\t        assert mpl.colors.same_color(text.get_color(), color)\n\n\n<span id='test_get_set_draggable'>\n   775\t\n   776\t\n   777\tdef test_get_set_draggable():\n   778\t    legend = plt.legend()\n   779\t    assert not legend.get_draggable()\n   780\t    legend.set_draggable(True)\n   781\t    assert legend.get_draggable()\n   782\t    legend.set_draggable(False)\n   783\t    assert not legend.get_draggable()\n\n\n<span id='test_alpha_handles'>\n   784\t\n   785\t\n   786\tdef test_alpha_handles():\n   787\t    x, n, hh = plt.hist([1, 2, 3], alpha=0.25, label='data', color='red')\n   788\t    legend = plt.legend()\n   789\t    for lh in legend.legendHandles:\n   790\t        lh.set_alpha(1.0)\n   791\t    assert lh.get_facecolor()[:-1] == hh[1].get_facecolor()[:-1]\n   792\t    assert lh.get_edgecolor()[:-1] == hh[1].get_edgecolor()[:-1]\n\n\n<span id='test_usetex_no_warn'>\n   793\t\n   794\t\n   795\t@needs_usetex\n   796\tdef test_usetex_no_warn(caplog):\n   797\t    mpl.rcParams['font.family'] = 'serif'\n   798\t    mpl.rcParams['font.serif'] = 'Computer Modern'\n   799\t    mpl.rcParams['text.usetex'] = True\n   800\t\n   801\t    fig, ax = plt.subplots()\n   802\t    ax.plot(0, 0, label='input')\n   803\t    ax.legend(title=\"My legend\")\n   804\t\n   805\t    fig.canvas.draw()\n   806\t    assert \"Font family ['serif'] not found.\" not in caplog.text\n      # ...\n\n\n<span id='test_legend_face_edgecolor'>\n   896\t\n   897\t\n   898\tdef test_legend_face_edgecolor():\n   899\t    # Smoke test for PolyCollection legend handler with 'face' edgecolor.\n   900\t    fig, ax = plt.subplots()\n   901\t    ax.fill_between([0, 1, 2], [1, 2, 3], [2, 3, 4],\n   902\t                    facecolor='r', edgecolor='face', label='Fill')\n   903\t    ax.legend()\n\n\n<span id='test_legend_text_axes'>\n   904\t\n   905\t\n   906\tdef test_legend_text_axes():\n   907\t    fig, ax = plt.subplots()\n   908\t    ax.plot([1, 2], [3, 4], label='line')\n   909\t    leg = ax.legend()\n   910\t\n   911\t    assert leg.axes is ax\n   912\t    assert leg.get_texts()[0].axes is ax\n\n\n<span id='test_handlerline2d'>\n   913\t\n   914\t\n   915\tdef test_handlerline2d():\n   916\t    # Test marker consistency for monolithic Line2D legend handler (#11357).\n   917\t    fig, ax = plt.subplots()\n   918\t    ax.scatter([0, 1], [0, 1], marker=\"v\")\n   919\t    handles = [mlines.Line2D([0], [0], marker=\"v\")]\n   920\t    leg = ax.legend(handles, [\"Aardvark\"], numpoints=1)\n   921\t    assert handles[0].get_marker() == leg.legendHandles[0].get_marker()\n      # ...\n\n\n<span id='test_legend_markers_from_line2d'>\n   939\t\n   940\t\n   941\tdef test_legend_markers_from_line2d():\n   942\t    # Test that markers can be copied for legend lines (#17960)\n   943\t    _markers = ['.', '*', 'v']\n   944\t    fig, ax = plt.subplots()\n   945\t    lines = [mlines.Line2D([0], [0], ls='None', marker=mark)\n   946\t             for mark in _markers]\n   947\t    labels = [\"foo\", \"bar\", \"xyzzy\"]\n   948\t    markers = [line.get_marker() for line in lines]\n   949\t    legend = ax.legend(lines, labels)\n   950\t\n   951\t    new_markers = [line.get_marker() for line in legend.get_lines()]\n   952\t    new_labels = [text.get_text() for text in legend.get_texts()]\n   953\t\n   954\t    assert markers == new_markers == _markers\n   955\t    assert labels == new_labels\n\n\n<span id='test_ncol_ncols'>\n   956\t\n   957\t\n   958\t@check_figures_equal()\n   959\tdef test_ncol_ncols(fig_test, fig_ref):\n   960\t    # Test that both ncol and ncols work\n   961\t    strings = [\"a\", \"b\", \"c\", \"d\", \"e\", \"f\"]\n   962\t    ncols = 3\n   963\t    fig_test.legend(strings, ncol=ncols)\n   964\t    fig_ref.legend(strings, ncols=ncols)\n```\n\n</search_result>\n"
            }
          ],
          "response": {
            "id": "msg_01E9WPS9wef6E3KAsXWVLBqc",
            "content": [
              {
                "text": "I'll analyze the search results for code related to legend draggable tests.\n\nFrom the search results, I can identify one directly relevant test section that deals with legend draggability - the `test_get_set_draggable` function. This test checks the basic functionality of making a legend draggable or not draggable.\n\nLet me identify this section using the Action tool:",
                "type": "text"
              },
              {
                "id": "toolu_015MNsXxmjqkmfBc8xbXVkJG",
                "input": {
                  "scratch_pad": "The search results contain one test function that is directly relevant to testing legend draggability:\n\ntest_get_set_draggable (lines 777-783):\n- Tests the get_draggable() and set_draggable() methods of the legend\n- Verifies that:\n  1. Legend is not draggable by default\n  2. Can be made draggable\n  3. Can be made non-draggable again\n  \nThis is the most relevant section as it specifically tests the draggable functionality of legends.",
                  "identified_spans": [
                    {
                      "file_path": "lib/matplotlib/tests/test_legend.py",
                      "start_line": 777,
                      "end_line": 783
                    }
                  ]
                },
                "name": "Action",
                "type": "tool_use"
              }
            ],
            "model": "claude-3-5-sonnet-20241022",
            "role": "assistant",
            "stop_reason": "tool_use",
            "stop_sequence": null,
            "type": "message",
            "usage": {
              "cache_creation_input_tokens": 0,
              "cache_read_input_tokens": 0,
              "input_tokens": 3324,
              "output_tokens": 315
            }
          },
          "usage": {
            "completion_cost": 0.014697,
            "completion_tokens": 315,
            "prompt_tokens": 3324,
            "cached_tokens": 0
          }
        }
      },
      "possible_actions": [
        "SemanticSearch",
        "FindClass",
        "FindFunction",
        "FindCodeSnippet",
        "RequestMoreContext",
        "ClaudeEditTool"
      ],
      "output": {
        "message": "Found 12 code sections.\n\nViewed relevant code:\nlib/matplotlib/tests/test_legend.py\n```\n     1\timport collections\n     2\timport platform\n     3\tfrom unittest import mock\n     4\timport warnings\n     5\t\n     6\timport numpy as np\n     7\timport pytest\n     8\t\n     9\tfrom matplotlib.testing.decorators import check_figures_equal, image_comparison\n    10\tfrom matplotlib.testing._markers import needs_usetex\n    11\timport matplotlib.pyplot as plt\n    12\timport matplotlib as mpl\n    13\timport matplotlib.transforms as mtransforms\n    14\timport matplotlib.collections as mcollections\n    15\timport matplotlib.lines as mlines\n    16\tfrom matplotlib.legend_handler import HandlerTuple\n    17\timport matplotlib.legend as mlegend\n    18\tfrom matplotlib import rc_context\n    19\tfrom matplotlib.font_manager import FontProperties\n      # ...\n   775\t\n   776\t\n   777\tdef test_get_set_draggable():\n   778\t    legend = plt.legend()\n   779\t    assert not legend.get_draggable()\n   780\t    legend.set_draggable(True)\n   781\t    assert legend.get_draggable()\n   782\t    legend.set_draggable(False)\n   783\t    assert not legend.get_draggable()\n      # ...\n```\n",
        "summary": "Found relevant code sections in the search results.",
        "terminal": false,
        "expect_correction": false,
        "properties": {
          "search_hits": [],
          "search_tokens": 1224,
          "new_span_ids": [
            "test_get_set_draggable"
          ]
        },
        "execution_completion": {
          "model": "claude-3-5-sonnet-20241022",
          "input": [
            {
              "role": "user",
              "content": "Search request:\nSearching for code using the query: legend draggable tests\n\nIdentify the relevant code sections in the search results to use them. \n\n<search_results>\nlib/matplotlib/tests/test_legend.py\n```\n\n\n\n<span id='imports'>\n     1\timport collections\n     2\timport platform\n     3\tfrom unittest import mock\n     4\timport warnings\n     5\t\n     6\timport numpy as np\n     7\timport pytest\n     8\t\n     9\tfrom matplotlib.testing.decorators import check_figures_equal, image_comparison\n    10\tfrom matplotlib.testing._markers import needs_usetex\n    11\timport matplotlib.pyplot as plt\n    12\timport matplotlib as mpl\n    13\timport matplotlib.transforms as mtransforms\n    14\timport matplotlib.collections as mcollections\n    15\timport matplotlib.lines as mlines\n    16\tfrom matplotlib.legend_handler import HandlerTuple\n    17\timport matplotlib.legend as mlegend\n    18\tfrom matplotlib import rc_context\n    19\tfrom matplotlib.font_manager import FontProperties\n      # ...\n\n\n<span id='test_legend_labelcolor_rcparam_markeredgecolor_short'>\n   736\t\n   737\t\n   738\tdef test_legend_labelcolor_rcparam_markeredgecolor_short():\n   739\t    # test the labelcolor for labelcolor='markeredgecolor'\n   740\t    fig, ax = plt.subplots()\n   741\t    ax.plot(np.arange(10), np.arange(10)*1, label='#1', markeredgecolor='r')\n   742\t    ax.plot(np.arange(10), np.arange(10)*2, label='#2', markeredgecolor='g')\n   743\t    ax.plot(np.arange(10), np.arange(10)*3, label='#3', markeredgecolor='b')\n   744\t\n   745\t    mpl.rcParams['legend.labelcolor'] = 'mec'\n   746\t    leg = ax.legend()\n   747\t    for text, color in zip(leg.get_texts(), ['r', 'g', 'b']):\n   748\t        assert mpl.colors.same_color(text.get_color(), color)\n\n\n<span id='test_legend_labelcolor_rcparam_markerfacecolor'>\n   749\t\n   750\t\n   751\tdef test_legend_labelcolor_rcparam_markerfacecolor():\n   752\t    # test the labelcolor for labelcolor='markeredgecolor'\n   753\t    fig, ax = plt.subplots()\n   754\t    ax.plot(np.arange(10), np.arange(10)*1, label='#1', markerfacecolor='r')\n   755\t    ax.plot(np.arange(10), np.arange(10)*2, label='#2', markerfacecolor='g')\n   756\t    ax.plot(np.arange(10), np.arange(10)*3, label='#3', markerfacecolor='b')\n   757\t\n   758\t    mpl.rcParams['legend.labelcolor'] = 'markerfacecolor'\n   759\t    leg = ax.legend()\n   760\t    for text, color in zip(leg.get_texts(), ['r', 'g', 'b']):\n   761\t        assert mpl.colors.same_color(text.get_color(), color)\n\n\n<span id='test_legend_labelcolor_rcparam_markerfacecolor_short'>\n   762\t\n   763\t\n   764\tdef test_legend_labelcolor_rcparam_markerfacecolor_short():\n   765\t    # test the labelcolor for labelcolor='markeredgecolor'\n   766\t    fig, ax = plt.subplots()\n   767\t    ax.plot(np.arange(10), np.arange(10)*1, label='#1', markerfacecolor='r')\n   768\t    ax.plot(np.arange(10), np.arange(10)*2, label='#2', markerfacecolor='g')\n   769\t    ax.plot(np.arange(10), np.arange(10)*3, label='#3', markerfacecolor='b')\n   770\t\n   771\t    mpl.rcParams['legend.labelcolor'] = 'mfc'\n   772\t    leg = ax.legend()\n   773\t    for text, color in zip(leg.get_texts(), ['r', 'g', 'b']):\n   774\t        assert mpl.colors.same_color(text.get_color(), color)\n\n\n<span id='test_get_set_draggable'>\n   775\t\n   776\t\n   777\tdef test_get_set_draggable():\n   778\t    legend = plt.legend()\n   779\t    assert not legend.get_draggable()\n   780\t    legend.set_draggable(True)\n   781\t    assert legend.get_draggable()\n   782\t    legend.set_draggable(False)\n   783\t    assert not legend.get_draggable()\n\n\n<span id='test_alpha_handles'>\n   784\t\n   785\t\n   786\tdef test_alpha_handles():\n   787\t    x, n, hh = plt.hist([1, 2, 3], alpha=0.25, label='data', color='red')\n   788\t    legend = plt.legend()\n   789\t    for lh in legend.legendHandles:\n   790\t        lh.set_alpha(1.0)\n   791\t    assert lh.get_facecolor()[:-1] == hh[1].get_facecolor()[:-1]\n   792\t    assert lh.get_edgecolor()[:-1] == hh[1].get_edgecolor()[:-1]\n\n\n<span id='test_usetex_no_warn'>\n   793\t\n   794\t\n   795\t@needs_usetex\n   796\tdef test_usetex_no_warn(caplog):\n   797\t    mpl.rcParams['font.family'] = 'serif'\n   798\t    mpl.rcParams['font.serif'] = 'Computer Modern'\n   799\t    mpl.rcParams['text.usetex'] = True\n   800\t\n   801\t    fig, ax = plt.subplots()\n   802\t    ax.plot(0, 0, label='input')\n   803\t    ax.legend(title=\"My legend\")\n   804\t\n   805\t    fig.canvas.draw()\n   806\t    assert \"Font family ['serif'] not found.\" not in caplog.text\n      # ...\n\n\n<span id='test_legend_face_edgecolor'>\n   896\t\n   897\t\n   898\tdef test_legend_face_edgecolor():\n   899\t    # Smoke test for PolyCollection legend handler with 'face' edgecolor.\n   900\t    fig, ax = plt.subplots()\n   901\t    ax.fill_between([0, 1, 2], [1, 2, 3], [2, 3, 4],\n   902\t                    facecolor='r', edgecolor='face', label='Fill')\n   903\t    ax.legend()\n\n\n<span id='test_legend_text_axes'>\n   904\t\n   905\t\n   906\tdef test_legend_text_axes():\n   907\t    fig, ax = plt.subplots()\n   908\t    ax.plot([1, 2], [3, 4], label='line')\n   909\t    leg = ax.legend()\n   910\t\n   911\t    assert leg.axes is ax\n   912\t    assert leg.get_texts()[0].axes is ax\n\n\n<span id='test_handlerline2d'>\n   913\t\n   914\t\n   915\tdef test_handlerline2d():\n   916\t    # Test marker consistency for monolithic Line2D legend handler (#11357).\n   917\t    fig, ax = plt.subplots()\n   918\t    ax.scatter([0, 1], [0, 1], marker=\"v\")\n   919\t    handles = [mlines.Line2D([0], [0], marker=\"v\")]\n   920\t    leg = ax.legend(handles, [\"Aardvark\"], numpoints=1)\n   921\t    assert handles[0].get_marker() == leg.legendHandles[0].get_marker()\n      # ...\n\n\n<span id='test_legend_markers_from_line2d'>\n   939\t\n   940\t\n   941\tdef test_legend_markers_from_line2d():\n   942\t    # Test that markers can be copied for legend lines (#17960)\n   943\t    _markers = ['.', '*', 'v']\n   944\t    fig, ax = plt.subplots()\n   945\t    lines = [mlines.Line2D([0], [0], ls='None', marker=mark)\n   946\t             for mark in _markers]\n   947\t    labels = [\"foo\", \"bar\", \"xyzzy\"]\n   948\t    markers = [line.get_marker() for line in lines]\n   949\t    legend = ax.legend(lines, labels)\n   950\t\n   951\t    new_markers = [line.get_marker() for line in legend.get_lines()]\n   952\t    new_labels = [text.get_text() for text in legend.get_texts()]\n   953\t\n   954\t    assert markers == new_markers == _markers\n   955\t    assert labels == new_labels\n\n\n<span id='test_ncol_ncols'>\n   956\t\n   957\t\n   958\t@check_figures_equal()\n   959\tdef test_ncol_ncols(fig_test, fig_ref):\n   960\t    # Test that both ncol and ncols work\n   961\t    strings = [\"a\", \"b\", \"c\", \"d\", \"e\", \"f\"]\n   962\t    ncols = 3\n   963\t    fig_test.legend(strings, ncol=ncols)\n   964\t    fig_ref.legend(strings, ncols=ncols)\n```\n\n</search_result>\n"
            }
          ],
          "response": {
            "id": "msg_01E9WPS9wef6E3KAsXWVLBqc",
            "content": [
              {
                "text": "I'll analyze the search results for code related to legend draggable tests.\n\nFrom the search results, I can identify one directly relevant test section that deals with legend draggability - the `test_get_set_draggable` function. This test checks the basic functionality of making a legend draggable or not draggable.\n\nLet me identify this section using the Action tool:",
                "type": "text"
              },
              {
                "id": "toolu_015MNsXxmjqkmfBc8xbXVkJG",
                "input": {
                  "scratch_pad": "The search results contain one test function that is directly relevant to testing legend draggability:\n\ntest_get_set_draggable (lines 777-783):\n- Tests the get_draggable() and set_draggable() methods of the legend\n- Verifies that:\n  1. Legend is not draggable by default\n  2. Can be made draggable\n  3. Can be made non-draggable again\n  \nThis is the most relevant section as it specifically tests the draggable functionality of legends.",
                  "identified_spans": [
                    {
                      "file_path": "lib/matplotlib/tests/test_legend.py",
                      "start_line": 777,
                      "end_line": 783
                    }
                  ]
                },
                "name": "Action",
                "type": "tool_use"
              }
            ],
            "model": "claude-3-5-sonnet-20241022",
            "role": "assistant",
            "stop_reason": "tool_use",
            "stop_sequence": null,
            "type": "message",
            "usage": {
              "cache_creation_input_tokens": 0,
              "cache_read_input_tokens": 0,
              "input_tokens": 3324,
              "output_tokens": 315
            }
          },
          "usage": {
            "completion_cost": 0.014697,
            "completion_tokens": 315,
            "prompt_tokens": 3324,
            "cached_tokens": 0
          }
        }
      },
      "parent_id": 2
    },
    {
      "node_id": 4,
      "action": {
        "scratch_pad": "1. I found the test for draggable functionality in test_legend.py\n2. The changes needed are:\n   - Add a draggable parameter to Legend.__init__\n   - Call set_draggable() in __init__ if draggable=True\n   - Add a test case for the new parameter\n3. Let me implement these changes",
        "command": "str_replace",
        "path": "lib/matplotlib/legend.py",
        "old_str": "    def __init__(\n        self, parent, handles, labels,\n        loc=None,\n        numpoints=None,      # number of points in the legend line\n        markerscale=None,    # relative size of legend markers vs. original\n        markerfirst=True,    # left/right ordering of legend marker and label\n        scatterpoints=None,  # number of scatter points\n        scatteryoffsets=None,\n        prop=None,           # properties for the legend texts\n        fontsize=None,       # keyword to set font size directly\n        labelcolor=None,     # keyword to set the text color\n\n        # spacing & pad defined as a fraction of the font-size\n        borderpad=None,      # whitespace inside the legend border\n        labelspacing=None,   # vertical space between the legend entries\n        handlelength=None,   # length of the legend handles\n        handleheight=None,   # height of the legend handles\n        handletextpad=None,  # pad between the legend handle and text\n        borderaxespad=None,  # pad between the axes and legend border\n        columnspacing=None,  # spacing between columns\n\n        ncols=1,     # number of columns\n        mode=None,  # horizontal distribution of columns: None or \"expand\"\n\n        fancybox=None,  # True: fancy box, False: rounded box, None: rcParam\n        shadow=None,\n        title=None,           # legend title\n        title_fontsize=None,  # legend title font size\n        framealpha=None,      # set frame alpha\n        edgecolor=None,       # frame patch edgecolor\n        facecolor=None,       # frame patch facecolor\n\n        bbox_to_anchor=None,  # bbox to which the legend will be anchored\n        bbox_transform=None,  # transform for the bbox\n        frameon=None,         # draw frame\n        handler_map=None,\n        title_fontproperties=None,  # properties for the legend title\n        alignment=\"center\",       # control the alignment within the legend box\n        *,\n        ncol=1  # synonym for ncols (backward compatibility)",
        "new_str": "    def __init__(\n        self, parent, handles, labels,\n        loc=None,\n        numpoints=None,      # number of points in the legend line\n        markerscale=None,    # relative size of legend markers vs. original\n        markerfirst=True,    # left/right ordering of legend marker and label\n        scatterpoints=None,  # number of scatter points\n        scatteryoffsets=None,\n        prop=None,           # properties for the legend texts\n        fontsize=None,       # keyword to set font size directly\n        labelcolor=None,     # keyword to set the text color\n\n        # spacing & pad defined as a fraction of the font-size\n        borderpad=None,      # whitespace inside the legend border\n        labelspacing=None,   # vertical space between the legend entries\n        handlelength=None,   # length of the legend handles\n        handleheight=None,   # height of the legend handles\n        handletextpad=None,  # pad between the legend handle and text\n        borderaxespad=None,  # pad between the axes and legend border\n        columnspacing=None,  # spacing between columns\n\n        ncols=1,     # number of columns\n        mode=None,  # horizontal distribution of columns: None or \"expand\"\n\n        fancybox=None,  # True: fancy box, False: rounded box, None: rcParam\n        shadow=None,\n        title=None,           # legend title\n        title_fontsize=None,  # legend title font size\n        framealpha=None,      # set frame alpha\n        edgecolor=None,       # frame patch edgecolor\n        facecolor=None,       # frame patch facecolor\n\n        bbox_to_anchor=None,  # bbox to which the legend will be anchored\n        bbox_transform=None,  # transform for the bbox\n        frameon=None,         # draw frame\n        handler_map=None,\n        title_fontproperties=None,  # properties for the legend title\n        alignment=\"center\",       # control the alignment within the legend box\n        draggable=False,      # enable mouse dragging support\n        *,\n        ncol=1  # synonym for ncols (backward compatibility)",
        "action_args_class": "moatless.actions.edit.EditActionArguments"
      },
      "observation": {
        "message": "The file lib/matplotlib/legend.py has been edited. Here's the result of running `cat -n` on a snippet of lib/matplotlib/legend.py:\n   306\t    def __str__(self):\n   307\t        return \"Legend\"\n   308\t\n   309\t    @_api.make_keyword_only(\"3.6\", \"loc\")\n   310\t    @_docstring.dedent_interpd\n   311\t    def __init__(\n   312\t        self, parent, handles, labels,\n   313\t        loc=None,\n   314\t        numpoints=None,      # number of points in the legend line\n   315\t        markerscale=None,    # relative size of legend markers vs. original\n   316\t        markerfirst=True,    # left/right ordering of legend marker and label\n   317\t        scatterpoints=None,  # number of scatter points\n   318\t        scatteryoffsets=None,\n   319\t        prop=None,           # properties for the legend texts\n   320\t        fontsize=None,       # keyword to set font size directly\n   321\t        labelcolor=None,     # keyword to set the text color\n   322\t\n   323\t        # spacing & pad defined as a fraction of the font-size\n   324\t        borderpad=None,      # whitespace inside the legend border\n   325\t        labelspacing=None,   # vertical space between the legend entries\n   326\t        handlelength=None,   # length of the legend handles\n   327\t        handleheight=None,   # height of the legend handles\n   328\t        handletextpad=None,  # pad between the legend handle and text\n   329\t        borderaxespad=None,  # pad between the axes and legend border\n   330\t        columnspacing=None,  # spacing between columns\n   331\t\n   332\t        ncols=1,     # number of columns\n   333\t        mode=None,  # horizontal distribution of columns: None or \"expand\"\n   334\t\n   335\t        fancybox=None,  # True: fancy box, False: rounded box, None: rcParam\n   336\t        shadow=None,\n   337\t        title=None,           # legend title\n   338\t        title_fontsize=None,  # legend title font size\n   339\t        framealpha=None,      # set frame alpha\n   340\t        edgecolor=None,       # frame patch edgecolor\n   341\t        facecolor=None,       # frame patch facecolor\n   342\t\n   343\t        bbox_to_anchor=None,  # bbox to which the legend will be anchored\n   344\t        bbox_transform=None,  # transform for the bbox\n   345\t        frameon=None,         # draw frame\n   346\t        handler_map=None,\n   347\t        title_fontproperties=None,  # properties for the legend title\n   348\t        alignment=\"center\",       # control the alignment within the legend box\n   349\t        draggable=False,      # enable mouse dragging support\n   350\t        *,\n   351\t        ncol=1  # synonym for ncols (backward compatibility)\n   352\t    ):\n   353\t        \"\"\"\n   354\t        Parameters\nReview the changes and make sure they are as expected. Edit the file again if necessary.\n\nRunning 936 tests in the following files:\n * lib/matplotlib/tests/test_legend.py\n * lib/matplotlib/tests/test_contour.py\n * lib/matplotlib/tests/test_axes.py\n\n* FAILED lib/matplotlib/tests/test_contour.py test_contourf_log_extension>\n```\n\n    @image_comparison(['contour_log_extension.png'],\n                      remove_text=True, style='mpl20',\n                      tol=1.444)\n    def test_contourf_log_extension():\n        # Remove this line when this test image is regenerated.\n        plt.rcParams['pcolormesh.snap'] = False\n    \n        # Test that contourf with lognorm is extended correctly\n        fig, (ax1, ax2, ax3) = plt.subplots(1, 3, figsize=(10, 5))\n        fig.subplots_adjust(left=0.05, right=0.95)\n    \n        # make data set with large range e.g. between 1e-8 and 1e10\n        data_exp = np.linspace(-7.5, 9.5, 1200)\n        data = np.power(10, data_exp).reshape(30, 40)\n        # make manual levels e.g. between 1e-4 and 1e-6\n        levels_exp = np.arange(-4., 7.)\n        levels = np.power(10., levels_exp)\n    \n        # original data\n        c1 = ax1.contourf(data,\n                          norm=LogNorm(vmin=data.min(), vmax=data.max()))\n        # just show data in levels\n        c2 = ax2.contourf(data, levels=levels,\n                          norm=LogNorm(vmin=levels.min(), vmax=levels.max()),\n                          extend='neither')\n        # extend data from levels\n        c3 = ax3.contourf(data, levels=levels,\n                          norm=LogNorm(vmin=levels.min(), vmax=levels.max()),\n                          extend='both')\n        cb = plt.colorbar(c1, ax=ax1)\n        assert cb.ax.get_ylim() == (1e-8, 1e10)\n        cb = plt.colorbar(c2, ax=ax2)\n>       assert cb.ax.get_ylim() == (1e-4, 1e6)\nE       assert (9.9999999999...05, 1000000.0) == (0.0001, 1000000.0)\nE         \nE         At index 0 diff: 9.999999999999999e-05 != 0.0001\nE         Use -v to get more diff\n\nlib/matplotlib/tests/test_contour.py:316: AssertionError\n```\n\n\n935 passed. 1 failed. 0 errors.",
        "terminal": false,
        "expect_correction": false,
        "properties": {
          "diff": "--- lib/matplotlib/legend.py\n+++ lib/matplotlib/legend.py\n@@ -341,6 +341,7 @@\n         handler_map=None,\n         title_fontproperties=None,  # properties for the legend title\n         alignment=\"center\",       # control the alignment within the legend box\n+        draggable=False,      # enable mouse dragging support\n         *,\n         ncol=1  # synonym for ncols (backward compatibility)\n     ):\n",
          "test_results": [
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_legend.py::test_legend_ordereddict",
              "file_path": "lib/matplotlib/tests/test_legend.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_legend.py::test_legend_auto1[png]",
              "file_path": "lib/matplotlib/tests/test_legend.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_legend.py::test_legend_auto1[pdf]",
              "file_path": "lib/matplotlib/tests/test_legend.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_legend.py::test_legend_auto2[png]",
              "file_path": "lib/matplotlib/tests/test_legend.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_legend.py::test_legend_auto2[pdf]",
              "file_path": "lib/matplotlib/tests/test_legend.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_legend.py::test_legend_auto3[png]",
              "file_path": "lib/matplotlib/tests/test_legend.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_legend.py::test_legend_auto3[pdf]",
              "file_path": "lib/matplotlib/tests/test_legend.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_legend.py::test_various_labels[png]",
              "file_path": "lib/matplotlib/tests/test_legend.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_legend.py::test_various_labels[pdf]",
              "file_path": "lib/matplotlib/tests/test_legend.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_legend.py::test_legend_label_with_leading_underscore",
              "file_path": "lib/matplotlib/tests/test_legend.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_legend.py::test_labels_first[png]",
              "file_path": "lib/matplotlib/tests/test_legend.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_legend.py::test_multiple_keys[png]",
              "file_path": "lib/matplotlib/tests/test_legend.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_legend.py::test_alpha_rgba[png]",
              "file_path": "lib/matplotlib/tests/test_legend.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_legend.py::test_alpha_rcparam[png]",
              "file_path": "lib/matplotlib/tests/test_legend.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_legend.py::test_fancy[png]",
              "file_path": "lib/matplotlib/tests/test_legend.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_legend.py::test_fancy[pdf]",
              "file_path": "lib/matplotlib/tests/test_legend.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_legend.py::test_framealpha[png]",
              "file_path": "lib/matplotlib/tests/test_legend.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_legend.py::test_framealpha[pdf]",
              "file_path": "lib/matplotlib/tests/test_legend.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_legend.py::test_rc[png]",
              "file_path": "lib/matplotlib/tests/test_legend.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_legend.py::test_rc[pdf]",
              "file_path": "lib/matplotlib/tests/test_legend.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_legend.py::test_legend_expand[png]",
              "file_path": "lib/matplotlib/tests/test_legend.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_legend.py::test_legend_expand[pdf]",
              "file_path": "lib/matplotlib/tests/test_legend.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_legend.py::test_hatching[png]",
              "file_path": "lib/matplotlib/tests/test_legend.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_legend.py::test_hatching[pdf]",
              "file_path": "lib/matplotlib/tests/test_legend.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_legend.py::test_legend_remove",
              "file_path": "lib/matplotlib/tests/test_legend.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_legend.py::TestLegendFunction::test_legend_no_args",
              "file_path": "lib/matplotlib/tests/test_legend.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_legend.py::TestLegendFunction::test_legend_positional_handles_labels",
              "file_path": "lib/matplotlib/tests/test_legend.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_legend.py::TestLegendFunction::test_legend_positional_handles_only",
              "file_path": "lib/matplotlib/tests/test_legend.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_legend.py::TestLegendFunction::test_legend_positional_labels_only",
              "file_path": "lib/matplotlib/tests/test_legend.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_legend.py::TestLegendFunction::test_legend_three_args",
              "file_path": "lib/matplotlib/tests/test_legend.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_legend.py::TestLegendFunction::test_legend_handler_map",
              "file_path": "lib/matplotlib/tests/test_legend.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_legend.py::TestLegendFunction::test_legend_kwargs_handles_only",
              "file_path": "lib/matplotlib/tests/test_legend.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_legend.py::TestLegendFunction::test_legend_kwargs_labels_only",
              "file_path": "lib/matplotlib/tests/test_legend.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_legend.py::TestLegendFunction::test_legend_kwargs_handles_labels",
              "file_path": "lib/matplotlib/tests/test_legend.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_legend.py::TestLegendFunction::test_warn_mixed_args_and_kwargs",
              "file_path": "lib/matplotlib/tests/test_legend.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_legend.py::TestLegendFunction::test_parasite",
              "file_path": "lib/matplotlib/tests/test_legend.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_legend.py::TestLegendFigureFunction::test_legend_handle_label",
              "file_path": "lib/matplotlib/tests/test_legend.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_legend.py::TestLegendFigureFunction::test_legend_no_args",
              "file_path": "lib/matplotlib/tests/test_legend.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_legend.py::TestLegendFigureFunction::test_legend_label_arg",
              "file_path": "lib/matplotlib/tests/test_legend.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_legend.py::TestLegendFigureFunction::test_legend_label_three_args",
              "file_path": "lib/matplotlib/tests/test_legend.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_legend.py::TestLegendFigureFunction::test_legend_label_three_args_pluskw",
              "file_path": "lib/matplotlib/tests/test_legend.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_legend.py::TestLegendFigureFunction::test_legend_kw_args",
              "file_path": "lib/matplotlib/tests/test_legend.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_legend.py::TestLegendFigureFunction::test_warn_args_kwargs",
              "file_path": "lib/matplotlib/tests/test_legend.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_legend.py::test_legend_stackplot[png]",
              "file_path": "lib/matplotlib/tests/test_legend.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_legend.py::test_cross_figure_patch_legend",
              "file_path": "lib/matplotlib/tests/test_legend.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_legend.py::test_nanscatter",
              "file_path": "lib/matplotlib/tests/test_legend.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_legend.py::test_legend_repeatcheckok",
              "file_path": "lib/matplotlib/tests/test_legend.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_legend.py::test_not_covering_scatter[png]",
              "file_path": "lib/matplotlib/tests/test_legend.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_legend.py::test_not_covering_scatter_transform[png]",
              "file_path": "lib/matplotlib/tests/test_legend.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_legend.py::test_linecollection_scaled_dashes",
              "file_path": "lib/matplotlib/tests/test_legend.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_legend.py::test_handler_numpoints",
              "file_path": "lib/matplotlib/tests/test_legend.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_legend.py::test_text_nohandler_warning",
              "file_path": "lib/matplotlib/tests/test_legend.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_legend.py::test_empty_bar_chart_with_legend",
              "file_path": "lib/matplotlib/tests/test_legend.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_legend.py::test_shadow_framealpha",
              "file_path": "lib/matplotlib/tests/test_legend.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_legend.py::test_legend_title_empty",
              "file_path": "lib/matplotlib/tests/test_legend.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_legend.py::test_legend_proper_window_extent",
              "file_path": "lib/matplotlib/tests/test_legend.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_legend.py::test_window_extent_cached_renderer",
              "file_path": "lib/matplotlib/tests/test_legend.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_legend.py::test_legend_title_fontprop_fontsize",
              "file_path": "lib/matplotlib/tests/test_legend.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_legend.py::test_legend_alignment[center]",
              "file_path": "lib/matplotlib/tests/test_legend.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_legend.py::test_legend_alignment[left]",
              "file_path": "lib/matplotlib/tests/test_legend.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_legend.py::test_legend_alignment[right]",
              "file_path": "lib/matplotlib/tests/test_legend.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_legend.py::test_legend_set_alignment[center]",
              "file_path": "lib/matplotlib/tests/test_legend.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_legend.py::test_legend_set_alignment[left]",
              "file_path": "lib/matplotlib/tests/test_legend.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_legend.py::test_legend_set_alignment[right]",
              "file_path": "lib/matplotlib/tests/test_legend.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_legend.py::test_legend_labelcolor_single[red]",
              "file_path": "lib/matplotlib/tests/test_legend.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_legend.py::test_legend_labelcolor_single[none]",
              "file_path": "lib/matplotlib/tests/test_legend.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_legend.py::test_legend_labelcolor_single[color2]",
              "file_path": "lib/matplotlib/tests/test_legend.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_legend.py::test_legend_labelcolor_list",
              "file_path": "lib/matplotlib/tests/test_legend.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_legend.py::test_legend_labelcolor_linecolor",
              "file_path": "lib/matplotlib/tests/test_legend.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_legend.py::test_legend_labelcolor_markeredgecolor",
              "file_path": "lib/matplotlib/tests/test_legend.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_legend.py::test_legend_labelcolor_markerfacecolor",
              "file_path": "lib/matplotlib/tests/test_legend.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_legend.py::test_legend_labelcolor_rcparam_single[red]",
              "file_path": "lib/matplotlib/tests/test_legend.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_legend.py::test_legend_labelcolor_rcparam_single[none]",
              "file_path": "lib/matplotlib/tests/test_legend.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_legend.py::test_legend_labelcolor_rcparam_single[color2]",
              "file_path": "lib/matplotlib/tests/test_legend.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_legend.py::test_legend_labelcolor_rcparam_linecolor",
              "file_path": "lib/matplotlib/tests/test_legend.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_legend.py::test_legend_labelcolor_rcparam_markeredgecolor",
              "file_path": "lib/matplotlib/tests/test_legend.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_legend.py::test_legend_labelcolor_rcparam_markeredgecolor_short",
              "file_path": "lib/matplotlib/tests/test_legend.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_legend.py::test_legend_labelcolor_rcparam_markerfacecolor",
              "file_path": "lib/matplotlib/tests/test_legend.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_legend.py::test_legend_labelcolor_rcparam_markerfacecolor_short",
              "file_path": "lib/matplotlib/tests/test_legend.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_legend.py::test_get_set_draggable",
              "file_path": "lib/matplotlib/tests/test_legend.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_legend.py::test_alpha_handles",
              "file_path": "lib/matplotlib/tests/test_legend.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_legend.py::test_usetex_no_warn",
              "file_path": "lib/matplotlib/tests/test_legend.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_legend.py::test_warn_big_data_best_loc",
              "file_path": "lib/matplotlib/tests/test_legend.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_legend.py::test_no_warn_big_data_when_loc_specified",
              "file_path": "lib/matplotlib/tests/test_legend.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_legend.py::test_plot_multiple_input_multiple_label[label_array0]",
              "file_path": "lib/matplotlib/tests/test_legend.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_legend.py::test_plot_multiple_input_multiple_label[label_array1]",
              "file_path": "lib/matplotlib/tests/test_legend.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_legend.py::test_plot_multiple_input_multiple_label[label_array2]",
              "file_path": "lib/matplotlib/tests/test_legend.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_legend.py::test_plot_multiple_input_single_label[one]",
              "file_path": "lib/matplotlib/tests/test_legend.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_legend.py::test_plot_multiple_input_single_label[1]",
              "file_path": "lib/matplotlib/tests/test_legend.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_legend.py::test_plot_multiple_input_single_label[int]",
              "file_path": "lib/matplotlib/tests/test_legend.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_legend.py::test_plot_single_input_multiple_label[label_array0]",
              "file_path": "lib/matplotlib/tests/test_legend.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_legend.py::test_plot_single_input_multiple_label[label_array1]",
              "file_path": "lib/matplotlib/tests/test_legend.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_legend.py::test_plot_single_input_multiple_label[label_array2]",
              "file_path": "lib/matplotlib/tests/test_legend.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_legend.py::test_plot_multiple_label_incorrect_length_exception",
              "file_path": "lib/matplotlib/tests/test_legend.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_legend.py::test_legend_face_edgecolor",
              "file_path": "lib/matplotlib/tests/test_legend.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_legend.py::test_legend_text_axes",
              "file_path": "lib/matplotlib/tests/test_legend.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_legend.py::test_handlerline2d",
              "file_path": "lib/matplotlib/tests/test_legend.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_legend.py::test_subfigure_legend",
              "file_path": "lib/matplotlib/tests/test_legend.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_legend.py::test_setting_alpha_keeps_polycollection_color",
              "file_path": "lib/matplotlib/tests/test_legend.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_legend.py::test_legend_markers_from_line2d",
              "file_path": "lib/matplotlib/tests/test_legend.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_legend.py::test_ncol_ncols[png]",
              "file_path": "lib/matplotlib/tests/test_legend.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_legend.py::test_ncol_ncols[pdf]",
              "file_path": "lib/matplotlib/tests/test_legend.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "SKIPPED",
              "message": "../opt/miniconda3/envs/testbed/lib/python3.11/contextlib.py:81: Cannot compare svg files because Inkscape is not installed",
              "file_path": "../opt/miniconda3/envs/testbed/lib/python3.11/contextlib.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "SKIPPED",
              "message": "lib/matplotlib/testing/compare.py:285: Don't know how to convert .svg files to png",
              "file_path": "lib/matplotlib/testing/compare.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_contour.py::test_contour_shape_1d_valid",
              "file_path": "lib/matplotlib/tests/test_contour.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_contour.py::test_contour_shape_2d_valid",
              "file_path": "lib/matplotlib/tests/test_contour.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_contour.py::test_contour_shape_error[args0-Length",
              "file_path": "lib/matplotlib/tests/test_contour.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_contour.py::test_contour_shape_error[args1-Length",
              "file_path": "lib/matplotlib/tests/test_contour.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_contour.py::test_contour_shape_error[args2-Number",
              "file_path": "lib/matplotlib/tests/test_contour.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_contour.py::test_contour_shape_error[args3-Number",
              "file_path": "lib/matplotlib/tests/test_contour.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_contour.py::test_contour_shape_error[args4-Shapes",
              "file_path": "lib/matplotlib/tests/test_contour.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_contour.py::test_contour_shape_error[args5-Shapes",
              "file_path": "lib/matplotlib/tests/test_contour.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_contour.py::test_contour_shape_error[args6-Inputs",
              "file_path": "lib/matplotlib/tests/test_contour.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_contour.py::test_contour_shape_error[args7-Input",
              "file_path": "lib/matplotlib/tests/test_contour.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_contour.py::test_contour_shape_error[args8-Input",
              "file_path": "lib/matplotlib/tests/test_contour.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_contour.py::test_contour_shape_error[args9-Input",
              "file_path": "lib/matplotlib/tests/test_contour.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_contour.py::test_contour_empty_levels",
              "file_path": "lib/matplotlib/tests/test_contour.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_contour.py::test_contour_Nlevels",
              "file_path": "lib/matplotlib/tests/test_contour.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_contour.py::test_contour_badlevel_fmt",
              "file_path": "lib/matplotlib/tests/test_contour.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_contour.py::test_contour_uniform_z",
              "file_path": "lib/matplotlib/tests/test_contour.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_contour.py::test_contour_manual_labels[png]",
              "file_path": "lib/matplotlib/tests/test_contour.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_contour.py::test_contour_manual_labels[pdf]",
              "file_path": "lib/matplotlib/tests/test_contour.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_contour.py::test_given_colors_levels_and_extends[png]",
              "file_path": "lib/matplotlib/tests/test_contour.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_contour.py::test_contour_datetime_axis[png]",
              "file_path": "lib/matplotlib/tests/test_contour.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_contour.py::test_labels[png]",
              "file_path": "lib/matplotlib/tests/test_contour.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_contour.py::test_corner_mask[png]",
              "file_path": "lib/matplotlib/tests/test_contour.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_contour.py::test_contourf_decreasing_levels",
              "file_path": "lib/matplotlib/tests/test_contour.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_contour.py::test_contourf_symmetric_locator",
              "file_path": "lib/matplotlib/tests/test_contour.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_contour.py::test_circular_contour_warning",
              "file_path": "lib/matplotlib/tests/test_contour.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_contour.py::test_clabel_zorder[True-123-1234]",
              "file_path": "lib/matplotlib/tests/test_contour.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_contour.py::test_clabel_zorder[False-123-1234]",
              "file_path": "lib/matplotlib/tests/test_contour.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_contour.py::test_clabel_zorder[True-123-None]",
              "file_path": "lib/matplotlib/tests/test_contour.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_contour.py::test_clabel_zorder[False-123-None]",
              "file_path": "lib/matplotlib/tests/test_contour.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_contour.py::test_contour_addlines[png]",
              "file_path": "lib/matplotlib/tests/test_contour.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_contour.py::test_contour_uneven[png]",
              "file_path": "lib/matplotlib/tests/test_contour.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_contour.py::test_contour_linewidth[1.23-None-None-1.23]",
              "file_path": "lib/matplotlib/tests/test_contour.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_contour.py::test_contour_linewidth[1.23-4.24-None-4.24]",
              "file_path": "lib/matplotlib/tests/test_contour.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_contour.py::test_contour_linewidth[1.23-4.24-5.02-5.02]",
              "file_path": "lib/matplotlib/tests/test_contour.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_contour.py::test_label_nonagg",
              "file_path": "lib/matplotlib/tests/test_contour.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_contour.py::test_contour_closed_line_loop[png]",
              "file_path": "lib/matplotlib/tests/test_contour.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_contour.py::test_quadcontourset_reuse",
              "file_path": "lib/matplotlib/tests/test_contour.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_contour.py::test_contour_manual[png]",
              "file_path": "lib/matplotlib/tests/test_contour.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_contour.py::test_contour_line_start_on_corner_edge[png]",
              "file_path": "lib/matplotlib/tests/test_contour.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_contour.py::test_find_nearest_contour",
              "file_path": "lib/matplotlib/tests/test_contour.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_contour.py::test_find_nearest_contour_no_filled",
              "file_path": "lib/matplotlib/tests/test_contour.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_contour.py::test_contour_autolabel_beyond_powerlimits",
              "file_path": "lib/matplotlib/tests/test_contour.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_contour.py::test_contourf_legend_elements",
              "file_path": "lib/matplotlib/tests/test_contour.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_contour.py::test_contour_legend_elements",
              "file_path": "lib/matplotlib/tests/test_contour.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_contour.py::test_algorithm_name[mpl2005-Mpl2005ContourGenerator]",
              "file_path": "lib/matplotlib/tests/test_contour.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_contour.py::test_algorithm_name[mpl2014-Mpl2014ContourGenerator]",
              "file_path": "lib/matplotlib/tests/test_contour.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_contour.py::test_algorithm_name[serial-SerialContourGenerator]",
              "file_path": "lib/matplotlib/tests/test_contour.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_contour.py::test_algorithm_name[threaded-ThreadedContourGenerator]",
              "file_path": "lib/matplotlib/tests/test_contour.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_contour.py::test_algorithm_name[invalid-None]",
              "file_path": "lib/matplotlib/tests/test_contour.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_contour.py::test_algorithm_supports_corner_mask[mpl2005]",
              "file_path": "lib/matplotlib/tests/test_contour.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_contour.py::test_algorithm_supports_corner_mask[mpl2014]",
              "file_path": "lib/matplotlib/tests/test_contour.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_contour.py::test_algorithm_supports_corner_mask[serial]",
              "file_path": "lib/matplotlib/tests/test_contour.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_contour.py::test_algorithm_supports_corner_mask[threaded]",
              "file_path": "lib/matplotlib/tests/test_contour.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_contour.py::test_all_algorithms[png]",
              "file_path": "lib/matplotlib/tests/test_contour.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_contour.py::test_subfigure_clabel",
              "file_path": "lib/matplotlib/tests/test_contour.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_contour.py::test_linestyles[solid]",
              "file_path": "lib/matplotlib/tests/test_contour.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_contour.py::test_linestyles[dashed]",
              "file_path": "lib/matplotlib/tests/test_contour.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_contour.py::test_linestyles[dashdot]",
              "file_path": "lib/matplotlib/tests/test_contour.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_contour.py::test_linestyles[dotted]",
              "file_path": "lib/matplotlib/tests/test_contour.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_contour.py::test_negative_linestyles[solid]",
              "file_path": "lib/matplotlib/tests/test_contour.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_contour.py::test_negative_linestyles[dashed]",
              "file_path": "lib/matplotlib/tests/test_contour.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_contour.py::test_negative_linestyles[dashdot]",
              "file_path": "lib/matplotlib/tests/test_contour.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_contour.py::test_negative_linestyles[dotted]",
              "file_path": "lib/matplotlib/tests/test_contour.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "SKIPPED",
              "message": "../opt/miniconda3/envs/testbed/lib/python3.11/contextlib.py:81: Cannot compare svg files because Inkscape is not installed",
              "file_path": "../opt/miniconda3/envs/testbed/lib/python3.11/contextlib.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "FAILED",
              "message": "\n    @image_comparison(['contour_log_extension.png'],\n                      remove_text=True, style='mpl20',\n                      tol=1.444)\n    def test_contourf_log_extension():\n        # Remove this line when this test image is regenerated.\n        plt.rcParams['pcolormesh.snap'] = False\n    \n        # Test that contourf with lognorm is extended correctly\n        fig, (ax1, ax2, ax3) = plt.subplots(1, 3, figsize=(10, 5))\n        fig.subplots_adjust(left=0.05, right=0.95)\n    \n        # make data set with large range e.g. between 1e-8 and 1e10\n        data_exp = np.linspace(-7.5, 9.5, 1200)\n        data = np.power(10, data_exp).reshape(30, 40)\n        # make manual levels e.g. between 1e-4 and 1e-6\n        levels_exp = np.arange(-4., 7.)\n        levels = np.power(10., levels_exp)\n    \n        # original data\n        c1 = ax1.contourf(data,\n                          norm=LogNorm(vmin=data.min(), vmax=data.max()))\n        # just show data in levels\n        c2 = ax2.contourf(data, levels=levels,\n                          norm=LogNorm(vmin=levels.min(), vmax=levels.max()),\n                          extend='neither')\n        # extend data from levels\n        c3 = ax3.contourf(data, levels=levels,\n                          norm=LogNorm(vmin=levels.min(), vmax=levels.max()),\n                          extend='both')\n        cb = plt.colorbar(c1, ax=ax1)\n        assert cb.ax.get_ylim() == (1e-8, 1e10)\n        cb = plt.colorbar(c2, ax=ax2)\n>       assert cb.ax.get_ylim() == (1e-4, 1e6)\nE       assert (9.9999999999...05, 1000000.0) == (0.0001, 1000000.0)\nE         \nE         At index 0 diff: 9.999999999999999e-05 != 0.0001\nE         Use -v to get more diff\n\nlib/matplotlib/tests/test_contour.py:316: AssertionError",
              "file_path": "lib/matplotlib/tests/test_contour.py",
              "span_id": "test_contourf_log_extension",
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_invisible_axes[png]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_get_labels",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_repr",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_label_loc_vertical[png]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_label_loc_vertical[pdf]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_label_loc_horizontal[png]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_label_loc_horizontal[pdf]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_label_loc_rc[png]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_label_loc_rc[pdf]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_label_shift",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_acorr[png]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_spy[png]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_spy_invalid_kwargs",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_matshow[png]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_formatter_ticker[png]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_formatter_ticker[pdf]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_funcformatter_auto_formatter",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_strmethodformatter_auto_formatter",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_twin_axis_locators_formatters[png]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_twin_axis_locators_formatters[pdf]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_twinx_cla",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_twin_logscale[png-x]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_twin_logscale[png-y]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_twinx_axis_scales[png]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_twin_inherit_autoscale_setting",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_inverted_cla",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_subclass_clear_cla",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_cla_not_redefined_internally",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_minorticks_on_rcParams_both[png]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_autoscale_tiny_range[png]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_autoscale_tiny_range[pdf]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_autoscale_tight",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_autoscale_log_shared",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_use_sticky_edges",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_sticky_shared_axes[png]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_basic_annotate[png]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_basic_annotate[pdf]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_arrow_simple[png]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_arrow_empty",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_arrow_in_view",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_annotate_default_arrow",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_annotate_signature",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_fill_units[png]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_plot_format_kwarg_redundant",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_errorbar_dashes[png]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_single_point[png]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_single_point[pdf]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_single_date[png]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_shaped_data[png]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_structured_data",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_aitoff_proj[png]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_axvspan_epoch[png]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_axvspan_epoch[pdf]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_axhspan_epoch[png]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_axhspan_epoch[pdf]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_hexbin_extent[png]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_hexbin_empty[png]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_hexbin_pickable",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_hexbin_log[png]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_hexbin_linear[png]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_hexbin_log_clim",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_inverted_limits",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_nonfinite_limits[png]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_nonfinite_limits[pdf]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_limits_empty_data[png-scatter]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_limits_empty_data[png-plot]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_limits_empty_data[png-fill_between]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_imshow[png]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_imshow[pdf]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_imshow_clip[png]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_imshow_clip[pdf]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_imshow_norm_vminvmax",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_polycollection_joinstyle[png]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_polycollection_joinstyle[pdf]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_fill_between_input[2d_x_input]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_fill_between_input[2d_y1_input]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_fill_between_input[2d_y2_input]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_fill_betweenx_input[2d_y_input]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_fill_betweenx_input[2d_x1_input]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_fill_betweenx_input[2d_x2_input]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_fill_between_interpolate[png]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_fill_between_interpolate[pdf]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_fill_between_interpolate_decreasing[png]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_fill_between_interpolate_decreasing[pdf]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_fill_between_interpolate_nan[png]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_fill_between_interpolate_nan[pdf]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_symlog[pdf]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_symlog2[pdf]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_pcolorargs_5205",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_pcolormesh[png]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_pcolormesh[pdf]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_pcolormesh_small[eps]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_pcolormesh_alpha[png]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_pcolormesh_alpha[pdf]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_pcolormesh_datetime_axis[png]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_pcolor_datetime_axis[png]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_pcolorargs",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_pcolornearest[png]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_pcolornearestunits[png]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_pcolorflaterror",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_pcolorauto[png-False]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_pcolorauto[png-True]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_canonical[png]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_canonical[pdf]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_arc_angles[png]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_arc_ellipse[png]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_arc_ellipse[pdf]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_marker_as_markerstyle",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_markevery[png]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_markevery[pdf]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_markevery_line[png]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_markevery_line[pdf]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_markevery_linear_scales[png]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_markevery_linear_scales[pdf]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_markevery_linear_scales_zoomed[png]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_markevery_linear_scales_zoomed[pdf]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_markevery_log_scales[png]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_markevery_log_scales[pdf]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_markevery_polar[png]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_markevery_polar[pdf]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_markevery_linear_scales_nans[png]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_markevery_linear_scales_nans[pdf]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_marker_edges[png]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_marker_edges[pdf]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_bar_tick_label_single[png]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_nan_bar_values",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_bar_ticklabel_fail",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_bar_tick_label_multiple[png]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_bar_tick_label_multiple_old_alignment[png]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_bar_decimal_center[png]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_barh_decimal_center[png]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_bar_decimal_width[png]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_barh_decimal_height[png]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_bar_color_none_alpha",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_bar_edgecolor_none_alpha",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_barh_tick_label[png]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_bar_timedelta",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_boxplot_dates_pandas",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_boxplot_capwidths",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_pcolor_regression",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_bar_pandas",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_bar_pandas_indexed",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_bar_hatches[png]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_bar_hatches[pdf]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_bar_labels[x-1-x-expected_labels0-x]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_bar_labels[x1-width1-label1-expected_labels1-_nolegend_]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_bar_labels[x2-width2-label2-expected_labels2-_nolegend_]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_bar_labels[x3-width3-bars-expected_labels3-bars]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_bar_labels_length",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_pandas_minimal_plot",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_hist_log[png]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_hist_log[pdf]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_hist_log_2[png]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_hist_log_barstacked",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_hist_bar_empty[png]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_hist_float16",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_hist_step_empty[png]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_hist_step_filled[png]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_hist_density[png]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_hist_unequal_bins_density",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_hist_datetime_datasets",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_hist_datetime_datasets_bins[date2num]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_hist_datetime_datasets_bins[datetime.datetime]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_hist_datetime_datasets_bins[np.datetime64]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_hist_with_empty_input[data0-1]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_hist_with_empty_input[data1-1]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_hist_with_empty_input[data2-2]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_hist_zorder[bar-1]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_hist_zorder[step-2]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_hist_zorder[stepfilled-1]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_stairs[png]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_stairs_fill[png]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_stairs_update[png]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_stairs_baseline_0[png]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_stairs_empty",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_stairs_invalid_nan",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_stairs_invalid_mismatch",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_stairs_invalid_update",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_stairs_invalid_update2",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_stairs_options[png]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_stairs_datetime[png]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_stairs_edge_handling[png]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_contour_hatching[png]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_contour_hatching[pdf]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_contour_colorbar[png]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_contour_colorbar[pdf]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_hist2d[png]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_hist2d[pdf]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_hist2d_transpose[png]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_hist2d_transpose[pdf]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_hist2d_density",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::TestScatter::test_scatter_plot[png]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::TestScatter::test_scatter_plot[pdf]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::TestScatter::test_scatter_marker[png]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::TestScatter::test_scatter_2D[png]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::TestScatter::test_scatter_decimal[png]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::TestScatter::test_scatter_color",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::TestScatter::test_scatter_color_warning[kwargs0]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::TestScatter::test_scatter_color_warning[kwargs1]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::TestScatter::test_scatter_color_warning[kwargs2]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::TestScatter::test_scatter_color_warning[kwargs3]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::TestScatter::test_scatter_unfilled",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::TestScatter::test_scatter_unfillable",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::TestScatter::test_scatter_size_arg_size",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::TestScatter::test_scatter_edgecolor_RGB",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::TestScatter::test_scatter_invalid_color[png]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::TestScatter::test_scatter_no_invalid_color[png]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::TestScatter::test_scatter_norm_vminvmax",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::TestScatter::test_scatter_single_point[png]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::TestScatter::test_scatter_different_shapes[png]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::TestScatter::test_scatter_c[0.5-None]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::TestScatter::test_scatter_c[c_case1-conversion]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::TestScatter::test_scatter_c[red-None]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::TestScatter::test_scatter_c[none-None]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::TestScatter::test_scatter_c[None-None]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::TestScatter::test_scatter_c[c_case5-None]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::TestScatter::test_scatter_c[jaune-conversion]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::TestScatter::test_scatter_c[c_case7-conversion]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::TestScatter::test_scatter_c[c_case8-conversion]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::TestScatter::test_scatter_c[c_case9-None]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::TestScatter::test_scatter_c[c_case10-None]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::TestScatter::test_scatter_c[c_case11-shape]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::TestScatter::test_scatter_c[c_case12-None]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::TestScatter::test_scatter_c[c_case13-None]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::TestScatter::test_scatter_c[c_case14-conversion]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::TestScatter::test_scatter_c[c_case15-None]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::TestScatter::test_scatter_c[c_case16-shape]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::TestScatter::test_scatter_c[c_case17-None]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::TestScatter::test_scatter_c[c_case18-shape]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::TestScatter::test_scatter_c[c_case19-None]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::TestScatter::test_scatter_c[c_case20-shape]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::TestScatter::test_scatter_c[c_case21-None]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::TestScatter::test_scatter_c[c_case22-shape]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::TestScatter::test_scatter_c[c_case23-None]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::TestScatter::test_scatter_c[c_case24-shape]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::TestScatter::test_scatter_c[c_case25-None]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::TestScatter::test_scatter_c[c_case26-shape]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::TestScatter::test_scatter_c[c_case27-conversion]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::TestScatter::test_scatter_c[c_case28-conversion]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::TestScatter::test_scatter_c[c_case29-conversion]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::TestScatter::test_scatter_single_color_c[png]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::TestScatter::test_scatter_linewidths",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_parse_scatter_color_args[params0-expected_result0]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_parse_scatter_color_args[params1-expected_result1]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_parse_scatter_color_args[params2-expected_result2]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_parse_scatter_color_args[params3-expected_result3]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_parse_scatter_color_args[params4-expected_result4]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_parse_scatter_color_args_edgecolors[kwargs0-None]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_parse_scatter_color_args_edgecolors[kwargs1-None]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_parse_scatter_color_args_edgecolors[kwargs2-r]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_parse_scatter_color_args_edgecolors[kwargs3-expected_edgecolors3]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_parse_scatter_color_args_edgecolors[kwargs4-r]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_parse_scatter_color_args_edgecolors[kwargs5-face]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_parse_scatter_color_args_edgecolors[kwargs6-none]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_parse_scatter_color_args_edgecolors[kwargs7-r]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_parse_scatter_color_args_edgecolors[kwargs8-r]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_parse_scatter_color_args_edgecolors[kwargs9-r]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_parse_scatter_color_args_edgecolors[kwargs10-g]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_parse_scatter_color_args_error",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_as_mpl_axes_api",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_pyplot_axes",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_log_scales",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_log_scales_no_data",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_log_scales_invalid",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_stackplot[png]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_stackplot[pdf]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_stackplot_baseline[png]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_stackplot_baseline[pdf]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_bxp_baseline[png]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_bxp_rangewhis[png]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_bxp_percentilewhis[png]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_bxp_with_xlabels[png]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_bxp_horizontal[png]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_bxp_with_ylabels[png]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_bxp_patchartist[png]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_bxp_custompatchartist[png]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_bxp_customoutlier[png]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_bxp_showcustommean[png]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_bxp_custombox[png]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_bxp_custommedian[png]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_bxp_customcap[png]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_bxp_customwhisker[png]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_bxp_shownotches[png]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_bxp_nocaps[png]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_bxp_nobox[png]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_bxp_no_flier_stats[png]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_bxp_showmean[png]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_bxp_showmeanasline[png]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_bxp_scalarwidth[png]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_bxp_customwidths[png]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_bxp_custompositions[png]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_bxp_bad_widths",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_bxp_bad_positions",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_bxp_custom_capwidths[png]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_bxp_custom_capwidth[png]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_bxp_bad_capwidths",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_boxplot[png]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_boxplot[pdf]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_boxplot_custom_capwidths[png]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_boxplot_sym2[png]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_boxplot_sym[png]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_boxplot_autorange_whiskers[png]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_boxplot_rc_parameters[png]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_boxplot_rc_parameters[pdf]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_boxplot_with_CIarray[png]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_boxplot_no_weird_whisker[png]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_boxplot_bad_medians",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_boxplot_bad_ci",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_boxplot_zorder",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_boxplot_marker_behavior",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_boxplot_mod_artist_after_plotting[png]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_vert_violinplot_baseline[png]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_vert_violinplot_showmeans[png]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_vert_violinplot_showextrema[png]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_vert_violinplot_showmedians[png]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_vert_violinplot_showall[png]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_vert_violinplot_custompoints_10[png]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_vert_violinplot_custompoints_200[png]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_horiz_violinplot_baseline[png]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_horiz_violinplot_showmedians[png]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_horiz_violinplot_showmeans[png]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_horiz_violinplot_showextrema[png]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_horiz_violinplot_showall[png]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_horiz_violinplot_custompoints_10[png]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_horiz_violinplot_custompoints_200[png]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_violinplot_bad_positions",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_violinplot_bad_widths",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_violinplot_bad_quantiles",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_violinplot_outofrange_quantiles",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_violinplot_single_list_quantiles[png]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_violinplot_pandas_series[png]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_manage_xticks",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_boxplot_not_single",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_tick_space_size_0",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_errorbar[png]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_errorbar[pdf]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_errorbar_colorcycle",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_errorbar_cycle_ecolor[png]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_errorbar_cycle_ecolor[pdf]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_errorbar_shape",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_errorbar_limits[png]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_errorbar_limits[pdf]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_errorbar_nonefmt",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_errorbar_line_specific_kwargs",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_errorbar_with_prop_cycle[png]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_errorbar_every_invalid",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_xerr_yerr_not_negative",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_errorbar_every[png]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_errorbar_every[pdf]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_errorbar_linewidth_type[elinewidth0]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_errorbar_linewidth_type[elinewidth1]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_errorbar_linewidth_type[1]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_errorbar_nan[png]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_hist_stacked_stepfilled[png]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_hist_stacked_stepfilled[pdf]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_hist_offset[png]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_hist_offset[pdf]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_hist_step[png]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_hist_step_horiz[png]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_hist_stacked_weighted[png]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_hist_stacked_weighted[pdf]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_stem[png-w/",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_stem[png-w/o",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_stem_args",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_stem_markerfmt",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_stem_dates",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_stem_orientation[png-w/",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_stem_orientation[png-w/o",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_hist_stacked_stepfilled_alpha[png]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_hist_stacked_stepfilled_alpha[pdf]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_hist_stacked_step[png]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_hist_stacked_step[pdf]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_hist_stacked_density[png]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_hist_stacked_density[pdf]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_hist_step_bottom[png]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_hist_stepfilled_geometry",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_hist_step_geometry",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_hist_stepfilled_bottom_geometry",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_hist_step_bottom_geometry",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_hist_stacked_stepfilled_geometry",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_hist_stacked_step_geometry",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_hist_stacked_stepfilled_bottom_geometry",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_hist_stacked_step_bottom_geometry",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_hist_stacked_bar[png]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_hist_stacked_bar[pdf]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_hist_barstacked_bottom_unchanged",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_hist_emptydata",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_hist_labels",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_transparent_markers[png]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_transparent_markers[pdf]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_rgba_markers[png]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_rgba_markers[pdf]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_mollweide_grid[png]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_mollweide_grid[pdf]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_mollweide_forward_inverse_closure",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_mollweide_inverse_forward_closure",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_alpha[png]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_alpha[pdf]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_eventplot[png]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_eventplot[pdf]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_eventplot_defaults[png]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_eventplot_colors[colors0]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_eventplot_colors[colors1]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_eventplot_colors[colors2]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_eventplot_problem_kwargs[png]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_empty_eventplot",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_eventplot_orientation[None-data0]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_eventplot_orientation[None-data1]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_eventplot_orientation[None-data2]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_eventplot_orientation[vertical-data0]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_eventplot_orientation[vertical-data1]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_eventplot_orientation[vertical-data2]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_eventplot_orientation[horizontal-data0]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_eventplot_orientation[horizontal-data1]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_eventplot_orientation[horizontal-data2]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_eventplot_units_list[png]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_marker_styles[png]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_markers_fillstyle_rcparams[png]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_vertex_markers[png]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_eb_line_zorder[png]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_eb_line_zorder[pdf]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_axline_loglog[png]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_axline_loglog[pdf]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_axline[png]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_axline[pdf]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_axline_transaxes[png]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_axline_transaxes[pdf]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_axline_transaxes_panzoom[png]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_axline_transaxes_panzoom[pdf]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_axline_args",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_vlines[png]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_vlines_default",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_hlines[png]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_hlines_default",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_lines_with_colors[png-data0]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_lines_with_colors[png-data1]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_step_linestyle[png]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_step_linestyle[pdf]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_mixed_collection[png]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_mixed_collection[pdf]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_subplot_key_hash",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_specgram[png]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_specgram_magnitude[png]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_specgram_angle[png]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_specgram_fs_none",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_specgram_origin_rcparam[png]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_specgram_origin_kwarg",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_psd_csd[png]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_spectrum[png]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_psd_csd_edge_cases",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_twin_remove[png]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_twin_spines[png]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_twin_spines_on_top[png]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_rcparam_grid_minor[both-True-True]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_rcparam_grid_minor[major-True-False]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_rcparam_grid_minor[minor-False-True]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_grid",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_reset_grid",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_reset_ticks[png]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_vline_limit",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_axline_minmax[axvline-axhline-args0]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_axline_minmax[axvspan-axhspan-args1]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_empty_shared_subplots",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_shared_with_aspect_1",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_shared_with_aspect_2",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_shared_with_aspect_3",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_shared_aspect_error",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_axis_errors[TypeError-args0-kwargs0-axis\\\\(\\\\)",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_axis_errors[ValueError-args1-kwargs1-Unrecognized",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_axis_errors[TypeError-args2-kwargs2-the",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_axis_errors[TypeError-args3-kwargs3-axis\\\\(\\\\)",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_axis_method_errors",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_twin_with_aspect[x]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_twin_with_aspect[y]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_relim_visible_only",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_text_labelsize",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_pie_default[png]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_pie_linewidth_0[png]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_pie_center_radius[png]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_pie_linewidth_2[png]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_pie_ccw_true[png]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_pie_frame_grid[png]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_pie_rotatelabels_true[png]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_pie_nolabel_but_legend[png]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_pie_textprops",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_pie_get_negative_values",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_normalize_kwarg_pie",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_set_get_ticklabels[png]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_set_ticks_with_labels[png]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_set_noniterable_ticklabels",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_subsampled_ticklabels",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_mismatched_ticklabels",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_empty_ticks_fixed_loc",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_retain_tick_visibility[png]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_tick_label_update",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_o_marker_path_snap[png]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_margins",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_set_margin_updates_limits",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_margins_errors[ValueError-args0-kwargs0-margin",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_margins_errors[ValueError-args1-kwargs1-margin",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_margins_errors[ValueError-args2-kwargs2-margin",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_margins_errors[ValueError-args3-kwargs3-margin",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_margins_errors[TypeError-args4-kwargs4-Cannot",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_margins_errors[TypeError-args5-kwargs5-Cannot",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_margins_errors[TypeError-args6-kwargs6-Must",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_length_one_hist",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_set_xy_bound",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_pathological_hexbin",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_color_None",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_color_alias",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_numerical_hist_label",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_unicode_hist_label",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_move_offsetlabel",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_rc_spines[png]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_rc_grid[png]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_rc_tick",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_rc_major_minor_tick",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_square_plot",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_bad_plot_args",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_pcolorfast[data0-xy0-AxesImage]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_pcolorfast[data0-xy1-AxesImage]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_pcolorfast[data0-xy2-AxesImage]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_pcolorfast[data0-xy3-PcolorImage]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_pcolorfast[data0-xy4-QuadMesh]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_pcolorfast[data1-xy0-AxesImage]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_pcolorfast[data1-xy1-AxesImage]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_pcolorfast[data1-xy2-AxesImage]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_pcolorfast[data1-xy3-PcolorImage]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_pcolorfast[data1-xy4-QuadMesh]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_shared_scale",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_shared_bool",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_violin_point_mass",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_errorbar_inputs_shotgun[kwargs0]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_errorbar_inputs_shotgun[kwargs1]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_errorbar_inputs_shotgun[kwargs2]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_errorbar_inputs_shotgun[kwargs3]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_errorbar_inputs_shotgun[kwargs4]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_errorbar_inputs_shotgun[kwargs5]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_errorbar_inputs_shotgun[kwargs6]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_errorbar_inputs_shotgun[kwargs7]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_errorbar_inputs_shotgun[kwargs8]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_errorbar_inputs_shotgun[kwargs9]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_errorbar_inputs_shotgun[kwargs10]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_errorbar_inputs_shotgun[kwargs11]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_errorbar_inputs_shotgun[kwargs12]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_errorbar_inputs_shotgun[kwargs13]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_errorbar_inputs_shotgun[kwargs14]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_errorbar_inputs_shotgun[kwargs15]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_errorbar_inputs_shotgun[kwargs16]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_errorbar_inputs_shotgun[kwargs17]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_errorbar_inputs_shotgun[kwargs18]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_errorbar_inputs_shotgun[kwargs19]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_errorbar_inputs_shotgun[kwargs20]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_errorbar_inputs_shotgun[kwargs21]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_errorbar_inputs_shotgun[kwargs22]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_errorbar_inputs_shotgun[kwargs23]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_errorbar_inputs_shotgun[kwargs24]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_errorbar_inputs_shotgun[kwargs25]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_errorbar_inputs_shotgun[kwargs26]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_errorbar_inputs_shotgun[kwargs27]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_errorbar_inputs_shotgun[kwargs28]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_errorbar_inputs_shotgun[kwargs29]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_errorbar_inputs_shotgun[kwargs30]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_errorbar_inputs_shotgun[kwargs31]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_errorbar_inputs_shotgun[kwargs32]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_errorbar_inputs_shotgun[kwargs33]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_errorbar_inputs_shotgun[kwargs34]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_errorbar_inputs_shotgun[kwargs35]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_errorbar_inputs_shotgun[kwargs36]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_errorbar_inputs_shotgun[kwargs37]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_errorbar_inputs_shotgun[kwargs38]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_errorbar_inputs_shotgun[kwargs39]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_errorbar_inputs_shotgun[kwargs40]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_errorbar_inputs_shotgun[kwargs41]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_errorbar_inputs_shotgun[kwargs42]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_errorbar_inputs_shotgun[kwargs43]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_errorbar_inputs_shotgun[kwargs44]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_errorbar_inputs_shotgun[kwargs45]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_errorbar_inputs_shotgun[kwargs46]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_errorbar_inputs_shotgun[kwargs47]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_errorbar_inputs_shotgun[kwargs48]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_errorbar_inputs_shotgun[kwargs49]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_errorbar_inputs_shotgun[kwargs50]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_errorbar_inputs_shotgun[kwargs51]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_dash_offset[png]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_dash_offset[pdf]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_title_pad",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_title_location_roundtrip",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_title_location_shared[True]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_title_location_shared[False]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_loglog[png]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_loglog_nonpos[png]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_axes_margins",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_remove_shared_axes[gca-x]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_remove_shared_axes[gca-y]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_remove_shared_axes[subplots-x]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_remove_shared_axes[subplots-y]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_remove_shared_axes[subplots_shared-x]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_remove_shared_axes[subplots_shared-y]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_remove_shared_axes[add_axes-x]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_remove_shared_axes[add_axes-y]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_remove_shared_axes_relim",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_shared_axes_autoscale",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_adjust_numtick_aspect",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_auto_numticks",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_auto_numticks_log",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_broken_barh_empty",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_broken_barh_timedelta",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_pandas_pcolormesh",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_pandas_indexing_dates",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_pandas_errorbar_indexing",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_pandas_index_shape",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_pandas_indexing_hist",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_pandas_bar_align_center",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_tick_apply_tickdir_deprecation",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_axis_set_tick_params_labelsize_labelcolor",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_axes_tick_params_gridlines",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_axes_tick_params_ylabelside",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_axes_tick_params_xlabelside",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_none_kwargs",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_bar_uint8",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_date_timezone_x[png]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_date_timezone_y[png]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_date_timezone_x_and_y[png]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_axisbelow[png]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_titletwiny",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_titlesetpos",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_title_xticks_top",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_title_xticks_top_both",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_title_above_offset[left",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_title_above_offset[center",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_title_above_offset[both",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_title_no_move_off_page",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_offset_label_color",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_offset_text_visible",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_large_offset",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_barb_units",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_quiver_units",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_bar_color_cycle",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_tick_param_label_rotation",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_fillbetween_cycle",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_log_margins",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_color_length_mismatch",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_eventplot_legend",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_bar_broadcast_args",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_invalid_axis_limits",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_minorticks_on[symlog-symlog]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_minorticks_on[symlog-log]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_minorticks_on[log-symlog]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_minorticks_on[log-log]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_twinx_knows_limits",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_zero_linewidth",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_empty_errorbar_legend",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_plot_decimal[png]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_markerfacecolor_none_alpha[png]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_tick_padding_tightbbox",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_inset",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_zoom_inset",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_inset_polar[png]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_inset_projection",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_inset_subclass",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_indicate_inset_inverted[False-False]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_indicate_inset_inverted[False-True]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_indicate_inset_inverted[True-False]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_indicate_inset_inverted[True-True]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_set_position",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_spines_properbbox_after_zoom",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_gettightbbox_ignore_nan",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_scatter_series_non_zero_index",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_scatter_empty_data",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_annotate_across_transforms[png]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_secondary_xy[png]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_secondary_fail",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_secondary_resize",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_secondary_minorloc",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_secondary_formatter",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_secondary_repr",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_normal_axes",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_nodecorator",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_displaced_spine",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_tickdirs",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_minor_accountedfor",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_axis_bool_arguments[png]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_axis_extent_arg",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_axis_extent_arg2",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_hist_auto_bins",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_hist_nan_data",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_hist_range_and_density",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_bar_errbar_zorder",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_set_ticks_inverted",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_aspect_nonlinear_adjustable_box",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_aspect_nonlinear_adjustable_datalim",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_box_aspect",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_box_aspect_custom_position",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_bbox_aspect_axes_init",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_redraw_in_frame",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_invisible_axes_events",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_xtickcolor_is_not_markercolor",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_ytickcolor_is_not_markercolor",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_unautoscale[True-x]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_unautoscale[True-y]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_unautoscale[False-x]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_unautoscale[False-y]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_unautoscale[None-x]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_unautoscale[None-y]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_polar_interpolation_steps_variable_r[png]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_autoscale_tiny_sticky",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_xtickcolor_is_not_xticklabelcolor",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_ytickcolor_is_not_yticklabelcolor",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_relative_ticklabel_sizes[xx-small]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_relative_ticklabel_sizes[x-small]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_relative_ticklabel_sizes[small]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_relative_ticklabel_sizes[medium]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_relative_ticklabel_sizes[large]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_relative_ticklabel_sizes[x-large]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_relative_ticklabel_sizes[xx-large]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_relative_ticklabel_sizes[larger]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_relative_ticklabel_sizes[smaller]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_relative_ticklabel_sizes[8]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_relative_ticklabel_sizes[10]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_relative_ticklabel_sizes[12]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_multiplot_autoscale",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_sharing_does_not_link_positions",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_2dcolor_plot[pdf]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_shared_axes_clear[png]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_shared_axes_retick",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_ylabel_ha_with_position[left]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_ylabel_ha_with_position[center]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_ylabel_ha_with_position[right]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_bar_label_location_vertical",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_bar_label_location_vertical_yinverted",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_bar_label_location_horizontal",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_bar_label_location_horizontal_yinverted",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_bar_label_location_horizontal_xinverted",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_bar_label_location_horizontal_xyinverted",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_bar_label_location_center",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_bar_label_location_errorbars",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_bar_label_fmt[%.2f]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_bar_label_fmt[{:.2f}]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_bar_label_fmt[format]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_bar_label_fmt_error",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_bar_label_labels",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_bar_label_nan_ydata",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_bar_label_nan_ydata_inverted",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_nan_barlabels",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_patch_bounds",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_warn_ignored_scatter_kwargs",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_artist_sublists",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_empty_line_plots",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_plot_format_errors[None-f-'f'",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_plot_format_errors[None-o+-'o\\\\+'",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_plot_format_errors[None-:--':-'",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_plot_format_errors[None-rk-'rk'",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_plot_format_errors[None-:o-r-':o-r'",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_plot_format_errors[data1-f-'f'",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_plot_format_errors[data1-o+-'o\\\\+'",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_plot_format_errors[data1-:--':-'",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_plot_format_errors[data1-rk-'rk'",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_plot_format_errors[data1-:o-r-':o-r'",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_plot_format",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_automatic_legend",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_plot_errors",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_clim",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_bezier_autoscale",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_get_xticklabel",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "SKIPPED",
              "message": "lib/matplotlib/testing/compare.py:285: Don't know how to convert .svg files to png",
              "file_path": "lib/matplotlib/testing/compare.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "SKIPPED",
              "message": "../opt/miniconda3/envs/testbed/lib/python3.11/contextlib.py:81: Cannot compare svg files because Inkscape is not installed",
              "file_path": "../opt/miniconda3/envs/testbed/lib/python3.11/contextlib.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            }
          ]
        }
      },
      "file_context": {
        "max_tokens": 8000,
        "files": [
          {
            "file_path": "lib/matplotlib/legend.py",
            "patch": "--- a/lib/matplotlib/legend.py\n+++ b/lib/matplotlib/legend.py\n@@ -341,6 +341,7 @@\n         handler_map=None,\n         title_fontproperties=None,  # properties for the legend title\n         alignment=\"center\",       # control the alignment within the legend box\n+        draggable=False,      # enable mouse dragging support\n         *,\n         ncol=1  # synonym for ncols (backward compatibility)\n     ):\n",
            "spans": [
              {
                "span_id": "imports",
                "pinned": false
              },
              {
                "span_id": "Legend",
                "pinned": false
              },
              {
                "span_id": "Legend.__init__",
                "pinned": false
              },
              {
                "span_id": "Legend.draw",
                "pinned": false
              },
              {
                "span_id": "DraggableLegend",
                "pinned": false
              },
              {
                "span_id": "DraggableLegend.__init__",
                "pinned": false
              },
              {
                "span_id": "DraggableLegend.finalize_offset",
                "pinned": false
              },
              {
                "span_id": "DraggableLegend._update_loc",
                "pinned": false
              },
              {
                "span_id": "DraggableLegend._update_bbox_to_anchor",
                "pinned": false
              },
              {
                "span_id": "Legend.set_draggable",
                "pinned": false
              },
              {
                "span_id": "Legend.get_draggable",
                "pinned": false
              }
            ],
            "show_all_spans": false
          },
          {
            "file_path": "lib/matplotlib/tests/test_legend.py",
            "spans": [
              {
                "span_id": "imports",
                "pinned": false
              },
              {
                "span_id": "test_get_set_draggable",
                "pinned": false
              }
            ],
            "show_all_spans": false,
            "patch": null
          },
          {
            "file_path": "lib/matplotlib/tests/test_contour.py",
            "spans": [
              {
                "span_id": "test_contourf_log_extension",
                "pinned": false
              }
            ],
            "show_all_spans": false,
            "patch": null
          },
          {
            "file_path": "lib/matplotlib/tests/test_axes.py",
            "spans": [],
            "show_all_spans": false,
            "patch": null
          }
        ]
      },
      "completions": {
        "build_action": {
          "model": "claude-3-5-sonnet-20241022",
          "input": [
            {
              "role": "user",
              "content": "<task>\nlegend draggable as keyword\n<!--To help us understand and resolve your issue, please fill out the form to the best of your ability.-->\r\n<!--You can feel free to delete the sections that do not apply.-->\r\n\r\n### Feature request\r\n\r\n**There is not keyword to make legend draggable at creation**\r\n\r\n<!--A short 1-2 sentences that succinctly describes the bug-->\r\n\r\nIs there a code reason why one can not add a \"draggable=True\" keyword to the __init__ function for Legend?  This would be more handy than having to call it after legend creation.  And, naively, it would seem simple to do.  But maybe there is a reason why it would not work?\n\n</task>"
            },
            {
              "role": "assistant",
              "content": [
                {
                  "type": "text",
                  "text": "<thoughts>\n1. First, I need to locate the Legend class implementation to understand its current initialization\n2. Then I'll check if there are any technical limitations for adding the draggable parameter\n3. I'll also look for any tests related to legend draggability to understand the current testing approach\n4. Finally, I'll implement the change if there are no blockers\n</thoughts>"
                },
                {
                  "id": "call_85bc3e3e",
                  "input": {
                    "file_pattern": null,
                    "class_name": "Legend"
                  },
                  "type": "tool_use",
                  "name": "FindClass"
                }
              ]
            },
            {
              "role": "user",
              "content": [
                {
                  "tool_use_id": "call_85bc3e3e",
                  "content": "<observation>\nFound 40 code sections.\n\nViewed relevant code:\nlib/matplotlib/legend.py\n```\n\n    23\t\n    24\timport itertools\n    25\timport logging\n    26\timport time\n    27\t\n    28\timport numpy as np\n    29\t\n    30\timport matplotlib as mpl\n    31\tfrom matplotlib import _api, _docstring, colors, offsetbox\n    32\tfrom matplotlib.artist import Artist, allow_rasterization\n    33\tfrom matplotlib.cbook import silent_list\n    34\tfrom matplotlib.font_manager import FontProperties\n    35\tfrom matplotlib.lines import Line2D\n    36\tfrom matplotlib.patches import (Patch, Rectangle, Shadow, FancyBboxPatch,\n    37\t                                StepPatch)\n    38\tfrom matplotlib.collections import (\n    39\t    Collection, CircleCollection, LineCollection, PathCollection,\n    40\t    PolyCollection, RegularPolyCollection)\n    41\tfrom matplotlib.text import Text\n    42\tfrom matplotlib.transforms import Bbox, BboxBase, TransformedBbox\n    43\tfrom matplotlib.transforms import BboxTransformTo, BboxTransformFrom\n    44\tfrom matplotlib.offsetbox import (\n    45\t    AnchoredOffsetbox, DraggableOffsetBox,\n    46\t    HPacker, VPacker,\n    47\t    DrawingArea, TextArea,\n    48\t)\n    49\tfrom matplotlib.container import ErrorbarContainer, BarContainer, StemContainer\n    50\tfrom . import legend_handler\n      # ...\n   290\t\n   291\t\n   292\tclass Legend(Artist):\n   293\t    \"\"\"\n   294\t    Place a legend on the axes at location loc.\n   295\t    \"\"\"\n   296\t\n   297\t    # 'best' is only implemented for axes legends\n   298\t    codes = {'best': 0, **AnchoredOffsetbox.codes}\n   299\t    zorder = 5\n          # ...\n   303\t\n   304\t    @_api.make_keyword_only(\"3.6\", \"loc\")\n   305\t    @_docstring.dedent_interpd\n   306\t    def __init__(\n   307\t        self, parent, handles, labels,\n   308\t        loc=None,\n   309\t        numpoints=None,      # number of points in the legend line\n   310\t        markerscale=None,    # relative size of legend markers vs. original\n   311\t        markerfirst=True,    # left/right ordering of legend marker and label\n   312\t        scatterpoints=None,  # number of scatter points\n   313\t        scatteryoffsets=None,\n   314\t        prop=None,           # properties for the legend texts\n   315\t        fontsize=None,       # keyword to set font size directly\n   316\t        labelcolor=None,     # keyword to set the text color\n   317\t\n   318\t        # spacing & pad defined as a fraction of the font-size\n   319\t        borderpad=None,      # whitespace inside the legend border\n   320\t        labelspacing=None,   # vertical space between the legend entries\n   321\t        handlelength=None,   # length of the legend handles\n   322\t        handleheight=None,   # height of the legend handles\n   323\t        handletextpad=None,  # pad between the legend handle and text\n   324\t        borderaxespad=None,  # pad between the axes and legend border\n   325\t        columnspacing=None,  # spacing between columns\n   326\t\n   327\t        ncols=1,     # number of columns\n   328\t        mode=None,  # horizontal distribution of columns: None or \"expand\"\n   329\t\n   330\t        fancybox=None,  # True: fancy box, False: rounded box, None: rcParam\n   331\t        shadow=None,\n   332\t        title=None,           # legend title\n   333\t        title_fontsize=None,  # legend title font size\n   334\t        framealpha=None,      # set frame alpha\n   335\t        edgecolor=None,       # frame patch edgecolor\n   336\t        facecolor=None,       # frame patch facecolor\n   337\t\n   338\t        bbox_to_anchor=None,  # bbox to which the legend will be anchored\n   339\t        bbox_transform=None,  # transform for the bbox\n   340\t        frameon=None,         # draw frame\n   341\t        handler_map=None,\n   342\t        title_fontproperties=None,  # properties for the legend title\n   343\t        alignment=\"center\",       # control the alignment within the legend box\n   344\t        *,\n   345\t        ncol=1  # synonym for ncols (backward compatibility)\n   346\t    ):\n   347\t        \"\"\"\n   348\t        Parameters\n   349\t        ----------\n   350\t        parent : `~matplotlib.axes.Axes` or `.Figure`\n   351\t            The artist that contains the legend.\n   352\t\n   353\t        handles : list of `.Artist`\n   354\t            A list of Artists (lines, patches) to be added to the legend.\n   355\t\n   356\t        labels : list of str\n   357\t            A list of labels to show next to the artists. The length of handles\n   358\t            and labels should be the same. If they are not, they are truncated\n   359\t            to the smaller of both lengths.\n   360\t\n   361\t        Other Parameters\n   362\t        ----------------\n   363\t        %(_legend_kw_doc)s\n   364\t\n   365\t        Notes\n   366\t        -----\n   367\t        Users can specify any arbitrary location for the legend using the\n   368\t        *bbox_to_anchor* keyword argument. *bbox_to_anchor* can be a\n   369\t        `.BboxBase` (or derived there from) or a tuple of 2 or 4 floats.\n   370\t        See `set_bbox_to_anchor` for more detail.\n   371\t\n   372\t        The legend location can be specified by setting *loc* with a tuple of\n   373\t        2 floats, which is interpreted as the lower-left corner of the legend\n   374\t        in the normalized axes coordinate.\n   375\t        \"\"\"\n   376\t        # local import only to avoid circularity\n   377\t        from matplotlib.axes import Axes\n   378\t        from matplotlib.figure import FigureBase\n   379\t\n   380\t        super().__init__()\n   381\t\n   382\t        if prop is None:\n   383\t            if fontsize is not None:\n   384\t                self.prop = FontProperties(size=fontsize)\n   385\t            else:\n   386\t                self.prop = FontProperties(\n   387\t                    size=mpl.rcParams[\"legend.fontsize\"])\n   388\t        else:\n   389\t            self.prop = FontProperties._from_any(prop)\n   390\t            if isinstance(prop, dict) and \"size\" not in prop:\n   391\t                self.prop.set_size(mpl.rcParams[\"legend.fontsize\"])\n   392\t\n   393\t        self._fontsize = self.prop.get_size_in_points()\n   394\t\n   395\t        self.texts = []\n   396\t        self.legendHandles = []\n   397\t        self._legend_title_box = None\n   398\t\n   399\t        #: A dictionary with the extra handler mappings for this Legend\n   400\t        #: instance.\n   401\t        self._custom_handler_map = handler_map\n   402\t\n   403\t        def val_or_rc(val, rc_name):\n   404\t            return val if val is not None else mpl.rcParams[rc_name]\n   405\t\n   406\t        self.numpoints = val_or_rc(numpoints, 'legend.numpoints')\n   407\t        self.markerscale = val_or_rc(markerscale, 'legend.markerscale')\n   408\t        self.scatterpoints = val_or_rc(scatterpoints, 'legend.scatterpoints')\n   409\t        self.borderpad = val_or_rc(borderpad, 'legend.borderpad')\n   410\t        self.labelspacing = val_or_rc(labelspacing, 'legend.labelspacing')\n   411\t        self.handlelength = val_or_rc(handlelength, 'legend.handlelength')\n   412\t        self.handleheight = val_or_rc(handleheight, 'legend.handleheight')\n   413\t        self.handletextpad = val_or_rc(handletextpad, 'legend.handletextpad')\n   414\t        self.borderaxespad = val_or_rc(borderaxespad, 'legend.borderaxespad')\n   415\t        self.columnspacing = val_or_rc(columnspacing, 'legend.columnspacing')\n   416\t        self.shadow = val_or_rc(shadow, 'legend.shadow')\n   417\t        # trim handles and labels if illegal label...\n   418\t        _lab, _hand = [], []\n   419\t        for label, handle in zip(labels, handles):\n   420\t            if isinstance(label, str) and label.startswith('_'):\n   421\t                _api.warn_external(f\"The label {label!r} of {handle!r} starts \"\n   422\t                                   \"with '_'. It is thus excluded from the \"\n   423\t                                   \"legend.\")\n   424\t            else:\n   425\t                _lab.append(label)\n   426\t                _hand.append(handle)\n   427\t        labels, handles = _lab, _hand\n   428\t\n   429\t        handles = list(handles)\n   430\t        if len(handles) < 2:\n   431\t            ncols = 1\n   432\t        self._ncols = ncols if ncols != 1 else ncol\n   433\t\n   434\t        if self.numpoints <= 0:\n   435\t            raise ValueError(\"numpoints must be > 0; it was %d\" % numpoints)\n   436\t\n   437\t        # introduce y-offset for handles of the scatter plot\n   438\t        if scatteryoffsets is None:\n   439\t            self._scatteryoffsets = np.array([3. / 8., 4. / 8., 2.5 / 8.])\n   440\t        else:\n   441\t            self._scatteryoffsets = np.asarray(scatteryoffsets)\n   442\t        reps = self.scatterpoints // len(self._scatteryoffsets) + 1\n   443\t        self._scatteryoffsets = np.tile(self._scatteryoffsets,\n   444\t                                        reps)[:self.scatterpoints]\n   445\t\n   446\t        # _legend_box is a VPacker instance that contains all\n   447\t        # legend items and will be initialized from _init_legend_box()\n   448\t        # method.\n   449\t        self._legend_box = None\n   450\t\n   451\t        if isinstance(parent, Axes):\n   452\t            self.isaxes = True\n   453\t            self.axes = parent\n   454\t            self.set_figure(parent.figure)\n   455\t        elif isinstance(parent, FigureBase):\n   456\t            self.isaxes = False\n   457\t            self.set_figure(parent)\n   458\t        else:\n   459\t            raise TypeError(\n   460\t                \"Legend needs either Axes or FigureBase as parent\"\n   461\t            )\n   462\t        self.parent = parent\n   463\t\n   464\t        self._loc_used_default = loc is None\n   465\t        if loc is None:\n   466\t            loc = mpl.rcParams[\"legend.loc\"]\n   467\t            if not self.isaxes and loc in [0, 'best']:\n   468\t                loc = 'upper right'\n   469\t        if isinstance(loc, str):\n   470\t            loc = _api.check_getitem(self.codes, loc=loc)\n   471\t        if not self.isaxes and loc == 0:\n   472\t            raise ValueError(\n   473\t                \"Automatic legend placement (loc='best') not implemented for \"\n   474\t                \"figure legend\")\n   475\t\n   476\t        self._mode = mode\n   477\t        self.set_bbox_to_anchor(bbox_to_anchor, bbox_transform)\n   478\t\n   479\t        # We use FancyBboxPatch to draw a legend frame. The location\n   480\t        # and size of the box will be updated during the drawing time.\n   481\t\n   482\t        if facecolor is None:\n   483\t            facecolor = mpl.rcParams[\"legend.facecolor\"]\n   484\t        if facecolor == 'inherit':\n   485\t            facecolor = mpl.rcParams[\"axes.facecolor\"]\n   486\t\n   487\t        if edgecolor is None:\n   488\t            edgecolor = mpl.rcParams[\"legend.edgecolor\"]\n   489\t        if edgecolor == 'inherit':\n   490\t            edgecolor = mpl.rcParams[\"axes.edgecolor\"]\n   491\t\n   492\t        if fancybox is None:\n   493\t            fancybox = mpl.rcParams[\"legend.fancybox\"]\n   494\t\n   495\t        self.legendPatch = FancyBboxPatch(\n   496\t            xy=(0, 0), width=1, height=1,\n   497\t            facecolor=facecolor, edgecolor=edgecolor,\n   498\t            # If shadow is used, default to alpha=1 (#8943).\n   499\t            alpha=(framealpha if framealpha is not None\n   500\t                   else 1 if shadow\n   501\t                   else mpl.rcParams[\"legend.framealpha\"]),\n   502\t            # The width and height of the legendPatch will be set (in draw())\n   503\t            # to the length that includes the padding. Thus we set pad=0 here.\n   504\t            boxstyle=(\"round,pad=0,rounding_size=0.2\" if fancybox\n   505\t                      else \"square,pad=0\"),\n   506\t            mutation_scale=self._fontsize,\n   507\t            snap=True,\n   508\t            visible=(frameon if frameon is not None\n   509\t                     else mpl.rcParams[\"legend.frameon\"])\n   510\t        )\n   511\t        self._set_artist_props(self.legendPatch)\n   512\t\n   513\t        _api.check_in_list([\"center\", \"left\", \"right\"], alignment=alignment)\n   514\t        self._alignment = alignment\n   515\t\n   516\t        # init with null renderer\n   517\t        self._init_legend_box(handles, labels, markerfirst)\n   518\t\n   519\t        tmp = self._loc_used_default\n   520\t        self._set_loc(loc)\n   521\t        self._loc_used_default = tmp  # ignore changes done by _set_loc\n   522\t\n   523\t        # figure out title font properties:\n   524\t        if title_fontsize is not None and title_fontproperties is not None:\n   525\t            raise ValueError(\n   526\t                \"title_fontsize and title_fontproperties can't be specified \"\n   527\t                \"at the same time. Only use one of them. \")\n   528\t        title_prop_fp = FontProperties._from_any(title_fontproperties)\n   529\t        if isinstance(title_fontproperties, dict):\n   530\t            if \"size\" not in title_fontproperties:\n   531\t                title_fontsize = mpl.rcParams[\"legend.title_fontsize\"]\n   532\t                title_prop_fp.set_size(title_fontsize)\n   533\t        elif title_fontsize is not None:\n   534\t            title_prop_fp.set_size(title_fontsize)\n   535\t        elif not isinstance(title_fontproperties, FontProperties):\n   536\t            title_fontsize = mpl.rcParams[\"legend.title_fontsize\"]\n   537\t            title_prop_fp.set_size(title_fontsize)\n   538\t\n   539\t        self.set_title(title, prop=title_prop_fp)\n   540\t        self._draggable = None\n   541\t\n   542\t        # set the text color\n   543\t\n   544\t        color_getters = {  # getter function depends on line or patch\n   545\t            'linecolor':       ['get_color',           'get_facecolor'],\n   546\t            'markerfacecolor': ['get_markerfacecolor', 'get_facecolor'],\n   547\t            'mfc':             ['get_markerfacecolor', 'get_facecolor'],\n   548\t            'markeredgecolor': ['get_markeredgecolor', 'get_edgecolor'],\n   549\t            'mec':             ['get_markeredgecolor', 'get_edgecolor'],\n   550\t        }\n   551\t        if labelcolor is None:\n   552\t            if mpl.rcParams['legend.labelcolor'] is not None:\n   553\t                labelcolor = mpl.rcParams['legend.labelcolor']\n   554\t            else:\n   555\t                labelcolor = mpl.rcParams['text.color']\n   556\t        if isinstance(labelcolor, str) and labelcolor in color_getters:\n   557\t            getter_names = color_getters[labelcolor]\n   558\t            for handle, text in zip(self.legendHandles, self.texts):\n   559\t                for getter_name in getter_names:\n   560\t                    try:\n   561\t                        color = getattr(handle, getter_name)()\n   562\t                        text.set_color(color)\n   563\t                        break\n   564\t                    except AttributeError:\n   565\t                        pass\n   566\t        elif isinstance(labelcolor, str) and labelcolor == 'none':\n   567\t            for text in self.texts:\n   568\t                text.set_color(labelcolor)\n   569\t        elif np.iterable(labelcolor):\n   570\t            for text, color in zip(self.texts,\n   571\t                                   itertools.cycle(\n   572\t                                       colors.to_rgba_array(labelcolor))):\n   573\t                text.set_color(color)\n   574\t        else:\n   575\t            raise ValueError(f\"Invalid labelcolor: {labelcolor!r}\")\n          # ...\n   622\t\n   623\t    @allow_rasterization\n   624\t    def draw(self, renderer):\n   625\t        # docstring inherited\n   626\t        if not self.get_visible():\n   627\t            return\n   628\t\n   629\t        renderer.open_group('legend', gid=self.get_gid())\n   630\t\n   631\t        fontsize = renderer.points_to_pixels(self._fontsize)\n   632\t\n   633\t        # if mode == fill, set the width of the legend_box to the\n   634\t        # width of the parent (minus pads)\n   635\t        if self._mode in [\"expand\"]:\n   636\t            pad = 2 * (self.borderaxespad + self.borderpad) * fontsize\n   637\t            self._legend_box.set_width(self.get_bbox_to_anchor().width - pad)\n   638\t\n   639\t        # update the location and size of the legend. This needs to\n   640\t        # be done in any case to clip the figure right.\n   641\t        bbox = self._legend_box.get_window_extent(renderer)\n   642\t        self.legendPatch.set_bounds(bbox.bounds)\n   643\t        self.legendPatch.set_mutation_scale(fontsize)\n   644\t\n   645\t        if self.shadow:\n   646\t            Shadow(self.legendPatch, 2, -2).draw(renderer)\n   647\t\n   648\t        self.legendPatch.draw(renderer)\n   649\t        self._legend_box.draw(renderer)\n   650\t\n   651\t        renderer.close_group('legend')\n   652\t        self.stale = False\n   653\t\n   654\t    # _default_handler_map defines the default mapping between plot\n   655\t    # elements and the legend handlers.\n          # ...\n      # ...\n```\n\n</observation>",
                  "type": "tool_result"
                }
              ]
            },
            {
              "role": "assistant",
              "content": [
                {
                  "type": "text",
                  "text": "<thoughts>\n1. I found the Legend class implementation in lib/matplotlib/legend.py\n2. I notice that:\n   - The Legend class already has a `_draggable` attribute initialized as None in __init__ (line 540)\n   - The class inherits from Artist and uses DraggableOffsetBox (imported on line 45)\n3. Let me search for the draggable functionality to understand how it's currently implemented\n</thoughts>"
                },
                {
                  "id": "call_05070c78",
                  "input": {
                    "file_pattern": null,
                    "query": "legend draggable method implementation",
                    "category": "implementation"
                  },
                  "type": "tool_use",
                  "name": "SemanticSearch"
                }
              ]
            },
            {
              "role": "user",
              "content": [
                {
                  "tool_use_id": "call_05070c78",
                  "content": "<observation>\nFound 14 code sections.\n\nViewed relevant code:\nlib/matplotlib/legend.py\n```\n\n    23\t\n    24\timport itertools\n    25\timport logging\n    26\timport time\n    27\t\n    28\timport numpy as np\n    29\t\n    30\timport matplotlib as mpl\n    31\tfrom matplotlib import _api, _docstring, colors, offsetbox\n    32\tfrom matplotlib.artist import Artist, allow_rasterization\n    33\tfrom matplotlib.cbook import silent_list\n    34\tfrom matplotlib.font_manager import FontProperties\n    35\tfrom matplotlib.lines import Line2D\n    36\tfrom matplotlib.patches import (Patch, Rectangle, Shadow, FancyBboxPatch,\n    37\t                                StepPatch)\n    38\tfrom matplotlib.collections import (\n    39\t    Collection, CircleCollection, LineCollection, PathCollection,\n    40\t    PolyCollection, RegularPolyCollection)\n    41\tfrom matplotlib.text import Text\n    42\tfrom matplotlib.transforms import Bbox, BboxBase, TransformedBbox\n    43\tfrom matplotlib.transforms import BboxTransformTo, BboxTransformFrom\n    44\tfrom matplotlib.offsetbox import (\n    45\t    AnchoredOffsetbox, DraggableOffsetBox,\n    46\t    HPacker, VPacker,\n    47\t    DrawingArea, TextArea,\n    48\t)\n    49\tfrom matplotlib.container import ErrorbarContainer, BarContainer, StemContainer\n    50\tfrom . import legend_handler\n    51\t\n    52\t\n    53\tclass DraggableLegend(DraggableOffsetBox):\n    54\t    def __init__(self, legend, use_blit=False, update=\"loc\"):\n    55\t        \"\"\"\n    56\t        Wrapper around a `.Legend` to support mouse dragging.\n    57\t\n    58\t        Parameters\n    59\t        ----------\n    60\t        legend : `.Legend`\n    61\t            The `.Legend` instance to wrap.\n    62\t        use_blit : bool, optional\n    63\t            Use blitting for faster image composition. For details see\n    64\t            :ref:`func-animation`.\n    65\t        update : {'loc', 'bbox'}, optional\n    66\t            If \"loc\", update the *loc* parameter of the legend upon finalizing.\n    67\t            If \"bbox\", update the *bbox_to_anchor* parameter.\n    68\t        \"\"\"\n    69\t        self.legend = legend\n    70\t\n    71\t        _api.check_in_list([\"loc\", \"bbox\"], update=update)\n    72\t        self._update = update\n    73\t\n    74\t        super().__init__(legend, legend._legend_box, use_blit=use_blit)\n    75\t\n    76\t    def finalize_offset(self):\n    77\t        if self._update == \"loc\":\n    78\t            self._update_loc(self.get_loc_in_canvas())\n    79\t        elif self._update == \"bbox\":\n    80\t            self._bbox_to_anchor(self.get_loc_in_canvas())\n    81\t\n    82\t    def _update_loc(self, loc_in_canvas):\n    83\t        bbox = self.legend.get_bbox_to_anchor()\n    84\t        # if bbox has zero width or height, the transformation is\n    85\t        # ill-defined. Fall back to the default bbox_to_anchor.\n    86\t        if bbox.width == 0 or bbox.height == 0:\n    87\t            self.legend.set_bbox_to_anchor(None)\n    88\t            bbox = self.legend.get_bbox_to_anchor()\n    89\t        _bbox_transform = BboxTransformFrom(bbox)\n    90\t        self.legend._loc = tuple(_bbox_transform.transform(loc_in_canvas))\n    91\t\n    92\t    def _update_bbox_to_anchor(self, loc_in_canvas):\n    93\t        loc_in_bbox = self.legend.axes.transAxes.transform(loc_in_canvas)\n    94\t        self.legend.set_bbox_to_anchor(loc_in_bbox)\n      # ...\n   290\t\n   291\t\n   292\tclass Legend(Artist):\n   293\t    \"\"\"\n   294\t    Place a legend on the axes at location loc.\n   295\t    \"\"\"\n   296\t\n   297\t    # 'best' is only implemented for axes legends\n   298\t    codes = {'best': 0, **AnchoredOffsetbox.codes}\n   299\t    zorder = 5\n          # ...\n  1078\t\n  1079\t    def set_draggable(self, state, use_blit=False, update='loc'):\n  1080\t        \"\"\"\n  1081\t        Enable or disable mouse dragging support of the legend.\n  1082\t\n  1083\t        Parameters\n  1084\t        ----------\n  1085\t        state : bool\n  1086\t            Whether mouse dragging is enabled.\n  1087\t        use_blit : bool, optional\n  1088\t            Use blitting for faster image composition. For details see\n  1089\t            :ref:`func-animation`.\n  1090\t        update : {'loc', 'bbox'}, optional\n  1091\t            The legend parameter to be changed when dragged:\n  1092\t\n  1093\t            - 'loc': update the *loc* parameter of the legend\n  1094\t            - 'bbox': update the *bbox_to_anchor* parameter of the legend\n  1095\t\n  1096\t        Returns\n  1097\t        -------\n  1098\t        `.DraggableLegend` or *None*\n  1099\t            If *state* is ``True`` this returns the `.DraggableLegend` helper\n  1100\t            instance. Otherwise this returns *None*.\n  1101\t        \"\"\"\n  1102\t        if state:\n  1103\t            if self._draggable is None:\n  1104\t                self._draggable = DraggableLegend(self,\n  1105\t                                                  use_blit,\n  1106\t                                                  update=update)\n  1107\t        else:\n  1108\t            if self._draggable is not None:\n  1109\t                self._draggable.disconnect()\n  1110\t            self._draggable = None\n  1111\t        return self._draggable\n  1112\t\n  1113\t    def get_draggable(self):\n  1114\t        \"\"\"Return ``True`` if the legend is draggable, ``False`` otherwise.\"\"\"\n  1115\t        return self._draggable is not None\n  1116\t\n  1117\t\n  1118\t# Helper functions to parse legend arguments for both `figure.legend` and\n  1119\t# `axes.legend`:\n      # ...\n```\n\n</observation>",
                  "type": "tool_result",
                  "cache_control": {
                    "type": "ephemeral"
                  }
                }
              ]
            },
            {
              "role": "assistant",
              "content": [
                {
                  "type": "text",
                  "text": "<thoughts>\n1. I found the draggable functionality implementation:\n   - There's a DraggableLegend class that inherits from DraggableOffsetBox\n   - Legend class has set_draggable() and get_draggable() methods\n   - The _draggable attribute is initialized as None in __init__\n2. Adding a draggable parameter to __init__ seems feasible since:\n   - The infrastructure for draggable legends already exists\n   - It would just need to call set_draggable() during initialization\n3. Let me check if there are any tests for the draggable functionality to understand how to test the new parameter\n</thoughts>"
                },
                {
                  "id": "call_9dda00e0",
                  "input": {
                    "file_pattern": null,
                    "query": "legend draggable tests",
                    "category": "test"
                  },
                  "type": "tool_use",
                  "name": "SemanticSearch",
                  "cache_control": {
                    "type": "ephemeral"
                  }
                }
              ]
            },
            {
              "role": "user",
              "content": [
                {
                  "tool_use_id": "call_9dda00e0",
                  "content": "<observation>\nFound 12 code sections.\n\nViewed relevant code:\nlib/matplotlib/tests/test_legend.py\n```\n     1\timport collections\n     2\timport platform\n     3\tfrom unittest import mock\n     4\timport warnings\n     5\t\n     6\timport numpy as np\n     7\timport pytest\n     8\t\n     9\tfrom matplotlib.testing.decorators import check_figures_equal, image_comparison\n    10\tfrom matplotlib.testing._markers import needs_usetex\n    11\timport matplotlib.pyplot as plt\n    12\timport matplotlib as mpl\n    13\timport matplotlib.transforms as mtransforms\n    14\timport matplotlib.collections as mcollections\n    15\timport matplotlib.lines as mlines\n    16\tfrom matplotlib.legend_handler import HandlerTuple\n    17\timport matplotlib.legend as mlegend\n    18\tfrom matplotlib import rc_context\n    19\tfrom matplotlib.font_manager import FontProperties\n      # ...\n   775\t\n   776\t\n   777\tdef test_get_set_draggable():\n   778\t    legend = plt.legend()\n   779\t    assert not legend.get_draggable()\n   780\t    legend.set_draggable(True)\n   781\t    assert legend.get_draggable()\n   782\t    legend.set_draggable(False)\n   783\t    assert not legend.get_draggable()\n      # ...\n```\n\n</observation>",
                  "type": "tool_result",
                  "cache_control": {
                    "type": "ephemeral"
                  }
                }
              ]
            }
          ],
          "response": {
            "id": "msg_012w3CdeGBSwcxmjxkLHNkKZ",
            "content": [
              {
                "text": "<thoughts>\n1. I found the test for draggable functionality in test_legend.py\n2. The changes needed are:\n   - Add a draggable parameter to Legend.__init__\n   - Call set_draggable() in __init__ if draggable=True\n   - Add a test case for the new parameter\n3. Let me implement these changes\n</thoughts>",
                "type": "text"
              },
              {
                "id": "toolu_01H9tdU7RDgb4JX9gnwAi7WD",
                "input": {
                  "command": "str_replace",
                  "path": "/repo/lib/matplotlib/legend.py",
                  "old_str": "    def __init__(\n        self, parent, handles, labels,\n        loc=None,\n        numpoints=None,      # number of points in the legend line\n        markerscale=None,    # relative size of legend markers vs. original\n        markerfirst=True,    # left/right ordering of legend marker and label\n        scatterpoints=None,  # number of scatter points\n        scatteryoffsets=None,\n        prop=None,           # properties for the legend texts\n        fontsize=None,       # keyword to set font size directly\n        labelcolor=None,     # keyword to set the text color\n\n        # spacing & pad defined as a fraction of the font-size\n        borderpad=None,      # whitespace inside the legend border\n        labelspacing=None,   # vertical space between the legend entries\n        handlelength=None,   # length of the legend handles\n        handleheight=None,   # height of the legend handles\n        handletextpad=None,  # pad between the legend handle and text\n        borderaxespad=None,  # pad between the axes and legend border\n        columnspacing=None,  # spacing between columns\n\n        ncols=1,     # number of columns\n        mode=None,  # horizontal distribution of columns: None or \"expand\"\n\n        fancybox=None,  # True: fancy box, False: rounded box, None: rcParam\n        shadow=None,\n        title=None,           # legend title\n        title_fontsize=None,  # legend title font size\n        framealpha=None,      # set frame alpha\n        edgecolor=None,       # frame patch edgecolor\n        facecolor=None,       # frame patch facecolor\n\n        bbox_to_anchor=None,  # bbox to which the legend will be anchored\n        bbox_transform=None,  # transform for the bbox\n        frameon=None,         # draw frame\n        handler_map=None,\n        title_fontproperties=None,  # properties for the legend title\n        alignment=\"center\",       # control the alignment within the legend box\n        *,\n        ncol=1  # synonym for ncols (backward compatibility)",
                  "new_str": "    def __init__(\n        self, parent, handles, labels,\n        loc=None,\n        numpoints=None,      # number of points in the legend line\n        markerscale=None,    # relative size of legend markers vs. original\n        markerfirst=True,    # left/right ordering of legend marker and label\n        scatterpoints=None,  # number of scatter points\n        scatteryoffsets=None,\n        prop=None,           # properties for the legend texts\n        fontsize=None,       # keyword to set font size directly\n        labelcolor=None,     # keyword to set the text color\n\n        # spacing & pad defined as a fraction of the font-size\n        borderpad=None,      # whitespace inside the legend border\n        labelspacing=None,   # vertical space between the legend entries\n        handlelength=None,   # length of the legend handles\n        handleheight=None,   # height of the legend handles\n        handletextpad=None,  # pad between the legend handle and text\n        borderaxespad=None,  # pad between the axes and legend border\n        columnspacing=None,  # spacing between columns\n\n        ncols=1,     # number of columns\n        mode=None,  # horizontal distribution of columns: None or \"expand\"\n\n        fancybox=None,  # True: fancy box, False: rounded box, None: rcParam\n        shadow=None,\n        title=None,           # legend title\n        title_fontsize=None,  # legend title font size\n        framealpha=None,      # set frame alpha\n        edgecolor=None,       # frame patch edgecolor\n        facecolor=None,       # frame patch facecolor\n\n        bbox_to_anchor=None,  # bbox to which the legend will be anchored\n        bbox_transform=None,  # transform for the bbox\n        frameon=None,         # draw frame\n        handler_map=None,\n        title_fontproperties=None,  # properties for the legend title\n        alignment=\"center\",       # control the alignment within the legend box\n        draggable=False,      # enable mouse dragging support\n        *,\n        ncol=1  # synonym for ncols (backward compatibility)"
                },
                "name": "str_replace_editor",
                "type": "tool_use"
              }
            ],
            "model": "claude-3-5-sonnet-20241022",
            "role": "assistant",
            "stop_reason": "tool_use",
            "stop_sequence": null,
            "type": "message",
            "usage": {
              "cache_creation_input_tokens": 601,
              "cache_read_input_tokens": 11377,
              "input_tokens": 3,
              "output_tokens": 1226
            }
          },
          "usage": {
            "completion_cost": 0.020202,
            "completion_tokens": 1226,
            "prompt_tokens": 604,
            "cached_tokens": 11377
          }
        }
      },
      "possible_actions": [
        "SemanticSearch",
        "FindClass",
        "FindFunction",
        "FindCodeSnippet",
        "RequestMoreContext",
        "ClaudeEditTool"
      ],
      "output": {
        "message": "The file lib/matplotlib/legend.py has been edited. Here's the result of running `cat -n` on a snippet of lib/matplotlib/legend.py:\n   306\t    def __str__(self):\n   307\t        return \"Legend\"\n   308\t\n   309\t    @_api.make_keyword_only(\"3.6\", \"loc\")\n   310\t    @_docstring.dedent_interpd\n   311\t    def __init__(\n   312\t        self, parent, handles, labels,\n   313\t        loc=None,\n   314\t        numpoints=None,      # number of points in the legend line\n   315\t        markerscale=None,    # relative size of legend markers vs. original\n   316\t        markerfirst=True,    # left/right ordering of legend marker and label\n   317\t        scatterpoints=None,  # number of scatter points\n   318\t        scatteryoffsets=None,\n   319\t        prop=None,           # properties for the legend texts\n   320\t        fontsize=None,       # keyword to set font size directly\n   321\t        labelcolor=None,     # keyword to set the text color\n   322\t\n   323\t        # spacing & pad defined as a fraction of the font-size\n   324\t        borderpad=None,      # whitespace inside the legend border\n   325\t        labelspacing=None,   # vertical space between the legend entries\n   326\t        handlelength=None,   # length of the legend handles\n   327\t        handleheight=None,   # height of the legend handles\n   328\t        handletextpad=None,  # pad between the legend handle and text\n   329\t        borderaxespad=None,  # pad between the axes and legend border\n   330\t        columnspacing=None,  # spacing between columns\n   331\t\n   332\t        ncols=1,     # number of columns\n   333\t        mode=None,  # horizontal distribution of columns: None or \"expand\"\n   334\t\n   335\t        fancybox=None,  # True: fancy box, False: rounded box, None: rcParam\n   336\t        shadow=None,\n   337\t        title=None,           # legend title\n   338\t        title_fontsize=None,  # legend title font size\n   339\t        framealpha=None,      # set frame alpha\n   340\t        edgecolor=None,       # frame patch edgecolor\n   341\t        facecolor=None,       # frame patch facecolor\n   342\t\n   343\t        bbox_to_anchor=None,  # bbox to which the legend will be anchored\n   344\t        bbox_transform=None,  # transform for the bbox\n   345\t        frameon=None,         # draw frame\n   346\t        handler_map=None,\n   347\t        title_fontproperties=None,  # properties for the legend title\n   348\t        alignment=\"center\",       # control the alignment within the legend box\n   349\t        draggable=False,      # enable mouse dragging support\n   350\t        *,\n   351\t        ncol=1  # synonym for ncols (backward compatibility)\n   352\t    ):\n   353\t        \"\"\"\n   354\t        Parameters\nReview the changes and make sure they are as expected. Edit the file again if necessary.\n\nRunning 936 tests in the following files:\n * lib/matplotlib/tests/test_legend.py\n * lib/matplotlib/tests/test_contour.py\n * lib/matplotlib/tests/test_axes.py\n\n* FAILED lib/matplotlib/tests/test_contour.py test_contourf_log_extension>\n```\n\n    @image_comparison(['contour_log_extension.png'],\n                      remove_text=True, style='mpl20',\n                      tol=1.444)\n    def test_contourf_log_extension():\n        # Remove this line when this test image is regenerated.\n        plt.rcParams['pcolormesh.snap'] = False\n    \n        # Test that contourf with lognorm is extended correctly\n        fig, (ax1, ax2, ax3) = plt.subplots(1, 3, figsize=(10, 5))\n        fig.subplots_adjust(left=0.05, right=0.95)\n    \n        # make data set with large range e.g. between 1e-8 and 1e10\n        data_exp = np.linspace(-7.5, 9.5, 1200)\n        data = np.power(10, data_exp).reshape(30, 40)\n        # make manual levels e.g. between 1e-4 and 1e-6\n        levels_exp = np.arange(-4., 7.)\n        levels = np.power(10., levels_exp)\n    \n        # original data\n        c1 = ax1.contourf(data,\n                          norm=LogNorm(vmin=data.min(), vmax=data.max()))\n        # just show data in levels\n        c2 = ax2.contourf(data, levels=levels,\n                          norm=LogNorm(vmin=levels.min(), vmax=levels.max()),\n                          extend='neither')\n        # extend data from levels\n        c3 = ax3.contourf(data, levels=levels,\n                          norm=LogNorm(vmin=levels.min(), vmax=levels.max()),\n                          extend='both')\n        cb = plt.colorbar(c1, ax=ax1)\n        assert cb.ax.get_ylim() == (1e-8, 1e10)\n        cb = plt.colorbar(c2, ax=ax2)\n>       assert cb.ax.get_ylim() == (1e-4, 1e6)\nE       assert (9.9999999999...05, 1000000.0) == (0.0001, 1000000.0)\nE         \nE         At index 0 diff: 9.999999999999999e-05 != 0.0001\nE         Use -v to get more diff\n\nlib/matplotlib/tests/test_contour.py:316: AssertionError\n```\n\n\n935 passed. 1 failed. 0 errors.",
        "terminal": false,
        "expect_correction": false,
        "properties": {
          "diff": "--- lib/matplotlib/legend.py\n+++ lib/matplotlib/legend.py\n@@ -341,6 +341,7 @@\n         handler_map=None,\n         title_fontproperties=None,  # properties for the legend title\n         alignment=\"center\",       # control the alignment within the legend box\n+        draggable=False,      # enable mouse dragging support\n         *,\n         ncol=1  # synonym for ncols (backward compatibility)\n     ):\n",
          "test_results": [
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_legend.py::test_legend_ordereddict",
              "file_path": "lib/matplotlib/tests/test_legend.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_legend.py::test_legend_auto1[png]",
              "file_path": "lib/matplotlib/tests/test_legend.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_legend.py::test_legend_auto1[pdf]",
              "file_path": "lib/matplotlib/tests/test_legend.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_legend.py::test_legend_auto2[png]",
              "file_path": "lib/matplotlib/tests/test_legend.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_legend.py::test_legend_auto2[pdf]",
              "file_path": "lib/matplotlib/tests/test_legend.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_legend.py::test_legend_auto3[png]",
              "file_path": "lib/matplotlib/tests/test_legend.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_legend.py::test_legend_auto3[pdf]",
              "file_path": "lib/matplotlib/tests/test_legend.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_legend.py::test_various_labels[png]",
              "file_path": "lib/matplotlib/tests/test_legend.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_legend.py::test_various_labels[pdf]",
              "file_path": "lib/matplotlib/tests/test_legend.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_legend.py::test_legend_label_with_leading_underscore",
              "file_path": "lib/matplotlib/tests/test_legend.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_legend.py::test_labels_first[png]",
              "file_path": "lib/matplotlib/tests/test_legend.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_legend.py::test_multiple_keys[png]",
              "file_path": "lib/matplotlib/tests/test_legend.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_legend.py::test_alpha_rgba[png]",
              "file_path": "lib/matplotlib/tests/test_legend.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_legend.py::test_alpha_rcparam[png]",
              "file_path": "lib/matplotlib/tests/test_legend.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_legend.py::test_fancy[png]",
              "file_path": "lib/matplotlib/tests/test_legend.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_legend.py::test_fancy[pdf]",
              "file_path": "lib/matplotlib/tests/test_legend.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_legend.py::test_framealpha[png]",
              "file_path": "lib/matplotlib/tests/test_legend.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_legend.py::test_framealpha[pdf]",
              "file_path": "lib/matplotlib/tests/test_legend.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_legend.py::test_rc[png]",
              "file_path": "lib/matplotlib/tests/test_legend.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_legend.py::test_rc[pdf]",
              "file_path": "lib/matplotlib/tests/test_legend.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_legend.py::test_legend_expand[png]",
              "file_path": "lib/matplotlib/tests/test_legend.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_legend.py::test_legend_expand[pdf]",
              "file_path": "lib/matplotlib/tests/test_legend.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_legend.py::test_hatching[png]",
              "file_path": "lib/matplotlib/tests/test_legend.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_legend.py::test_hatching[pdf]",
              "file_path": "lib/matplotlib/tests/test_legend.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_legend.py::test_legend_remove",
              "file_path": "lib/matplotlib/tests/test_legend.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_legend.py::TestLegendFunction::test_legend_no_args",
              "file_path": "lib/matplotlib/tests/test_legend.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_legend.py::TestLegendFunction::test_legend_positional_handles_labels",
              "file_path": "lib/matplotlib/tests/test_legend.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_legend.py::TestLegendFunction::test_legend_positional_handles_only",
              "file_path": "lib/matplotlib/tests/test_legend.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_legend.py::TestLegendFunction::test_legend_positional_labels_only",
              "file_path": "lib/matplotlib/tests/test_legend.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_legend.py::TestLegendFunction::test_legend_three_args",
              "file_path": "lib/matplotlib/tests/test_legend.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_legend.py::TestLegendFunction::test_legend_handler_map",
              "file_path": "lib/matplotlib/tests/test_legend.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_legend.py::TestLegendFunction::test_legend_kwargs_handles_only",
              "file_path": "lib/matplotlib/tests/test_legend.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_legend.py::TestLegendFunction::test_legend_kwargs_labels_only",
              "file_path": "lib/matplotlib/tests/test_legend.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_legend.py::TestLegendFunction::test_legend_kwargs_handles_labels",
              "file_path": "lib/matplotlib/tests/test_legend.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_legend.py::TestLegendFunction::test_warn_mixed_args_and_kwargs",
              "file_path": "lib/matplotlib/tests/test_legend.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_legend.py::TestLegendFunction::test_parasite",
              "file_path": "lib/matplotlib/tests/test_legend.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_legend.py::TestLegendFigureFunction::test_legend_handle_label",
              "file_path": "lib/matplotlib/tests/test_legend.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_legend.py::TestLegendFigureFunction::test_legend_no_args",
              "file_path": "lib/matplotlib/tests/test_legend.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_legend.py::TestLegendFigureFunction::test_legend_label_arg",
              "file_path": "lib/matplotlib/tests/test_legend.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_legend.py::TestLegendFigureFunction::test_legend_label_three_args",
              "file_path": "lib/matplotlib/tests/test_legend.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_legend.py::TestLegendFigureFunction::test_legend_label_three_args_pluskw",
              "file_path": "lib/matplotlib/tests/test_legend.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_legend.py::TestLegendFigureFunction::test_legend_kw_args",
              "file_path": "lib/matplotlib/tests/test_legend.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_legend.py::TestLegendFigureFunction::test_warn_args_kwargs",
              "file_path": "lib/matplotlib/tests/test_legend.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_legend.py::test_legend_stackplot[png]",
              "file_path": "lib/matplotlib/tests/test_legend.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_legend.py::test_cross_figure_patch_legend",
              "file_path": "lib/matplotlib/tests/test_legend.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_legend.py::test_nanscatter",
              "file_path": "lib/matplotlib/tests/test_legend.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_legend.py::test_legend_repeatcheckok",
              "file_path": "lib/matplotlib/tests/test_legend.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_legend.py::test_not_covering_scatter[png]",
              "file_path": "lib/matplotlib/tests/test_legend.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_legend.py::test_not_covering_scatter_transform[png]",
              "file_path": "lib/matplotlib/tests/test_legend.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_legend.py::test_linecollection_scaled_dashes",
              "file_path": "lib/matplotlib/tests/test_legend.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_legend.py::test_handler_numpoints",
              "file_path": "lib/matplotlib/tests/test_legend.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_legend.py::test_text_nohandler_warning",
              "file_path": "lib/matplotlib/tests/test_legend.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_legend.py::test_empty_bar_chart_with_legend",
              "file_path": "lib/matplotlib/tests/test_legend.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_legend.py::test_shadow_framealpha",
              "file_path": "lib/matplotlib/tests/test_legend.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_legend.py::test_legend_title_empty",
              "file_path": "lib/matplotlib/tests/test_legend.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_legend.py::test_legend_proper_window_extent",
              "file_path": "lib/matplotlib/tests/test_legend.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_legend.py::test_window_extent_cached_renderer",
              "file_path": "lib/matplotlib/tests/test_legend.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_legend.py::test_legend_title_fontprop_fontsize",
              "file_path": "lib/matplotlib/tests/test_legend.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_legend.py::test_legend_alignment[center]",
              "file_path": "lib/matplotlib/tests/test_legend.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_legend.py::test_legend_alignment[left]",
              "file_path": "lib/matplotlib/tests/test_legend.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_legend.py::test_legend_alignment[right]",
              "file_path": "lib/matplotlib/tests/test_legend.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_legend.py::test_legend_set_alignment[center]",
              "file_path": "lib/matplotlib/tests/test_legend.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_legend.py::test_legend_set_alignment[left]",
              "file_path": "lib/matplotlib/tests/test_legend.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_legend.py::test_legend_set_alignment[right]",
              "file_path": "lib/matplotlib/tests/test_legend.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_legend.py::test_legend_labelcolor_single[red]",
              "file_path": "lib/matplotlib/tests/test_legend.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_legend.py::test_legend_labelcolor_single[none]",
              "file_path": "lib/matplotlib/tests/test_legend.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_legend.py::test_legend_labelcolor_single[color2]",
              "file_path": "lib/matplotlib/tests/test_legend.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_legend.py::test_legend_labelcolor_list",
              "file_path": "lib/matplotlib/tests/test_legend.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_legend.py::test_legend_labelcolor_linecolor",
              "file_path": "lib/matplotlib/tests/test_legend.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_legend.py::test_legend_labelcolor_markeredgecolor",
              "file_path": "lib/matplotlib/tests/test_legend.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_legend.py::test_legend_labelcolor_markerfacecolor",
              "file_path": "lib/matplotlib/tests/test_legend.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_legend.py::test_legend_labelcolor_rcparam_single[red]",
              "file_path": "lib/matplotlib/tests/test_legend.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_legend.py::test_legend_labelcolor_rcparam_single[none]",
              "file_path": "lib/matplotlib/tests/test_legend.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_legend.py::test_legend_labelcolor_rcparam_single[color2]",
              "file_path": "lib/matplotlib/tests/test_legend.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_legend.py::test_legend_labelcolor_rcparam_linecolor",
              "file_path": "lib/matplotlib/tests/test_legend.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_legend.py::test_legend_labelcolor_rcparam_markeredgecolor",
              "file_path": "lib/matplotlib/tests/test_legend.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_legend.py::test_legend_labelcolor_rcparam_markeredgecolor_short",
              "file_path": "lib/matplotlib/tests/test_legend.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_legend.py::test_legend_labelcolor_rcparam_markerfacecolor",
              "file_path": "lib/matplotlib/tests/test_legend.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_legend.py::test_legend_labelcolor_rcparam_markerfacecolor_short",
              "file_path": "lib/matplotlib/tests/test_legend.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_legend.py::test_get_set_draggable",
              "file_path": "lib/matplotlib/tests/test_legend.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_legend.py::test_alpha_handles",
              "file_path": "lib/matplotlib/tests/test_legend.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_legend.py::test_usetex_no_warn",
              "file_path": "lib/matplotlib/tests/test_legend.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_legend.py::test_warn_big_data_best_loc",
              "file_path": "lib/matplotlib/tests/test_legend.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_legend.py::test_no_warn_big_data_when_loc_specified",
              "file_path": "lib/matplotlib/tests/test_legend.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_legend.py::test_plot_multiple_input_multiple_label[label_array0]",
              "file_path": "lib/matplotlib/tests/test_legend.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_legend.py::test_plot_multiple_input_multiple_label[label_array1]",
              "file_path": "lib/matplotlib/tests/test_legend.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_legend.py::test_plot_multiple_input_multiple_label[label_array2]",
              "file_path": "lib/matplotlib/tests/test_legend.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_legend.py::test_plot_multiple_input_single_label[one]",
              "file_path": "lib/matplotlib/tests/test_legend.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_legend.py::test_plot_multiple_input_single_label[1]",
              "file_path": "lib/matplotlib/tests/test_legend.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_legend.py::test_plot_multiple_input_single_label[int]",
              "file_path": "lib/matplotlib/tests/test_legend.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_legend.py::test_plot_single_input_multiple_label[label_array0]",
              "file_path": "lib/matplotlib/tests/test_legend.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_legend.py::test_plot_single_input_multiple_label[label_array1]",
              "file_path": "lib/matplotlib/tests/test_legend.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_legend.py::test_plot_single_input_multiple_label[label_array2]",
              "file_path": "lib/matplotlib/tests/test_legend.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_legend.py::test_plot_multiple_label_incorrect_length_exception",
              "file_path": "lib/matplotlib/tests/test_legend.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_legend.py::test_legend_face_edgecolor",
              "file_path": "lib/matplotlib/tests/test_legend.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_legend.py::test_legend_text_axes",
              "file_path": "lib/matplotlib/tests/test_legend.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_legend.py::test_handlerline2d",
              "file_path": "lib/matplotlib/tests/test_legend.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_legend.py::test_subfigure_legend",
              "file_path": "lib/matplotlib/tests/test_legend.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_legend.py::test_setting_alpha_keeps_polycollection_color",
              "file_path": "lib/matplotlib/tests/test_legend.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_legend.py::test_legend_markers_from_line2d",
              "file_path": "lib/matplotlib/tests/test_legend.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_legend.py::test_ncol_ncols[png]",
              "file_path": "lib/matplotlib/tests/test_legend.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_legend.py::test_ncol_ncols[pdf]",
              "file_path": "lib/matplotlib/tests/test_legend.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "SKIPPED",
              "message": "../opt/miniconda3/envs/testbed/lib/python3.11/contextlib.py:81: Cannot compare svg files because Inkscape is not installed",
              "file_path": "../opt/miniconda3/envs/testbed/lib/python3.11/contextlib.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "SKIPPED",
              "message": "lib/matplotlib/testing/compare.py:285: Don't know how to convert .svg files to png",
              "file_path": "lib/matplotlib/testing/compare.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_contour.py::test_contour_shape_1d_valid",
              "file_path": "lib/matplotlib/tests/test_contour.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_contour.py::test_contour_shape_2d_valid",
              "file_path": "lib/matplotlib/tests/test_contour.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_contour.py::test_contour_shape_error[args0-Length",
              "file_path": "lib/matplotlib/tests/test_contour.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_contour.py::test_contour_shape_error[args1-Length",
              "file_path": "lib/matplotlib/tests/test_contour.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_contour.py::test_contour_shape_error[args2-Number",
              "file_path": "lib/matplotlib/tests/test_contour.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_contour.py::test_contour_shape_error[args3-Number",
              "file_path": "lib/matplotlib/tests/test_contour.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_contour.py::test_contour_shape_error[args4-Shapes",
              "file_path": "lib/matplotlib/tests/test_contour.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_contour.py::test_contour_shape_error[args5-Shapes",
              "file_path": "lib/matplotlib/tests/test_contour.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_contour.py::test_contour_shape_error[args6-Inputs",
              "file_path": "lib/matplotlib/tests/test_contour.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_contour.py::test_contour_shape_error[args7-Input",
              "file_path": "lib/matplotlib/tests/test_contour.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_contour.py::test_contour_shape_error[args8-Input",
              "file_path": "lib/matplotlib/tests/test_contour.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_contour.py::test_contour_shape_error[args9-Input",
              "file_path": "lib/matplotlib/tests/test_contour.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_contour.py::test_contour_empty_levels",
              "file_path": "lib/matplotlib/tests/test_contour.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_contour.py::test_contour_Nlevels",
              "file_path": "lib/matplotlib/tests/test_contour.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_contour.py::test_contour_badlevel_fmt",
              "file_path": "lib/matplotlib/tests/test_contour.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_contour.py::test_contour_uniform_z",
              "file_path": "lib/matplotlib/tests/test_contour.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_contour.py::test_contour_manual_labels[png]",
              "file_path": "lib/matplotlib/tests/test_contour.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_contour.py::test_contour_manual_labels[pdf]",
              "file_path": "lib/matplotlib/tests/test_contour.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_contour.py::test_given_colors_levels_and_extends[png]",
              "file_path": "lib/matplotlib/tests/test_contour.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_contour.py::test_contour_datetime_axis[png]",
              "file_path": "lib/matplotlib/tests/test_contour.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_contour.py::test_labels[png]",
              "file_path": "lib/matplotlib/tests/test_contour.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_contour.py::test_corner_mask[png]",
              "file_path": "lib/matplotlib/tests/test_contour.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_contour.py::test_contourf_decreasing_levels",
              "file_path": "lib/matplotlib/tests/test_contour.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_contour.py::test_contourf_symmetric_locator",
              "file_path": "lib/matplotlib/tests/test_contour.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_contour.py::test_circular_contour_warning",
              "file_path": "lib/matplotlib/tests/test_contour.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_contour.py::test_clabel_zorder[True-123-1234]",
              "file_path": "lib/matplotlib/tests/test_contour.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_contour.py::test_clabel_zorder[False-123-1234]",
              "file_path": "lib/matplotlib/tests/test_contour.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_contour.py::test_clabel_zorder[True-123-None]",
              "file_path": "lib/matplotlib/tests/test_contour.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_contour.py::test_clabel_zorder[False-123-None]",
              "file_path": "lib/matplotlib/tests/test_contour.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_contour.py::test_contour_addlines[png]",
              "file_path": "lib/matplotlib/tests/test_contour.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_contour.py::test_contour_uneven[png]",
              "file_path": "lib/matplotlib/tests/test_contour.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_contour.py::test_contour_linewidth[1.23-None-None-1.23]",
              "file_path": "lib/matplotlib/tests/test_contour.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_contour.py::test_contour_linewidth[1.23-4.24-None-4.24]",
              "file_path": "lib/matplotlib/tests/test_contour.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_contour.py::test_contour_linewidth[1.23-4.24-5.02-5.02]",
              "file_path": "lib/matplotlib/tests/test_contour.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_contour.py::test_label_nonagg",
              "file_path": "lib/matplotlib/tests/test_contour.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_contour.py::test_contour_closed_line_loop[png]",
              "file_path": "lib/matplotlib/tests/test_contour.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_contour.py::test_quadcontourset_reuse",
              "file_path": "lib/matplotlib/tests/test_contour.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_contour.py::test_contour_manual[png]",
              "file_path": "lib/matplotlib/tests/test_contour.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_contour.py::test_contour_line_start_on_corner_edge[png]",
              "file_path": "lib/matplotlib/tests/test_contour.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_contour.py::test_find_nearest_contour",
              "file_path": "lib/matplotlib/tests/test_contour.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_contour.py::test_find_nearest_contour_no_filled",
              "file_path": "lib/matplotlib/tests/test_contour.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_contour.py::test_contour_autolabel_beyond_powerlimits",
              "file_path": "lib/matplotlib/tests/test_contour.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_contour.py::test_contourf_legend_elements",
              "file_path": "lib/matplotlib/tests/test_contour.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_contour.py::test_contour_legend_elements",
              "file_path": "lib/matplotlib/tests/test_contour.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_contour.py::test_algorithm_name[mpl2005-Mpl2005ContourGenerator]",
              "file_path": "lib/matplotlib/tests/test_contour.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_contour.py::test_algorithm_name[mpl2014-Mpl2014ContourGenerator]",
              "file_path": "lib/matplotlib/tests/test_contour.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_contour.py::test_algorithm_name[serial-SerialContourGenerator]",
              "file_path": "lib/matplotlib/tests/test_contour.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_contour.py::test_algorithm_name[threaded-ThreadedContourGenerator]",
              "file_path": "lib/matplotlib/tests/test_contour.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_contour.py::test_algorithm_name[invalid-None]",
              "file_path": "lib/matplotlib/tests/test_contour.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_contour.py::test_algorithm_supports_corner_mask[mpl2005]",
              "file_path": "lib/matplotlib/tests/test_contour.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_contour.py::test_algorithm_supports_corner_mask[mpl2014]",
              "file_path": "lib/matplotlib/tests/test_contour.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_contour.py::test_algorithm_supports_corner_mask[serial]",
              "file_path": "lib/matplotlib/tests/test_contour.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_contour.py::test_algorithm_supports_corner_mask[threaded]",
              "file_path": "lib/matplotlib/tests/test_contour.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_contour.py::test_all_algorithms[png]",
              "file_path": "lib/matplotlib/tests/test_contour.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_contour.py::test_subfigure_clabel",
              "file_path": "lib/matplotlib/tests/test_contour.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_contour.py::test_linestyles[solid]",
              "file_path": "lib/matplotlib/tests/test_contour.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_contour.py::test_linestyles[dashed]",
              "file_path": "lib/matplotlib/tests/test_contour.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_contour.py::test_linestyles[dashdot]",
              "file_path": "lib/matplotlib/tests/test_contour.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_contour.py::test_linestyles[dotted]",
              "file_path": "lib/matplotlib/tests/test_contour.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_contour.py::test_negative_linestyles[solid]",
              "file_path": "lib/matplotlib/tests/test_contour.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_contour.py::test_negative_linestyles[dashed]",
              "file_path": "lib/matplotlib/tests/test_contour.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_contour.py::test_negative_linestyles[dashdot]",
              "file_path": "lib/matplotlib/tests/test_contour.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_contour.py::test_negative_linestyles[dotted]",
              "file_path": "lib/matplotlib/tests/test_contour.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "SKIPPED",
              "message": "../opt/miniconda3/envs/testbed/lib/python3.11/contextlib.py:81: Cannot compare svg files because Inkscape is not installed",
              "file_path": "../opt/miniconda3/envs/testbed/lib/python3.11/contextlib.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "FAILED",
              "message": "\n    @image_comparison(['contour_log_extension.png'],\n                      remove_text=True, style='mpl20',\n                      tol=1.444)\n    def test_contourf_log_extension():\n        # Remove this line when this test image is regenerated.\n        plt.rcParams['pcolormesh.snap'] = False\n    \n        # Test that contourf with lognorm is extended correctly\n        fig, (ax1, ax2, ax3) = plt.subplots(1, 3, figsize=(10, 5))\n        fig.subplots_adjust(left=0.05, right=0.95)\n    \n        # make data set with large range e.g. between 1e-8 and 1e10\n        data_exp = np.linspace(-7.5, 9.5, 1200)\n        data = np.power(10, data_exp).reshape(30, 40)\n        # make manual levels e.g. between 1e-4 and 1e-6\n        levels_exp = np.arange(-4., 7.)\n        levels = np.power(10., levels_exp)\n    \n        # original data\n        c1 = ax1.contourf(data,\n                          norm=LogNorm(vmin=data.min(), vmax=data.max()))\n        # just show data in levels\n        c2 = ax2.contourf(data, levels=levels,\n                          norm=LogNorm(vmin=levels.min(), vmax=levels.max()),\n                          extend='neither')\n        # extend data from levels\n        c3 = ax3.contourf(data, levels=levels,\n                          norm=LogNorm(vmin=levels.min(), vmax=levels.max()),\n                          extend='both')\n        cb = plt.colorbar(c1, ax=ax1)\n        assert cb.ax.get_ylim() == (1e-8, 1e10)\n        cb = plt.colorbar(c2, ax=ax2)\n>       assert cb.ax.get_ylim() == (1e-4, 1e6)\nE       assert (9.9999999999...05, 1000000.0) == (0.0001, 1000000.0)\nE         \nE         At index 0 diff: 9.999999999999999e-05 != 0.0001\nE         Use -v to get more diff\n\nlib/matplotlib/tests/test_contour.py:316: AssertionError",
              "file_path": "lib/matplotlib/tests/test_contour.py",
              "span_id": "test_contourf_log_extension",
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_invisible_axes[png]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_get_labels",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_repr",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_label_loc_vertical[png]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_label_loc_vertical[pdf]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_label_loc_horizontal[png]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_label_loc_horizontal[pdf]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_label_loc_rc[png]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_label_loc_rc[pdf]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_label_shift",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_acorr[png]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_spy[png]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_spy_invalid_kwargs",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_matshow[png]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_formatter_ticker[png]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_formatter_ticker[pdf]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_funcformatter_auto_formatter",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_strmethodformatter_auto_formatter",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_twin_axis_locators_formatters[png]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_twin_axis_locators_formatters[pdf]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_twinx_cla",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_twin_logscale[png-x]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_twin_logscale[png-y]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_twinx_axis_scales[png]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_twin_inherit_autoscale_setting",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_inverted_cla",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_subclass_clear_cla",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_cla_not_redefined_internally",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_minorticks_on_rcParams_both[png]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_autoscale_tiny_range[png]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_autoscale_tiny_range[pdf]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_autoscale_tight",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_autoscale_log_shared",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_use_sticky_edges",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_sticky_shared_axes[png]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_basic_annotate[png]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_basic_annotate[pdf]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_arrow_simple[png]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_arrow_empty",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_arrow_in_view",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_annotate_default_arrow",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_annotate_signature",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_fill_units[png]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_plot_format_kwarg_redundant",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_errorbar_dashes[png]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_single_point[png]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_single_point[pdf]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_single_date[png]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_shaped_data[png]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_structured_data",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_aitoff_proj[png]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_axvspan_epoch[png]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_axvspan_epoch[pdf]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_axhspan_epoch[png]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_axhspan_epoch[pdf]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_hexbin_extent[png]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_hexbin_empty[png]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_hexbin_pickable",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_hexbin_log[png]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_hexbin_linear[png]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_hexbin_log_clim",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_inverted_limits",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_nonfinite_limits[png]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_nonfinite_limits[pdf]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_limits_empty_data[png-scatter]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_limits_empty_data[png-plot]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_limits_empty_data[png-fill_between]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_imshow[png]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_imshow[pdf]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_imshow_clip[png]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_imshow_clip[pdf]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_imshow_norm_vminvmax",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_polycollection_joinstyle[png]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_polycollection_joinstyle[pdf]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_fill_between_input[2d_x_input]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_fill_between_input[2d_y1_input]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_fill_between_input[2d_y2_input]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_fill_betweenx_input[2d_y_input]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_fill_betweenx_input[2d_x1_input]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_fill_betweenx_input[2d_x2_input]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_fill_between_interpolate[png]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_fill_between_interpolate[pdf]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_fill_between_interpolate_decreasing[png]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_fill_between_interpolate_decreasing[pdf]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_fill_between_interpolate_nan[png]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_fill_between_interpolate_nan[pdf]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_symlog[pdf]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_symlog2[pdf]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_pcolorargs_5205",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_pcolormesh[png]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_pcolormesh[pdf]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_pcolormesh_small[eps]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_pcolormesh_alpha[png]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_pcolormesh_alpha[pdf]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_pcolormesh_datetime_axis[png]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_pcolor_datetime_axis[png]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_pcolorargs",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_pcolornearest[png]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_pcolornearestunits[png]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_pcolorflaterror",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_pcolorauto[png-False]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_pcolorauto[png-True]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_canonical[png]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_canonical[pdf]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_arc_angles[png]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_arc_ellipse[png]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_arc_ellipse[pdf]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_marker_as_markerstyle",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_markevery[png]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_markevery[pdf]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_markevery_line[png]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_markevery_line[pdf]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_markevery_linear_scales[png]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_markevery_linear_scales[pdf]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_markevery_linear_scales_zoomed[png]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_markevery_linear_scales_zoomed[pdf]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_markevery_log_scales[png]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_markevery_log_scales[pdf]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_markevery_polar[png]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_markevery_polar[pdf]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_markevery_linear_scales_nans[png]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_markevery_linear_scales_nans[pdf]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_marker_edges[png]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_marker_edges[pdf]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_bar_tick_label_single[png]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_nan_bar_values",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_bar_ticklabel_fail",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_bar_tick_label_multiple[png]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_bar_tick_label_multiple_old_alignment[png]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_bar_decimal_center[png]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_barh_decimal_center[png]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_bar_decimal_width[png]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_barh_decimal_height[png]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_bar_color_none_alpha",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_bar_edgecolor_none_alpha",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_barh_tick_label[png]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_bar_timedelta",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_boxplot_dates_pandas",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_boxplot_capwidths",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_pcolor_regression",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_bar_pandas",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_bar_pandas_indexed",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_bar_hatches[png]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_bar_hatches[pdf]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_bar_labels[x-1-x-expected_labels0-x]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_bar_labels[x1-width1-label1-expected_labels1-_nolegend_]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_bar_labels[x2-width2-label2-expected_labels2-_nolegend_]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_bar_labels[x3-width3-bars-expected_labels3-bars]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_bar_labels_length",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_pandas_minimal_plot",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_hist_log[png]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_hist_log[pdf]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_hist_log_2[png]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_hist_log_barstacked",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_hist_bar_empty[png]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_hist_float16",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_hist_step_empty[png]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_hist_step_filled[png]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_hist_density[png]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_hist_unequal_bins_density",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_hist_datetime_datasets",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_hist_datetime_datasets_bins[date2num]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_hist_datetime_datasets_bins[datetime.datetime]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_hist_datetime_datasets_bins[np.datetime64]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_hist_with_empty_input[data0-1]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_hist_with_empty_input[data1-1]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_hist_with_empty_input[data2-2]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_hist_zorder[bar-1]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_hist_zorder[step-2]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_hist_zorder[stepfilled-1]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_stairs[png]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_stairs_fill[png]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_stairs_update[png]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_stairs_baseline_0[png]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_stairs_empty",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_stairs_invalid_nan",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_stairs_invalid_mismatch",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_stairs_invalid_update",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_stairs_invalid_update2",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_stairs_options[png]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_stairs_datetime[png]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_stairs_edge_handling[png]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_contour_hatching[png]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_contour_hatching[pdf]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_contour_colorbar[png]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_contour_colorbar[pdf]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_hist2d[png]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_hist2d[pdf]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_hist2d_transpose[png]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_hist2d_transpose[pdf]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_hist2d_density",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::TestScatter::test_scatter_plot[png]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::TestScatter::test_scatter_plot[pdf]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::TestScatter::test_scatter_marker[png]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::TestScatter::test_scatter_2D[png]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::TestScatter::test_scatter_decimal[png]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::TestScatter::test_scatter_color",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::TestScatter::test_scatter_color_warning[kwargs0]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::TestScatter::test_scatter_color_warning[kwargs1]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::TestScatter::test_scatter_color_warning[kwargs2]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::TestScatter::test_scatter_color_warning[kwargs3]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::TestScatter::test_scatter_unfilled",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::TestScatter::test_scatter_unfillable",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::TestScatter::test_scatter_size_arg_size",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::TestScatter::test_scatter_edgecolor_RGB",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::TestScatter::test_scatter_invalid_color[png]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::TestScatter::test_scatter_no_invalid_color[png]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::TestScatter::test_scatter_norm_vminvmax",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::TestScatter::test_scatter_single_point[png]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::TestScatter::test_scatter_different_shapes[png]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::TestScatter::test_scatter_c[0.5-None]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::TestScatter::test_scatter_c[c_case1-conversion]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::TestScatter::test_scatter_c[red-None]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::TestScatter::test_scatter_c[none-None]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::TestScatter::test_scatter_c[None-None]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::TestScatter::test_scatter_c[c_case5-None]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::TestScatter::test_scatter_c[jaune-conversion]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::TestScatter::test_scatter_c[c_case7-conversion]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::TestScatter::test_scatter_c[c_case8-conversion]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::TestScatter::test_scatter_c[c_case9-None]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::TestScatter::test_scatter_c[c_case10-None]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::TestScatter::test_scatter_c[c_case11-shape]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::TestScatter::test_scatter_c[c_case12-None]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::TestScatter::test_scatter_c[c_case13-None]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::TestScatter::test_scatter_c[c_case14-conversion]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::TestScatter::test_scatter_c[c_case15-None]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::TestScatter::test_scatter_c[c_case16-shape]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::TestScatter::test_scatter_c[c_case17-None]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::TestScatter::test_scatter_c[c_case18-shape]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::TestScatter::test_scatter_c[c_case19-None]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::TestScatter::test_scatter_c[c_case20-shape]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::TestScatter::test_scatter_c[c_case21-None]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::TestScatter::test_scatter_c[c_case22-shape]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::TestScatter::test_scatter_c[c_case23-None]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::TestScatter::test_scatter_c[c_case24-shape]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::TestScatter::test_scatter_c[c_case25-None]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::TestScatter::test_scatter_c[c_case26-shape]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::TestScatter::test_scatter_c[c_case27-conversion]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::TestScatter::test_scatter_c[c_case28-conversion]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::TestScatter::test_scatter_c[c_case29-conversion]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::TestScatter::test_scatter_single_color_c[png]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::TestScatter::test_scatter_linewidths",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_parse_scatter_color_args[params0-expected_result0]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_parse_scatter_color_args[params1-expected_result1]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_parse_scatter_color_args[params2-expected_result2]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_parse_scatter_color_args[params3-expected_result3]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_parse_scatter_color_args[params4-expected_result4]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_parse_scatter_color_args_edgecolors[kwargs0-None]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_parse_scatter_color_args_edgecolors[kwargs1-None]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_parse_scatter_color_args_edgecolors[kwargs2-r]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_parse_scatter_color_args_edgecolors[kwargs3-expected_edgecolors3]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_parse_scatter_color_args_edgecolors[kwargs4-r]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_parse_scatter_color_args_edgecolors[kwargs5-face]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_parse_scatter_color_args_edgecolors[kwargs6-none]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_parse_scatter_color_args_edgecolors[kwargs7-r]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_parse_scatter_color_args_edgecolors[kwargs8-r]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_parse_scatter_color_args_edgecolors[kwargs9-r]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_parse_scatter_color_args_edgecolors[kwargs10-g]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_parse_scatter_color_args_error",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_as_mpl_axes_api",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_pyplot_axes",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_log_scales",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_log_scales_no_data",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_log_scales_invalid",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_stackplot[png]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_stackplot[pdf]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_stackplot_baseline[png]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_stackplot_baseline[pdf]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_bxp_baseline[png]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_bxp_rangewhis[png]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_bxp_percentilewhis[png]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_bxp_with_xlabels[png]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_bxp_horizontal[png]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_bxp_with_ylabels[png]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_bxp_patchartist[png]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_bxp_custompatchartist[png]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_bxp_customoutlier[png]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_bxp_showcustommean[png]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_bxp_custombox[png]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_bxp_custommedian[png]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_bxp_customcap[png]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_bxp_customwhisker[png]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_bxp_shownotches[png]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_bxp_nocaps[png]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_bxp_nobox[png]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_bxp_no_flier_stats[png]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_bxp_showmean[png]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_bxp_showmeanasline[png]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_bxp_scalarwidth[png]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_bxp_customwidths[png]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_bxp_custompositions[png]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_bxp_bad_widths",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_bxp_bad_positions",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_bxp_custom_capwidths[png]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_bxp_custom_capwidth[png]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_bxp_bad_capwidths",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_boxplot[png]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_boxplot[pdf]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_boxplot_custom_capwidths[png]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_boxplot_sym2[png]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_boxplot_sym[png]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_boxplot_autorange_whiskers[png]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_boxplot_rc_parameters[png]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_boxplot_rc_parameters[pdf]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_boxplot_with_CIarray[png]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_boxplot_no_weird_whisker[png]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_boxplot_bad_medians",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_boxplot_bad_ci",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_boxplot_zorder",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_boxplot_marker_behavior",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_boxplot_mod_artist_after_plotting[png]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_vert_violinplot_baseline[png]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_vert_violinplot_showmeans[png]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_vert_violinplot_showextrema[png]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_vert_violinplot_showmedians[png]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_vert_violinplot_showall[png]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_vert_violinplot_custompoints_10[png]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_vert_violinplot_custompoints_200[png]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_horiz_violinplot_baseline[png]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_horiz_violinplot_showmedians[png]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_horiz_violinplot_showmeans[png]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_horiz_violinplot_showextrema[png]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_horiz_violinplot_showall[png]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_horiz_violinplot_custompoints_10[png]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_horiz_violinplot_custompoints_200[png]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_violinplot_bad_positions",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_violinplot_bad_widths",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_violinplot_bad_quantiles",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_violinplot_outofrange_quantiles",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_violinplot_single_list_quantiles[png]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_violinplot_pandas_series[png]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_manage_xticks",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_boxplot_not_single",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_tick_space_size_0",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_errorbar[png]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_errorbar[pdf]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_errorbar_colorcycle",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_errorbar_cycle_ecolor[png]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_errorbar_cycle_ecolor[pdf]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_errorbar_shape",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_errorbar_limits[png]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_errorbar_limits[pdf]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_errorbar_nonefmt",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_errorbar_line_specific_kwargs",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_errorbar_with_prop_cycle[png]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_errorbar_every_invalid",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_xerr_yerr_not_negative",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_errorbar_every[png]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_errorbar_every[pdf]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_errorbar_linewidth_type[elinewidth0]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_errorbar_linewidth_type[elinewidth1]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_errorbar_linewidth_type[1]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_errorbar_nan[png]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_hist_stacked_stepfilled[png]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_hist_stacked_stepfilled[pdf]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_hist_offset[png]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_hist_offset[pdf]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_hist_step[png]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_hist_step_horiz[png]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_hist_stacked_weighted[png]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_hist_stacked_weighted[pdf]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_stem[png-w/",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_stem[png-w/o",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_stem_args",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_stem_markerfmt",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_stem_dates",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_stem_orientation[png-w/",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_stem_orientation[png-w/o",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_hist_stacked_stepfilled_alpha[png]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_hist_stacked_stepfilled_alpha[pdf]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_hist_stacked_step[png]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_hist_stacked_step[pdf]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_hist_stacked_density[png]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_hist_stacked_density[pdf]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_hist_step_bottom[png]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_hist_stepfilled_geometry",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_hist_step_geometry",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_hist_stepfilled_bottom_geometry",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_hist_step_bottom_geometry",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_hist_stacked_stepfilled_geometry",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_hist_stacked_step_geometry",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_hist_stacked_stepfilled_bottom_geometry",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_hist_stacked_step_bottom_geometry",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_hist_stacked_bar[png]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_hist_stacked_bar[pdf]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_hist_barstacked_bottom_unchanged",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_hist_emptydata",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_hist_labels",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_transparent_markers[png]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_transparent_markers[pdf]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_rgba_markers[png]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_rgba_markers[pdf]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_mollweide_grid[png]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_mollweide_grid[pdf]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_mollweide_forward_inverse_closure",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_mollweide_inverse_forward_closure",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_alpha[png]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_alpha[pdf]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_eventplot[png]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_eventplot[pdf]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_eventplot_defaults[png]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_eventplot_colors[colors0]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_eventplot_colors[colors1]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_eventplot_colors[colors2]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_eventplot_problem_kwargs[png]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_empty_eventplot",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_eventplot_orientation[None-data0]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_eventplot_orientation[None-data1]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_eventplot_orientation[None-data2]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_eventplot_orientation[vertical-data0]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_eventplot_orientation[vertical-data1]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_eventplot_orientation[vertical-data2]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_eventplot_orientation[horizontal-data0]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_eventplot_orientation[horizontal-data1]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_eventplot_orientation[horizontal-data2]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_eventplot_units_list[png]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_marker_styles[png]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_markers_fillstyle_rcparams[png]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_vertex_markers[png]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_eb_line_zorder[png]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_eb_line_zorder[pdf]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_axline_loglog[png]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_axline_loglog[pdf]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_axline[png]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_axline[pdf]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_axline_transaxes[png]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_axline_transaxes[pdf]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_axline_transaxes_panzoom[png]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_axline_transaxes_panzoom[pdf]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_axline_args",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_vlines[png]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_vlines_default",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_hlines[png]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_hlines_default",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_lines_with_colors[png-data0]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_lines_with_colors[png-data1]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_step_linestyle[png]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_step_linestyle[pdf]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_mixed_collection[png]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_mixed_collection[pdf]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_subplot_key_hash",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_specgram[png]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_specgram_magnitude[png]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_specgram_angle[png]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_specgram_fs_none",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_specgram_origin_rcparam[png]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_specgram_origin_kwarg",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_psd_csd[png]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_spectrum[png]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_psd_csd_edge_cases",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_twin_remove[png]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_twin_spines[png]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_twin_spines_on_top[png]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_rcparam_grid_minor[both-True-True]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_rcparam_grid_minor[major-True-False]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_rcparam_grid_minor[minor-False-True]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_grid",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_reset_grid",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_reset_ticks[png]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_vline_limit",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_axline_minmax[axvline-axhline-args0]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_axline_minmax[axvspan-axhspan-args1]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_empty_shared_subplots",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_shared_with_aspect_1",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_shared_with_aspect_2",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_shared_with_aspect_3",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_shared_aspect_error",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_axis_errors[TypeError-args0-kwargs0-axis\\\\(\\\\)",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_axis_errors[ValueError-args1-kwargs1-Unrecognized",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_axis_errors[TypeError-args2-kwargs2-the",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_axis_errors[TypeError-args3-kwargs3-axis\\\\(\\\\)",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_axis_method_errors",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_twin_with_aspect[x]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_twin_with_aspect[y]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_relim_visible_only",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_text_labelsize",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_pie_default[png]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_pie_linewidth_0[png]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_pie_center_radius[png]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_pie_linewidth_2[png]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_pie_ccw_true[png]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_pie_frame_grid[png]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_pie_rotatelabels_true[png]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_pie_nolabel_but_legend[png]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_pie_textprops",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_pie_get_negative_values",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_normalize_kwarg_pie",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_set_get_ticklabels[png]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_set_ticks_with_labels[png]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_set_noniterable_ticklabels",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_subsampled_ticklabels",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_mismatched_ticklabels",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_empty_ticks_fixed_loc",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_retain_tick_visibility[png]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_tick_label_update",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_o_marker_path_snap[png]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_margins",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_set_margin_updates_limits",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_margins_errors[ValueError-args0-kwargs0-margin",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_margins_errors[ValueError-args1-kwargs1-margin",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_margins_errors[ValueError-args2-kwargs2-margin",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_margins_errors[ValueError-args3-kwargs3-margin",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_margins_errors[TypeError-args4-kwargs4-Cannot",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_margins_errors[TypeError-args5-kwargs5-Cannot",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_margins_errors[TypeError-args6-kwargs6-Must",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_length_one_hist",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_set_xy_bound",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_pathological_hexbin",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_color_None",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_color_alias",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_numerical_hist_label",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_unicode_hist_label",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_move_offsetlabel",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_rc_spines[png]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_rc_grid[png]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_rc_tick",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_rc_major_minor_tick",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_square_plot",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_bad_plot_args",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_pcolorfast[data0-xy0-AxesImage]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_pcolorfast[data0-xy1-AxesImage]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_pcolorfast[data0-xy2-AxesImage]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_pcolorfast[data0-xy3-PcolorImage]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_pcolorfast[data0-xy4-QuadMesh]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_pcolorfast[data1-xy0-AxesImage]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_pcolorfast[data1-xy1-AxesImage]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_pcolorfast[data1-xy2-AxesImage]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_pcolorfast[data1-xy3-PcolorImage]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_pcolorfast[data1-xy4-QuadMesh]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_shared_scale",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_shared_bool",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_violin_point_mass",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_errorbar_inputs_shotgun[kwargs0]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_errorbar_inputs_shotgun[kwargs1]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_errorbar_inputs_shotgun[kwargs2]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_errorbar_inputs_shotgun[kwargs3]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_errorbar_inputs_shotgun[kwargs4]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_errorbar_inputs_shotgun[kwargs5]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_errorbar_inputs_shotgun[kwargs6]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_errorbar_inputs_shotgun[kwargs7]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_errorbar_inputs_shotgun[kwargs8]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_errorbar_inputs_shotgun[kwargs9]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_errorbar_inputs_shotgun[kwargs10]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_errorbar_inputs_shotgun[kwargs11]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_errorbar_inputs_shotgun[kwargs12]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_errorbar_inputs_shotgun[kwargs13]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_errorbar_inputs_shotgun[kwargs14]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_errorbar_inputs_shotgun[kwargs15]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_errorbar_inputs_shotgun[kwargs16]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_errorbar_inputs_shotgun[kwargs17]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_errorbar_inputs_shotgun[kwargs18]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_errorbar_inputs_shotgun[kwargs19]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_errorbar_inputs_shotgun[kwargs20]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_errorbar_inputs_shotgun[kwargs21]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_errorbar_inputs_shotgun[kwargs22]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_errorbar_inputs_shotgun[kwargs23]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_errorbar_inputs_shotgun[kwargs24]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_errorbar_inputs_shotgun[kwargs25]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_errorbar_inputs_shotgun[kwargs26]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_errorbar_inputs_shotgun[kwargs27]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_errorbar_inputs_shotgun[kwargs28]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_errorbar_inputs_shotgun[kwargs29]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_errorbar_inputs_shotgun[kwargs30]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_errorbar_inputs_shotgun[kwargs31]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_errorbar_inputs_shotgun[kwargs32]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_errorbar_inputs_shotgun[kwargs33]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_errorbar_inputs_shotgun[kwargs34]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_errorbar_inputs_shotgun[kwargs35]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_errorbar_inputs_shotgun[kwargs36]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_errorbar_inputs_shotgun[kwargs37]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_errorbar_inputs_shotgun[kwargs38]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_errorbar_inputs_shotgun[kwargs39]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_errorbar_inputs_shotgun[kwargs40]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_errorbar_inputs_shotgun[kwargs41]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_errorbar_inputs_shotgun[kwargs42]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_errorbar_inputs_shotgun[kwargs43]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_errorbar_inputs_shotgun[kwargs44]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_errorbar_inputs_shotgun[kwargs45]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_errorbar_inputs_shotgun[kwargs46]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_errorbar_inputs_shotgun[kwargs47]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_errorbar_inputs_shotgun[kwargs48]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_errorbar_inputs_shotgun[kwargs49]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_errorbar_inputs_shotgun[kwargs50]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_errorbar_inputs_shotgun[kwargs51]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_dash_offset[png]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_dash_offset[pdf]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_title_pad",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_title_location_roundtrip",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_title_location_shared[True]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_title_location_shared[False]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_loglog[png]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_loglog_nonpos[png]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_axes_margins",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_remove_shared_axes[gca-x]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_remove_shared_axes[gca-y]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_remove_shared_axes[subplots-x]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_remove_shared_axes[subplots-y]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_remove_shared_axes[subplots_shared-x]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_remove_shared_axes[subplots_shared-y]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_remove_shared_axes[add_axes-x]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_remove_shared_axes[add_axes-y]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_remove_shared_axes_relim",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_shared_axes_autoscale",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_adjust_numtick_aspect",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_auto_numticks",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_auto_numticks_log",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_broken_barh_empty",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_broken_barh_timedelta",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_pandas_pcolormesh",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_pandas_indexing_dates",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_pandas_errorbar_indexing",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_pandas_index_shape",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_pandas_indexing_hist",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_pandas_bar_align_center",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_tick_apply_tickdir_deprecation",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_axis_set_tick_params_labelsize_labelcolor",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_axes_tick_params_gridlines",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_axes_tick_params_ylabelside",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_axes_tick_params_xlabelside",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_none_kwargs",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_bar_uint8",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_date_timezone_x[png]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_date_timezone_y[png]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_date_timezone_x_and_y[png]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_axisbelow[png]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_titletwiny",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_titlesetpos",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_title_xticks_top",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_title_xticks_top_both",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_title_above_offset[left",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_title_above_offset[center",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_title_above_offset[both",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_title_no_move_off_page",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_offset_label_color",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_offset_text_visible",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_large_offset",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_barb_units",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_quiver_units",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_bar_color_cycle",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_tick_param_label_rotation",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_fillbetween_cycle",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_log_margins",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_color_length_mismatch",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_eventplot_legend",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_bar_broadcast_args",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_invalid_axis_limits",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_minorticks_on[symlog-symlog]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_minorticks_on[symlog-log]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_minorticks_on[log-symlog]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_minorticks_on[log-log]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_twinx_knows_limits",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_zero_linewidth",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_empty_errorbar_legend",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_plot_decimal[png]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_markerfacecolor_none_alpha[png]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_tick_padding_tightbbox",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_inset",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_zoom_inset",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_inset_polar[png]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_inset_projection",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_inset_subclass",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_indicate_inset_inverted[False-False]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_indicate_inset_inverted[False-True]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_indicate_inset_inverted[True-False]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_indicate_inset_inverted[True-True]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_set_position",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_spines_properbbox_after_zoom",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_gettightbbox_ignore_nan",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_scatter_series_non_zero_index",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_scatter_empty_data",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_annotate_across_transforms[png]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_secondary_xy[png]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_secondary_fail",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_secondary_resize",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_secondary_minorloc",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_secondary_formatter",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_secondary_repr",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_normal_axes",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_nodecorator",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_displaced_spine",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_tickdirs",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_minor_accountedfor",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_axis_bool_arguments[png]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_axis_extent_arg",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_axis_extent_arg2",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_hist_auto_bins",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_hist_nan_data",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_hist_range_and_density",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_bar_errbar_zorder",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_set_ticks_inverted",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_aspect_nonlinear_adjustable_box",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_aspect_nonlinear_adjustable_datalim",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_box_aspect",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_box_aspect_custom_position",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_bbox_aspect_axes_init",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_redraw_in_frame",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_invisible_axes_events",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_xtickcolor_is_not_markercolor",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_ytickcolor_is_not_markercolor",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_unautoscale[True-x]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_unautoscale[True-y]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_unautoscale[False-x]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_unautoscale[False-y]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_unautoscale[None-x]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_unautoscale[None-y]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_polar_interpolation_steps_variable_r[png]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_autoscale_tiny_sticky",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_xtickcolor_is_not_xticklabelcolor",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_ytickcolor_is_not_yticklabelcolor",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_relative_ticklabel_sizes[xx-small]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_relative_ticklabel_sizes[x-small]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_relative_ticklabel_sizes[small]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_relative_ticklabel_sizes[medium]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_relative_ticklabel_sizes[large]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_relative_ticklabel_sizes[x-large]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_relative_ticklabel_sizes[xx-large]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_relative_ticklabel_sizes[larger]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_relative_ticklabel_sizes[smaller]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_relative_ticklabel_sizes[8]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_relative_ticklabel_sizes[10]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_relative_ticklabel_sizes[12]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_multiplot_autoscale",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_sharing_does_not_link_positions",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_2dcolor_plot[pdf]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_shared_axes_clear[png]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_shared_axes_retick",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_ylabel_ha_with_position[left]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_ylabel_ha_with_position[center]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_ylabel_ha_with_position[right]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_bar_label_location_vertical",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_bar_label_location_vertical_yinverted",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_bar_label_location_horizontal",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_bar_label_location_horizontal_yinverted",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_bar_label_location_horizontal_xinverted",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_bar_label_location_horizontal_xyinverted",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_bar_label_location_center",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_bar_label_location_errorbars",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_bar_label_fmt[%.2f]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_bar_label_fmt[{:.2f}]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_bar_label_fmt[format]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_bar_label_fmt_error",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_bar_label_labels",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_bar_label_nan_ydata",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_bar_label_nan_ydata_inverted",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_nan_barlabels",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_patch_bounds",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_warn_ignored_scatter_kwargs",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_artist_sublists",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_empty_line_plots",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_plot_format_errors[None-f-'f'",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_plot_format_errors[None-o+-'o\\\\+'",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_plot_format_errors[None-:--':-'",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_plot_format_errors[None-rk-'rk'",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_plot_format_errors[None-:o-r-':o-r'",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_plot_format_errors[data1-f-'f'",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_plot_format_errors[data1-o+-'o\\\\+'",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_plot_format_errors[data1-:--':-'",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_plot_format_errors[data1-rk-'rk'",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_plot_format_errors[data1-:o-r-':o-r'",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_plot_format",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_automatic_legend",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_plot_errors",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_clim",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_bezier_autoscale",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_get_xticklabel",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "SKIPPED",
              "message": "lib/matplotlib/testing/compare.py:285: Don't know how to convert .svg files to png",
              "file_path": "lib/matplotlib/testing/compare.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "SKIPPED",
              "message": "../opt/miniconda3/envs/testbed/lib/python3.11/contextlib.py:81: Cannot compare svg files because Inkscape is not installed",
              "file_path": "../opt/miniconda3/envs/testbed/lib/python3.11/contextlib.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            }
          ]
        }
      },
      "parent_id": 3
    },
    {
      "node_id": 5,
      "action": {
        "scratch_pad": "1. I've added the draggable parameter to the __init__ signature, but I still need to:\n   - Add it to the docstring\n   - Actually implement the functionality by calling set_draggable() in __init__\n2. The test failure in test_contour.py seems unrelated to our changes (it's about colorbar limits)\n3. Let me continue with the implementation",
        "command": "str_replace",
        "path": "lib/matplotlib/legend.py",
        "old_str": "        self.set_title(title, prop=title_prop_fp)\n        self._draggable = None\n\n        # set the text color",
        "new_str": "        self.set_title(title, prop=title_prop_fp)\n        self._draggable = None\n        if draggable:\n            self.set_draggable(True)\n\n        # set the text color",
        "action_args_class": "moatless.actions.edit.EditActionArguments"
      },
      "observation": {
        "message": "The file lib/matplotlib/legend.py has been edited. Here's the result of running `cat -n` on a snippet of lib/matplotlib/legend.py:\n   540\t            title_prop_fp.set_size(title_fontsize)\n   541\t        elif not isinstance(title_fontproperties, FontProperties):\n   542\t            title_fontsize = mpl.rcParams[\"legend.title_fontsize\"]\n   543\t            title_prop_fp.set_size(title_fontsize)\n   544\t\n   545\t        self.set_title(title, prop=title_prop_fp)\n   546\t        self._draggable = None\n   547\t        if draggable:\n   548\t            self.set_draggable(True)\n   549\t\n   550\t        # set the text color\n   551\t\n   552\t        color_getters = {  # getter function depends on line or patch\n   553\t            'linecolor':       ['get_color',           'get_facecolor'],\nReview the changes and make sure they are as expected. Edit the file again if necessary.\n\nRunning 936 tests in the following files:\n * lib/matplotlib/tests/test_legend.py\n * lib/matplotlib/tests/test_contour.py\n * lib/matplotlib/tests/test_axes.py\n\n* FAILED lib/matplotlib/tests/test_contour.py test_contourf_log_extension>\n```\n\n    @image_comparison(['contour_log_extension.png'],\n                      remove_text=True, style='mpl20',\n                      tol=1.444)\n    def test_contourf_log_extension():\n        # Remove this line when this test image is regenerated.\n        plt.rcParams['pcolormesh.snap'] = False\n    \n        # Test that contourf with lognorm is extended correctly\n        fig, (ax1, ax2, ax3) = plt.subplots(1, 3, figsize=(10, 5))\n        fig.subplots_adjust(left=0.05, right=0.95)\n    \n        # make data set with large range e.g. between 1e-8 and 1e10\n        data_exp = np.linspace(-7.5, 9.5, 1200)\n        data = np.power(10, data_exp).reshape(30, 40)\n        # make manual levels e.g. between 1e-4 and 1e-6\n        levels_exp = np.arange(-4., 7.)\n        levels = np.power(10., levels_exp)\n    \n        # original data\n        c1 = ax1.contourf(data,\n                          norm=LogNorm(vmin=data.min(), vmax=data.max()))\n        # just show data in levels\n        c2 = ax2.contourf(data, levels=levels,\n                          norm=LogNorm(vmin=levels.min(), vmax=levels.max()),\n                          extend='neither')\n        # extend data from levels\n        c3 = ax3.contourf(data, levels=levels,\n                          norm=LogNorm(vmin=levels.min(), vmax=levels.max()),\n                          extend='both')\n        cb = plt.colorbar(c1, ax=ax1)\n        assert cb.ax.get_ylim() == (1e-8, 1e10)\n        cb = plt.colorbar(c2, ax=ax2)\n>       assert cb.ax.get_ylim() == (1e-4, 1e6)\nE       assert (9.9999999999...05, 1000000.0) == (0.0001, 1000000.0)\nE         \nE         At index 0 diff: 9.999999999999999e-05 != 0.0001\nE         Use -v to get more diff\n\nlib/matplotlib/tests/test_contour.py:316: AssertionError\n```\n\n\n935 passed. 1 failed. 0 errors.",
        "terminal": false,
        "expect_correction": false,
        "properties": {
          "diff": "--- lib/matplotlib/legend.py\n+++ lib/matplotlib/legend.py\n@@ -539,6 +539,8 @@\n \n         self.set_title(title, prop=title_prop_fp)\n         self._draggable = None\n+        if draggable:\n+            self.set_draggable(True)\n \n         # set the text color\n \n",
          "test_results": [
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_legend.py::test_legend_ordereddict",
              "file_path": "lib/matplotlib/tests/test_legend.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_legend.py::test_legend_auto1[png]",
              "file_path": "lib/matplotlib/tests/test_legend.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_legend.py::test_legend_auto1[pdf]",
              "file_path": "lib/matplotlib/tests/test_legend.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_legend.py::test_legend_auto2[png]",
              "file_path": "lib/matplotlib/tests/test_legend.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_legend.py::test_legend_auto2[pdf]",
              "file_path": "lib/matplotlib/tests/test_legend.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_legend.py::test_legend_auto3[png]",
              "file_path": "lib/matplotlib/tests/test_legend.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_legend.py::test_legend_auto3[pdf]",
              "file_path": "lib/matplotlib/tests/test_legend.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_legend.py::test_various_labels[png]",
              "file_path": "lib/matplotlib/tests/test_legend.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_legend.py::test_various_labels[pdf]",
              "file_path": "lib/matplotlib/tests/test_legend.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_legend.py::test_legend_label_with_leading_underscore",
              "file_path": "lib/matplotlib/tests/test_legend.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_legend.py::test_labels_first[png]",
              "file_path": "lib/matplotlib/tests/test_legend.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_legend.py::test_multiple_keys[png]",
              "file_path": "lib/matplotlib/tests/test_legend.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_legend.py::test_alpha_rgba[png]",
              "file_path": "lib/matplotlib/tests/test_legend.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_legend.py::test_alpha_rcparam[png]",
              "file_path": "lib/matplotlib/tests/test_legend.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_legend.py::test_fancy[png]",
              "file_path": "lib/matplotlib/tests/test_legend.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_legend.py::test_fancy[pdf]",
              "file_path": "lib/matplotlib/tests/test_legend.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_legend.py::test_framealpha[png]",
              "file_path": "lib/matplotlib/tests/test_legend.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_legend.py::test_framealpha[pdf]",
              "file_path": "lib/matplotlib/tests/test_legend.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_legend.py::test_rc[png]",
              "file_path": "lib/matplotlib/tests/test_legend.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_legend.py::test_rc[pdf]",
              "file_path": "lib/matplotlib/tests/test_legend.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_legend.py::test_legend_expand[png]",
              "file_path": "lib/matplotlib/tests/test_legend.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_legend.py::test_legend_expand[pdf]",
              "file_path": "lib/matplotlib/tests/test_legend.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_legend.py::test_hatching[png]",
              "file_path": "lib/matplotlib/tests/test_legend.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_legend.py::test_hatching[pdf]",
              "file_path": "lib/matplotlib/tests/test_legend.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_legend.py::test_legend_remove",
              "file_path": "lib/matplotlib/tests/test_legend.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_legend.py::TestLegendFunction::test_legend_no_args",
              "file_path": "lib/matplotlib/tests/test_legend.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_legend.py::TestLegendFunction::test_legend_positional_handles_labels",
              "file_path": "lib/matplotlib/tests/test_legend.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_legend.py::TestLegendFunction::test_legend_positional_handles_only",
              "file_path": "lib/matplotlib/tests/test_legend.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_legend.py::TestLegendFunction::test_legend_positional_labels_only",
              "file_path": "lib/matplotlib/tests/test_legend.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_legend.py::TestLegendFunction::test_legend_three_args",
              "file_path": "lib/matplotlib/tests/test_legend.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_legend.py::TestLegendFunction::test_legend_handler_map",
              "file_path": "lib/matplotlib/tests/test_legend.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_legend.py::TestLegendFunction::test_legend_kwargs_handles_only",
              "file_path": "lib/matplotlib/tests/test_legend.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_legend.py::TestLegendFunction::test_legend_kwargs_labels_only",
              "file_path": "lib/matplotlib/tests/test_legend.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_legend.py::TestLegendFunction::test_legend_kwargs_handles_labels",
              "file_path": "lib/matplotlib/tests/test_legend.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_legend.py::TestLegendFunction::test_warn_mixed_args_and_kwargs",
              "file_path": "lib/matplotlib/tests/test_legend.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_legend.py::TestLegendFunction::test_parasite",
              "file_path": "lib/matplotlib/tests/test_legend.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_legend.py::TestLegendFigureFunction::test_legend_handle_label",
              "file_path": "lib/matplotlib/tests/test_legend.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_legend.py::TestLegendFigureFunction::test_legend_no_args",
              "file_path": "lib/matplotlib/tests/test_legend.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_legend.py::TestLegendFigureFunction::test_legend_label_arg",
              "file_path": "lib/matplotlib/tests/test_legend.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_legend.py::TestLegendFigureFunction::test_legend_label_three_args",
              "file_path": "lib/matplotlib/tests/test_legend.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_legend.py::TestLegendFigureFunction::test_legend_label_three_args_pluskw",
              "file_path": "lib/matplotlib/tests/test_legend.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_legend.py::TestLegendFigureFunction::test_legend_kw_args",
              "file_path": "lib/matplotlib/tests/test_legend.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_legend.py::TestLegendFigureFunction::test_warn_args_kwargs",
              "file_path": "lib/matplotlib/tests/test_legend.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_legend.py::test_legend_stackplot[png]",
              "file_path": "lib/matplotlib/tests/test_legend.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_legend.py::test_cross_figure_patch_legend",
              "file_path": "lib/matplotlib/tests/test_legend.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_legend.py::test_nanscatter",
              "file_path": "lib/matplotlib/tests/test_legend.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_legend.py::test_legend_repeatcheckok",
              "file_path": "lib/matplotlib/tests/test_legend.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_legend.py::test_not_covering_scatter[png]",
              "file_path": "lib/matplotlib/tests/test_legend.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_legend.py::test_not_covering_scatter_transform[png]",
              "file_path": "lib/matplotlib/tests/test_legend.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_legend.py::test_linecollection_scaled_dashes",
              "file_path": "lib/matplotlib/tests/test_legend.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_legend.py::test_handler_numpoints",
              "file_path": "lib/matplotlib/tests/test_legend.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_legend.py::test_text_nohandler_warning",
              "file_path": "lib/matplotlib/tests/test_legend.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_legend.py::test_empty_bar_chart_with_legend",
              "file_path": "lib/matplotlib/tests/test_legend.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_legend.py::test_shadow_framealpha",
              "file_path": "lib/matplotlib/tests/test_legend.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_legend.py::test_legend_title_empty",
              "file_path": "lib/matplotlib/tests/test_legend.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_legend.py::test_legend_proper_window_extent",
              "file_path": "lib/matplotlib/tests/test_legend.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_legend.py::test_window_extent_cached_renderer",
              "file_path": "lib/matplotlib/tests/test_legend.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_legend.py::test_legend_title_fontprop_fontsize",
              "file_path": "lib/matplotlib/tests/test_legend.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_legend.py::test_legend_alignment[center]",
              "file_path": "lib/matplotlib/tests/test_legend.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_legend.py::test_legend_alignment[left]",
              "file_path": "lib/matplotlib/tests/test_legend.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_legend.py::test_legend_alignment[right]",
              "file_path": "lib/matplotlib/tests/test_legend.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_legend.py::test_legend_set_alignment[center]",
              "file_path": "lib/matplotlib/tests/test_legend.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_legend.py::test_legend_set_alignment[left]",
              "file_path": "lib/matplotlib/tests/test_legend.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_legend.py::test_legend_set_alignment[right]",
              "file_path": "lib/matplotlib/tests/test_legend.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_legend.py::test_legend_labelcolor_single[red]",
              "file_path": "lib/matplotlib/tests/test_legend.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_legend.py::test_legend_labelcolor_single[none]",
              "file_path": "lib/matplotlib/tests/test_legend.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_legend.py::test_legend_labelcolor_single[color2]",
              "file_path": "lib/matplotlib/tests/test_legend.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_legend.py::test_legend_labelcolor_list",
              "file_path": "lib/matplotlib/tests/test_legend.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_legend.py::test_legend_labelcolor_linecolor",
              "file_path": "lib/matplotlib/tests/test_legend.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_legend.py::test_legend_labelcolor_markeredgecolor",
              "file_path": "lib/matplotlib/tests/test_legend.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_legend.py::test_legend_labelcolor_markerfacecolor",
              "file_path": "lib/matplotlib/tests/test_legend.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_legend.py::test_legend_labelcolor_rcparam_single[red]",
              "file_path": "lib/matplotlib/tests/test_legend.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_legend.py::test_legend_labelcolor_rcparam_single[none]",
              "file_path": "lib/matplotlib/tests/test_legend.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_legend.py::test_legend_labelcolor_rcparam_single[color2]",
              "file_path": "lib/matplotlib/tests/test_legend.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_legend.py::test_legend_labelcolor_rcparam_linecolor",
              "file_path": "lib/matplotlib/tests/test_legend.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_legend.py::test_legend_labelcolor_rcparam_markeredgecolor",
              "file_path": "lib/matplotlib/tests/test_legend.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_legend.py::test_legend_labelcolor_rcparam_markeredgecolor_short",
              "file_path": "lib/matplotlib/tests/test_legend.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_legend.py::test_legend_labelcolor_rcparam_markerfacecolor",
              "file_path": "lib/matplotlib/tests/test_legend.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_legend.py::test_legend_labelcolor_rcparam_markerfacecolor_short",
              "file_path": "lib/matplotlib/tests/test_legend.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_legend.py::test_get_set_draggable",
              "file_path": "lib/matplotlib/tests/test_legend.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_legend.py::test_alpha_handles",
              "file_path": "lib/matplotlib/tests/test_legend.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_legend.py::test_usetex_no_warn",
              "file_path": "lib/matplotlib/tests/test_legend.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_legend.py::test_warn_big_data_best_loc",
              "file_path": "lib/matplotlib/tests/test_legend.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_legend.py::test_no_warn_big_data_when_loc_specified",
              "file_path": "lib/matplotlib/tests/test_legend.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_legend.py::test_plot_multiple_input_multiple_label[label_array0]",
              "file_path": "lib/matplotlib/tests/test_legend.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_legend.py::test_plot_multiple_input_multiple_label[label_array1]",
              "file_path": "lib/matplotlib/tests/test_legend.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_legend.py::test_plot_multiple_input_multiple_label[label_array2]",
              "file_path": "lib/matplotlib/tests/test_legend.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_legend.py::test_plot_multiple_input_single_label[one]",
              "file_path": "lib/matplotlib/tests/test_legend.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_legend.py::test_plot_multiple_input_single_label[1]",
              "file_path": "lib/matplotlib/tests/test_legend.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_legend.py::test_plot_multiple_input_single_label[int]",
              "file_path": "lib/matplotlib/tests/test_legend.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_legend.py::test_plot_single_input_multiple_label[label_array0]",
              "file_path": "lib/matplotlib/tests/test_legend.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_legend.py::test_plot_single_input_multiple_label[label_array1]",
              "file_path": "lib/matplotlib/tests/test_legend.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_legend.py::test_plot_single_input_multiple_label[label_array2]",
              "file_path": "lib/matplotlib/tests/test_legend.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_legend.py::test_plot_multiple_label_incorrect_length_exception",
              "file_path": "lib/matplotlib/tests/test_legend.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_legend.py::test_legend_face_edgecolor",
              "file_path": "lib/matplotlib/tests/test_legend.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_legend.py::test_legend_text_axes",
              "file_path": "lib/matplotlib/tests/test_legend.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_legend.py::test_handlerline2d",
              "file_path": "lib/matplotlib/tests/test_legend.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_legend.py::test_subfigure_legend",
              "file_path": "lib/matplotlib/tests/test_legend.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_legend.py::test_setting_alpha_keeps_polycollection_color",
              "file_path": "lib/matplotlib/tests/test_legend.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_legend.py::test_legend_markers_from_line2d",
              "file_path": "lib/matplotlib/tests/test_legend.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_legend.py::test_ncol_ncols[png]",
              "file_path": "lib/matplotlib/tests/test_legend.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_legend.py::test_ncol_ncols[pdf]",
              "file_path": "lib/matplotlib/tests/test_legend.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "SKIPPED",
              "message": "../opt/miniconda3/envs/testbed/lib/python3.11/contextlib.py:81: Cannot compare svg files because Inkscape is not installed",
              "file_path": "../opt/miniconda3/envs/testbed/lib/python3.11/contextlib.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "SKIPPED",
              "message": "lib/matplotlib/testing/compare.py:285: Don't know how to convert .svg files to png",
              "file_path": "lib/matplotlib/testing/compare.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_contour.py::test_contour_shape_1d_valid",
              "file_path": "lib/matplotlib/tests/test_contour.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_contour.py::test_contour_shape_2d_valid",
              "file_path": "lib/matplotlib/tests/test_contour.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_contour.py::test_contour_shape_error[args0-Length",
              "file_path": "lib/matplotlib/tests/test_contour.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_contour.py::test_contour_shape_error[args1-Length",
              "file_path": "lib/matplotlib/tests/test_contour.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_contour.py::test_contour_shape_error[args2-Number",
              "file_path": "lib/matplotlib/tests/test_contour.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_contour.py::test_contour_shape_error[args3-Number",
              "file_path": "lib/matplotlib/tests/test_contour.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_contour.py::test_contour_shape_error[args4-Shapes",
              "file_path": "lib/matplotlib/tests/test_contour.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_contour.py::test_contour_shape_error[args5-Shapes",
              "file_path": "lib/matplotlib/tests/test_contour.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_contour.py::test_contour_shape_error[args6-Inputs",
              "file_path": "lib/matplotlib/tests/test_contour.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_contour.py::test_contour_shape_error[args7-Input",
              "file_path": "lib/matplotlib/tests/test_contour.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_contour.py::test_contour_shape_error[args8-Input",
              "file_path": "lib/matplotlib/tests/test_contour.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_contour.py::test_contour_shape_error[args9-Input",
              "file_path": "lib/matplotlib/tests/test_contour.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_contour.py::test_contour_empty_levels",
              "file_path": "lib/matplotlib/tests/test_contour.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_contour.py::test_contour_Nlevels",
              "file_path": "lib/matplotlib/tests/test_contour.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_contour.py::test_contour_badlevel_fmt",
              "file_path": "lib/matplotlib/tests/test_contour.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_contour.py::test_contour_uniform_z",
              "file_path": "lib/matplotlib/tests/test_contour.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_contour.py::test_contour_manual_labels[png]",
              "file_path": "lib/matplotlib/tests/test_contour.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_contour.py::test_contour_manual_labels[pdf]",
              "file_path": "lib/matplotlib/tests/test_contour.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_contour.py::test_given_colors_levels_and_extends[png]",
              "file_path": "lib/matplotlib/tests/test_contour.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_contour.py::test_contour_datetime_axis[png]",
              "file_path": "lib/matplotlib/tests/test_contour.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_contour.py::test_labels[png]",
              "file_path": "lib/matplotlib/tests/test_contour.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_contour.py::test_corner_mask[png]",
              "file_path": "lib/matplotlib/tests/test_contour.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_contour.py::test_contourf_decreasing_levels",
              "file_path": "lib/matplotlib/tests/test_contour.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_contour.py::test_contourf_symmetric_locator",
              "file_path": "lib/matplotlib/tests/test_contour.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_contour.py::test_circular_contour_warning",
              "file_path": "lib/matplotlib/tests/test_contour.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_contour.py::test_clabel_zorder[True-123-1234]",
              "file_path": "lib/matplotlib/tests/test_contour.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_contour.py::test_clabel_zorder[False-123-1234]",
              "file_path": "lib/matplotlib/tests/test_contour.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_contour.py::test_clabel_zorder[True-123-None]",
              "file_path": "lib/matplotlib/tests/test_contour.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_contour.py::test_clabel_zorder[False-123-None]",
              "file_path": "lib/matplotlib/tests/test_contour.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_contour.py::test_contour_addlines[png]",
              "file_path": "lib/matplotlib/tests/test_contour.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_contour.py::test_contour_uneven[png]",
              "file_path": "lib/matplotlib/tests/test_contour.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_contour.py::test_contour_linewidth[1.23-None-None-1.23]",
              "file_path": "lib/matplotlib/tests/test_contour.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_contour.py::test_contour_linewidth[1.23-4.24-None-4.24]",
              "file_path": "lib/matplotlib/tests/test_contour.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_contour.py::test_contour_linewidth[1.23-4.24-5.02-5.02]",
              "file_path": "lib/matplotlib/tests/test_contour.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_contour.py::test_label_nonagg",
              "file_path": "lib/matplotlib/tests/test_contour.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_contour.py::test_contour_closed_line_loop[png]",
              "file_path": "lib/matplotlib/tests/test_contour.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_contour.py::test_quadcontourset_reuse",
              "file_path": "lib/matplotlib/tests/test_contour.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_contour.py::test_contour_manual[png]",
              "file_path": "lib/matplotlib/tests/test_contour.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_contour.py::test_contour_line_start_on_corner_edge[png]",
              "file_path": "lib/matplotlib/tests/test_contour.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_contour.py::test_find_nearest_contour",
              "file_path": "lib/matplotlib/tests/test_contour.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_contour.py::test_find_nearest_contour_no_filled",
              "file_path": "lib/matplotlib/tests/test_contour.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_contour.py::test_contour_autolabel_beyond_powerlimits",
              "file_path": "lib/matplotlib/tests/test_contour.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_contour.py::test_contourf_legend_elements",
              "file_path": "lib/matplotlib/tests/test_contour.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_contour.py::test_contour_legend_elements",
              "file_path": "lib/matplotlib/tests/test_contour.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_contour.py::test_algorithm_name[mpl2005-Mpl2005ContourGenerator]",
              "file_path": "lib/matplotlib/tests/test_contour.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_contour.py::test_algorithm_name[mpl2014-Mpl2014ContourGenerator]",
              "file_path": "lib/matplotlib/tests/test_contour.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_contour.py::test_algorithm_name[serial-SerialContourGenerator]",
              "file_path": "lib/matplotlib/tests/test_contour.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_contour.py::test_algorithm_name[threaded-ThreadedContourGenerator]",
              "file_path": "lib/matplotlib/tests/test_contour.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_contour.py::test_algorithm_name[invalid-None]",
              "file_path": "lib/matplotlib/tests/test_contour.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_contour.py::test_algorithm_supports_corner_mask[mpl2005]",
              "file_path": "lib/matplotlib/tests/test_contour.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_contour.py::test_algorithm_supports_corner_mask[mpl2014]",
              "file_path": "lib/matplotlib/tests/test_contour.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_contour.py::test_algorithm_supports_corner_mask[serial]",
              "file_path": "lib/matplotlib/tests/test_contour.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_contour.py::test_algorithm_supports_corner_mask[threaded]",
              "file_path": "lib/matplotlib/tests/test_contour.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_contour.py::test_all_algorithms[png]",
              "file_path": "lib/matplotlib/tests/test_contour.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_contour.py::test_subfigure_clabel",
              "file_path": "lib/matplotlib/tests/test_contour.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_contour.py::test_linestyles[solid]",
              "file_path": "lib/matplotlib/tests/test_contour.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_contour.py::test_linestyles[dashed]",
              "file_path": "lib/matplotlib/tests/test_contour.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_contour.py::test_linestyles[dashdot]",
              "file_path": "lib/matplotlib/tests/test_contour.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_contour.py::test_linestyles[dotted]",
              "file_path": "lib/matplotlib/tests/test_contour.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_contour.py::test_negative_linestyles[solid]",
              "file_path": "lib/matplotlib/tests/test_contour.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_contour.py::test_negative_linestyles[dashed]",
              "file_path": "lib/matplotlib/tests/test_contour.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_contour.py::test_negative_linestyles[dashdot]",
              "file_path": "lib/matplotlib/tests/test_contour.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_contour.py::test_negative_linestyles[dotted]",
              "file_path": "lib/matplotlib/tests/test_contour.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "SKIPPED",
              "message": "../opt/miniconda3/envs/testbed/lib/python3.11/contextlib.py:81: Cannot compare svg files because Inkscape is not installed",
              "file_path": "../opt/miniconda3/envs/testbed/lib/python3.11/contextlib.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "FAILED",
              "message": "\n    @image_comparison(['contour_log_extension.png'],\n                      remove_text=True, style='mpl20',\n                      tol=1.444)\n    def test_contourf_log_extension():\n        # Remove this line when this test image is regenerated.\n        plt.rcParams['pcolormesh.snap'] = False\n    \n        # Test that contourf with lognorm is extended correctly\n        fig, (ax1, ax2, ax3) = plt.subplots(1, 3, figsize=(10, 5))\n        fig.subplots_adjust(left=0.05, right=0.95)\n    \n        # make data set with large range e.g. between 1e-8 and 1e10\n        data_exp = np.linspace(-7.5, 9.5, 1200)\n        data = np.power(10, data_exp).reshape(30, 40)\n        # make manual levels e.g. between 1e-4 and 1e-6\n        levels_exp = np.arange(-4., 7.)\n        levels = np.power(10., levels_exp)\n    \n        # original data\n        c1 = ax1.contourf(data,\n                          norm=LogNorm(vmin=data.min(), vmax=data.max()))\n        # just show data in levels\n        c2 = ax2.contourf(data, levels=levels,\n                          norm=LogNorm(vmin=levels.min(), vmax=levels.max()),\n                          extend='neither')\n        # extend data from levels\n        c3 = ax3.contourf(data, levels=levels,\n                          norm=LogNorm(vmin=levels.min(), vmax=levels.max()),\n                          extend='both')\n        cb = plt.colorbar(c1, ax=ax1)\n        assert cb.ax.get_ylim() == (1e-8, 1e10)\n        cb = plt.colorbar(c2, ax=ax2)\n>       assert cb.ax.get_ylim() == (1e-4, 1e6)\nE       assert (9.9999999999...05, 1000000.0) == (0.0001, 1000000.0)\nE         \nE         At index 0 diff: 9.999999999999999e-05 != 0.0001\nE         Use -v to get more diff\n\nlib/matplotlib/tests/test_contour.py:316: AssertionError",
              "file_path": "lib/matplotlib/tests/test_contour.py",
              "span_id": "test_contourf_log_extension",
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_invisible_axes[png]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_get_labels",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_repr",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_label_loc_vertical[png]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_label_loc_vertical[pdf]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_label_loc_horizontal[png]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_label_loc_horizontal[pdf]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_label_loc_rc[png]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_label_loc_rc[pdf]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_label_shift",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_acorr[png]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_spy[png]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_spy_invalid_kwargs",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_matshow[png]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_formatter_ticker[png]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_formatter_ticker[pdf]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_funcformatter_auto_formatter",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_strmethodformatter_auto_formatter",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_twin_axis_locators_formatters[png]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_twin_axis_locators_formatters[pdf]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_twinx_cla",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_twin_logscale[png-x]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_twin_logscale[png-y]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_twinx_axis_scales[png]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_twin_inherit_autoscale_setting",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_inverted_cla",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_subclass_clear_cla",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_cla_not_redefined_internally",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_minorticks_on_rcParams_both[png]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_autoscale_tiny_range[png]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_autoscale_tiny_range[pdf]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_autoscale_tight",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_autoscale_log_shared",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_use_sticky_edges",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_sticky_shared_axes[png]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_basic_annotate[png]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_basic_annotate[pdf]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_arrow_simple[png]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_arrow_empty",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_arrow_in_view",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_annotate_default_arrow",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_annotate_signature",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_fill_units[png]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_plot_format_kwarg_redundant",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_errorbar_dashes[png]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_single_point[png]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_single_point[pdf]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_single_date[png]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_shaped_data[png]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_structured_data",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_aitoff_proj[png]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_axvspan_epoch[png]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_axvspan_epoch[pdf]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_axhspan_epoch[png]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_axhspan_epoch[pdf]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_hexbin_extent[png]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_hexbin_empty[png]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_hexbin_pickable",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_hexbin_log[png]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_hexbin_linear[png]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_hexbin_log_clim",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_inverted_limits",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_nonfinite_limits[png]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_nonfinite_limits[pdf]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_limits_empty_data[png-scatter]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_limits_empty_data[png-plot]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_limits_empty_data[png-fill_between]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_imshow[png]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_imshow[pdf]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_imshow_clip[png]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_imshow_clip[pdf]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_imshow_norm_vminvmax",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_polycollection_joinstyle[png]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_polycollection_joinstyle[pdf]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_fill_between_input[2d_x_input]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_fill_between_input[2d_y1_input]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_fill_between_input[2d_y2_input]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_fill_betweenx_input[2d_y_input]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_fill_betweenx_input[2d_x1_input]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_fill_betweenx_input[2d_x2_input]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_fill_between_interpolate[png]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_fill_between_interpolate[pdf]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_fill_between_interpolate_decreasing[png]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_fill_between_interpolate_decreasing[pdf]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_fill_between_interpolate_nan[png]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_fill_between_interpolate_nan[pdf]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_symlog[pdf]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_symlog2[pdf]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_pcolorargs_5205",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_pcolormesh[png]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_pcolormesh[pdf]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_pcolormesh_small[eps]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_pcolormesh_alpha[png]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_pcolormesh_alpha[pdf]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_pcolormesh_datetime_axis[png]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_pcolor_datetime_axis[png]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_pcolorargs",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_pcolornearest[png]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_pcolornearestunits[png]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_pcolorflaterror",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_pcolorauto[png-False]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_pcolorauto[png-True]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_canonical[png]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_canonical[pdf]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_arc_angles[png]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_arc_ellipse[png]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_arc_ellipse[pdf]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_marker_as_markerstyle",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_markevery[png]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_markevery[pdf]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_markevery_line[png]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_markevery_line[pdf]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_markevery_linear_scales[png]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_markevery_linear_scales[pdf]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_markevery_linear_scales_zoomed[png]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_markevery_linear_scales_zoomed[pdf]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_markevery_log_scales[png]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_markevery_log_scales[pdf]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_markevery_polar[png]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_markevery_polar[pdf]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_markevery_linear_scales_nans[png]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_markevery_linear_scales_nans[pdf]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_marker_edges[png]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_marker_edges[pdf]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_bar_tick_label_single[png]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_nan_bar_values",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_bar_ticklabel_fail",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_bar_tick_label_multiple[png]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_bar_tick_label_multiple_old_alignment[png]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_bar_decimal_center[png]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_barh_decimal_center[png]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_bar_decimal_width[png]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_barh_decimal_height[png]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_bar_color_none_alpha",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_bar_edgecolor_none_alpha",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_barh_tick_label[png]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_bar_timedelta",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_boxplot_dates_pandas",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_boxplot_capwidths",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_pcolor_regression",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_bar_pandas",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_bar_pandas_indexed",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_bar_hatches[png]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_bar_hatches[pdf]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_bar_labels[x-1-x-expected_labels0-x]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_bar_labels[x1-width1-label1-expected_labels1-_nolegend_]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_bar_labels[x2-width2-label2-expected_labels2-_nolegend_]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_bar_labels[x3-width3-bars-expected_labels3-bars]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_bar_labels_length",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_pandas_minimal_plot",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_hist_log[png]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_hist_log[pdf]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_hist_log_2[png]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_hist_log_barstacked",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_hist_bar_empty[png]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_hist_float16",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_hist_step_empty[png]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_hist_step_filled[png]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_hist_density[png]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_hist_unequal_bins_density",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_hist_datetime_datasets",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_hist_datetime_datasets_bins[date2num]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_hist_datetime_datasets_bins[datetime.datetime]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_hist_datetime_datasets_bins[np.datetime64]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_hist_with_empty_input[data0-1]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_hist_with_empty_input[data1-1]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_hist_with_empty_input[data2-2]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_hist_zorder[bar-1]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_hist_zorder[step-2]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_hist_zorder[stepfilled-1]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_stairs[png]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_stairs_fill[png]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_stairs_update[png]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_stairs_baseline_0[png]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_stairs_empty",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_stairs_invalid_nan",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_stairs_invalid_mismatch",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_stairs_invalid_update",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_stairs_invalid_update2",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_stairs_options[png]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_stairs_datetime[png]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_stairs_edge_handling[png]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_contour_hatching[png]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_contour_hatching[pdf]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_contour_colorbar[png]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_contour_colorbar[pdf]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_hist2d[png]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_hist2d[pdf]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_hist2d_transpose[png]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_hist2d_transpose[pdf]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_hist2d_density",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::TestScatter::test_scatter_plot[png]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::TestScatter::test_scatter_plot[pdf]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::TestScatter::test_scatter_marker[png]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::TestScatter::test_scatter_2D[png]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::TestScatter::test_scatter_decimal[png]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::TestScatter::test_scatter_color",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::TestScatter::test_scatter_color_warning[kwargs0]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::TestScatter::test_scatter_color_warning[kwargs1]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::TestScatter::test_scatter_color_warning[kwargs2]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::TestScatter::test_scatter_color_warning[kwargs3]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::TestScatter::test_scatter_unfilled",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::TestScatter::test_scatter_unfillable",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::TestScatter::test_scatter_size_arg_size",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::TestScatter::test_scatter_edgecolor_RGB",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::TestScatter::test_scatter_invalid_color[png]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::TestScatter::test_scatter_no_invalid_color[png]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::TestScatter::test_scatter_norm_vminvmax",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::TestScatter::test_scatter_single_point[png]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::TestScatter::test_scatter_different_shapes[png]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::TestScatter::test_scatter_c[0.5-None]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::TestScatter::test_scatter_c[c_case1-conversion]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::TestScatter::test_scatter_c[red-None]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::TestScatter::test_scatter_c[none-None]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::TestScatter::test_scatter_c[None-None]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::TestScatter::test_scatter_c[c_case5-None]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::TestScatter::test_scatter_c[jaune-conversion]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::TestScatter::test_scatter_c[c_case7-conversion]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::TestScatter::test_scatter_c[c_case8-conversion]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::TestScatter::test_scatter_c[c_case9-None]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::TestScatter::test_scatter_c[c_case10-None]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::TestScatter::test_scatter_c[c_case11-shape]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::TestScatter::test_scatter_c[c_case12-None]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::TestScatter::test_scatter_c[c_case13-None]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::TestScatter::test_scatter_c[c_case14-conversion]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::TestScatter::test_scatter_c[c_case15-None]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::TestScatter::test_scatter_c[c_case16-shape]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::TestScatter::test_scatter_c[c_case17-None]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::TestScatter::test_scatter_c[c_case18-shape]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::TestScatter::test_scatter_c[c_case19-None]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::TestScatter::test_scatter_c[c_case20-shape]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::TestScatter::test_scatter_c[c_case21-None]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::TestScatter::test_scatter_c[c_case22-shape]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::TestScatter::test_scatter_c[c_case23-None]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::TestScatter::test_scatter_c[c_case24-shape]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::TestScatter::test_scatter_c[c_case25-None]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::TestScatter::test_scatter_c[c_case26-shape]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::TestScatter::test_scatter_c[c_case27-conversion]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::TestScatter::test_scatter_c[c_case28-conversion]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::TestScatter::test_scatter_c[c_case29-conversion]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::TestScatter::test_scatter_single_color_c[png]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::TestScatter::test_scatter_linewidths",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_parse_scatter_color_args[params0-expected_result0]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_parse_scatter_color_args[params1-expected_result1]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_parse_scatter_color_args[params2-expected_result2]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_parse_scatter_color_args[params3-expected_result3]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_parse_scatter_color_args[params4-expected_result4]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_parse_scatter_color_args_edgecolors[kwargs0-None]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_parse_scatter_color_args_edgecolors[kwargs1-None]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_parse_scatter_color_args_edgecolors[kwargs2-r]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_parse_scatter_color_args_edgecolors[kwargs3-expected_edgecolors3]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_parse_scatter_color_args_edgecolors[kwargs4-r]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_parse_scatter_color_args_edgecolors[kwargs5-face]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_parse_scatter_color_args_edgecolors[kwargs6-none]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_parse_scatter_color_args_edgecolors[kwargs7-r]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_parse_scatter_color_args_edgecolors[kwargs8-r]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_parse_scatter_color_args_edgecolors[kwargs9-r]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_parse_scatter_color_args_edgecolors[kwargs10-g]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_parse_scatter_color_args_error",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_as_mpl_axes_api",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_pyplot_axes",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_log_scales",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_log_scales_no_data",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_log_scales_invalid",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_stackplot[png]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_stackplot[pdf]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_stackplot_baseline[png]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_stackplot_baseline[pdf]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_bxp_baseline[png]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_bxp_rangewhis[png]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_bxp_percentilewhis[png]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_bxp_with_xlabels[png]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_bxp_horizontal[png]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_bxp_with_ylabels[png]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_bxp_patchartist[png]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_bxp_custompatchartist[png]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_bxp_customoutlier[png]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_bxp_showcustommean[png]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_bxp_custombox[png]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_bxp_custommedian[png]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_bxp_customcap[png]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_bxp_customwhisker[png]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_bxp_shownotches[png]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_bxp_nocaps[png]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_bxp_nobox[png]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_bxp_no_flier_stats[png]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_bxp_showmean[png]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_bxp_showmeanasline[png]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_bxp_scalarwidth[png]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_bxp_customwidths[png]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_bxp_custompositions[png]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_bxp_bad_widths",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_bxp_bad_positions",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_bxp_custom_capwidths[png]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_bxp_custom_capwidth[png]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_bxp_bad_capwidths",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_boxplot[png]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_boxplot[pdf]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_boxplot_custom_capwidths[png]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_boxplot_sym2[png]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_boxplot_sym[png]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_boxplot_autorange_whiskers[png]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_boxplot_rc_parameters[png]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_boxplot_rc_parameters[pdf]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_boxplot_with_CIarray[png]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_boxplot_no_weird_whisker[png]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_boxplot_bad_medians",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_boxplot_bad_ci",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_boxplot_zorder",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_boxplot_marker_behavior",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_boxplot_mod_artist_after_plotting[png]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_vert_violinplot_baseline[png]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_vert_violinplot_showmeans[png]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_vert_violinplot_showextrema[png]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_vert_violinplot_showmedians[png]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_vert_violinplot_showall[png]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_vert_violinplot_custompoints_10[png]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_vert_violinplot_custompoints_200[png]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_horiz_violinplot_baseline[png]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_horiz_violinplot_showmedians[png]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_horiz_violinplot_showmeans[png]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_horiz_violinplot_showextrema[png]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_horiz_violinplot_showall[png]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_horiz_violinplot_custompoints_10[png]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_horiz_violinplot_custompoints_200[png]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_violinplot_bad_positions",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_violinplot_bad_widths",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_violinplot_bad_quantiles",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_violinplot_outofrange_quantiles",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_violinplot_single_list_quantiles[png]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_violinplot_pandas_series[png]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_manage_xticks",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_boxplot_not_single",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_tick_space_size_0",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_errorbar[png]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_errorbar[pdf]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_errorbar_colorcycle",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_errorbar_cycle_ecolor[png]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_errorbar_cycle_ecolor[pdf]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_errorbar_shape",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_errorbar_limits[png]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_errorbar_limits[pdf]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_errorbar_nonefmt",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_errorbar_line_specific_kwargs",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_errorbar_with_prop_cycle[png]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_errorbar_every_invalid",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_xerr_yerr_not_negative",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_errorbar_every[png]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_errorbar_every[pdf]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_errorbar_linewidth_type[elinewidth0]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_errorbar_linewidth_type[elinewidth1]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_errorbar_linewidth_type[1]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_errorbar_nan[png]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_hist_stacked_stepfilled[png]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_hist_stacked_stepfilled[pdf]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_hist_offset[png]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_hist_offset[pdf]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_hist_step[png]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_hist_step_horiz[png]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_hist_stacked_weighted[png]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_hist_stacked_weighted[pdf]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_stem[png-w/",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_stem[png-w/o",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_stem_args",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_stem_markerfmt",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_stem_dates",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_stem_orientation[png-w/",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_stem_orientation[png-w/o",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_hist_stacked_stepfilled_alpha[png]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_hist_stacked_stepfilled_alpha[pdf]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_hist_stacked_step[png]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_hist_stacked_step[pdf]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_hist_stacked_density[png]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_hist_stacked_density[pdf]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_hist_step_bottom[png]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_hist_stepfilled_geometry",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_hist_step_geometry",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_hist_stepfilled_bottom_geometry",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_hist_step_bottom_geometry",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_hist_stacked_stepfilled_geometry",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_hist_stacked_step_geometry",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_hist_stacked_stepfilled_bottom_geometry",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_hist_stacked_step_bottom_geometry",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_hist_stacked_bar[png]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_hist_stacked_bar[pdf]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_hist_barstacked_bottom_unchanged",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_hist_emptydata",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_hist_labels",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_transparent_markers[png]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_transparent_markers[pdf]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_rgba_markers[png]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_rgba_markers[pdf]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_mollweide_grid[png]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_mollweide_grid[pdf]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_mollweide_forward_inverse_closure",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_mollweide_inverse_forward_closure",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_alpha[png]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_alpha[pdf]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_eventplot[png]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_eventplot[pdf]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_eventplot_defaults[png]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_eventplot_colors[colors0]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_eventplot_colors[colors1]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_eventplot_colors[colors2]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_eventplot_problem_kwargs[png]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_empty_eventplot",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_eventplot_orientation[None-data0]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_eventplot_orientation[None-data1]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_eventplot_orientation[None-data2]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_eventplot_orientation[vertical-data0]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_eventplot_orientation[vertical-data1]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_eventplot_orientation[vertical-data2]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_eventplot_orientation[horizontal-data0]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_eventplot_orientation[horizontal-data1]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_eventplot_orientation[horizontal-data2]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_eventplot_units_list[png]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_marker_styles[png]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_markers_fillstyle_rcparams[png]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_vertex_markers[png]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_eb_line_zorder[png]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_eb_line_zorder[pdf]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_axline_loglog[png]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_axline_loglog[pdf]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_axline[png]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_axline[pdf]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_axline_transaxes[png]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_axline_transaxes[pdf]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_axline_transaxes_panzoom[png]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_axline_transaxes_panzoom[pdf]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_axline_args",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_vlines[png]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_vlines_default",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_hlines[png]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_hlines_default",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_lines_with_colors[png-data0]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_lines_with_colors[png-data1]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_step_linestyle[png]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_step_linestyle[pdf]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_mixed_collection[png]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_mixed_collection[pdf]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_subplot_key_hash",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_specgram[png]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_specgram_magnitude[png]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_specgram_angle[png]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_specgram_fs_none",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_specgram_origin_rcparam[png]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_specgram_origin_kwarg",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_psd_csd[png]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_spectrum[png]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_psd_csd_edge_cases",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_twin_remove[png]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_twin_spines[png]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_twin_spines_on_top[png]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_rcparam_grid_minor[both-True-True]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_rcparam_grid_minor[major-True-False]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_rcparam_grid_minor[minor-False-True]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_grid",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_reset_grid",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_reset_ticks[png]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_vline_limit",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_axline_minmax[axvline-axhline-args0]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_axline_minmax[axvspan-axhspan-args1]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_empty_shared_subplots",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_shared_with_aspect_1",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_shared_with_aspect_2",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_shared_with_aspect_3",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_shared_aspect_error",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_axis_errors[TypeError-args0-kwargs0-axis\\\\(\\\\)",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_axis_errors[ValueError-args1-kwargs1-Unrecognized",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_axis_errors[TypeError-args2-kwargs2-the",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_axis_errors[TypeError-args3-kwargs3-axis\\\\(\\\\)",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_axis_method_errors",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_twin_with_aspect[x]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_twin_with_aspect[y]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_relim_visible_only",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_text_labelsize",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_pie_default[png]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_pie_linewidth_0[png]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_pie_center_radius[png]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_pie_linewidth_2[png]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_pie_ccw_true[png]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_pie_frame_grid[png]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_pie_rotatelabels_true[png]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_pie_nolabel_but_legend[png]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_pie_textprops",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_pie_get_negative_values",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_normalize_kwarg_pie",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_set_get_ticklabels[png]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_set_ticks_with_labels[png]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_set_noniterable_ticklabels",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_subsampled_ticklabels",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_mismatched_ticklabels",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_empty_ticks_fixed_loc",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_retain_tick_visibility[png]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_tick_label_update",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_o_marker_path_snap[png]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_margins",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_set_margin_updates_limits",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_margins_errors[ValueError-args0-kwargs0-margin",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_margins_errors[ValueError-args1-kwargs1-margin",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_margins_errors[ValueError-args2-kwargs2-margin",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_margins_errors[ValueError-args3-kwargs3-margin",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_margins_errors[TypeError-args4-kwargs4-Cannot",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_margins_errors[TypeError-args5-kwargs5-Cannot",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_margins_errors[TypeError-args6-kwargs6-Must",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_length_one_hist",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_set_xy_bound",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_pathological_hexbin",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_color_None",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_color_alias",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_numerical_hist_label",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_unicode_hist_label",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_move_offsetlabel",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_rc_spines[png]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_rc_grid[png]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_rc_tick",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_rc_major_minor_tick",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_square_plot",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_bad_plot_args",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_pcolorfast[data0-xy0-AxesImage]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_pcolorfast[data0-xy1-AxesImage]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_pcolorfast[data0-xy2-AxesImage]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_pcolorfast[data0-xy3-PcolorImage]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_pcolorfast[data0-xy4-QuadMesh]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_pcolorfast[data1-xy0-AxesImage]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_pcolorfast[data1-xy1-AxesImage]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_pcolorfast[data1-xy2-AxesImage]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_pcolorfast[data1-xy3-PcolorImage]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_pcolorfast[data1-xy4-QuadMesh]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_shared_scale",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_shared_bool",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_violin_point_mass",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_errorbar_inputs_shotgun[kwargs0]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_errorbar_inputs_shotgun[kwargs1]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_errorbar_inputs_shotgun[kwargs2]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_errorbar_inputs_shotgun[kwargs3]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_errorbar_inputs_shotgun[kwargs4]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_errorbar_inputs_shotgun[kwargs5]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_errorbar_inputs_shotgun[kwargs6]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_errorbar_inputs_shotgun[kwargs7]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_errorbar_inputs_shotgun[kwargs8]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_errorbar_inputs_shotgun[kwargs9]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_errorbar_inputs_shotgun[kwargs10]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_errorbar_inputs_shotgun[kwargs11]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_errorbar_inputs_shotgun[kwargs12]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_errorbar_inputs_shotgun[kwargs13]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_errorbar_inputs_shotgun[kwargs14]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_errorbar_inputs_shotgun[kwargs15]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_errorbar_inputs_shotgun[kwargs16]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_errorbar_inputs_shotgun[kwargs17]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_errorbar_inputs_shotgun[kwargs18]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_errorbar_inputs_shotgun[kwargs19]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_errorbar_inputs_shotgun[kwargs20]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_errorbar_inputs_shotgun[kwargs21]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_errorbar_inputs_shotgun[kwargs22]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_errorbar_inputs_shotgun[kwargs23]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_errorbar_inputs_shotgun[kwargs24]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_errorbar_inputs_shotgun[kwargs25]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_errorbar_inputs_shotgun[kwargs26]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_errorbar_inputs_shotgun[kwargs27]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_errorbar_inputs_shotgun[kwargs28]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_errorbar_inputs_shotgun[kwargs29]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_errorbar_inputs_shotgun[kwargs30]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_errorbar_inputs_shotgun[kwargs31]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_errorbar_inputs_shotgun[kwargs32]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_errorbar_inputs_shotgun[kwargs33]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_errorbar_inputs_shotgun[kwargs34]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_errorbar_inputs_shotgun[kwargs35]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_errorbar_inputs_shotgun[kwargs36]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_errorbar_inputs_shotgun[kwargs37]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_errorbar_inputs_shotgun[kwargs38]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_errorbar_inputs_shotgun[kwargs39]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_errorbar_inputs_shotgun[kwargs40]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_errorbar_inputs_shotgun[kwargs41]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_errorbar_inputs_shotgun[kwargs42]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_errorbar_inputs_shotgun[kwargs43]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_errorbar_inputs_shotgun[kwargs44]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_errorbar_inputs_shotgun[kwargs45]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_errorbar_inputs_shotgun[kwargs46]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_errorbar_inputs_shotgun[kwargs47]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_errorbar_inputs_shotgun[kwargs48]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_errorbar_inputs_shotgun[kwargs49]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_errorbar_inputs_shotgun[kwargs50]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_errorbar_inputs_shotgun[kwargs51]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_dash_offset[png]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_dash_offset[pdf]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_title_pad",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_title_location_roundtrip",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_title_location_shared[True]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_title_location_shared[False]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_loglog[png]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_loglog_nonpos[png]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_axes_margins",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_remove_shared_axes[gca-x]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_remove_shared_axes[gca-y]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_remove_shared_axes[subplots-x]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_remove_shared_axes[subplots-y]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_remove_shared_axes[subplots_shared-x]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_remove_shared_axes[subplots_shared-y]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_remove_shared_axes[add_axes-x]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_remove_shared_axes[add_axes-y]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_remove_shared_axes_relim",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_shared_axes_autoscale",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_adjust_numtick_aspect",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_auto_numticks",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_auto_numticks_log",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_broken_barh_empty",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_broken_barh_timedelta",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_pandas_pcolormesh",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_pandas_indexing_dates",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_pandas_errorbar_indexing",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_pandas_index_shape",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_pandas_indexing_hist",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_pandas_bar_align_center",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_tick_apply_tickdir_deprecation",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_axis_set_tick_params_labelsize_labelcolor",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_axes_tick_params_gridlines",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_axes_tick_params_ylabelside",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_axes_tick_params_xlabelside",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_none_kwargs",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_bar_uint8",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_date_timezone_x[png]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_date_timezone_y[png]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_date_timezone_x_and_y[png]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_axisbelow[png]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_titletwiny",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_titlesetpos",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_title_xticks_top",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_title_xticks_top_both",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_title_above_offset[left",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_title_above_offset[center",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_title_above_offset[both",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_title_no_move_off_page",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_offset_label_color",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_offset_text_visible",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_large_offset",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_barb_units",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_quiver_units",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_bar_color_cycle",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_tick_param_label_rotation",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_fillbetween_cycle",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_log_margins",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_color_length_mismatch",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_eventplot_legend",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_bar_broadcast_args",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_invalid_axis_limits",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_minorticks_on[symlog-symlog]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_minorticks_on[symlog-log]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_minorticks_on[log-symlog]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_minorticks_on[log-log]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_twinx_knows_limits",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_zero_linewidth",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_empty_errorbar_legend",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_plot_decimal[png]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_markerfacecolor_none_alpha[png]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_tick_padding_tightbbox",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_inset",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_zoom_inset",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_inset_polar[png]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_inset_projection",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_inset_subclass",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_indicate_inset_inverted[False-False]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_indicate_inset_inverted[False-True]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_indicate_inset_inverted[True-False]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_indicate_inset_inverted[True-True]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_set_position",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_spines_properbbox_after_zoom",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_gettightbbox_ignore_nan",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_scatter_series_non_zero_index",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_scatter_empty_data",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_annotate_across_transforms[png]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_secondary_xy[png]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_secondary_fail",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_secondary_resize",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_secondary_minorloc",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_secondary_formatter",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_secondary_repr",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_normal_axes",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_nodecorator",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_displaced_spine",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_tickdirs",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_minor_accountedfor",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_axis_bool_arguments[png]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_axis_extent_arg",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_axis_extent_arg2",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_hist_auto_bins",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_hist_nan_data",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_hist_range_and_density",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_bar_errbar_zorder",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_set_ticks_inverted",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_aspect_nonlinear_adjustable_box",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_aspect_nonlinear_adjustable_datalim",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_box_aspect",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_box_aspect_custom_position",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_bbox_aspect_axes_init",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_redraw_in_frame",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_invisible_axes_events",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_xtickcolor_is_not_markercolor",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_ytickcolor_is_not_markercolor",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_unautoscale[True-x]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_unautoscale[True-y]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_unautoscale[False-x]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_unautoscale[False-y]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_unautoscale[None-x]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_unautoscale[None-y]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_polar_interpolation_steps_variable_r[png]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_autoscale_tiny_sticky",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_xtickcolor_is_not_xticklabelcolor",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_ytickcolor_is_not_yticklabelcolor",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_relative_ticklabel_sizes[xx-small]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_relative_ticklabel_sizes[x-small]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_relative_ticklabel_sizes[small]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_relative_ticklabel_sizes[medium]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_relative_ticklabel_sizes[large]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_relative_ticklabel_sizes[x-large]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_relative_ticklabel_sizes[xx-large]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_relative_ticklabel_sizes[larger]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_relative_ticklabel_sizes[smaller]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_relative_ticklabel_sizes[8]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_relative_ticklabel_sizes[10]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_relative_ticklabel_sizes[12]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_multiplot_autoscale",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_sharing_does_not_link_positions",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_2dcolor_plot[pdf]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_shared_axes_clear[png]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_shared_axes_retick",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_ylabel_ha_with_position[left]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_ylabel_ha_with_position[center]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_ylabel_ha_with_position[right]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_bar_label_location_vertical",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_bar_label_location_vertical_yinverted",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_bar_label_location_horizontal",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_bar_label_location_horizontal_yinverted",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_bar_label_location_horizontal_xinverted",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_bar_label_location_horizontal_xyinverted",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_bar_label_location_center",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_bar_label_location_errorbars",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_bar_label_fmt[%.2f]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_bar_label_fmt[{:.2f}]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_bar_label_fmt[format]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_bar_label_fmt_error",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_bar_label_labels",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_bar_label_nan_ydata",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_bar_label_nan_ydata_inverted",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_nan_barlabels",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_patch_bounds",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_warn_ignored_scatter_kwargs",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_artist_sublists",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_empty_line_plots",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_plot_format_errors[None-f-'f'",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_plot_format_errors[None-o+-'o\\\\+'",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_plot_format_errors[None-:--':-'",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_plot_format_errors[None-rk-'rk'",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_plot_format_errors[None-:o-r-':o-r'",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_plot_format_errors[data1-f-'f'",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_plot_format_errors[data1-o+-'o\\\\+'",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_plot_format_errors[data1-:--':-'",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_plot_format_errors[data1-rk-'rk'",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_plot_format_errors[data1-:o-r-':o-r'",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_plot_format",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_automatic_legend",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_plot_errors",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_clim",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_bezier_autoscale",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_get_xticklabel",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "SKIPPED",
              "message": "lib/matplotlib/testing/compare.py:285: Don't know how to convert .svg files to png",
              "file_path": "lib/matplotlib/testing/compare.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "SKIPPED",
              "message": "../opt/miniconda3/envs/testbed/lib/python3.11/contextlib.py:81: Cannot compare svg files because Inkscape is not installed",
              "file_path": "../opt/miniconda3/envs/testbed/lib/python3.11/contextlib.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            }
          ]
        }
      },
      "file_context": {
        "max_tokens": 8000,
        "files": [
          {
            "file_path": "lib/matplotlib/legend.py",
            "patch": "--- a/lib/matplotlib/legend.py\n+++ b/lib/matplotlib/legend.py\n@@ -341,6 +341,7 @@\n         handler_map=None,\n         title_fontproperties=None,  # properties for the legend title\n         alignment=\"center\",       # control the alignment within the legend box\n+        draggable=False,      # enable mouse dragging support\n         *,\n         ncol=1  # synonym for ncols (backward compatibility)\n     ):\n@@ -538,6 +539,8 @@\n \n         self.set_title(title, prop=title_prop_fp)\n         self._draggable = None\n+        if draggable:\n+            self.set_draggable(True)\n \n         # set the text color\n \n",
            "spans": [
              {
                "span_id": "imports",
                "pinned": false
              },
              {
                "span_id": "Legend",
                "pinned": false
              },
              {
                "span_id": "Legend.__init__",
                "pinned": false
              },
              {
                "span_id": "Legend.draw",
                "pinned": false
              },
              {
                "span_id": "DraggableLegend",
                "pinned": false
              },
              {
                "span_id": "DraggableLegend.__init__",
                "pinned": false
              },
              {
                "span_id": "DraggableLegend.finalize_offset",
                "pinned": false
              },
              {
                "span_id": "DraggableLegend._update_loc",
                "pinned": false
              },
              {
                "span_id": "DraggableLegend._update_bbox_to_anchor",
                "pinned": false
              },
              {
                "span_id": "Legend.set_draggable",
                "pinned": false
              },
              {
                "span_id": "Legend.get_draggable",
                "pinned": false
              }
            ],
            "show_all_spans": false
          },
          {
            "file_path": "lib/matplotlib/tests/test_legend.py",
            "spans": [
              {
                "span_id": "imports",
                "pinned": false
              },
              {
                "span_id": "test_get_set_draggable",
                "pinned": false
              }
            ],
            "show_all_spans": false,
            "patch": null
          },
          {
            "file_path": "lib/matplotlib/tests/test_contour.py",
            "spans": [
              {
                "span_id": "test_contourf_log_extension",
                "pinned": false
              }
            ],
            "show_all_spans": false,
            "patch": null
          },
          {
            "file_path": "lib/matplotlib/tests/test_axes.py",
            "spans": [],
            "show_all_spans": false,
            "patch": null
          }
        ]
      },
      "completions": {
        "build_action": {
          "model": "claude-3-5-sonnet-20241022",
          "input": [
            {
              "role": "user",
              "content": "<task>\nlegend draggable as keyword\n<!--To help us understand and resolve your issue, please fill out the form to the best of your ability.-->\r\n<!--You can feel free to delete the sections that do not apply.-->\r\n\r\n### Feature request\r\n\r\n**There is not keyword to make legend draggable at creation**\r\n\r\n<!--A short 1-2 sentences that succinctly describes the bug-->\r\n\r\nIs there a code reason why one can not add a \"draggable=True\" keyword to the __init__ function for Legend?  This would be more handy than having to call it after legend creation.  And, naively, it would seem simple to do.  But maybe there is a reason why it would not work?\n\n</task>"
            },
            {
              "role": "assistant",
              "content": [
                {
                  "type": "text",
                  "text": "<thoughts>\n1. First, I need to locate the Legend class implementation to understand its current initialization\n2. Then I'll check if there are any technical limitations for adding the draggable parameter\n3. I'll also look for any tests related to legend draggability to understand the current testing approach\n4. Finally, I'll implement the change if there are no blockers\n</thoughts>"
                },
                {
                  "id": "call_85bc3e3e",
                  "input": {
                    "file_pattern": null,
                    "class_name": "Legend"
                  },
                  "type": "tool_use",
                  "name": "FindClass"
                }
              ]
            },
            {
              "role": "user",
              "content": [
                {
                  "tool_use_id": "call_85bc3e3e",
                  "content": "<observation>\nFound 40 code sections.\n\nViewed relevant code:\nlib/matplotlib/legend.py\n```\n\n    23\t\n    24\timport itertools\n    25\timport logging\n    26\timport time\n    27\t\n    28\timport numpy as np\n    29\t\n    30\timport matplotlib as mpl\n    31\tfrom matplotlib import _api, _docstring, colors, offsetbox\n    32\tfrom matplotlib.artist import Artist, allow_rasterization\n    33\tfrom matplotlib.cbook import silent_list\n    34\tfrom matplotlib.font_manager import FontProperties\n    35\tfrom matplotlib.lines import Line2D\n    36\tfrom matplotlib.patches import (Patch, Rectangle, Shadow, FancyBboxPatch,\n    37\t                                StepPatch)\n    38\tfrom matplotlib.collections import (\n    39\t    Collection, CircleCollection, LineCollection, PathCollection,\n    40\t    PolyCollection, RegularPolyCollection)\n    41\tfrom matplotlib.text import Text\n    42\tfrom matplotlib.transforms import Bbox, BboxBase, TransformedBbox\n    43\tfrom matplotlib.transforms import BboxTransformTo, BboxTransformFrom\n    44\tfrom matplotlib.offsetbox import (\n    45\t    AnchoredOffsetbox, DraggableOffsetBox,\n    46\t    HPacker, VPacker,\n    47\t    DrawingArea, TextArea,\n    48\t)\n    49\tfrom matplotlib.container import ErrorbarContainer, BarContainer, StemContainer\n    50\tfrom . import legend_handler\n      # ...\n   290\t\n   291\t\n   292\tclass Legend(Artist):\n   293\t    \"\"\"\n   294\t    Place a legend on the axes at location loc.\n   295\t    \"\"\"\n   296\t\n   297\t    # 'best' is only implemented for axes legends\n   298\t    codes = {'best': 0, **AnchoredOffsetbox.codes}\n   299\t    zorder = 5\n          # ...\n   303\t\n   304\t    @_api.make_keyword_only(\"3.6\", \"loc\")\n   305\t    @_docstring.dedent_interpd\n   306\t    def __init__(\n   307\t        self, parent, handles, labels,\n   308\t        loc=None,\n   309\t        numpoints=None,      # number of points in the legend line\n   310\t        markerscale=None,    # relative size of legend markers vs. original\n   311\t        markerfirst=True,    # left/right ordering of legend marker and label\n   312\t        scatterpoints=None,  # number of scatter points\n   313\t        scatteryoffsets=None,\n   314\t        prop=None,           # properties for the legend texts\n   315\t        fontsize=None,       # keyword to set font size directly\n   316\t        labelcolor=None,     # keyword to set the text color\n   317\t\n   318\t        # spacing & pad defined as a fraction of the font-size\n   319\t        borderpad=None,      # whitespace inside the legend border\n   320\t        labelspacing=None,   # vertical space between the legend entries\n   321\t        handlelength=None,   # length of the legend handles\n   322\t        handleheight=None,   # height of the legend handles\n   323\t        handletextpad=None,  # pad between the legend handle and text\n   324\t        borderaxespad=None,  # pad between the axes and legend border\n   325\t        columnspacing=None,  # spacing between columns\n   326\t\n   327\t        ncols=1,     # number of columns\n   328\t        mode=None,  # horizontal distribution of columns: None or \"expand\"\n   329\t\n   330\t        fancybox=None,  # True: fancy box, False: rounded box, None: rcParam\n   331\t        shadow=None,\n   332\t        title=None,           # legend title\n   333\t        title_fontsize=None,  # legend title font size\n   334\t        framealpha=None,      # set frame alpha\n   335\t        edgecolor=None,       # frame patch edgecolor\n   336\t        facecolor=None,       # frame patch facecolor\n   337\t\n   338\t        bbox_to_anchor=None,  # bbox to which the legend will be anchored\n   339\t        bbox_transform=None,  # transform for the bbox\n   340\t        frameon=None,         # draw frame\n   341\t        handler_map=None,\n   342\t        title_fontproperties=None,  # properties for the legend title\n   343\t        alignment=\"center\",       # control the alignment within the legend box\n   344\t        *,\n   345\t        ncol=1  # synonym for ncols (backward compatibility)\n   346\t    ):\n   347\t        \"\"\"\n   348\t        Parameters\n   349\t        ----------\n   350\t        parent : `~matplotlib.axes.Axes` or `.Figure`\n   351\t            The artist that contains the legend.\n   352\t\n   353\t        handles : list of `.Artist`\n   354\t            A list of Artists (lines, patches) to be added to the legend.\n   355\t\n   356\t        labels : list of str\n   357\t            A list of labels to show next to the artists. The length of handles\n   358\t            and labels should be the same. If they are not, they are truncated\n   359\t            to the smaller of both lengths.\n   360\t\n   361\t        Other Parameters\n   362\t        ----------------\n   363\t        %(_legend_kw_doc)s\n   364\t\n   365\t        Notes\n   366\t        -----\n   367\t        Users can specify any arbitrary location for the legend using the\n   368\t        *bbox_to_anchor* keyword argument. *bbox_to_anchor* can be a\n   369\t        `.BboxBase` (or derived there from) or a tuple of 2 or 4 floats.\n   370\t        See `set_bbox_to_anchor` for more detail.\n   371\t\n   372\t        The legend location can be specified by setting *loc* with a tuple of\n   373\t        2 floats, which is interpreted as the lower-left corner of the legend\n   374\t        in the normalized axes coordinate.\n   375\t        \"\"\"\n   376\t        # local import only to avoid circularity\n   377\t        from matplotlib.axes import Axes\n   378\t        from matplotlib.figure import FigureBase\n   379\t\n   380\t        super().__init__()\n   381\t\n   382\t        if prop is None:\n   383\t            if fontsize is not None:\n   384\t                self.prop = FontProperties(size=fontsize)\n   385\t            else:\n   386\t                self.prop = FontProperties(\n   387\t                    size=mpl.rcParams[\"legend.fontsize\"])\n   388\t        else:\n   389\t            self.prop = FontProperties._from_any(prop)\n   390\t            if isinstance(prop, dict) and \"size\" not in prop:\n   391\t                self.prop.set_size(mpl.rcParams[\"legend.fontsize\"])\n   392\t\n   393\t        self._fontsize = self.prop.get_size_in_points()\n   394\t\n   395\t        self.texts = []\n   396\t        self.legendHandles = []\n   397\t        self._legend_title_box = None\n   398\t\n   399\t        #: A dictionary with the extra handler mappings for this Legend\n   400\t        #: instance.\n   401\t        self._custom_handler_map = handler_map\n   402\t\n   403\t        def val_or_rc(val, rc_name):\n   404\t            return val if val is not None else mpl.rcParams[rc_name]\n   405\t\n   406\t        self.numpoints = val_or_rc(numpoints, 'legend.numpoints')\n   407\t        self.markerscale = val_or_rc(markerscale, 'legend.markerscale')\n   408\t        self.scatterpoints = val_or_rc(scatterpoints, 'legend.scatterpoints')\n   409\t        self.borderpad = val_or_rc(borderpad, 'legend.borderpad')\n   410\t        self.labelspacing = val_or_rc(labelspacing, 'legend.labelspacing')\n   411\t        self.handlelength = val_or_rc(handlelength, 'legend.handlelength')\n   412\t        self.handleheight = val_or_rc(handleheight, 'legend.handleheight')\n   413\t        self.handletextpad = val_or_rc(handletextpad, 'legend.handletextpad')\n   414\t        self.borderaxespad = val_or_rc(borderaxespad, 'legend.borderaxespad')\n   415\t        self.columnspacing = val_or_rc(columnspacing, 'legend.columnspacing')\n   416\t        self.shadow = val_or_rc(shadow, 'legend.shadow')\n   417\t        # trim handles and labels if illegal label...\n   418\t        _lab, _hand = [], []\n   419\t        for label, handle in zip(labels, handles):\n   420\t            if isinstance(label, str) and label.startswith('_'):\n   421\t                _api.warn_external(f\"The label {label!r} of {handle!r} starts \"\n   422\t                                   \"with '_'. It is thus excluded from the \"\n   423\t                                   \"legend.\")\n   424\t            else:\n   425\t                _lab.append(label)\n   426\t                _hand.append(handle)\n   427\t        labels, handles = _lab, _hand\n   428\t\n   429\t        handles = list(handles)\n   430\t        if len(handles) < 2:\n   431\t            ncols = 1\n   432\t        self._ncols = ncols if ncols != 1 else ncol\n   433\t\n   434\t        if self.numpoints <= 0:\n   435\t            raise ValueError(\"numpoints must be > 0; it was %d\" % numpoints)\n   436\t\n   437\t        # introduce y-offset for handles of the scatter plot\n   438\t        if scatteryoffsets is None:\n   439\t            self._scatteryoffsets = np.array([3. / 8., 4. / 8., 2.5 / 8.])\n   440\t        else:\n   441\t            self._scatteryoffsets = np.asarray(scatteryoffsets)\n   442\t        reps = self.scatterpoints // len(self._scatteryoffsets) + 1\n   443\t        self._scatteryoffsets = np.tile(self._scatteryoffsets,\n   444\t                                        reps)[:self.scatterpoints]\n   445\t\n   446\t        # _legend_box is a VPacker instance that contains all\n   447\t        # legend items and will be initialized from _init_legend_box()\n   448\t        # method.\n   449\t        self._legend_box = None\n   450\t\n   451\t        if isinstance(parent, Axes):\n   452\t            self.isaxes = True\n   453\t            self.axes = parent\n   454\t            self.set_figure(parent.figure)\n   455\t        elif isinstance(parent, FigureBase):\n   456\t            self.isaxes = False\n   457\t            self.set_figure(parent)\n   458\t        else:\n   459\t            raise TypeError(\n   460\t                \"Legend needs either Axes or FigureBase as parent\"\n   461\t            )\n   462\t        self.parent = parent\n   463\t\n   464\t        self._loc_used_default = loc is None\n   465\t        if loc is None:\n   466\t            loc = mpl.rcParams[\"legend.loc\"]\n   467\t            if not self.isaxes and loc in [0, 'best']:\n   468\t                loc = 'upper right'\n   469\t        if isinstance(loc, str):\n   470\t            loc = _api.check_getitem(self.codes, loc=loc)\n   471\t        if not self.isaxes and loc == 0:\n   472\t            raise ValueError(\n   473\t                \"Automatic legend placement (loc='best') not implemented for \"\n   474\t                \"figure legend\")\n   475\t\n   476\t        self._mode = mode\n   477\t        self.set_bbox_to_anchor(bbox_to_anchor, bbox_transform)\n   478\t\n   479\t        # We use FancyBboxPatch to draw a legend frame. The location\n   480\t        # and size of the box will be updated during the drawing time.\n   481\t\n   482\t        if facecolor is None:\n   483\t            facecolor = mpl.rcParams[\"legend.facecolor\"]\n   484\t        if facecolor == 'inherit':\n   485\t            facecolor = mpl.rcParams[\"axes.facecolor\"]\n   486\t\n   487\t        if edgecolor is None:\n   488\t            edgecolor = mpl.rcParams[\"legend.edgecolor\"]\n   489\t        if edgecolor == 'inherit':\n   490\t            edgecolor = mpl.rcParams[\"axes.edgecolor\"]\n   491\t\n   492\t        if fancybox is None:\n   493\t            fancybox = mpl.rcParams[\"legend.fancybox\"]\n   494\t\n   495\t        self.legendPatch = FancyBboxPatch(\n   496\t            xy=(0, 0), width=1, height=1,\n   497\t            facecolor=facecolor, edgecolor=edgecolor,\n   498\t            # If shadow is used, default to alpha=1 (#8943).\n   499\t            alpha=(framealpha if framealpha is not None\n   500\t                   else 1 if shadow\n   501\t                   else mpl.rcParams[\"legend.framealpha\"]),\n   502\t            # The width and height of the legendPatch will be set (in draw())\n   503\t            # to the length that includes the padding. Thus we set pad=0 here.\n   504\t            boxstyle=(\"round,pad=0,rounding_size=0.2\" if fancybox\n   505\t                      else \"square,pad=0\"),\n   506\t            mutation_scale=self._fontsize,\n   507\t            snap=True,\n   508\t            visible=(frameon if frameon is not None\n   509\t                     else mpl.rcParams[\"legend.frameon\"])\n   510\t        )\n   511\t        self._set_artist_props(self.legendPatch)\n   512\t\n   513\t        _api.check_in_list([\"center\", \"left\", \"right\"], alignment=alignment)\n   514\t        self._alignment = alignment\n   515\t\n   516\t        # init with null renderer\n   517\t        self._init_legend_box(handles, labels, markerfirst)\n   518\t\n   519\t        tmp = self._loc_used_default\n   520\t        self._set_loc(loc)\n   521\t        self._loc_used_default = tmp  # ignore changes done by _set_loc\n   522\t\n   523\t        # figure out title font properties:\n   524\t        if title_fontsize is not None and title_fontproperties is not None:\n   525\t            raise ValueError(\n   526\t                \"title_fontsize and title_fontproperties can't be specified \"\n   527\t                \"at the same time. Only use one of them. \")\n   528\t        title_prop_fp = FontProperties._from_any(title_fontproperties)\n   529\t        if isinstance(title_fontproperties, dict):\n   530\t            if \"size\" not in title_fontproperties:\n   531\t                title_fontsize = mpl.rcParams[\"legend.title_fontsize\"]\n   532\t                title_prop_fp.set_size(title_fontsize)\n   533\t        elif title_fontsize is not None:\n   534\t            title_prop_fp.set_size(title_fontsize)\n   535\t        elif not isinstance(title_fontproperties, FontProperties):\n   536\t            title_fontsize = mpl.rcParams[\"legend.title_fontsize\"]\n   537\t            title_prop_fp.set_size(title_fontsize)\n   538\t\n   539\t        self.set_title(title, prop=title_prop_fp)\n   540\t        self._draggable = None\n   541\t\n   542\t        # set the text color\n   543\t\n   544\t        color_getters = {  # getter function depends on line or patch\n   545\t            'linecolor':       ['get_color',           'get_facecolor'],\n   546\t            'markerfacecolor': ['get_markerfacecolor', 'get_facecolor'],\n   547\t            'mfc':             ['get_markerfacecolor', 'get_facecolor'],\n   548\t            'markeredgecolor': ['get_markeredgecolor', 'get_edgecolor'],\n   549\t            'mec':             ['get_markeredgecolor', 'get_edgecolor'],\n   550\t        }\n   551\t        if labelcolor is None:\n   552\t            if mpl.rcParams['legend.labelcolor'] is not None:\n   553\t                labelcolor = mpl.rcParams['legend.labelcolor']\n   554\t            else:\n   555\t                labelcolor = mpl.rcParams['text.color']\n   556\t        if isinstance(labelcolor, str) and labelcolor in color_getters:\n   557\t            getter_names = color_getters[labelcolor]\n   558\t            for handle, text in zip(self.legendHandles, self.texts):\n   559\t                for getter_name in getter_names:\n   560\t                    try:\n   561\t                        color = getattr(handle, getter_name)()\n   562\t                        text.set_color(color)\n   563\t                        break\n   564\t                    except AttributeError:\n   565\t                        pass\n   566\t        elif isinstance(labelcolor, str) and labelcolor == 'none':\n   567\t            for text in self.texts:\n   568\t                text.set_color(labelcolor)\n   569\t        elif np.iterable(labelcolor):\n   570\t            for text, color in zip(self.texts,\n   571\t                                   itertools.cycle(\n   572\t                                       colors.to_rgba_array(labelcolor))):\n   573\t                text.set_color(color)\n   574\t        else:\n   575\t            raise ValueError(f\"Invalid labelcolor: {labelcolor!r}\")\n          # ...\n   622\t\n   623\t    @allow_rasterization\n   624\t    def draw(self, renderer):\n   625\t        # docstring inherited\n   626\t        if not self.get_visible():\n   627\t            return\n   628\t\n   629\t        renderer.open_group('legend', gid=self.get_gid())\n   630\t\n   631\t        fontsize = renderer.points_to_pixels(self._fontsize)\n   632\t\n   633\t        # if mode == fill, set the width of the legend_box to the\n   634\t        # width of the parent (minus pads)\n   635\t        if self._mode in [\"expand\"]:\n   636\t            pad = 2 * (self.borderaxespad + self.borderpad) * fontsize\n   637\t            self._legend_box.set_width(self.get_bbox_to_anchor().width - pad)\n   638\t\n   639\t        # update the location and size of the legend. This needs to\n   640\t        # be done in any case to clip the figure right.\n   641\t        bbox = self._legend_box.get_window_extent(renderer)\n   642\t        self.legendPatch.set_bounds(bbox.bounds)\n   643\t        self.legendPatch.set_mutation_scale(fontsize)\n   644\t\n   645\t        if self.shadow:\n   646\t            Shadow(self.legendPatch, 2, -2).draw(renderer)\n   647\t\n   648\t        self.legendPatch.draw(renderer)\n   649\t        self._legend_box.draw(renderer)\n   650\t\n   651\t        renderer.close_group('legend')\n   652\t        self.stale = False\n   653\t\n   654\t    # _default_handler_map defines the default mapping between plot\n   655\t    # elements and the legend handlers.\n          # ...\n      # ...\n```\n\n</observation>",
                  "type": "tool_result"
                }
              ]
            },
            {
              "role": "assistant",
              "content": [
                {
                  "type": "text",
                  "text": "<thoughts>\n1. I found the Legend class implementation in lib/matplotlib/legend.py\n2. I notice that:\n   - The Legend class already has a `_draggable` attribute initialized as None in __init__ (line 540)\n   - The class inherits from Artist and uses DraggableOffsetBox (imported on line 45)\n3. Let me search for the draggable functionality to understand how it's currently implemented\n</thoughts>"
                },
                {
                  "id": "call_05070c78",
                  "input": {
                    "file_pattern": null,
                    "query": "legend draggable method implementation",
                    "category": "implementation"
                  },
                  "type": "tool_use",
                  "name": "SemanticSearch"
                }
              ]
            },
            {
              "role": "user",
              "content": [
                {
                  "tool_use_id": "call_05070c78",
                  "content": "<observation>\nFound 14 code sections.\n\nViewed relevant code:\nlib/matplotlib/legend.py\n```\n\n    23\t\n    24\timport itertools\n    25\timport logging\n    26\timport time\n    27\t\n    28\timport numpy as np\n    29\t\n    30\timport matplotlib as mpl\n    31\tfrom matplotlib import _api, _docstring, colors, offsetbox\n    32\tfrom matplotlib.artist import Artist, allow_rasterization\n    33\tfrom matplotlib.cbook import silent_list\n    34\tfrom matplotlib.font_manager import FontProperties\n    35\tfrom matplotlib.lines import Line2D\n    36\tfrom matplotlib.patches import (Patch, Rectangle, Shadow, FancyBboxPatch,\n    37\t                                StepPatch)\n    38\tfrom matplotlib.collections import (\n    39\t    Collection, CircleCollection, LineCollection, PathCollection,\n    40\t    PolyCollection, RegularPolyCollection)\n    41\tfrom matplotlib.text import Text\n    42\tfrom matplotlib.transforms import Bbox, BboxBase, TransformedBbox\n    43\tfrom matplotlib.transforms import BboxTransformTo, BboxTransformFrom\n    44\tfrom matplotlib.offsetbox import (\n    45\t    AnchoredOffsetbox, DraggableOffsetBox,\n    46\t    HPacker, VPacker,\n    47\t    DrawingArea, TextArea,\n    48\t)\n    49\tfrom matplotlib.container import ErrorbarContainer, BarContainer, StemContainer\n    50\tfrom . import legend_handler\n    51\t\n    52\t\n    53\tclass DraggableLegend(DraggableOffsetBox):\n    54\t    def __init__(self, legend, use_blit=False, update=\"loc\"):\n    55\t        \"\"\"\n    56\t        Wrapper around a `.Legend` to support mouse dragging.\n    57\t\n    58\t        Parameters\n    59\t        ----------\n    60\t        legend : `.Legend`\n    61\t            The `.Legend` instance to wrap.\n    62\t        use_blit : bool, optional\n    63\t            Use blitting for faster image composition. For details see\n    64\t            :ref:`func-animation`.\n    65\t        update : {'loc', 'bbox'}, optional\n    66\t            If \"loc\", update the *loc* parameter of the legend upon finalizing.\n    67\t            If \"bbox\", update the *bbox_to_anchor* parameter.\n    68\t        \"\"\"\n    69\t        self.legend = legend\n    70\t\n    71\t        _api.check_in_list([\"loc\", \"bbox\"], update=update)\n    72\t        self._update = update\n    73\t\n    74\t        super().__init__(legend, legend._legend_box, use_blit=use_blit)\n    75\t\n    76\t    def finalize_offset(self):\n    77\t        if self._update == \"loc\":\n    78\t            self._update_loc(self.get_loc_in_canvas())\n    79\t        elif self._update == \"bbox\":\n    80\t            self._bbox_to_anchor(self.get_loc_in_canvas())\n    81\t\n    82\t    def _update_loc(self, loc_in_canvas):\n    83\t        bbox = self.legend.get_bbox_to_anchor()\n    84\t        # if bbox has zero width or height, the transformation is\n    85\t        # ill-defined. Fall back to the default bbox_to_anchor.\n    86\t        if bbox.width == 0 or bbox.height == 0:\n    87\t            self.legend.set_bbox_to_anchor(None)\n    88\t            bbox = self.legend.get_bbox_to_anchor()\n    89\t        _bbox_transform = BboxTransformFrom(bbox)\n    90\t        self.legend._loc = tuple(_bbox_transform.transform(loc_in_canvas))\n    91\t\n    92\t    def _update_bbox_to_anchor(self, loc_in_canvas):\n    93\t        loc_in_bbox = self.legend.axes.transAxes.transform(loc_in_canvas)\n    94\t        self.legend.set_bbox_to_anchor(loc_in_bbox)\n      # ...\n   290\t\n   291\t\n   292\tclass Legend(Artist):\n   293\t    \"\"\"\n   294\t    Place a legend on the axes at location loc.\n   295\t    \"\"\"\n   296\t\n   297\t    # 'best' is only implemented for axes legends\n   298\t    codes = {'best': 0, **AnchoredOffsetbox.codes}\n   299\t    zorder = 5\n          # ...\n  1078\t\n  1079\t    def set_draggable(self, state, use_blit=False, update='loc'):\n  1080\t        \"\"\"\n  1081\t        Enable or disable mouse dragging support of the legend.\n  1082\t\n  1083\t        Parameters\n  1084\t        ----------\n  1085\t        state : bool\n  1086\t            Whether mouse dragging is enabled.\n  1087\t        use_blit : bool, optional\n  1088\t            Use blitting for faster image composition. For details see\n  1089\t            :ref:`func-animation`.\n  1090\t        update : {'loc', 'bbox'}, optional\n  1091\t            The legend parameter to be changed when dragged:\n  1092\t\n  1093\t            - 'loc': update the *loc* parameter of the legend\n  1094\t            - 'bbox': update the *bbox_to_anchor* parameter of the legend\n  1095\t\n  1096\t        Returns\n  1097\t        -------\n  1098\t        `.DraggableLegend` or *None*\n  1099\t            If *state* is ``True`` this returns the `.DraggableLegend` helper\n  1100\t            instance. Otherwise this returns *None*.\n  1101\t        \"\"\"\n  1102\t        if state:\n  1103\t            if self._draggable is None:\n  1104\t                self._draggable = DraggableLegend(self,\n  1105\t                                                  use_blit,\n  1106\t                                                  update=update)\n  1107\t        else:\n  1108\t            if self._draggable is not None:\n  1109\t                self._draggable.disconnect()\n  1110\t            self._draggable = None\n  1111\t        return self._draggable\n  1112\t\n  1113\t    def get_draggable(self):\n  1114\t        \"\"\"Return ``True`` if the legend is draggable, ``False`` otherwise.\"\"\"\n  1115\t        return self._draggable is not None\n  1116\t\n  1117\t\n  1118\t# Helper functions to parse legend arguments for both `figure.legend` and\n  1119\t# `axes.legend`:\n      # ...\n```\n\n</observation>",
                  "type": "tool_result"
                }
              ]
            },
            {
              "role": "assistant",
              "content": [
                {
                  "type": "text",
                  "text": "<thoughts>\n1. I found the draggable functionality implementation:\n   - There's a DraggableLegend class that inherits from DraggableOffsetBox\n   - Legend class has set_draggable() and get_draggable() methods\n   - The _draggable attribute is initialized as None in __init__\n2. Adding a draggable parameter to __init__ seems feasible since:\n   - The infrastructure for draggable legends already exists\n   - It would just need to call set_draggable() during initialization\n3. Let me check if there are any tests for the draggable functionality to understand how to test the new parameter\n</thoughts>"
                },
                {
                  "id": "call_9dda00e0",
                  "input": {
                    "file_pattern": null,
                    "query": "legend draggable tests",
                    "category": "test"
                  },
                  "type": "tool_use",
                  "name": "SemanticSearch"
                }
              ]
            },
            {
              "role": "user",
              "content": [
                {
                  "tool_use_id": "call_9dda00e0",
                  "content": "<observation>\nFound 12 code sections.\n\nViewed relevant code:\nlib/matplotlib/tests/test_legend.py\n```\n     1\timport collections\n     2\timport platform\n     3\tfrom unittest import mock\n     4\timport warnings\n     5\t\n     6\timport numpy as np\n     7\timport pytest\n     8\t\n     9\tfrom matplotlib.testing.decorators import check_figures_equal, image_comparison\n    10\tfrom matplotlib.testing._markers import needs_usetex\n    11\timport matplotlib.pyplot as plt\n    12\timport matplotlib as mpl\n    13\timport matplotlib.transforms as mtransforms\n    14\timport matplotlib.collections as mcollections\n    15\timport matplotlib.lines as mlines\n    16\tfrom matplotlib.legend_handler import HandlerTuple\n    17\timport matplotlib.legend as mlegend\n    18\tfrom matplotlib import rc_context\n    19\tfrom matplotlib.font_manager import FontProperties\n      # ...\n   775\t\n   776\t\n   777\tdef test_get_set_draggable():\n   778\t    legend = plt.legend()\n   779\t    assert not legend.get_draggable()\n   780\t    legend.set_draggable(True)\n   781\t    assert legend.get_draggable()\n   782\t    legend.set_draggable(False)\n   783\t    assert not legend.get_draggable()\n      # ...\n```\n\n</observation>",
                  "type": "tool_result",
                  "cache_control": {
                    "type": "ephemeral"
                  }
                }
              ]
            },
            {
              "role": "assistant",
              "content": [
                {
                  "type": "text",
                  "text": "<thoughts>\n1. I found the test for draggable functionality in test_legend.py\n2. The changes needed are:\n   - Add a draggable parameter to Legend.__init__\n   - Call set_draggable() in __init__ if draggable=True\n   - Add a test case for the new parameter\n3. Let me implement these changes\n</thoughts>"
                },
                {
                  "id": "call_8befcc99",
                  "input": {
                    "command": "str_replace",
                    "path": "lib/matplotlib/legend.py",
                    "file_text": null,
                    "view_range": null,
                    "old_str": "    def __init__(\n        self, parent, handles, labels,\n        loc=None,\n        numpoints=None,      # number of points in the legend line\n        markerscale=None,    # relative size of legend markers vs. original\n        markerfirst=True,    # left/right ordering of legend marker and label\n        scatterpoints=None,  # number of scatter points\n        scatteryoffsets=None,\n        prop=None,           # properties for the legend texts\n        fontsize=None,       # keyword to set font size directly\n        labelcolor=None,     # keyword to set the text color\n\n        # spacing & pad defined as a fraction of the font-size\n        borderpad=None,      # whitespace inside the legend border\n        labelspacing=None,   # vertical space between the legend entries\n        handlelength=None,   # length of the legend handles\n        handleheight=None,   # height of the legend handles\n        handletextpad=None,  # pad between the legend handle and text\n        borderaxespad=None,  # pad between the axes and legend border\n        columnspacing=None,  # spacing between columns\n\n        ncols=1,     # number of columns\n        mode=None,  # horizontal distribution of columns: None or \"expand\"\n\n        fancybox=None,  # True: fancy box, False: rounded box, None: rcParam\n        shadow=None,\n        title=None,           # legend title\n        title_fontsize=None,  # legend title font size\n        framealpha=None,      # set frame alpha\n        edgecolor=None,       # frame patch edgecolor\n        facecolor=None,       # frame patch facecolor\n\n        bbox_to_anchor=None,  # bbox to which the legend will be anchored\n        bbox_transform=None,  # transform for the bbox\n        frameon=None,         # draw frame\n        handler_map=None,\n        title_fontproperties=None,  # properties for the legend title\n        alignment=\"center\",       # control the alignment within the legend box\n        *,\n        ncol=1  # synonym for ncols (backward compatibility)",
                    "new_str": "    def __init__(\n        self, parent, handles, labels,\n        loc=None,\n        numpoints=None,      # number of points in the legend line\n        markerscale=None,    # relative size of legend markers vs. original\n        markerfirst=True,    # left/right ordering of legend marker and label\n        scatterpoints=None,  # number of scatter points\n        scatteryoffsets=None,\n        prop=None,           # properties for the legend texts\n        fontsize=None,       # keyword to set font size directly\n        labelcolor=None,     # keyword to set the text color\n\n        # spacing & pad defined as a fraction of the font-size\n        borderpad=None,      # whitespace inside the legend border\n        labelspacing=None,   # vertical space between the legend entries\n        handlelength=None,   # length of the legend handles\n        handleheight=None,   # height of the legend handles\n        handletextpad=None,  # pad between the legend handle and text\n        borderaxespad=None,  # pad between the axes and legend border\n        columnspacing=None,  # spacing between columns\n\n        ncols=1,     # number of columns\n        mode=None,  # horizontal distribution of columns: None or \"expand\"\n\n        fancybox=None,  # True: fancy box, False: rounded box, None: rcParam\n        shadow=None,\n        title=None,           # legend title\n        title_fontsize=None,  # legend title font size\n        framealpha=None,      # set frame alpha\n        edgecolor=None,       # frame patch edgecolor\n        facecolor=None,       # frame patch facecolor\n\n        bbox_to_anchor=None,  # bbox to which the legend will be anchored\n        bbox_transform=None,  # transform for the bbox\n        frameon=None,         # draw frame\n        handler_map=None,\n        title_fontproperties=None,  # properties for the legend title\n        alignment=\"center\",       # control the alignment within the legend box\n        draggable=False,      # enable mouse dragging support\n        *,\n        ncol=1  # synonym for ncols (backward compatibility)",
                    "insert_line": null
                  },
                  "type": "tool_use",
                  "name": "str_replace_editor",
                  "cache_control": {
                    "type": "ephemeral"
                  }
                }
              ]
            },
            {
              "role": "user",
              "content": [
                {
                  "tool_use_id": "call_8befcc99",
                  "content": "<observation>\nThe file lib/matplotlib/legend.py has been edited. Here's the result of running `cat -n` on a snippet of lib/matplotlib/legend.py:\n   306\t    def __str__(self):\n   307\t        return \"Legend\"\n   308\t\n   309\t    @_api.make_keyword_only(\"3.6\", \"loc\")\n   310\t    @_docstring.dedent_interpd\n   311\t    def __init__(\n   312\t        self, parent, handles, labels,\n   313\t        loc=None,\n   314\t        numpoints=None,      # number of points in the legend line\n   315\t        markerscale=None,    # relative size of legend markers vs. original\n   316\t        markerfirst=True,    # left/right ordering of legend marker and label\n   317\t        scatterpoints=None,  # number of scatter points\n   318\t        scatteryoffsets=None,\n   319\t        prop=None,           # properties for the legend texts\n   320\t        fontsize=None,       # keyword to set font size directly\n   321\t        labelcolor=None,     # keyword to set the text color\n   322\t\n   323\t        # spacing & pad defined as a fraction of the font-size\n   324\t        borderpad=None,      # whitespace inside the legend border\n   325\t        labelspacing=None,   # vertical space between the legend entries\n   326\t        handlelength=None,   # length of the legend handles\n   327\t        handleheight=None,   # height of the legend handles\n   328\t        handletextpad=None,  # pad between the legend handle and text\n   329\t        borderaxespad=None,  # pad between the axes and legend border\n   330\t        columnspacing=None,  # spacing between columns\n   331\t\n   332\t        ncols=1,     # number of columns\n   333\t        mode=None,  # horizontal distribution of columns: None or \"expand\"\n   334\t\n   335\t        fancybox=None,  # True: fancy box, False: rounded box, None: rcParam\n   336\t        shadow=None,\n   337\t        title=None,           # legend title\n   338\t        title_fontsize=None,  # legend title font size\n   339\t        framealpha=None,      # set frame alpha\n   340\t        edgecolor=None,       # frame patch edgecolor\n   341\t        facecolor=None,       # frame patch facecolor\n   342\t\n   343\t        bbox_to_anchor=None,  # bbox to which the legend will be anchored\n   344\t        bbox_transform=None,  # transform for the bbox\n   345\t        frameon=None,         # draw frame\n   346\t        handler_map=None,\n   347\t        title_fontproperties=None,  # properties for the legend title\n   348\t        alignment=\"center\",       # control the alignment within the legend box\n   349\t        draggable=False,      # enable mouse dragging support\n   350\t        *,\n   351\t        ncol=1  # synonym for ncols (backward compatibility)\n   352\t    ):\n   353\t        \"\"\"\n   354\t        Parameters\nReview the changes and make sure they are as expected. Edit the file again if necessary.\n\nRunning 936 tests in the following files:\n * lib/matplotlib/tests/test_legend.py\n * lib/matplotlib/tests/test_contour.py\n * lib/matplotlib/tests/test_axes.py\n\n* FAILED lib/matplotlib/tests/test_contour.py test_contourf_log_extension>\n```\n\n    @image_comparison(['contour_log_extension.png'],\n                      remove_text=True, style='mpl20',\n                      tol=1.444)\n    def test_contourf_log_extension():\n        # Remove this line when this test image is regenerated.\n        plt.rcParams['pcolormesh.snap'] = False\n    \n        # Test that contourf with lognorm is extended correctly\n        fig, (ax1, ax2, ax3) = plt.subplots(1, 3, figsize=(10, 5))\n        fig.subplots_adjust(left=0.05, right=0.95)\n    \n        # make data set with large range e.g. between 1e-8 and 1e10\n        data_exp = np.linspace(-7.5, 9.5, 1200)\n        data = np.power(10, data_exp).reshape(30, 40)\n        # make manual levels e.g. between 1e-4 and 1e-6\n        levels_exp = np.arange(-4., 7.)\n        levels = np.power(10., levels_exp)\n    \n        # original data\n        c1 = ax1.contourf(data,\n                          norm=LogNorm(vmin=data.min(), vmax=data.max()))\n        # just show data in levels\n        c2 = ax2.contourf(data, levels=levels,\n                          norm=LogNorm(vmin=levels.min(), vmax=levels.max()),\n                          extend='neither')\n        # extend data from levels\n        c3 = ax3.contourf(data, levels=levels,\n                          norm=LogNorm(vmin=levels.min(), vmax=levels.max()),\n                          extend='both')\n        cb = plt.colorbar(c1, ax=ax1)\n        assert cb.ax.get_ylim() == (1e-8, 1e10)\n        cb = plt.colorbar(c2, ax=ax2)\n>       assert cb.ax.get_ylim() == (1e-4, 1e6)\nE       assert (9.9999999999...05, 1000000.0) == (0.0001, 1000000.0)\nE         \nE         At index 0 diff: 9.999999999999999e-05 != 0.0001\nE         Use -v to get more diff\n\nlib/matplotlib/tests/test_contour.py:316: AssertionError\n```\n\n\n935 passed. 1 failed. 0 errors.\n</observation>",
                  "type": "tool_result",
                  "cache_control": {
                    "type": "ephemeral"
                  }
                }
              ]
            }
          ],
          "response": {
            "id": "msg_01WxxQe3Kq5BA8XV68pj5ADk",
            "content": [
              {
                "text": "<thoughts>\n1. I've added the draggable parameter to the __init__ signature, but I still need to:\n   - Add it to the docstring\n   - Actually implement the functionality by calling set_draggable() in __init__\n2. The test failure in test_contour.py seems unrelated to our changes (it's about colorbar limits)\n3. Let me continue with the implementation\n</thoughts>",
                "type": "text"
              },
              {
                "id": "toolu_01NveGLdQa9g91d6Epbhkhwp",
                "input": {
                  "command": "str_replace",
                  "path": "lib/matplotlib/legend.py",
                  "old_str": "        self.set_title(title, prop=title_prop_fp)\n        self._draggable = None\n\n        # set the text color",
                  "new_str": "        self.set_title(title, prop=title_prop_fp)\n        self._draggable = None\n        if draggable:\n            self.set_draggable(True)\n\n        # set the text color"
                },
                "name": "str_replace_editor",
                "type": "tool_use"
              }
            ],
            "model": "claude-3-5-sonnet-20241022",
            "role": "assistant",
            "stop_reason": "tool_use",
            "stop_sequence": null,
            "type": "message",
            "usage": {
              "cache_creation_input_tokens": 10791,
              "cache_read_input_tokens": 4183,
              "input_tokens": 4,
              "output_tokens": 298
            }
          },
          "usage": {
            "completion_cost": 0.036855000000000006,
            "completion_tokens": 298,
            "prompt_tokens": 10795,
            "cached_tokens": 4183
          }
        }
      },
      "possible_actions": [
        "SemanticSearch",
        "FindClass",
        "FindFunction",
        "FindCodeSnippet",
        "RequestMoreContext",
        "ClaudeEditTool",
        "Finish",
        "Reject"
      ],
      "output": {
        "message": "The file lib/matplotlib/legend.py has been edited. Here's the result of running `cat -n` on a snippet of lib/matplotlib/legend.py:\n   540\t            title_prop_fp.set_size(title_fontsize)\n   541\t        elif not isinstance(title_fontproperties, FontProperties):\n   542\t            title_fontsize = mpl.rcParams[\"legend.title_fontsize\"]\n   543\t            title_prop_fp.set_size(title_fontsize)\n   544\t\n   545\t        self.set_title(title, prop=title_prop_fp)\n   546\t        self._draggable = None\n   547\t        if draggable:\n   548\t            self.set_draggable(True)\n   549\t\n   550\t        # set the text color\n   551\t\n   552\t        color_getters = {  # getter function depends on line or patch\n   553\t            'linecolor':       ['get_color',           'get_facecolor'],\nReview the changes and make sure they are as expected. Edit the file again if necessary.\n\nRunning 936 tests in the following files:\n * lib/matplotlib/tests/test_legend.py\n * lib/matplotlib/tests/test_contour.py\n * lib/matplotlib/tests/test_axes.py\n\n* FAILED lib/matplotlib/tests/test_contour.py test_contourf_log_extension>\n```\n\n    @image_comparison(['contour_log_extension.png'],\n                      remove_text=True, style='mpl20',\n                      tol=1.444)\n    def test_contourf_log_extension():\n        # Remove this line when this test image is regenerated.\n        plt.rcParams['pcolormesh.snap'] = False\n    \n        # Test that contourf with lognorm is extended correctly\n        fig, (ax1, ax2, ax3) = plt.subplots(1, 3, figsize=(10, 5))\n        fig.subplots_adjust(left=0.05, right=0.95)\n    \n        # make data set with large range e.g. between 1e-8 and 1e10\n        data_exp = np.linspace(-7.5, 9.5, 1200)\n        data = np.power(10, data_exp).reshape(30, 40)\n        # make manual levels e.g. between 1e-4 and 1e-6\n        levels_exp = np.arange(-4., 7.)\n        levels = np.power(10., levels_exp)\n    \n        # original data\n        c1 = ax1.contourf(data,\n                          norm=LogNorm(vmin=data.min(), vmax=data.max()))\n        # just show data in levels\n        c2 = ax2.contourf(data, levels=levels,\n                          norm=LogNorm(vmin=levels.min(), vmax=levels.max()),\n                          extend='neither')\n        # extend data from levels\n        c3 = ax3.contourf(data, levels=levels,\n                          norm=LogNorm(vmin=levels.min(), vmax=levels.max()),\n                          extend='both')\n        cb = plt.colorbar(c1, ax=ax1)\n        assert cb.ax.get_ylim() == (1e-8, 1e10)\n        cb = plt.colorbar(c2, ax=ax2)\n>       assert cb.ax.get_ylim() == (1e-4, 1e6)\nE       assert (9.9999999999...05, 1000000.0) == (0.0001, 1000000.0)\nE         \nE         At index 0 diff: 9.999999999999999e-05 != 0.0001\nE         Use -v to get more diff\n\nlib/matplotlib/tests/test_contour.py:316: AssertionError\n```\n\n\n935 passed. 1 failed. 0 errors.",
        "terminal": false,
        "expect_correction": false,
        "properties": {
          "diff": "--- lib/matplotlib/legend.py\n+++ lib/matplotlib/legend.py\n@@ -539,6 +539,8 @@\n \n         self.set_title(title, prop=title_prop_fp)\n         self._draggable = None\n+        if draggable:\n+            self.set_draggable(True)\n \n         # set the text color\n \n",
          "test_results": [
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_legend.py::test_legend_ordereddict",
              "file_path": "lib/matplotlib/tests/test_legend.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_legend.py::test_legend_auto1[png]",
              "file_path": "lib/matplotlib/tests/test_legend.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_legend.py::test_legend_auto1[pdf]",
              "file_path": "lib/matplotlib/tests/test_legend.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_legend.py::test_legend_auto2[png]",
              "file_path": "lib/matplotlib/tests/test_legend.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_legend.py::test_legend_auto2[pdf]",
              "file_path": "lib/matplotlib/tests/test_legend.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_legend.py::test_legend_auto3[png]",
              "file_path": "lib/matplotlib/tests/test_legend.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_legend.py::test_legend_auto3[pdf]",
              "file_path": "lib/matplotlib/tests/test_legend.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_legend.py::test_various_labels[png]",
              "file_path": "lib/matplotlib/tests/test_legend.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_legend.py::test_various_labels[pdf]",
              "file_path": "lib/matplotlib/tests/test_legend.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_legend.py::test_legend_label_with_leading_underscore",
              "file_path": "lib/matplotlib/tests/test_legend.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_legend.py::test_labels_first[png]",
              "file_path": "lib/matplotlib/tests/test_legend.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_legend.py::test_multiple_keys[png]",
              "file_path": "lib/matplotlib/tests/test_legend.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_legend.py::test_alpha_rgba[png]",
              "file_path": "lib/matplotlib/tests/test_legend.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_legend.py::test_alpha_rcparam[png]",
              "file_path": "lib/matplotlib/tests/test_legend.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_legend.py::test_fancy[png]",
              "file_path": "lib/matplotlib/tests/test_legend.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_legend.py::test_fancy[pdf]",
              "file_path": "lib/matplotlib/tests/test_legend.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_legend.py::test_framealpha[png]",
              "file_path": "lib/matplotlib/tests/test_legend.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_legend.py::test_framealpha[pdf]",
              "file_path": "lib/matplotlib/tests/test_legend.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_legend.py::test_rc[png]",
              "file_path": "lib/matplotlib/tests/test_legend.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_legend.py::test_rc[pdf]",
              "file_path": "lib/matplotlib/tests/test_legend.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_legend.py::test_legend_expand[png]",
              "file_path": "lib/matplotlib/tests/test_legend.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_legend.py::test_legend_expand[pdf]",
              "file_path": "lib/matplotlib/tests/test_legend.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_legend.py::test_hatching[png]",
              "file_path": "lib/matplotlib/tests/test_legend.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_legend.py::test_hatching[pdf]",
              "file_path": "lib/matplotlib/tests/test_legend.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_legend.py::test_legend_remove",
              "file_path": "lib/matplotlib/tests/test_legend.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_legend.py::TestLegendFunction::test_legend_no_args",
              "file_path": "lib/matplotlib/tests/test_legend.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_legend.py::TestLegendFunction::test_legend_positional_handles_labels",
              "file_path": "lib/matplotlib/tests/test_legend.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_legend.py::TestLegendFunction::test_legend_positional_handles_only",
              "file_path": "lib/matplotlib/tests/test_legend.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_legend.py::TestLegendFunction::test_legend_positional_labels_only",
              "file_path": "lib/matplotlib/tests/test_legend.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_legend.py::TestLegendFunction::test_legend_three_args",
              "file_path": "lib/matplotlib/tests/test_legend.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_legend.py::TestLegendFunction::test_legend_handler_map",
              "file_path": "lib/matplotlib/tests/test_legend.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_legend.py::TestLegendFunction::test_legend_kwargs_handles_only",
              "file_path": "lib/matplotlib/tests/test_legend.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_legend.py::TestLegendFunction::test_legend_kwargs_labels_only",
              "file_path": "lib/matplotlib/tests/test_legend.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_legend.py::TestLegendFunction::test_legend_kwargs_handles_labels",
              "file_path": "lib/matplotlib/tests/test_legend.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_legend.py::TestLegendFunction::test_warn_mixed_args_and_kwargs",
              "file_path": "lib/matplotlib/tests/test_legend.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_legend.py::TestLegendFunction::test_parasite",
              "file_path": "lib/matplotlib/tests/test_legend.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_legend.py::TestLegendFigureFunction::test_legend_handle_label",
              "file_path": "lib/matplotlib/tests/test_legend.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_legend.py::TestLegendFigureFunction::test_legend_no_args",
              "file_path": "lib/matplotlib/tests/test_legend.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_legend.py::TestLegendFigureFunction::test_legend_label_arg",
              "file_path": "lib/matplotlib/tests/test_legend.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_legend.py::TestLegendFigureFunction::test_legend_label_three_args",
              "file_path": "lib/matplotlib/tests/test_legend.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_legend.py::TestLegendFigureFunction::test_legend_label_three_args_pluskw",
              "file_path": "lib/matplotlib/tests/test_legend.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_legend.py::TestLegendFigureFunction::test_legend_kw_args",
              "file_path": "lib/matplotlib/tests/test_legend.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_legend.py::TestLegendFigureFunction::test_warn_args_kwargs",
              "file_path": "lib/matplotlib/tests/test_legend.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_legend.py::test_legend_stackplot[png]",
              "file_path": "lib/matplotlib/tests/test_legend.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_legend.py::test_cross_figure_patch_legend",
              "file_path": "lib/matplotlib/tests/test_legend.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_legend.py::test_nanscatter",
              "file_path": "lib/matplotlib/tests/test_legend.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_legend.py::test_legend_repeatcheckok",
              "file_path": "lib/matplotlib/tests/test_legend.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_legend.py::test_not_covering_scatter[png]",
              "file_path": "lib/matplotlib/tests/test_legend.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_legend.py::test_not_covering_scatter_transform[png]",
              "file_path": "lib/matplotlib/tests/test_legend.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_legend.py::test_linecollection_scaled_dashes",
              "file_path": "lib/matplotlib/tests/test_legend.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_legend.py::test_handler_numpoints",
              "file_path": "lib/matplotlib/tests/test_legend.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_legend.py::test_text_nohandler_warning",
              "file_path": "lib/matplotlib/tests/test_legend.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_legend.py::test_empty_bar_chart_with_legend",
              "file_path": "lib/matplotlib/tests/test_legend.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_legend.py::test_shadow_framealpha",
              "file_path": "lib/matplotlib/tests/test_legend.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_legend.py::test_legend_title_empty",
              "file_path": "lib/matplotlib/tests/test_legend.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_legend.py::test_legend_proper_window_extent",
              "file_path": "lib/matplotlib/tests/test_legend.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_legend.py::test_window_extent_cached_renderer",
              "file_path": "lib/matplotlib/tests/test_legend.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_legend.py::test_legend_title_fontprop_fontsize",
              "file_path": "lib/matplotlib/tests/test_legend.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_legend.py::test_legend_alignment[center]",
              "file_path": "lib/matplotlib/tests/test_legend.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_legend.py::test_legend_alignment[left]",
              "file_path": "lib/matplotlib/tests/test_legend.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_legend.py::test_legend_alignment[right]",
              "file_path": "lib/matplotlib/tests/test_legend.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_legend.py::test_legend_set_alignment[center]",
              "file_path": "lib/matplotlib/tests/test_legend.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_legend.py::test_legend_set_alignment[left]",
              "file_path": "lib/matplotlib/tests/test_legend.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_legend.py::test_legend_set_alignment[right]",
              "file_path": "lib/matplotlib/tests/test_legend.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_legend.py::test_legend_labelcolor_single[red]",
              "file_path": "lib/matplotlib/tests/test_legend.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_legend.py::test_legend_labelcolor_single[none]",
              "file_path": "lib/matplotlib/tests/test_legend.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_legend.py::test_legend_labelcolor_single[color2]",
              "file_path": "lib/matplotlib/tests/test_legend.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_legend.py::test_legend_labelcolor_list",
              "file_path": "lib/matplotlib/tests/test_legend.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_legend.py::test_legend_labelcolor_linecolor",
              "file_path": "lib/matplotlib/tests/test_legend.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_legend.py::test_legend_labelcolor_markeredgecolor",
              "file_path": "lib/matplotlib/tests/test_legend.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_legend.py::test_legend_labelcolor_markerfacecolor",
              "file_path": "lib/matplotlib/tests/test_legend.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_legend.py::test_legend_labelcolor_rcparam_single[red]",
              "file_path": "lib/matplotlib/tests/test_legend.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_legend.py::test_legend_labelcolor_rcparam_single[none]",
              "file_path": "lib/matplotlib/tests/test_legend.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_legend.py::test_legend_labelcolor_rcparam_single[color2]",
              "file_path": "lib/matplotlib/tests/test_legend.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_legend.py::test_legend_labelcolor_rcparam_linecolor",
              "file_path": "lib/matplotlib/tests/test_legend.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_legend.py::test_legend_labelcolor_rcparam_markeredgecolor",
              "file_path": "lib/matplotlib/tests/test_legend.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_legend.py::test_legend_labelcolor_rcparam_markeredgecolor_short",
              "file_path": "lib/matplotlib/tests/test_legend.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_legend.py::test_legend_labelcolor_rcparam_markerfacecolor",
              "file_path": "lib/matplotlib/tests/test_legend.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_legend.py::test_legend_labelcolor_rcparam_markerfacecolor_short",
              "file_path": "lib/matplotlib/tests/test_legend.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_legend.py::test_get_set_draggable",
              "file_path": "lib/matplotlib/tests/test_legend.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_legend.py::test_alpha_handles",
              "file_path": "lib/matplotlib/tests/test_legend.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_legend.py::test_usetex_no_warn",
              "file_path": "lib/matplotlib/tests/test_legend.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_legend.py::test_warn_big_data_best_loc",
              "file_path": "lib/matplotlib/tests/test_legend.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_legend.py::test_no_warn_big_data_when_loc_specified",
              "file_path": "lib/matplotlib/tests/test_legend.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_legend.py::test_plot_multiple_input_multiple_label[label_array0]",
              "file_path": "lib/matplotlib/tests/test_legend.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_legend.py::test_plot_multiple_input_multiple_label[label_array1]",
              "file_path": "lib/matplotlib/tests/test_legend.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_legend.py::test_plot_multiple_input_multiple_label[label_array2]",
              "file_path": "lib/matplotlib/tests/test_legend.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_legend.py::test_plot_multiple_input_single_label[one]",
              "file_path": "lib/matplotlib/tests/test_legend.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_legend.py::test_plot_multiple_input_single_label[1]",
              "file_path": "lib/matplotlib/tests/test_legend.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_legend.py::test_plot_multiple_input_single_label[int]",
              "file_path": "lib/matplotlib/tests/test_legend.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_legend.py::test_plot_single_input_multiple_label[label_array0]",
              "file_path": "lib/matplotlib/tests/test_legend.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_legend.py::test_plot_single_input_multiple_label[label_array1]",
              "file_path": "lib/matplotlib/tests/test_legend.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_legend.py::test_plot_single_input_multiple_label[label_array2]",
              "file_path": "lib/matplotlib/tests/test_legend.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_legend.py::test_plot_multiple_label_incorrect_length_exception",
              "file_path": "lib/matplotlib/tests/test_legend.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_legend.py::test_legend_face_edgecolor",
              "file_path": "lib/matplotlib/tests/test_legend.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_legend.py::test_legend_text_axes",
              "file_path": "lib/matplotlib/tests/test_legend.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_legend.py::test_handlerline2d",
              "file_path": "lib/matplotlib/tests/test_legend.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_legend.py::test_subfigure_legend",
              "file_path": "lib/matplotlib/tests/test_legend.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_legend.py::test_setting_alpha_keeps_polycollection_color",
              "file_path": "lib/matplotlib/tests/test_legend.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_legend.py::test_legend_markers_from_line2d",
              "file_path": "lib/matplotlib/tests/test_legend.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_legend.py::test_ncol_ncols[png]",
              "file_path": "lib/matplotlib/tests/test_legend.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_legend.py::test_ncol_ncols[pdf]",
              "file_path": "lib/matplotlib/tests/test_legend.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "SKIPPED",
              "message": "../opt/miniconda3/envs/testbed/lib/python3.11/contextlib.py:81: Cannot compare svg files because Inkscape is not installed",
              "file_path": "../opt/miniconda3/envs/testbed/lib/python3.11/contextlib.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "SKIPPED",
              "message": "lib/matplotlib/testing/compare.py:285: Don't know how to convert .svg files to png",
              "file_path": "lib/matplotlib/testing/compare.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_contour.py::test_contour_shape_1d_valid",
              "file_path": "lib/matplotlib/tests/test_contour.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_contour.py::test_contour_shape_2d_valid",
              "file_path": "lib/matplotlib/tests/test_contour.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_contour.py::test_contour_shape_error[args0-Length",
              "file_path": "lib/matplotlib/tests/test_contour.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_contour.py::test_contour_shape_error[args1-Length",
              "file_path": "lib/matplotlib/tests/test_contour.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_contour.py::test_contour_shape_error[args2-Number",
              "file_path": "lib/matplotlib/tests/test_contour.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_contour.py::test_contour_shape_error[args3-Number",
              "file_path": "lib/matplotlib/tests/test_contour.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_contour.py::test_contour_shape_error[args4-Shapes",
              "file_path": "lib/matplotlib/tests/test_contour.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_contour.py::test_contour_shape_error[args5-Shapes",
              "file_path": "lib/matplotlib/tests/test_contour.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_contour.py::test_contour_shape_error[args6-Inputs",
              "file_path": "lib/matplotlib/tests/test_contour.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_contour.py::test_contour_shape_error[args7-Input",
              "file_path": "lib/matplotlib/tests/test_contour.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_contour.py::test_contour_shape_error[args8-Input",
              "file_path": "lib/matplotlib/tests/test_contour.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_contour.py::test_contour_shape_error[args9-Input",
              "file_path": "lib/matplotlib/tests/test_contour.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_contour.py::test_contour_empty_levels",
              "file_path": "lib/matplotlib/tests/test_contour.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_contour.py::test_contour_Nlevels",
              "file_path": "lib/matplotlib/tests/test_contour.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_contour.py::test_contour_badlevel_fmt",
              "file_path": "lib/matplotlib/tests/test_contour.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_contour.py::test_contour_uniform_z",
              "file_path": "lib/matplotlib/tests/test_contour.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_contour.py::test_contour_manual_labels[png]",
              "file_path": "lib/matplotlib/tests/test_contour.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_contour.py::test_contour_manual_labels[pdf]",
              "file_path": "lib/matplotlib/tests/test_contour.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_contour.py::test_given_colors_levels_and_extends[png]",
              "file_path": "lib/matplotlib/tests/test_contour.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_contour.py::test_contour_datetime_axis[png]",
              "file_path": "lib/matplotlib/tests/test_contour.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_contour.py::test_labels[png]",
              "file_path": "lib/matplotlib/tests/test_contour.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_contour.py::test_corner_mask[png]",
              "file_path": "lib/matplotlib/tests/test_contour.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_contour.py::test_contourf_decreasing_levels",
              "file_path": "lib/matplotlib/tests/test_contour.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_contour.py::test_contourf_symmetric_locator",
              "file_path": "lib/matplotlib/tests/test_contour.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_contour.py::test_circular_contour_warning",
              "file_path": "lib/matplotlib/tests/test_contour.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_contour.py::test_clabel_zorder[True-123-1234]",
              "file_path": "lib/matplotlib/tests/test_contour.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_contour.py::test_clabel_zorder[False-123-1234]",
              "file_path": "lib/matplotlib/tests/test_contour.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_contour.py::test_clabel_zorder[True-123-None]",
              "file_path": "lib/matplotlib/tests/test_contour.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_contour.py::test_clabel_zorder[False-123-None]",
              "file_path": "lib/matplotlib/tests/test_contour.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_contour.py::test_contour_addlines[png]",
              "file_path": "lib/matplotlib/tests/test_contour.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_contour.py::test_contour_uneven[png]",
              "file_path": "lib/matplotlib/tests/test_contour.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_contour.py::test_contour_linewidth[1.23-None-None-1.23]",
              "file_path": "lib/matplotlib/tests/test_contour.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_contour.py::test_contour_linewidth[1.23-4.24-None-4.24]",
              "file_path": "lib/matplotlib/tests/test_contour.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_contour.py::test_contour_linewidth[1.23-4.24-5.02-5.02]",
              "file_path": "lib/matplotlib/tests/test_contour.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_contour.py::test_label_nonagg",
              "file_path": "lib/matplotlib/tests/test_contour.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_contour.py::test_contour_closed_line_loop[png]",
              "file_path": "lib/matplotlib/tests/test_contour.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_contour.py::test_quadcontourset_reuse",
              "file_path": "lib/matplotlib/tests/test_contour.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_contour.py::test_contour_manual[png]",
              "file_path": "lib/matplotlib/tests/test_contour.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_contour.py::test_contour_line_start_on_corner_edge[png]",
              "file_path": "lib/matplotlib/tests/test_contour.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_contour.py::test_find_nearest_contour",
              "file_path": "lib/matplotlib/tests/test_contour.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_contour.py::test_find_nearest_contour_no_filled",
              "file_path": "lib/matplotlib/tests/test_contour.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_contour.py::test_contour_autolabel_beyond_powerlimits",
              "file_path": "lib/matplotlib/tests/test_contour.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_contour.py::test_contourf_legend_elements",
              "file_path": "lib/matplotlib/tests/test_contour.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_contour.py::test_contour_legend_elements",
              "file_path": "lib/matplotlib/tests/test_contour.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_contour.py::test_algorithm_name[mpl2005-Mpl2005ContourGenerator]",
              "file_path": "lib/matplotlib/tests/test_contour.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_contour.py::test_algorithm_name[mpl2014-Mpl2014ContourGenerator]",
              "file_path": "lib/matplotlib/tests/test_contour.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_contour.py::test_algorithm_name[serial-SerialContourGenerator]",
              "file_path": "lib/matplotlib/tests/test_contour.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_contour.py::test_algorithm_name[threaded-ThreadedContourGenerator]",
              "file_path": "lib/matplotlib/tests/test_contour.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_contour.py::test_algorithm_name[invalid-None]",
              "file_path": "lib/matplotlib/tests/test_contour.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_contour.py::test_algorithm_supports_corner_mask[mpl2005]",
              "file_path": "lib/matplotlib/tests/test_contour.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_contour.py::test_algorithm_supports_corner_mask[mpl2014]",
              "file_path": "lib/matplotlib/tests/test_contour.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_contour.py::test_algorithm_supports_corner_mask[serial]",
              "file_path": "lib/matplotlib/tests/test_contour.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_contour.py::test_algorithm_supports_corner_mask[threaded]",
              "file_path": "lib/matplotlib/tests/test_contour.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_contour.py::test_all_algorithms[png]",
              "file_path": "lib/matplotlib/tests/test_contour.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_contour.py::test_subfigure_clabel",
              "file_path": "lib/matplotlib/tests/test_contour.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_contour.py::test_linestyles[solid]",
              "file_path": "lib/matplotlib/tests/test_contour.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_contour.py::test_linestyles[dashed]",
              "file_path": "lib/matplotlib/tests/test_contour.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_contour.py::test_linestyles[dashdot]",
              "file_path": "lib/matplotlib/tests/test_contour.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_contour.py::test_linestyles[dotted]",
              "file_path": "lib/matplotlib/tests/test_contour.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_contour.py::test_negative_linestyles[solid]",
              "file_path": "lib/matplotlib/tests/test_contour.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_contour.py::test_negative_linestyles[dashed]",
              "file_path": "lib/matplotlib/tests/test_contour.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_contour.py::test_negative_linestyles[dashdot]",
              "file_path": "lib/matplotlib/tests/test_contour.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_contour.py::test_negative_linestyles[dotted]",
              "file_path": "lib/matplotlib/tests/test_contour.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "SKIPPED",
              "message": "../opt/miniconda3/envs/testbed/lib/python3.11/contextlib.py:81: Cannot compare svg files because Inkscape is not installed",
              "file_path": "../opt/miniconda3/envs/testbed/lib/python3.11/contextlib.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "FAILED",
              "message": "\n    @image_comparison(['contour_log_extension.png'],\n                      remove_text=True, style='mpl20',\n                      tol=1.444)\n    def test_contourf_log_extension():\n        # Remove this line when this test image is regenerated.\n        plt.rcParams['pcolormesh.snap'] = False\n    \n        # Test that contourf with lognorm is extended correctly\n        fig, (ax1, ax2, ax3) = plt.subplots(1, 3, figsize=(10, 5))\n        fig.subplots_adjust(left=0.05, right=0.95)\n    \n        # make data set with large range e.g. between 1e-8 and 1e10\n        data_exp = np.linspace(-7.5, 9.5, 1200)\n        data = np.power(10, data_exp).reshape(30, 40)\n        # make manual levels e.g. between 1e-4 and 1e-6\n        levels_exp = np.arange(-4., 7.)\n        levels = np.power(10., levels_exp)\n    \n        # original data\n        c1 = ax1.contourf(data,\n                          norm=LogNorm(vmin=data.min(), vmax=data.max()))\n        # just show data in levels\n        c2 = ax2.contourf(data, levels=levels,\n                          norm=LogNorm(vmin=levels.min(), vmax=levels.max()),\n                          extend='neither')\n        # extend data from levels\n        c3 = ax3.contourf(data, levels=levels,\n                          norm=LogNorm(vmin=levels.min(), vmax=levels.max()),\n                          extend='both')\n        cb = plt.colorbar(c1, ax=ax1)\n        assert cb.ax.get_ylim() == (1e-8, 1e10)\n        cb = plt.colorbar(c2, ax=ax2)\n>       assert cb.ax.get_ylim() == (1e-4, 1e6)\nE       assert (9.9999999999...05, 1000000.0) == (0.0001, 1000000.0)\nE         \nE         At index 0 diff: 9.999999999999999e-05 != 0.0001\nE         Use -v to get more diff\n\nlib/matplotlib/tests/test_contour.py:316: AssertionError",
              "file_path": "lib/matplotlib/tests/test_contour.py",
              "span_id": "test_contourf_log_extension",
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_invisible_axes[png]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_get_labels",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_repr",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_label_loc_vertical[png]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_label_loc_vertical[pdf]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_label_loc_horizontal[png]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_label_loc_horizontal[pdf]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_label_loc_rc[png]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_label_loc_rc[pdf]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_label_shift",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_acorr[png]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_spy[png]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_spy_invalid_kwargs",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_matshow[png]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_formatter_ticker[png]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_formatter_ticker[pdf]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_funcformatter_auto_formatter",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_strmethodformatter_auto_formatter",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_twin_axis_locators_formatters[png]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_twin_axis_locators_formatters[pdf]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_twinx_cla",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_twin_logscale[png-x]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_twin_logscale[png-y]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_twinx_axis_scales[png]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_twin_inherit_autoscale_setting",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_inverted_cla",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_subclass_clear_cla",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_cla_not_redefined_internally",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_minorticks_on_rcParams_both[png]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_autoscale_tiny_range[png]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_autoscale_tiny_range[pdf]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_autoscale_tight",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_autoscale_log_shared",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_use_sticky_edges",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_sticky_shared_axes[png]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_basic_annotate[png]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_basic_annotate[pdf]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_arrow_simple[png]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_arrow_empty",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_arrow_in_view",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_annotate_default_arrow",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_annotate_signature",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_fill_units[png]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_plot_format_kwarg_redundant",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_errorbar_dashes[png]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_single_point[png]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_single_point[pdf]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_single_date[png]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_shaped_data[png]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_structured_data",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_aitoff_proj[png]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_axvspan_epoch[png]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_axvspan_epoch[pdf]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_axhspan_epoch[png]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_axhspan_epoch[pdf]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_hexbin_extent[png]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_hexbin_empty[png]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_hexbin_pickable",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_hexbin_log[png]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_hexbin_linear[png]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_hexbin_log_clim",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_inverted_limits",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_nonfinite_limits[png]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_nonfinite_limits[pdf]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_limits_empty_data[png-scatter]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_limits_empty_data[png-plot]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_limits_empty_data[png-fill_between]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_imshow[png]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_imshow[pdf]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_imshow_clip[png]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_imshow_clip[pdf]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_imshow_norm_vminvmax",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_polycollection_joinstyle[png]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_polycollection_joinstyle[pdf]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_fill_between_input[2d_x_input]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_fill_between_input[2d_y1_input]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_fill_between_input[2d_y2_input]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_fill_betweenx_input[2d_y_input]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_fill_betweenx_input[2d_x1_input]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_fill_betweenx_input[2d_x2_input]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_fill_between_interpolate[png]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_fill_between_interpolate[pdf]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_fill_between_interpolate_decreasing[png]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_fill_between_interpolate_decreasing[pdf]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_fill_between_interpolate_nan[png]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_fill_between_interpolate_nan[pdf]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_symlog[pdf]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_symlog2[pdf]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_pcolorargs_5205",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_pcolormesh[png]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_pcolormesh[pdf]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_pcolormesh_small[eps]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_pcolormesh_alpha[png]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_pcolormesh_alpha[pdf]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_pcolormesh_datetime_axis[png]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_pcolor_datetime_axis[png]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_pcolorargs",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_pcolornearest[png]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_pcolornearestunits[png]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_pcolorflaterror",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_pcolorauto[png-False]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_pcolorauto[png-True]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_canonical[png]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_canonical[pdf]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_arc_angles[png]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_arc_ellipse[png]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_arc_ellipse[pdf]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_marker_as_markerstyle",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_markevery[png]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_markevery[pdf]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_markevery_line[png]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_markevery_line[pdf]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_markevery_linear_scales[png]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_markevery_linear_scales[pdf]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_markevery_linear_scales_zoomed[png]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_markevery_linear_scales_zoomed[pdf]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_markevery_log_scales[png]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_markevery_log_scales[pdf]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_markevery_polar[png]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_markevery_polar[pdf]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_markevery_linear_scales_nans[png]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_markevery_linear_scales_nans[pdf]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_marker_edges[png]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_marker_edges[pdf]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_bar_tick_label_single[png]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_nan_bar_values",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_bar_ticklabel_fail",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_bar_tick_label_multiple[png]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_bar_tick_label_multiple_old_alignment[png]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_bar_decimal_center[png]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_barh_decimal_center[png]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_bar_decimal_width[png]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_barh_decimal_height[png]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_bar_color_none_alpha",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_bar_edgecolor_none_alpha",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_barh_tick_label[png]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_bar_timedelta",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_boxplot_dates_pandas",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_boxplot_capwidths",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_pcolor_regression",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_bar_pandas",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_bar_pandas_indexed",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_bar_hatches[png]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_bar_hatches[pdf]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_bar_labels[x-1-x-expected_labels0-x]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_bar_labels[x1-width1-label1-expected_labels1-_nolegend_]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_bar_labels[x2-width2-label2-expected_labels2-_nolegend_]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_bar_labels[x3-width3-bars-expected_labels3-bars]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_bar_labels_length",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_pandas_minimal_plot",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_hist_log[png]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_hist_log[pdf]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_hist_log_2[png]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_hist_log_barstacked",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_hist_bar_empty[png]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_hist_float16",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_hist_step_empty[png]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_hist_step_filled[png]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_hist_density[png]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_hist_unequal_bins_density",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_hist_datetime_datasets",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_hist_datetime_datasets_bins[date2num]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_hist_datetime_datasets_bins[datetime.datetime]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_hist_datetime_datasets_bins[np.datetime64]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_hist_with_empty_input[data0-1]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_hist_with_empty_input[data1-1]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_hist_with_empty_input[data2-2]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_hist_zorder[bar-1]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_hist_zorder[step-2]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_hist_zorder[stepfilled-1]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_stairs[png]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_stairs_fill[png]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_stairs_update[png]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_stairs_baseline_0[png]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_stairs_empty",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_stairs_invalid_nan",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_stairs_invalid_mismatch",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_stairs_invalid_update",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_stairs_invalid_update2",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_stairs_options[png]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_stairs_datetime[png]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_stairs_edge_handling[png]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_contour_hatching[png]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_contour_hatching[pdf]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_contour_colorbar[png]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_contour_colorbar[pdf]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_hist2d[png]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_hist2d[pdf]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_hist2d_transpose[png]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_hist2d_transpose[pdf]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_hist2d_density",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::TestScatter::test_scatter_plot[png]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::TestScatter::test_scatter_plot[pdf]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::TestScatter::test_scatter_marker[png]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::TestScatter::test_scatter_2D[png]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::TestScatter::test_scatter_decimal[png]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::TestScatter::test_scatter_color",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::TestScatter::test_scatter_color_warning[kwargs0]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::TestScatter::test_scatter_color_warning[kwargs1]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::TestScatter::test_scatter_color_warning[kwargs2]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::TestScatter::test_scatter_color_warning[kwargs3]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::TestScatter::test_scatter_unfilled",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::TestScatter::test_scatter_unfillable",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::TestScatter::test_scatter_size_arg_size",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::TestScatter::test_scatter_edgecolor_RGB",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::TestScatter::test_scatter_invalid_color[png]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::TestScatter::test_scatter_no_invalid_color[png]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::TestScatter::test_scatter_norm_vminvmax",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::TestScatter::test_scatter_single_point[png]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::TestScatter::test_scatter_different_shapes[png]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::TestScatter::test_scatter_c[0.5-None]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::TestScatter::test_scatter_c[c_case1-conversion]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::TestScatter::test_scatter_c[red-None]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::TestScatter::test_scatter_c[none-None]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::TestScatter::test_scatter_c[None-None]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::TestScatter::test_scatter_c[c_case5-None]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::TestScatter::test_scatter_c[jaune-conversion]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::TestScatter::test_scatter_c[c_case7-conversion]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::TestScatter::test_scatter_c[c_case8-conversion]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::TestScatter::test_scatter_c[c_case9-None]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::TestScatter::test_scatter_c[c_case10-None]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::TestScatter::test_scatter_c[c_case11-shape]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::TestScatter::test_scatter_c[c_case12-None]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::TestScatter::test_scatter_c[c_case13-None]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::TestScatter::test_scatter_c[c_case14-conversion]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::TestScatter::test_scatter_c[c_case15-None]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::TestScatter::test_scatter_c[c_case16-shape]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::TestScatter::test_scatter_c[c_case17-None]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::TestScatter::test_scatter_c[c_case18-shape]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::TestScatter::test_scatter_c[c_case19-None]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::TestScatter::test_scatter_c[c_case20-shape]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::TestScatter::test_scatter_c[c_case21-None]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::TestScatter::test_scatter_c[c_case22-shape]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::TestScatter::test_scatter_c[c_case23-None]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::TestScatter::test_scatter_c[c_case24-shape]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::TestScatter::test_scatter_c[c_case25-None]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::TestScatter::test_scatter_c[c_case26-shape]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::TestScatter::test_scatter_c[c_case27-conversion]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::TestScatter::test_scatter_c[c_case28-conversion]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::TestScatter::test_scatter_c[c_case29-conversion]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::TestScatter::test_scatter_single_color_c[png]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::TestScatter::test_scatter_linewidths",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_parse_scatter_color_args[params0-expected_result0]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_parse_scatter_color_args[params1-expected_result1]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_parse_scatter_color_args[params2-expected_result2]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_parse_scatter_color_args[params3-expected_result3]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_parse_scatter_color_args[params4-expected_result4]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_parse_scatter_color_args_edgecolors[kwargs0-None]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_parse_scatter_color_args_edgecolors[kwargs1-None]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_parse_scatter_color_args_edgecolors[kwargs2-r]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_parse_scatter_color_args_edgecolors[kwargs3-expected_edgecolors3]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_parse_scatter_color_args_edgecolors[kwargs4-r]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_parse_scatter_color_args_edgecolors[kwargs5-face]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_parse_scatter_color_args_edgecolors[kwargs6-none]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_parse_scatter_color_args_edgecolors[kwargs7-r]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_parse_scatter_color_args_edgecolors[kwargs8-r]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_parse_scatter_color_args_edgecolors[kwargs9-r]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_parse_scatter_color_args_edgecolors[kwargs10-g]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_parse_scatter_color_args_error",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_as_mpl_axes_api",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_pyplot_axes",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_log_scales",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_log_scales_no_data",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_log_scales_invalid",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_stackplot[png]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_stackplot[pdf]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_stackplot_baseline[png]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_stackplot_baseline[pdf]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_bxp_baseline[png]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_bxp_rangewhis[png]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_bxp_percentilewhis[png]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_bxp_with_xlabels[png]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_bxp_horizontal[png]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_bxp_with_ylabels[png]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_bxp_patchartist[png]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_bxp_custompatchartist[png]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_bxp_customoutlier[png]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_bxp_showcustommean[png]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_bxp_custombox[png]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_bxp_custommedian[png]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_bxp_customcap[png]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_bxp_customwhisker[png]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_bxp_shownotches[png]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_bxp_nocaps[png]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_bxp_nobox[png]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_bxp_no_flier_stats[png]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_bxp_showmean[png]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_bxp_showmeanasline[png]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_bxp_scalarwidth[png]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_bxp_customwidths[png]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_bxp_custompositions[png]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_bxp_bad_widths",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_bxp_bad_positions",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_bxp_custom_capwidths[png]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_bxp_custom_capwidth[png]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_bxp_bad_capwidths",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_boxplot[png]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_boxplot[pdf]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_boxplot_custom_capwidths[png]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_boxplot_sym2[png]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_boxplot_sym[png]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_boxplot_autorange_whiskers[png]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_boxplot_rc_parameters[png]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_boxplot_rc_parameters[pdf]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_boxplot_with_CIarray[png]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_boxplot_no_weird_whisker[png]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_boxplot_bad_medians",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_boxplot_bad_ci",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_boxplot_zorder",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_boxplot_marker_behavior",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_boxplot_mod_artist_after_plotting[png]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_vert_violinplot_baseline[png]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_vert_violinplot_showmeans[png]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_vert_violinplot_showextrema[png]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_vert_violinplot_showmedians[png]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_vert_violinplot_showall[png]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_vert_violinplot_custompoints_10[png]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_vert_violinplot_custompoints_200[png]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_horiz_violinplot_baseline[png]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_horiz_violinplot_showmedians[png]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_horiz_violinplot_showmeans[png]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_horiz_violinplot_showextrema[png]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_horiz_violinplot_showall[png]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_horiz_violinplot_custompoints_10[png]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_horiz_violinplot_custompoints_200[png]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_violinplot_bad_positions",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_violinplot_bad_widths",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_violinplot_bad_quantiles",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_violinplot_outofrange_quantiles",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_violinplot_single_list_quantiles[png]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_violinplot_pandas_series[png]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_manage_xticks",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_boxplot_not_single",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_tick_space_size_0",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_errorbar[png]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_errorbar[pdf]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_errorbar_colorcycle",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_errorbar_cycle_ecolor[png]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_errorbar_cycle_ecolor[pdf]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_errorbar_shape",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_errorbar_limits[png]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_errorbar_limits[pdf]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_errorbar_nonefmt",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_errorbar_line_specific_kwargs",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_errorbar_with_prop_cycle[png]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_errorbar_every_invalid",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_xerr_yerr_not_negative",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_errorbar_every[png]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_errorbar_every[pdf]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_errorbar_linewidth_type[elinewidth0]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_errorbar_linewidth_type[elinewidth1]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_errorbar_linewidth_type[1]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_errorbar_nan[png]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_hist_stacked_stepfilled[png]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_hist_stacked_stepfilled[pdf]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_hist_offset[png]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_hist_offset[pdf]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_hist_step[png]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_hist_step_horiz[png]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_hist_stacked_weighted[png]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_hist_stacked_weighted[pdf]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_stem[png-w/",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_stem[png-w/o",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_stem_args",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_stem_markerfmt",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_stem_dates",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_stem_orientation[png-w/",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_stem_orientation[png-w/o",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_hist_stacked_stepfilled_alpha[png]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_hist_stacked_stepfilled_alpha[pdf]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_hist_stacked_step[png]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_hist_stacked_step[pdf]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_hist_stacked_density[png]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_hist_stacked_density[pdf]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_hist_step_bottom[png]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_hist_stepfilled_geometry",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_hist_step_geometry",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_hist_stepfilled_bottom_geometry",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_hist_step_bottom_geometry",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_hist_stacked_stepfilled_geometry",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_hist_stacked_step_geometry",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_hist_stacked_stepfilled_bottom_geometry",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_hist_stacked_step_bottom_geometry",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_hist_stacked_bar[png]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_hist_stacked_bar[pdf]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_hist_barstacked_bottom_unchanged",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_hist_emptydata",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_hist_labels",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_transparent_markers[png]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_transparent_markers[pdf]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_rgba_markers[png]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_rgba_markers[pdf]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_mollweide_grid[png]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_mollweide_grid[pdf]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_mollweide_forward_inverse_closure",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_mollweide_inverse_forward_closure",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_alpha[png]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_alpha[pdf]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_eventplot[png]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_eventplot[pdf]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_eventplot_defaults[png]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_eventplot_colors[colors0]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_eventplot_colors[colors1]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_eventplot_colors[colors2]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_eventplot_problem_kwargs[png]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_empty_eventplot",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_eventplot_orientation[None-data0]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_eventplot_orientation[None-data1]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_eventplot_orientation[None-data2]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_eventplot_orientation[vertical-data0]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_eventplot_orientation[vertical-data1]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_eventplot_orientation[vertical-data2]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_eventplot_orientation[horizontal-data0]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_eventplot_orientation[horizontal-data1]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_eventplot_orientation[horizontal-data2]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_eventplot_units_list[png]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_marker_styles[png]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_markers_fillstyle_rcparams[png]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_vertex_markers[png]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_eb_line_zorder[png]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_eb_line_zorder[pdf]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_axline_loglog[png]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_axline_loglog[pdf]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_axline[png]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_axline[pdf]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_axline_transaxes[png]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_axline_transaxes[pdf]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_axline_transaxes_panzoom[png]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_axline_transaxes_panzoom[pdf]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_axline_args",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_vlines[png]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_vlines_default",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_hlines[png]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_hlines_default",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_lines_with_colors[png-data0]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_lines_with_colors[png-data1]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_step_linestyle[png]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_step_linestyle[pdf]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_mixed_collection[png]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_mixed_collection[pdf]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_subplot_key_hash",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_specgram[png]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_specgram_magnitude[png]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_specgram_angle[png]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_specgram_fs_none",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_specgram_origin_rcparam[png]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_specgram_origin_kwarg",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_psd_csd[png]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_spectrum[png]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_psd_csd_edge_cases",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_twin_remove[png]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_twin_spines[png]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_twin_spines_on_top[png]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_rcparam_grid_minor[both-True-True]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_rcparam_grid_minor[major-True-False]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_rcparam_grid_minor[minor-False-True]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_grid",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_reset_grid",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_reset_ticks[png]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_vline_limit",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_axline_minmax[axvline-axhline-args0]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_axline_minmax[axvspan-axhspan-args1]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_empty_shared_subplots",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_shared_with_aspect_1",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_shared_with_aspect_2",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_shared_with_aspect_3",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_shared_aspect_error",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_axis_errors[TypeError-args0-kwargs0-axis\\\\(\\\\)",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_axis_errors[ValueError-args1-kwargs1-Unrecognized",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_axis_errors[TypeError-args2-kwargs2-the",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_axis_errors[TypeError-args3-kwargs3-axis\\\\(\\\\)",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_axis_method_errors",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_twin_with_aspect[x]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_twin_with_aspect[y]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_relim_visible_only",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_text_labelsize",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_pie_default[png]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_pie_linewidth_0[png]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_pie_center_radius[png]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_pie_linewidth_2[png]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_pie_ccw_true[png]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_pie_frame_grid[png]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_pie_rotatelabels_true[png]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_pie_nolabel_but_legend[png]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_pie_textprops",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_pie_get_negative_values",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_normalize_kwarg_pie",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_set_get_ticklabels[png]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_set_ticks_with_labels[png]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_set_noniterable_ticklabels",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_subsampled_ticklabels",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_mismatched_ticklabels",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_empty_ticks_fixed_loc",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_retain_tick_visibility[png]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_tick_label_update",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_o_marker_path_snap[png]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_margins",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_set_margin_updates_limits",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_margins_errors[ValueError-args0-kwargs0-margin",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_margins_errors[ValueError-args1-kwargs1-margin",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_margins_errors[ValueError-args2-kwargs2-margin",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_margins_errors[ValueError-args3-kwargs3-margin",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_margins_errors[TypeError-args4-kwargs4-Cannot",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_margins_errors[TypeError-args5-kwargs5-Cannot",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_margins_errors[TypeError-args6-kwargs6-Must",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_length_one_hist",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_set_xy_bound",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_pathological_hexbin",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_color_None",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_color_alias",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_numerical_hist_label",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_unicode_hist_label",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_move_offsetlabel",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_rc_spines[png]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_rc_grid[png]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_rc_tick",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_rc_major_minor_tick",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_square_plot",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_bad_plot_args",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_pcolorfast[data0-xy0-AxesImage]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_pcolorfast[data0-xy1-AxesImage]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_pcolorfast[data0-xy2-AxesImage]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_pcolorfast[data0-xy3-PcolorImage]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_pcolorfast[data0-xy4-QuadMesh]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_pcolorfast[data1-xy0-AxesImage]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_pcolorfast[data1-xy1-AxesImage]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_pcolorfast[data1-xy2-AxesImage]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_pcolorfast[data1-xy3-PcolorImage]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_pcolorfast[data1-xy4-QuadMesh]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_shared_scale",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_shared_bool",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_violin_point_mass",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_errorbar_inputs_shotgun[kwargs0]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_errorbar_inputs_shotgun[kwargs1]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_errorbar_inputs_shotgun[kwargs2]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_errorbar_inputs_shotgun[kwargs3]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_errorbar_inputs_shotgun[kwargs4]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_errorbar_inputs_shotgun[kwargs5]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_errorbar_inputs_shotgun[kwargs6]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_errorbar_inputs_shotgun[kwargs7]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_errorbar_inputs_shotgun[kwargs8]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_errorbar_inputs_shotgun[kwargs9]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_errorbar_inputs_shotgun[kwargs10]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_errorbar_inputs_shotgun[kwargs11]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_errorbar_inputs_shotgun[kwargs12]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_errorbar_inputs_shotgun[kwargs13]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_errorbar_inputs_shotgun[kwargs14]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_errorbar_inputs_shotgun[kwargs15]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_errorbar_inputs_shotgun[kwargs16]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_errorbar_inputs_shotgun[kwargs17]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_errorbar_inputs_shotgun[kwargs18]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_errorbar_inputs_shotgun[kwargs19]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_errorbar_inputs_shotgun[kwargs20]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_errorbar_inputs_shotgun[kwargs21]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_errorbar_inputs_shotgun[kwargs22]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_errorbar_inputs_shotgun[kwargs23]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_errorbar_inputs_shotgun[kwargs24]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_errorbar_inputs_shotgun[kwargs25]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_errorbar_inputs_shotgun[kwargs26]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_errorbar_inputs_shotgun[kwargs27]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_errorbar_inputs_shotgun[kwargs28]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_errorbar_inputs_shotgun[kwargs29]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_errorbar_inputs_shotgun[kwargs30]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_errorbar_inputs_shotgun[kwargs31]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_errorbar_inputs_shotgun[kwargs32]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_errorbar_inputs_shotgun[kwargs33]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_errorbar_inputs_shotgun[kwargs34]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_errorbar_inputs_shotgun[kwargs35]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_errorbar_inputs_shotgun[kwargs36]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_errorbar_inputs_shotgun[kwargs37]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_errorbar_inputs_shotgun[kwargs38]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_errorbar_inputs_shotgun[kwargs39]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_errorbar_inputs_shotgun[kwargs40]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_errorbar_inputs_shotgun[kwargs41]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_errorbar_inputs_shotgun[kwargs42]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_errorbar_inputs_shotgun[kwargs43]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_errorbar_inputs_shotgun[kwargs44]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_errorbar_inputs_shotgun[kwargs45]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_errorbar_inputs_shotgun[kwargs46]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_errorbar_inputs_shotgun[kwargs47]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_errorbar_inputs_shotgun[kwargs48]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_errorbar_inputs_shotgun[kwargs49]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_errorbar_inputs_shotgun[kwargs50]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_errorbar_inputs_shotgun[kwargs51]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_dash_offset[png]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_dash_offset[pdf]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_title_pad",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_title_location_roundtrip",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_title_location_shared[True]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_title_location_shared[False]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_loglog[png]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_loglog_nonpos[png]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_axes_margins",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_remove_shared_axes[gca-x]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_remove_shared_axes[gca-y]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_remove_shared_axes[subplots-x]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_remove_shared_axes[subplots-y]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_remove_shared_axes[subplots_shared-x]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_remove_shared_axes[subplots_shared-y]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_remove_shared_axes[add_axes-x]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_remove_shared_axes[add_axes-y]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_remove_shared_axes_relim",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_shared_axes_autoscale",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_adjust_numtick_aspect",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_auto_numticks",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_auto_numticks_log",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_broken_barh_empty",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_broken_barh_timedelta",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_pandas_pcolormesh",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_pandas_indexing_dates",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_pandas_errorbar_indexing",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_pandas_index_shape",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_pandas_indexing_hist",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_pandas_bar_align_center",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_tick_apply_tickdir_deprecation",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_axis_set_tick_params_labelsize_labelcolor",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_axes_tick_params_gridlines",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_axes_tick_params_ylabelside",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_axes_tick_params_xlabelside",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_none_kwargs",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_bar_uint8",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_date_timezone_x[png]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_date_timezone_y[png]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_date_timezone_x_and_y[png]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_axisbelow[png]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_titletwiny",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_titlesetpos",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_title_xticks_top",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_title_xticks_top_both",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_title_above_offset[left",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_title_above_offset[center",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_title_above_offset[both",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_title_no_move_off_page",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_offset_label_color",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_offset_text_visible",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_large_offset",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_barb_units",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_quiver_units",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_bar_color_cycle",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_tick_param_label_rotation",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_fillbetween_cycle",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_log_margins",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_color_length_mismatch",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_eventplot_legend",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_bar_broadcast_args",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_invalid_axis_limits",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_minorticks_on[symlog-symlog]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_minorticks_on[symlog-log]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_minorticks_on[log-symlog]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_minorticks_on[log-log]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_twinx_knows_limits",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_zero_linewidth",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_empty_errorbar_legend",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_plot_decimal[png]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_markerfacecolor_none_alpha[png]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_tick_padding_tightbbox",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_inset",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_zoom_inset",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_inset_polar[png]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_inset_projection",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_inset_subclass",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_indicate_inset_inverted[False-False]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_indicate_inset_inverted[False-True]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_indicate_inset_inverted[True-False]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_indicate_inset_inverted[True-True]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_set_position",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_spines_properbbox_after_zoom",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_gettightbbox_ignore_nan",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_scatter_series_non_zero_index",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_scatter_empty_data",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_annotate_across_transforms[png]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_secondary_xy[png]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_secondary_fail",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_secondary_resize",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_secondary_minorloc",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_secondary_formatter",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_secondary_repr",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_normal_axes",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_nodecorator",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_displaced_spine",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_tickdirs",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_minor_accountedfor",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_axis_bool_arguments[png]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_axis_extent_arg",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_axis_extent_arg2",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_hist_auto_bins",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_hist_nan_data",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_hist_range_and_density",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_bar_errbar_zorder",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_set_ticks_inverted",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_aspect_nonlinear_adjustable_box",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_aspect_nonlinear_adjustable_datalim",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_box_aspect",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_box_aspect_custom_position",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_bbox_aspect_axes_init",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_redraw_in_frame",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_invisible_axes_events",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_xtickcolor_is_not_markercolor",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_ytickcolor_is_not_markercolor",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_unautoscale[True-x]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_unautoscale[True-y]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_unautoscale[False-x]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_unautoscale[False-y]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_unautoscale[None-x]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_unautoscale[None-y]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_polar_interpolation_steps_variable_r[png]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_autoscale_tiny_sticky",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_xtickcolor_is_not_xticklabelcolor",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_ytickcolor_is_not_yticklabelcolor",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_relative_ticklabel_sizes[xx-small]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_relative_ticklabel_sizes[x-small]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_relative_ticklabel_sizes[small]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_relative_ticklabel_sizes[medium]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_relative_ticklabel_sizes[large]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_relative_ticklabel_sizes[x-large]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_relative_ticklabel_sizes[xx-large]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_relative_ticklabel_sizes[larger]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_relative_ticklabel_sizes[smaller]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_relative_ticklabel_sizes[8]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_relative_ticklabel_sizes[10]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_relative_ticklabel_sizes[12]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_multiplot_autoscale",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_sharing_does_not_link_positions",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_2dcolor_plot[pdf]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_shared_axes_clear[png]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_shared_axes_retick",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_ylabel_ha_with_position[left]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_ylabel_ha_with_position[center]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_ylabel_ha_with_position[right]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_bar_label_location_vertical",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_bar_label_location_vertical_yinverted",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_bar_label_location_horizontal",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_bar_label_location_horizontal_yinverted",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_bar_label_location_horizontal_xinverted",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_bar_label_location_horizontal_xyinverted",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_bar_label_location_center",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_bar_label_location_errorbars",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_bar_label_fmt[%.2f]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_bar_label_fmt[{:.2f}]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_bar_label_fmt[format]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_bar_label_fmt_error",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_bar_label_labels",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_bar_label_nan_ydata",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_bar_label_nan_ydata_inverted",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_nan_barlabels",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_patch_bounds",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_warn_ignored_scatter_kwargs",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_artist_sublists",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_empty_line_plots",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_plot_format_errors[None-f-'f'",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_plot_format_errors[None-o+-'o\\\\+'",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_plot_format_errors[None-:--':-'",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_plot_format_errors[None-rk-'rk'",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_plot_format_errors[None-:o-r-':o-r'",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_plot_format_errors[data1-f-'f'",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_plot_format_errors[data1-o+-'o\\\\+'",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_plot_format_errors[data1-:--':-'",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_plot_format_errors[data1-rk-'rk'",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_plot_format_errors[data1-:o-r-':o-r'",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_plot_format",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_automatic_legend",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_plot_errors",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_clim",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_bezier_autoscale",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_get_xticklabel",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "SKIPPED",
              "message": "lib/matplotlib/testing/compare.py:285: Don't know how to convert .svg files to png",
              "file_path": "lib/matplotlib/testing/compare.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "SKIPPED",
              "message": "../opt/miniconda3/envs/testbed/lib/python3.11/contextlib.py:81: Cannot compare svg files because Inkscape is not installed",
              "file_path": "../opt/miniconda3/envs/testbed/lib/python3.11/contextlib.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            }
          ]
        }
      },
      "parent_id": 4
    },
    {
      "node_id": 6,
      "action": {
        "scratch_pad": "1. I've added the implementation to enable draggable functionality when draggable=True\n2. Now I need to:\n   - Add the draggable parameter to the docstring\n   - Add a test case for the new parameter\n3. Let me update the docstring first",
        "command": "str_replace",
        "path": "lib/matplotlib/legend.py",
        "old_str": "        alignment : {'center', 'left', 'right'}, default: 'center'\n            The alignment value for the legend box. The valid values are:\n            {'center', 'left', 'right'}\n\n        Other Parameters\n        ----------------\n        **kwargs : `.Text` properties\n            Other keyword arguments are given to the `.Text` instance\n            containing the legend's text.\n\n        See Also\n        --------\n        .Figure.legend",
        "new_str": "        alignment : {'center', 'left', 'right'}, default: 'center'\n            The alignment value for the legend box. The valid values are:\n            {'center', 'left', 'right'}\n\n        draggable : bool, default: False\n            Enable mouse dragging support for the legend.\n\n        Other Parameters\n        ----------------\n        **kwargs : `.Text` properties\n            Other keyword arguments are given to the `.Text` instance\n            containing the legend's text.\n\n        See Also\n        --------\n        .Figure.legend",
        "action_args_class": "moatless.actions.edit.EditActionArguments"
      },
      "observation": {
        "message": "String '        alignment : {'center', 'left', 'right'}, default: 'center'\n            The alignment value for the legend box. The valid values are:\n            {'center', 'left', 'right'}\n\n        Other Parameters\n        ----------------\n        **kwargs : `.Text` properties\n            Other keyword arguments are given to the `.Text` instance\n            containing the legend's text.\n\n        See Also\n        --------\n        .Figure.legend' not found in lib/matplotlib/legend.py",
        "terminal": false,
        "expect_correction": true,
        "properties": {
          "fail_reason": "string_not_found"
        }
      },
      "file_context": {
        "max_tokens": 8000,
        "files": [
          {
            "file_path": "lib/matplotlib/legend.py",
            "patch": "--- a/lib/matplotlib/legend.py\n+++ b/lib/matplotlib/legend.py\n@@ -341,6 +341,7 @@\n         handler_map=None,\n         title_fontproperties=None,  # properties for the legend title\n         alignment=\"center\",       # control the alignment within the legend box\n+        draggable=False,      # enable mouse dragging support\n         *,\n         ncol=1  # synonym for ncols (backward compatibility)\n     ):\n@@ -538,6 +539,8 @@\n \n         self.set_title(title, prop=title_prop_fp)\n         self._draggable = None\n+        if draggable:\n+            self.set_draggable(True)\n \n         # set the text color\n \n",
            "spans": [
              {
                "span_id": "imports",
                "pinned": false
              },
              {
                "span_id": "Legend",
                "pinned": false
              },
              {
                "span_id": "Legend.__init__",
                "pinned": false
              },
              {
                "span_id": "Legend.draw",
                "pinned": false
              },
              {
                "span_id": "DraggableLegend",
                "pinned": false
              },
              {
                "span_id": "DraggableLegend.__init__",
                "pinned": false
              },
              {
                "span_id": "DraggableLegend.finalize_offset",
                "pinned": false
              },
              {
                "span_id": "DraggableLegend._update_loc",
                "pinned": false
              },
              {
                "span_id": "DraggableLegend._update_bbox_to_anchor",
                "pinned": false
              },
              {
                "span_id": "Legend.set_draggable",
                "pinned": false
              },
              {
                "span_id": "Legend.get_draggable",
                "pinned": false
              }
            ],
            "show_all_spans": false
          },
          {
            "file_path": "lib/matplotlib/tests/test_legend.py",
            "spans": [
              {
                "span_id": "imports",
                "pinned": false
              },
              {
                "span_id": "test_get_set_draggable",
                "pinned": false
              }
            ],
            "show_all_spans": false,
            "patch": null
          },
          {
            "file_path": "lib/matplotlib/tests/test_contour.py",
            "spans": [
              {
                "span_id": "test_contourf_log_extension",
                "pinned": false
              }
            ],
            "show_all_spans": false,
            "patch": null
          },
          {
            "file_path": "lib/matplotlib/tests/test_axes.py",
            "spans": [],
            "show_all_spans": false,
            "patch": null
          }
        ]
      },
      "completions": {
        "build_action": {
          "model": "claude-3-5-sonnet-20241022",
          "input": [
            {
              "role": "user",
              "content": "<task>\nlegend draggable as keyword\n<!--To help us understand and resolve your issue, please fill out the form to the best of your ability.-->\r\n<!--You can feel free to delete the sections that do not apply.-->\r\n\r\n### Feature request\r\n\r\n**There is not keyword to make legend draggable at creation**\r\n\r\n<!--A short 1-2 sentences that succinctly describes the bug-->\r\n\r\nIs there a code reason why one can not add a \"draggable=True\" keyword to the __init__ function for Legend?  This would be more handy than having to call it after legend creation.  And, naively, it would seem simple to do.  But maybe there is a reason why it would not work?\n\n</task>"
            },
            {
              "role": "assistant",
              "content": [
                {
                  "type": "text",
                  "text": "<thoughts>\n1. First, I need to locate the Legend class implementation to understand its current initialization\n2. Then I'll check if there are any technical limitations for adding the draggable parameter\n3. I'll also look for any tests related to legend draggability to understand the current testing approach\n4. Finally, I'll implement the change if there are no blockers\n</thoughts>"
                },
                {
                  "id": "call_85bc3e3e",
                  "input": {
                    "file_pattern": null,
                    "class_name": "Legend"
                  },
                  "type": "tool_use",
                  "name": "FindClass"
                }
              ]
            },
            {
              "role": "user",
              "content": [
                {
                  "tool_use_id": "call_85bc3e3e",
                  "content": "<observation>\nFound 40 code sections.\n\nViewed relevant code:\nlib/matplotlib/legend.py\n```\n\n    23\t\n    24\timport itertools\n    25\timport logging\n    26\timport time\n    27\t\n    28\timport numpy as np\n    29\t\n    30\timport matplotlib as mpl\n    31\tfrom matplotlib import _api, _docstring, colors, offsetbox\n    32\tfrom matplotlib.artist import Artist, allow_rasterization\n    33\tfrom matplotlib.cbook import silent_list\n    34\tfrom matplotlib.font_manager import FontProperties\n    35\tfrom matplotlib.lines import Line2D\n    36\tfrom matplotlib.patches import (Patch, Rectangle, Shadow, FancyBboxPatch,\n    37\t                                StepPatch)\n    38\tfrom matplotlib.collections import (\n    39\t    Collection, CircleCollection, LineCollection, PathCollection,\n    40\t    PolyCollection, RegularPolyCollection)\n    41\tfrom matplotlib.text import Text\n    42\tfrom matplotlib.transforms import Bbox, BboxBase, TransformedBbox\n    43\tfrom matplotlib.transforms import BboxTransformTo, BboxTransformFrom\n    44\tfrom matplotlib.offsetbox import (\n    45\t    AnchoredOffsetbox, DraggableOffsetBox,\n    46\t    HPacker, VPacker,\n    47\t    DrawingArea, TextArea,\n    48\t)\n    49\tfrom matplotlib.container import ErrorbarContainer, BarContainer, StemContainer\n    50\tfrom . import legend_handler\n      # ...\n   290\t\n   291\t\n   292\tclass Legend(Artist):\n   293\t    \"\"\"\n   294\t    Place a legend on the axes at location loc.\n   295\t    \"\"\"\n   296\t\n   297\t    # 'best' is only implemented for axes legends\n   298\t    codes = {'best': 0, **AnchoredOffsetbox.codes}\n   299\t    zorder = 5\n          # ...\n   303\t\n   304\t    @_api.make_keyword_only(\"3.6\", \"loc\")\n   305\t    @_docstring.dedent_interpd\n   306\t    def __init__(\n   307\t        self, parent, handles, labels,\n   308\t        loc=None,\n   309\t        numpoints=None,      # number of points in the legend line\n   310\t        markerscale=None,    # relative size of legend markers vs. original\n   311\t        markerfirst=True,    # left/right ordering of legend marker and label\n   312\t        scatterpoints=None,  # number of scatter points\n   313\t        scatteryoffsets=None,\n   314\t        prop=None,           # properties for the legend texts\n   315\t        fontsize=None,       # keyword to set font size directly\n   316\t        labelcolor=None,     # keyword to set the text color\n   317\t\n   318\t        # spacing & pad defined as a fraction of the font-size\n   319\t        borderpad=None,      # whitespace inside the legend border\n   320\t        labelspacing=None,   # vertical space between the legend entries\n   321\t        handlelength=None,   # length of the legend handles\n   322\t        handleheight=None,   # height of the legend handles\n   323\t        handletextpad=None,  # pad between the legend handle and text\n   324\t        borderaxespad=None,  # pad between the axes and legend border\n   325\t        columnspacing=None,  # spacing between columns\n   326\t\n   327\t        ncols=1,     # number of columns\n   328\t        mode=None,  # horizontal distribution of columns: None or \"expand\"\n   329\t\n   330\t        fancybox=None,  # True: fancy box, False: rounded box, None: rcParam\n   331\t        shadow=None,\n   332\t        title=None,           # legend title\n   333\t        title_fontsize=None,  # legend title font size\n   334\t        framealpha=None,      # set frame alpha\n   335\t        edgecolor=None,       # frame patch edgecolor\n   336\t        facecolor=None,       # frame patch facecolor\n   337\t\n   338\t        bbox_to_anchor=None,  # bbox to which the legend will be anchored\n   339\t        bbox_transform=None,  # transform for the bbox\n   340\t        frameon=None,         # draw frame\n   341\t        handler_map=None,\n   342\t        title_fontproperties=None,  # properties for the legend title\n   343\t        alignment=\"center\",       # control the alignment within the legend box\n   344\t        *,\n   345\t        ncol=1  # synonym for ncols (backward compatibility)\n   346\t    ):\n   347\t        \"\"\"\n   348\t        Parameters\n   349\t        ----------\n   350\t        parent : `~matplotlib.axes.Axes` or `.Figure`\n   351\t            The artist that contains the legend.\n   352\t\n   353\t        handles : list of `.Artist`\n   354\t            A list of Artists (lines, patches) to be added to the legend.\n   355\t\n   356\t        labels : list of str\n   357\t            A list of labels to show next to the artists. The length of handles\n   358\t            and labels should be the same. If they are not, they are truncated\n   359\t            to the smaller of both lengths.\n   360\t\n   361\t        Other Parameters\n   362\t        ----------------\n   363\t        %(_legend_kw_doc)s\n   364\t\n   365\t        Notes\n   366\t        -----\n   367\t        Users can specify any arbitrary location for the legend using the\n   368\t        *bbox_to_anchor* keyword argument. *bbox_to_anchor* can be a\n   369\t        `.BboxBase` (or derived there from) or a tuple of 2 or 4 floats.\n   370\t        See `set_bbox_to_anchor` for more detail.\n   371\t\n   372\t        The legend location can be specified by setting *loc* with a tuple of\n   373\t        2 floats, which is interpreted as the lower-left corner of the legend\n   374\t        in the normalized axes coordinate.\n   375\t        \"\"\"\n   376\t        # local import only to avoid circularity\n   377\t        from matplotlib.axes import Axes\n   378\t        from matplotlib.figure import FigureBase\n   379\t\n   380\t        super().__init__()\n   381\t\n   382\t        if prop is None:\n   383\t            if fontsize is not None:\n   384\t                self.prop = FontProperties(size=fontsize)\n   385\t            else:\n   386\t                self.prop = FontProperties(\n   387\t                    size=mpl.rcParams[\"legend.fontsize\"])\n   388\t        else:\n   389\t            self.prop = FontProperties._from_any(prop)\n   390\t            if isinstance(prop, dict) and \"size\" not in prop:\n   391\t                self.prop.set_size(mpl.rcParams[\"legend.fontsize\"])\n   392\t\n   393\t        self._fontsize = self.prop.get_size_in_points()\n   394\t\n   395\t        self.texts = []\n   396\t        self.legendHandles = []\n   397\t        self._legend_title_box = None\n   398\t\n   399\t        #: A dictionary with the extra handler mappings for this Legend\n   400\t        #: instance.\n   401\t        self._custom_handler_map = handler_map\n   402\t\n   403\t        def val_or_rc(val, rc_name):\n   404\t            return val if val is not None else mpl.rcParams[rc_name]\n   405\t\n   406\t        self.numpoints = val_or_rc(numpoints, 'legend.numpoints')\n   407\t        self.markerscale = val_or_rc(markerscale, 'legend.markerscale')\n   408\t        self.scatterpoints = val_or_rc(scatterpoints, 'legend.scatterpoints')\n   409\t        self.borderpad = val_or_rc(borderpad, 'legend.borderpad')\n   410\t        self.labelspacing = val_or_rc(labelspacing, 'legend.labelspacing')\n   411\t        self.handlelength = val_or_rc(handlelength, 'legend.handlelength')\n   412\t        self.handleheight = val_or_rc(handleheight, 'legend.handleheight')\n   413\t        self.handletextpad = val_or_rc(handletextpad, 'legend.handletextpad')\n   414\t        self.borderaxespad = val_or_rc(borderaxespad, 'legend.borderaxespad')\n   415\t        self.columnspacing = val_or_rc(columnspacing, 'legend.columnspacing')\n   416\t        self.shadow = val_or_rc(shadow, 'legend.shadow')\n   417\t        # trim handles and labels if illegal label...\n   418\t        _lab, _hand = [], []\n   419\t        for label, handle in zip(labels, handles):\n   420\t            if isinstance(label, str) and label.startswith('_'):\n   421\t                _api.warn_external(f\"The label {label!r} of {handle!r} starts \"\n   422\t                                   \"with '_'. It is thus excluded from the \"\n   423\t                                   \"legend.\")\n   424\t            else:\n   425\t                _lab.append(label)\n   426\t                _hand.append(handle)\n   427\t        labels, handles = _lab, _hand\n   428\t\n   429\t        handles = list(handles)\n   430\t        if len(handles) < 2:\n   431\t            ncols = 1\n   432\t        self._ncols = ncols if ncols != 1 else ncol\n   433\t\n   434\t        if self.numpoints <= 0:\n   435\t            raise ValueError(\"numpoints must be > 0; it was %d\" % numpoints)\n   436\t\n   437\t        # introduce y-offset for handles of the scatter plot\n   438\t        if scatteryoffsets is None:\n   439\t            self._scatteryoffsets = np.array([3. / 8., 4. / 8., 2.5 / 8.])\n   440\t        else:\n   441\t            self._scatteryoffsets = np.asarray(scatteryoffsets)\n   442\t        reps = self.scatterpoints // len(self._scatteryoffsets) + 1\n   443\t        self._scatteryoffsets = np.tile(self._scatteryoffsets,\n   444\t                                        reps)[:self.scatterpoints]\n   445\t\n   446\t        # _legend_box is a VPacker instance that contains all\n   447\t        # legend items and will be initialized from _init_legend_box()\n   448\t        # method.\n   449\t        self._legend_box = None\n   450\t\n   451\t        if isinstance(parent, Axes):\n   452\t            self.isaxes = True\n   453\t            self.axes = parent\n   454\t            self.set_figure(parent.figure)\n   455\t        elif isinstance(parent, FigureBase):\n   456\t            self.isaxes = False\n   457\t            self.set_figure(parent)\n   458\t        else:\n   459\t            raise TypeError(\n   460\t                \"Legend needs either Axes or FigureBase as parent\"\n   461\t            )\n   462\t        self.parent = parent\n   463\t\n   464\t        self._loc_used_default = loc is None\n   465\t        if loc is None:\n   466\t            loc = mpl.rcParams[\"legend.loc\"]\n   467\t            if not self.isaxes and loc in [0, 'best']:\n   468\t                loc = 'upper right'\n   469\t        if isinstance(loc, str):\n   470\t            loc = _api.check_getitem(self.codes, loc=loc)\n   471\t        if not self.isaxes and loc == 0:\n   472\t            raise ValueError(\n   473\t                \"Automatic legend placement (loc='best') not implemented for \"\n   474\t                \"figure legend\")\n   475\t\n   476\t        self._mode = mode\n   477\t        self.set_bbox_to_anchor(bbox_to_anchor, bbox_transform)\n   478\t\n   479\t        # We use FancyBboxPatch to draw a legend frame. The location\n   480\t        # and size of the box will be updated during the drawing time.\n   481\t\n   482\t        if facecolor is None:\n   483\t            facecolor = mpl.rcParams[\"legend.facecolor\"]\n   484\t        if facecolor == 'inherit':\n   485\t            facecolor = mpl.rcParams[\"axes.facecolor\"]\n   486\t\n   487\t        if edgecolor is None:\n   488\t            edgecolor = mpl.rcParams[\"legend.edgecolor\"]\n   489\t        if edgecolor == 'inherit':\n   490\t            edgecolor = mpl.rcParams[\"axes.edgecolor\"]\n   491\t\n   492\t        if fancybox is None:\n   493\t            fancybox = mpl.rcParams[\"legend.fancybox\"]\n   494\t\n   495\t        self.legendPatch = FancyBboxPatch(\n   496\t            xy=(0, 0), width=1, height=1,\n   497\t            facecolor=facecolor, edgecolor=edgecolor,\n   498\t            # If shadow is used, default to alpha=1 (#8943).\n   499\t            alpha=(framealpha if framealpha is not None\n   500\t                   else 1 if shadow\n   501\t                   else mpl.rcParams[\"legend.framealpha\"]),\n   502\t            # The width and height of the legendPatch will be set (in draw())\n   503\t            # to the length that includes the padding. Thus we set pad=0 here.\n   504\t            boxstyle=(\"round,pad=0,rounding_size=0.2\" if fancybox\n   505\t                      else \"square,pad=0\"),\n   506\t            mutation_scale=self._fontsize,\n   507\t            snap=True,\n   508\t            visible=(frameon if frameon is not None\n   509\t                     else mpl.rcParams[\"legend.frameon\"])\n   510\t        )\n   511\t        self._set_artist_props(self.legendPatch)\n   512\t\n   513\t        _api.check_in_list([\"center\", \"left\", \"right\"], alignment=alignment)\n   514\t        self._alignment = alignment\n   515\t\n   516\t        # init with null renderer\n   517\t        self._init_legend_box(handles, labels, markerfirst)\n   518\t\n   519\t        tmp = self._loc_used_default\n   520\t        self._set_loc(loc)\n   521\t        self._loc_used_default = tmp  # ignore changes done by _set_loc\n   522\t\n   523\t        # figure out title font properties:\n   524\t        if title_fontsize is not None and title_fontproperties is not None:\n   525\t            raise ValueError(\n   526\t                \"title_fontsize and title_fontproperties can't be specified \"\n   527\t                \"at the same time. Only use one of them. \")\n   528\t        title_prop_fp = FontProperties._from_any(title_fontproperties)\n   529\t        if isinstance(title_fontproperties, dict):\n   530\t            if \"size\" not in title_fontproperties:\n   531\t                title_fontsize = mpl.rcParams[\"legend.title_fontsize\"]\n   532\t                title_prop_fp.set_size(title_fontsize)\n   533\t        elif title_fontsize is not None:\n   534\t            title_prop_fp.set_size(title_fontsize)\n   535\t        elif not isinstance(title_fontproperties, FontProperties):\n   536\t            title_fontsize = mpl.rcParams[\"legend.title_fontsize\"]\n   537\t            title_prop_fp.set_size(title_fontsize)\n   538\t\n   539\t        self.set_title(title, prop=title_prop_fp)\n   540\t        self._draggable = None\n   541\t\n   542\t        # set the text color\n   543\t\n   544\t        color_getters = {  # getter function depends on line or patch\n   545\t            'linecolor':       ['get_color',           'get_facecolor'],\n   546\t            'markerfacecolor': ['get_markerfacecolor', 'get_facecolor'],\n   547\t            'mfc':             ['get_markerfacecolor', 'get_facecolor'],\n   548\t            'markeredgecolor': ['get_markeredgecolor', 'get_edgecolor'],\n   549\t            'mec':             ['get_markeredgecolor', 'get_edgecolor'],\n   550\t        }\n   551\t        if labelcolor is None:\n   552\t            if mpl.rcParams['legend.labelcolor'] is not None:\n   553\t                labelcolor = mpl.rcParams['legend.labelcolor']\n   554\t            else:\n   555\t                labelcolor = mpl.rcParams['text.color']\n   556\t        if isinstance(labelcolor, str) and labelcolor in color_getters:\n   557\t            getter_names = color_getters[labelcolor]\n   558\t            for handle, text in zip(self.legendHandles, self.texts):\n   559\t                for getter_name in getter_names:\n   560\t                    try:\n   561\t                        color = getattr(handle, getter_name)()\n   562\t                        text.set_color(color)\n   563\t                        break\n   564\t                    except AttributeError:\n   565\t                        pass\n   566\t        elif isinstance(labelcolor, str) and labelcolor == 'none':\n   567\t            for text in self.texts:\n   568\t                text.set_color(labelcolor)\n   569\t        elif np.iterable(labelcolor):\n   570\t            for text, color in zip(self.texts,\n   571\t                                   itertools.cycle(\n   572\t                                       colors.to_rgba_array(labelcolor))):\n   573\t                text.set_color(color)\n   574\t        else:\n   575\t            raise ValueError(f\"Invalid labelcolor: {labelcolor!r}\")\n          # ...\n   622\t\n   623\t    @allow_rasterization\n   624\t    def draw(self, renderer):\n   625\t        # docstring inherited\n   626\t        if not self.get_visible():\n   627\t            return\n   628\t\n   629\t        renderer.open_group('legend', gid=self.get_gid())\n   630\t\n   631\t        fontsize = renderer.points_to_pixels(self._fontsize)\n   632\t\n   633\t        # if mode == fill, set the width of the legend_box to the\n   634\t        # width of the parent (minus pads)\n   635\t        if self._mode in [\"expand\"]:\n   636\t            pad = 2 * (self.borderaxespad + self.borderpad) * fontsize\n   637\t            self._legend_box.set_width(self.get_bbox_to_anchor().width - pad)\n   638\t\n   639\t        # update the location and size of the legend. This needs to\n   640\t        # be done in any case to clip the figure right.\n   641\t        bbox = self._legend_box.get_window_extent(renderer)\n   642\t        self.legendPatch.set_bounds(bbox.bounds)\n   643\t        self.legendPatch.set_mutation_scale(fontsize)\n   644\t\n   645\t        if self.shadow:\n   646\t            Shadow(self.legendPatch, 2, -2).draw(renderer)\n   647\t\n   648\t        self.legendPatch.draw(renderer)\n   649\t        self._legend_box.draw(renderer)\n   650\t\n   651\t        renderer.close_group('legend')\n   652\t        self.stale = False\n   653\t\n   654\t    # _default_handler_map defines the default mapping between plot\n   655\t    # elements and the legend handlers.\n          # ...\n      # ...\n```\n\n</observation>",
                  "type": "tool_result"
                }
              ]
            },
            {
              "role": "assistant",
              "content": [
                {
                  "type": "text",
                  "text": "<thoughts>\n1. I found the Legend class implementation in lib/matplotlib/legend.py\n2. I notice that:\n   - The Legend class already has a `_draggable` attribute initialized as None in __init__ (line 540)\n   - The class inherits from Artist and uses DraggableOffsetBox (imported on line 45)\n3. Let me search for the draggable functionality to understand how it's currently implemented\n</thoughts>"
                },
                {
                  "id": "call_05070c78",
                  "input": {
                    "file_pattern": null,
                    "query": "legend draggable method implementation",
                    "category": "implementation"
                  },
                  "type": "tool_use",
                  "name": "SemanticSearch"
                }
              ]
            },
            {
              "role": "user",
              "content": [
                {
                  "tool_use_id": "call_05070c78",
                  "content": "<observation>\nFound 14 code sections.\n\nViewed relevant code:\nlib/matplotlib/legend.py\n```\n\n    23\t\n    24\timport itertools\n    25\timport logging\n    26\timport time\n    27\t\n    28\timport numpy as np\n    29\t\n    30\timport matplotlib as mpl\n    31\tfrom matplotlib import _api, _docstring, colors, offsetbox\n    32\tfrom matplotlib.artist import Artist, allow_rasterization\n    33\tfrom matplotlib.cbook import silent_list\n    34\tfrom matplotlib.font_manager import FontProperties\n    35\tfrom matplotlib.lines import Line2D\n    36\tfrom matplotlib.patches import (Patch, Rectangle, Shadow, FancyBboxPatch,\n    37\t                                StepPatch)\n    38\tfrom matplotlib.collections import (\n    39\t    Collection, CircleCollection, LineCollection, PathCollection,\n    40\t    PolyCollection, RegularPolyCollection)\n    41\tfrom matplotlib.text import Text\n    42\tfrom matplotlib.transforms import Bbox, BboxBase, TransformedBbox\n    43\tfrom matplotlib.transforms import BboxTransformTo, BboxTransformFrom\n    44\tfrom matplotlib.offsetbox import (\n    45\t    AnchoredOffsetbox, DraggableOffsetBox,\n    46\t    HPacker, VPacker,\n    47\t    DrawingArea, TextArea,\n    48\t)\n    49\tfrom matplotlib.container import ErrorbarContainer, BarContainer, StemContainer\n    50\tfrom . import legend_handler\n    51\t\n    52\t\n    53\tclass DraggableLegend(DraggableOffsetBox):\n    54\t    def __init__(self, legend, use_blit=False, update=\"loc\"):\n    55\t        \"\"\"\n    56\t        Wrapper around a `.Legend` to support mouse dragging.\n    57\t\n    58\t        Parameters\n    59\t        ----------\n    60\t        legend : `.Legend`\n    61\t            The `.Legend` instance to wrap.\n    62\t        use_blit : bool, optional\n    63\t            Use blitting for faster image composition. For details see\n    64\t            :ref:`func-animation`.\n    65\t        update : {'loc', 'bbox'}, optional\n    66\t            If \"loc\", update the *loc* parameter of the legend upon finalizing.\n    67\t            If \"bbox\", update the *bbox_to_anchor* parameter.\n    68\t        \"\"\"\n    69\t        self.legend = legend\n    70\t\n    71\t        _api.check_in_list([\"loc\", \"bbox\"], update=update)\n    72\t        self._update = update\n    73\t\n    74\t        super().__init__(legend, legend._legend_box, use_blit=use_blit)\n    75\t\n    76\t    def finalize_offset(self):\n    77\t        if self._update == \"loc\":\n    78\t            self._update_loc(self.get_loc_in_canvas())\n    79\t        elif self._update == \"bbox\":\n    80\t            self._bbox_to_anchor(self.get_loc_in_canvas())\n    81\t\n    82\t    def _update_loc(self, loc_in_canvas):\n    83\t        bbox = self.legend.get_bbox_to_anchor()\n    84\t        # if bbox has zero width or height, the transformation is\n    85\t        # ill-defined. Fall back to the default bbox_to_anchor.\n    86\t        if bbox.width == 0 or bbox.height == 0:\n    87\t            self.legend.set_bbox_to_anchor(None)\n    88\t            bbox = self.legend.get_bbox_to_anchor()\n    89\t        _bbox_transform = BboxTransformFrom(bbox)\n    90\t        self.legend._loc = tuple(_bbox_transform.transform(loc_in_canvas))\n    91\t\n    92\t    def _update_bbox_to_anchor(self, loc_in_canvas):\n    93\t        loc_in_bbox = self.legend.axes.transAxes.transform(loc_in_canvas)\n    94\t        self.legend.set_bbox_to_anchor(loc_in_bbox)\n      # ...\n   290\t\n   291\t\n   292\tclass Legend(Artist):\n   293\t    \"\"\"\n   294\t    Place a legend on the axes at location loc.\n   295\t    \"\"\"\n   296\t\n   297\t    # 'best' is only implemented for axes legends\n   298\t    codes = {'best': 0, **AnchoredOffsetbox.codes}\n   299\t    zorder = 5\n          # ...\n  1078\t\n  1079\t    def set_draggable(self, state, use_blit=False, update='loc'):\n  1080\t        \"\"\"\n  1081\t        Enable or disable mouse dragging support of the legend.\n  1082\t\n  1083\t        Parameters\n  1084\t        ----------\n  1085\t        state : bool\n  1086\t            Whether mouse dragging is enabled.\n  1087\t        use_blit : bool, optional\n  1088\t            Use blitting for faster image composition. For details see\n  1089\t            :ref:`func-animation`.\n  1090\t        update : {'loc', 'bbox'}, optional\n  1091\t            The legend parameter to be changed when dragged:\n  1092\t\n  1093\t            - 'loc': update the *loc* parameter of the legend\n  1094\t            - 'bbox': update the *bbox_to_anchor* parameter of the legend\n  1095\t\n  1096\t        Returns\n  1097\t        -------\n  1098\t        `.DraggableLegend` or *None*\n  1099\t            If *state* is ``True`` this returns the `.DraggableLegend` helper\n  1100\t            instance. Otherwise this returns *None*.\n  1101\t        \"\"\"\n  1102\t        if state:\n  1103\t            if self._draggable is None:\n  1104\t                self._draggable = DraggableLegend(self,\n  1105\t                                                  use_blit,\n  1106\t                                                  update=update)\n  1107\t        else:\n  1108\t            if self._draggable is not None:\n  1109\t                self._draggable.disconnect()\n  1110\t            self._draggable = None\n  1111\t        return self._draggable\n  1112\t\n  1113\t    def get_draggable(self):\n  1114\t        \"\"\"Return ``True`` if the legend is draggable, ``False`` otherwise.\"\"\"\n  1115\t        return self._draggable is not None\n  1116\t\n  1117\t\n  1118\t# Helper functions to parse legend arguments for both `figure.legend` and\n  1119\t# `axes.legend`:\n      # ...\n```\n\n</observation>",
                  "type": "tool_result"
                }
              ]
            },
            {
              "role": "assistant",
              "content": [
                {
                  "type": "text",
                  "text": "<thoughts>\n1. I found the draggable functionality implementation:\n   - There's a DraggableLegend class that inherits from DraggableOffsetBox\n   - Legend class has set_draggable() and get_draggable() methods\n   - The _draggable attribute is initialized as None in __init__\n2. Adding a draggable parameter to __init__ seems feasible since:\n   - The infrastructure for draggable legends already exists\n   - It would just need to call set_draggable() during initialization\n3. Let me check if there are any tests for the draggable functionality to understand how to test the new parameter\n</thoughts>"
                },
                {
                  "id": "call_9dda00e0",
                  "input": {
                    "file_pattern": null,
                    "query": "legend draggable tests",
                    "category": "test"
                  },
                  "type": "tool_use",
                  "name": "SemanticSearch"
                }
              ]
            },
            {
              "role": "user",
              "content": [
                {
                  "tool_use_id": "call_9dda00e0",
                  "content": "<observation>\nFound 12 code sections.\n\nViewed relevant code:\nlib/matplotlib/tests/test_legend.py\n```\n     1\timport collections\n     2\timport platform\n     3\tfrom unittest import mock\n     4\timport warnings\n     5\t\n     6\timport numpy as np\n     7\timport pytest\n     8\t\n     9\tfrom matplotlib.testing.decorators import check_figures_equal, image_comparison\n    10\tfrom matplotlib.testing._markers import needs_usetex\n    11\timport matplotlib.pyplot as plt\n    12\timport matplotlib as mpl\n    13\timport matplotlib.transforms as mtransforms\n    14\timport matplotlib.collections as mcollections\n    15\timport matplotlib.lines as mlines\n    16\tfrom matplotlib.legend_handler import HandlerTuple\n    17\timport matplotlib.legend as mlegend\n    18\tfrom matplotlib import rc_context\n    19\tfrom matplotlib.font_manager import FontProperties\n      # ...\n   775\t\n   776\t\n   777\tdef test_get_set_draggable():\n   778\t    legend = plt.legend()\n   779\t    assert not legend.get_draggable()\n   780\t    legend.set_draggable(True)\n   781\t    assert legend.get_draggable()\n   782\t    legend.set_draggable(False)\n   783\t    assert not legend.get_draggable()\n      # ...\n```\n\n</observation>",
                  "type": "tool_result"
                }
              ]
            },
            {
              "role": "assistant",
              "content": [
                {
                  "type": "text",
                  "text": "<thoughts>\n1. I found the test for draggable functionality in test_legend.py\n2. The changes needed are:\n   - Add a draggable parameter to Legend.__init__\n   - Call set_draggable() in __init__ if draggable=True\n   - Add a test case for the new parameter\n3. Let me implement these changes\n</thoughts>"
                },
                {
                  "id": "call_8befcc99",
                  "input": {
                    "command": "str_replace",
                    "path": "lib/matplotlib/legend.py",
                    "file_text": null,
                    "view_range": null,
                    "old_str": "    def __init__(\n        self, parent, handles, labels,\n        loc=None,\n        numpoints=None,      # number of points in the legend line\n        markerscale=None,    # relative size of legend markers vs. original\n        markerfirst=True,    # left/right ordering of legend marker and label\n        scatterpoints=None,  # number of scatter points\n        scatteryoffsets=None,\n        prop=None,           # properties for the legend texts\n        fontsize=None,       # keyword to set font size directly\n        labelcolor=None,     # keyword to set the text color\n\n        # spacing & pad defined as a fraction of the font-size\n        borderpad=None,      # whitespace inside the legend border\n        labelspacing=None,   # vertical space between the legend entries\n        handlelength=None,   # length of the legend handles\n        handleheight=None,   # height of the legend handles\n        handletextpad=None,  # pad between the legend handle and text\n        borderaxespad=None,  # pad between the axes and legend border\n        columnspacing=None,  # spacing between columns\n\n        ncols=1,     # number of columns\n        mode=None,  # horizontal distribution of columns: None or \"expand\"\n\n        fancybox=None,  # True: fancy box, False: rounded box, None: rcParam\n        shadow=None,\n        title=None,           # legend title\n        title_fontsize=None,  # legend title font size\n        framealpha=None,      # set frame alpha\n        edgecolor=None,       # frame patch edgecolor\n        facecolor=None,       # frame patch facecolor\n\n        bbox_to_anchor=None,  # bbox to which the legend will be anchored\n        bbox_transform=None,  # transform for the bbox\n        frameon=None,         # draw frame\n        handler_map=None,\n        title_fontproperties=None,  # properties for the legend title\n        alignment=\"center\",       # control the alignment within the legend box\n        *,\n        ncol=1  # synonym for ncols (backward compatibility)",
                    "new_str": "    def __init__(\n        self, parent, handles, labels,\n        loc=None,\n        numpoints=None,      # number of points in the legend line\n        markerscale=None,    # relative size of legend markers vs. original\n        markerfirst=True,    # left/right ordering of legend marker and label\n        scatterpoints=None,  # number of scatter points\n        scatteryoffsets=None,\n        prop=None,           # properties for the legend texts\n        fontsize=None,       # keyword to set font size directly\n        labelcolor=None,     # keyword to set the text color\n\n        # spacing & pad defined as a fraction of the font-size\n        borderpad=None,      # whitespace inside the legend border\n        labelspacing=None,   # vertical space between the legend entries\n        handlelength=None,   # length of the legend handles\n        handleheight=None,   # height of the legend handles\n        handletextpad=None,  # pad between the legend handle and text\n        borderaxespad=None,  # pad between the axes and legend border\n        columnspacing=None,  # spacing between columns\n\n        ncols=1,     # number of columns\n        mode=None,  # horizontal distribution of columns: None or \"expand\"\n\n        fancybox=None,  # True: fancy box, False: rounded box, None: rcParam\n        shadow=None,\n        title=None,           # legend title\n        title_fontsize=None,  # legend title font size\n        framealpha=None,      # set frame alpha\n        edgecolor=None,       # frame patch edgecolor\n        facecolor=None,       # frame patch facecolor\n\n        bbox_to_anchor=None,  # bbox to which the legend will be anchored\n        bbox_transform=None,  # transform for the bbox\n        frameon=None,         # draw frame\n        handler_map=None,\n        title_fontproperties=None,  # properties for the legend title\n        alignment=\"center\",       # control the alignment within the legend box\n        draggable=False,      # enable mouse dragging support\n        *,\n        ncol=1  # synonym for ncols (backward compatibility)",
                    "insert_line": null
                  },
                  "type": "tool_use",
                  "name": "str_replace_editor"
                }
              ]
            },
            {
              "role": "user",
              "content": [
                {
                  "tool_use_id": "call_8befcc99",
                  "content": "<observation>\nThe file lib/matplotlib/legend.py has been edited. Here's the result of running `cat -n` on a snippet of lib/matplotlib/legend.py:\n   306\t    def __str__(self):\n   307\t        return \"Legend\"\n   308\t\n   309\t    @_api.make_keyword_only(\"3.6\", \"loc\")\n   310\t    @_docstring.dedent_interpd\n   311\t    def __init__(\n   312\t        self, parent, handles, labels,\n   313\t        loc=None,\n   314\t        numpoints=None,      # number of points in the legend line\n   315\t        markerscale=None,    # relative size of legend markers vs. original\n   316\t        markerfirst=True,    # left/right ordering of legend marker and label\n   317\t        scatterpoints=None,  # number of scatter points\n   318\t        scatteryoffsets=None,\n   319\t        prop=None,           # properties for the legend texts\n   320\t        fontsize=None,       # keyword to set font size directly\n   321\t        labelcolor=None,     # keyword to set the text color\n   322\t\n   323\t        # spacing & pad defined as a fraction of the font-size\n   324\t        borderpad=None,      # whitespace inside the legend border\n   325\t        labelspacing=None,   # vertical space between the legend entries\n   326\t        handlelength=None,   # length of the legend handles\n   327\t        handleheight=None,   # height of the legend handles\n   328\t        handletextpad=None,  # pad between the legend handle and text\n   329\t        borderaxespad=None,  # pad between the axes and legend border\n   330\t        columnspacing=None,  # spacing between columns\n   331\t\n   332\t        ncols=1,     # number of columns\n   333\t        mode=None,  # horizontal distribution of columns: None or \"expand\"\n   334\t\n   335\t        fancybox=None,  # True: fancy box, False: rounded box, None: rcParam\n   336\t        shadow=None,\n   337\t        title=None,           # legend title\n   338\t        title_fontsize=None,  # legend title font size\n   339\t        framealpha=None,      # set frame alpha\n   340\t        edgecolor=None,       # frame patch edgecolor\n   341\t        facecolor=None,       # frame patch facecolor\n   342\t\n   343\t        bbox_to_anchor=None,  # bbox to which the legend will be anchored\n   344\t        bbox_transform=None,  # transform for the bbox\n   345\t        frameon=None,         # draw frame\n   346\t        handler_map=None,\n   347\t        title_fontproperties=None,  # properties for the legend title\n   348\t        alignment=\"center\",       # control the alignment within the legend box\n   349\t        draggable=False,      # enable mouse dragging support\n   350\t        *,\n   351\t        ncol=1  # synonym for ncols (backward compatibility)\n   352\t    ):\n   353\t        \"\"\"\n   354\t        Parameters\nReview the changes and make sure they are as expected. Edit the file again if necessary.\n\nRunning 936 tests in the following files:\n * lib/matplotlib/tests/test_legend.py\n * lib/matplotlib/tests/test_contour.py\n * lib/matplotlib/tests/test_axes.py\n\n* FAILED lib/matplotlib/tests/test_contour.py test_contourf_log_extension>\n```\n\n    @image_comparison(['contour_log_extension.png'],\n                      remove_text=True, style='mpl20',\n                      tol=1.444)\n    def test_contourf_log_extension():\n        # Remove this line when this test image is regenerated.\n        plt.rcParams['pcolormesh.snap'] = False\n    \n        # Test that contourf with lognorm is extended correctly\n        fig, (ax1, ax2, ax3) = plt.subplots(1, 3, figsize=(10, 5))\n        fig.subplots_adjust(left=0.05, right=0.95)\n    \n        # make data set with large range e.g. between 1e-8 and 1e10\n        data_exp = np.linspace(-7.5, 9.5, 1200)\n        data = np.power(10, data_exp).reshape(30, 40)\n        # make manual levels e.g. between 1e-4 and 1e-6\n        levels_exp = np.arange(-4., 7.)\n        levels = np.power(10., levels_exp)\n    \n        # original data\n        c1 = ax1.contourf(data,\n                          norm=LogNorm(vmin=data.min(), vmax=data.max()))\n        # just show data in levels\n        c2 = ax2.contourf(data, levels=levels,\n                          norm=LogNorm(vmin=levels.min(), vmax=levels.max()),\n                          extend='neither')\n        # extend data from levels\n        c3 = ax3.contourf(data, levels=levels,\n                          norm=LogNorm(vmin=levels.min(), vmax=levels.max()),\n                          extend='both')\n        cb = plt.colorbar(c1, ax=ax1)\n        assert cb.ax.get_ylim() == (1e-8, 1e10)\n        cb = plt.colorbar(c2, ax=ax2)\n>       assert cb.ax.get_ylim() == (1e-4, 1e6)\nE       assert (9.9999999999...05, 1000000.0) == (0.0001, 1000000.0)\nE         \nE         At index 0 diff: 9.999999999999999e-05 != 0.0001\nE         Use -v to get more diff\n\nlib/matplotlib/tests/test_contour.py:316: AssertionError\n```\n\n\n935 passed. 1 failed. 0 errors.\n</observation>",
                  "type": "tool_result",
                  "cache_control": {
                    "type": "ephemeral"
                  }
                }
              ]
            },
            {
              "role": "assistant",
              "content": [
                {
                  "type": "text",
                  "text": "<thoughts>\n1. I've added the draggable parameter to the __init__ signature, but I still need to:\n   - Add it to the docstring\n   - Actually implement the functionality by calling set_draggable() in __init__\n2. The test failure in test_contour.py seems unrelated to our changes (it's about colorbar limits)\n3. Let me continue with the implementation\n</thoughts>"
                },
                {
                  "id": "call_7590c0f7",
                  "input": {
                    "command": "str_replace",
                    "path": "lib/matplotlib/legend.py",
                    "file_text": null,
                    "view_range": null,
                    "old_str": "        self.set_title(title, prop=title_prop_fp)\n        self._draggable = None\n\n        # set the text color",
                    "new_str": "        self.set_title(title, prop=title_prop_fp)\n        self._draggable = None\n        if draggable:\n            self.set_draggable(True)\n\n        # set the text color",
                    "insert_line": null
                  },
                  "type": "tool_use",
                  "name": "str_replace_editor",
                  "cache_control": {
                    "type": "ephemeral"
                  }
                }
              ]
            },
            {
              "role": "user",
              "content": [
                {
                  "tool_use_id": "call_7590c0f7",
                  "content": "<observation>\nThe file lib/matplotlib/legend.py has been edited. Here's the result of running `cat -n` on a snippet of lib/matplotlib/legend.py:\n   540\t            title_prop_fp.set_size(title_fontsize)\n   541\t        elif not isinstance(title_fontproperties, FontProperties):\n   542\t            title_fontsize = mpl.rcParams[\"legend.title_fontsize\"]\n   543\t            title_prop_fp.set_size(title_fontsize)\n   544\t\n   545\t        self.set_title(title, prop=title_prop_fp)\n   546\t        self._draggable = None\n   547\t        if draggable:\n   548\t            self.set_draggable(True)\n   549\t\n   550\t        # set the text color\n   551\t\n   552\t        color_getters = {  # getter function depends on line or patch\n   553\t            'linecolor':       ['get_color',           'get_facecolor'],\nReview the changes and make sure they are as expected. Edit the file again if necessary.\n\nRunning 936 tests in the following files:\n * lib/matplotlib/tests/test_legend.py\n * lib/matplotlib/tests/test_contour.py\n * lib/matplotlib/tests/test_axes.py\n\n* FAILED lib/matplotlib/tests/test_contour.py test_contourf_log_extension>\n```\n\n    @image_comparison(['contour_log_extension.png'],\n                      remove_text=True, style='mpl20',\n                      tol=1.444)\n    def test_contourf_log_extension():\n        # Remove this line when this test image is regenerated.\n        plt.rcParams['pcolormesh.snap'] = False\n    \n        # Test that contourf with lognorm is extended correctly\n        fig, (ax1, ax2, ax3) = plt.subplots(1, 3, figsize=(10, 5))\n        fig.subplots_adjust(left=0.05, right=0.95)\n    \n        # make data set with large range e.g. between 1e-8 and 1e10\n        data_exp = np.linspace(-7.5, 9.5, 1200)\n        data = np.power(10, data_exp).reshape(30, 40)\n        # make manual levels e.g. between 1e-4 and 1e-6\n        levels_exp = np.arange(-4., 7.)\n        levels = np.power(10., levels_exp)\n    \n        # original data\n        c1 = ax1.contourf(data,\n                          norm=LogNorm(vmin=data.min(), vmax=data.max()))\n        # just show data in levels\n        c2 = ax2.contourf(data, levels=levels,\n                          norm=LogNorm(vmin=levels.min(), vmax=levels.max()),\n                          extend='neither')\n        # extend data from levels\n        c3 = ax3.contourf(data, levels=levels,\n                          norm=LogNorm(vmin=levels.min(), vmax=levels.max()),\n                          extend='both')\n        cb = plt.colorbar(c1, ax=ax1)\n        assert cb.ax.get_ylim() == (1e-8, 1e10)\n        cb = plt.colorbar(c2, ax=ax2)\n>       assert cb.ax.get_ylim() == (1e-4, 1e6)\nE       assert (9.9999999999...05, 1000000.0) == (0.0001, 1000000.0)\nE         \nE         At index 0 diff: 9.999999999999999e-05 != 0.0001\nE         Use -v to get more diff\n\nlib/matplotlib/tests/test_contour.py:316: AssertionError\n```\n\n\n935 passed. 1 failed. 0 errors.\n</observation>",
                  "type": "tool_result",
                  "cache_control": {
                    "type": "ephemeral"
                  }
                }
              ]
            }
          ],
          "response": {
            "id": "msg_01NaUWpGUNnTiYjCdqUQF5Sz",
            "content": [
              {
                "text": "<thoughts>\n1. I've added the implementation to enable draggable functionality when draggable=True\n2. Now I need to:\n   - Add the draggable parameter to the docstring\n   - Add a test case for the new parameter\n3. Let me update the docstring first\n</thoughts>",
                "type": "text"
              },
              {
                "id": "toolu_01GmbP66qFjd7Q6suA9t5KpB",
                "input": {
                  "command": "str_replace",
                  "path": "lib/matplotlib/legend.py",
                  "file_text": "null",
                  "view_range": "null",
                  "old_str": "        alignment : {'center', 'left', 'right'}, default: 'center'\n            The alignment value for the legend box. The valid values are:\n            {'center', 'left', 'right'}\n\n        Other Parameters\n        ----------------\n        **kwargs : `.Text` properties\n            Other keyword arguments are given to the `.Text` instance\n            containing the legend's text.\n\n        See Also\n        --------\n        .Figure.legend",
                  "new_str": "        alignment : {'center', 'left', 'right'}, default: 'center'\n            The alignment value for the legend box. The valid values are:\n            {'center', 'left', 'right'}\n\n        draggable : bool, default: False\n            Enable mouse dragging support for the legend.\n\n        Other Parameters\n        ----------------\n        **kwargs : `.Text` properties\n            Other keyword arguments are given to the `.Text` instance\n            containing the legend's text.\n\n        See Also\n        --------\n        .Figure.legend",
                  "insert_line": "null"
                },
                "name": "str_replace_editor",
                "type": "tool_use"
              }
            ],
            "model": "claude-3-5-sonnet-20241022",
            "role": "assistant",
            "stop_reason": "tool_use",
            "stop_sequence": null,
            "type": "message",
            "usage": {
              "cache_creation_input_tokens": 1351,
              "cache_read_input_tokens": 14974,
              "input_tokens": 3,
              "output_tokens": 468
            }
          },
          "usage": {
            "completion_cost": 0.011082000000000002,
            "completion_tokens": 468,
            "prompt_tokens": 1354,
            "cached_tokens": 14974
          }
        }
      },
      "possible_actions": [
        "SemanticSearch",
        "FindClass",
        "FindFunction",
        "FindCodeSnippet",
        "RequestMoreContext",
        "ClaudeEditTool",
        "Finish",
        "Reject"
      ],
      "output": {
        "message": "String '        alignment : {'center', 'left', 'right'}, default: 'center'\n            The alignment value for the legend box. The valid values are:\n            {'center', 'left', 'right'}\n\n        Other Parameters\n        ----------------\n        **kwargs : `.Text` properties\n            Other keyword arguments are given to the `.Text` instance\n            containing the legend's text.\n\n        See Also\n        --------\n        .Figure.legend' not found in lib/matplotlib/legend.py",
        "terminal": false,
        "expect_correction": true,
        "properties": {
          "fail_reason": "string_not_found"
        }
      },
      "parent_id": 5
    },
    {
      "node_id": 7,
      "action": {
        "scratch_pad": "1. The docstring replacement failed because I didn't match the exact text. Let me try again with the correct text.\n2. First, let me view the current docstring to get the exact text",
        "command": "view",
        "path": "lib/matplotlib/legend.py",
        "view_range": [
          350,
          400
        ],
        "action_args_class": "moatless.actions.edit.EditActionArguments"
      },
      "observation": {
        "message": "Here's the result of running `cat -n` on lib/matplotlib/legend.py:\n   350\t        ----------\n   351\t        parent : `~matplotlib.axes.Axes` or `.Figure`\n   352\t            The artist that contains the legend.\n   353\t\n   354\t        handles : list of `.Artist`\n   355\t            A list of Artists (lines, patches) to be added to the legend.\n   356\t\n   357\t        labels : list of str\n   358\t            A list of labels to show next to the artists. The length of handles\n   359\t            and labels should be the same. If they are not, they are truncated\n   360\t            to the smaller of both lengths.\n   361\t\n   362\t        Other Parameters\n   363\t        ----------------\n   364\t        %(_legend_kw_doc)s\n   365\t\n   366\t        Notes\n   367\t        -----\n   368\t        Users can specify any arbitrary location for the legend using the\n   369\t        *bbox_to_anchor* keyword argument. *bbox_to_anchor* can be a\n   370\t        `.BboxBase` (or derived there from) or a tuple of 2 or 4 floats.\n   371\t        See `set_bbox_to_anchor` for more detail.\n   372\t\n   373\t        The legend location can be specified by setting *loc* with a tuple of\n   374\t        2 floats, which is interpreted as the lower-left corner of the legend\n   375\t        in the normalized axes coordinate.\n   376\t        \"\"\"\n   377\t        # local import only to avoid circularity\n   378\t        from matplotlib.axes import Axes\n   379\t        from matplotlib.figure import FigureBase\n   380\t\n   381\t        super().__init__()\n   382\t\n   383\t        if prop is None:\n   384\t            if fontsize is not None:\n   385\t                self.prop = FontProperties(size=fontsize)\n   386\t            else:\n   387\t                self.prop = FontProperties(\n   388\t                    size=mpl.rcParams[\"legend.fontsize\"])\n   389\t        else:\n   390\t            self.prop = FontProperties._from_any(prop)\n   391\t            if isinstance(prop, dict) and \"size\" not in prop:\n   392\t                self.prop.set_size(mpl.rcParams[\"legend.fontsize\"])\n   393\t\n   394\t        self._fontsize = self.prop.get_size_in_points()\n   395\t\n   396\t        self.texts = []\n   397\t        self.legendHandles = []\n   398\t        self._legend_title_box = None\n   399\t\n   400\t        #: A dictionary with the extra handler mappings for this Legend\n",
        "terminal": false,
        "expect_correction": false,
        "properties": {
          "flag": "no_new_spans"
        }
      },
      "file_context": {
        "max_tokens": 8000,
        "files": [
          {
            "file_path": "lib/matplotlib/legend.py",
            "patch": "--- a/lib/matplotlib/legend.py\n+++ b/lib/matplotlib/legend.py\n@@ -341,6 +341,7 @@\n         handler_map=None,\n         title_fontproperties=None,  # properties for the legend title\n         alignment=\"center\",       # control the alignment within the legend box\n+        draggable=False,      # enable mouse dragging support\n         *,\n         ncol=1  # synonym for ncols (backward compatibility)\n     ):\n@@ -538,6 +539,8 @@\n \n         self.set_title(title, prop=title_prop_fp)\n         self._draggable = None\n+        if draggable:\n+            self.set_draggable(True)\n \n         # set the text color\n \n",
            "spans": [
              {
                "span_id": "imports",
                "pinned": false
              },
              {
                "span_id": "Legend",
                "pinned": false
              },
              {
                "span_id": "Legend.__init__",
                "pinned": false
              },
              {
                "span_id": "Legend.draw",
                "pinned": false
              },
              {
                "span_id": "DraggableLegend",
                "pinned": false
              },
              {
                "span_id": "DraggableLegend.__init__",
                "pinned": false
              },
              {
                "span_id": "DraggableLegend.finalize_offset",
                "pinned": false
              },
              {
                "span_id": "DraggableLegend._update_loc",
                "pinned": false
              },
              {
                "span_id": "DraggableLegend._update_bbox_to_anchor",
                "pinned": false
              },
              {
                "span_id": "Legend.set_draggable",
                "pinned": false
              },
              {
                "span_id": "Legend.get_draggable",
                "pinned": false
              }
            ],
            "show_all_spans": false
          },
          {
            "file_path": "lib/matplotlib/tests/test_legend.py",
            "spans": [
              {
                "span_id": "imports",
                "pinned": false
              },
              {
                "span_id": "test_get_set_draggable",
                "pinned": false
              }
            ],
            "show_all_spans": false,
            "patch": null
          },
          {
            "file_path": "lib/matplotlib/tests/test_contour.py",
            "spans": [
              {
                "span_id": "test_contourf_log_extension",
                "pinned": false
              }
            ],
            "show_all_spans": false,
            "patch": null
          },
          {
            "file_path": "lib/matplotlib/tests/test_axes.py",
            "spans": [],
            "show_all_spans": false,
            "patch": null
          }
        ]
      },
      "completions": {
        "build_action": {
          "model": "claude-3-5-sonnet-20241022",
          "input": [
            {
              "role": "user",
              "content": "<task>\nlegend draggable as keyword\n<!--To help us understand and resolve your issue, please fill out the form to the best of your ability.-->\r\n<!--You can feel free to delete the sections that do not apply.-->\r\n\r\n### Feature request\r\n\r\n**There is not keyword to make legend draggable at creation**\r\n\r\n<!--A short 1-2 sentences that succinctly describes the bug-->\r\n\r\nIs there a code reason why one can not add a \"draggable=True\" keyword to the __init__ function for Legend?  This would be more handy than having to call it after legend creation.  And, naively, it would seem simple to do.  But maybe there is a reason why it would not work?\n\n</task>"
            },
            {
              "role": "assistant",
              "content": [
                {
                  "type": "text",
                  "text": "<thoughts>\n1. First, I need to locate the Legend class implementation to understand its current initialization\n2. Then I'll check if there are any technical limitations for adding the draggable parameter\n3. I'll also look for any tests related to legend draggability to understand the current testing approach\n4. Finally, I'll implement the change if there are no blockers\n</thoughts>"
                },
                {
                  "id": "call_85bc3e3e",
                  "input": {
                    "file_pattern": null,
                    "class_name": "Legend"
                  },
                  "type": "tool_use",
                  "name": "FindClass"
                }
              ]
            },
            {
              "role": "user",
              "content": [
                {
                  "tool_use_id": "call_85bc3e3e",
                  "content": "<observation>\nFound 40 code sections.\n\nViewed relevant code:\nlib/matplotlib/legend.py\n```\n\n    23\t\n    24\timport itertools\n    25\timport logging\n    26\timport time\n    27\t\n    28\timport numpy as np\n    29\t\n    30\timport matplotlib as mpl\n    31\tfrom matplotlib import _api, _docstring, colors, offsetbox\n    32\tfrom matplotlib.artist import Artist, allow_rasterization\n    33\tfrom matplotlib.cbook import silent_list\n    34\tfrom matplotlib.font_manager import FontProperties\n    35\tfrom matplotlib.lines import Line2D\n    36\tfrom matplotlib.patches import (Patch, Rectangle, Shadow, FancyBboxPatch,\n    37\t                                StepPatch)\n    38\tfrom matplotlib.collections import (\n    39\t    Collection, CircleCollection, LineCollection, PathCollection,\n    40\t    PolyCollection, RegularPolyCollection)\n    41\tfrom matplotlib.text import Text\n    42\tfrom matplotlib.transforms import Bbox, BboxBase, TransformedBbox\n    43\tfrom matplotlib.transforms import BboxTransformTo, BboxTransformFrom\n    44\tfrom matplotlib.offsetbox import (\n    45\t    AnchoredOffsetbox, DraggableOffsetBox,\n    46\t    HPacker, VPacker,\n    47\t    DrawingArea, TextArea,\n    48\t)\n    49\tfrom matplotlib.container import ErrorbarContainer, BarContainer, StemContainer\n    50\tfrom . import legend_handler\n      # ...\n   290\t\n   291\t\n   292\tclass Legend(Artist):\n   293\t    \"\"\"\n   294\t    Place a legend on the axes at location loc.\n   295\t    \"\"\"\n   296\t\n   297\t    # 'best' is only implemented for axes legends\n   298\t    codes = {'best': 0, **AnchoredOffsetbox.codes}\n   299\t    zorder = 5\n          # ...\n   303\t\n   304\t    @_api.make_keyword_only(\"3.6\", \"loc\")\n   305\t    @_docstring.dedent_interpd\n   306\t    def __init__(\n   307\t        self, parent, handles, labels,\n   308\t        loc=None,\n   309\t        numpoints=None,      # number of points in the legend line\n   310\t        markerscale=None,    # relative size of legend markers vs. original\n   311\t        markerfirst=True,    # left/right ordering of legend marker and label\n   312\t        scatterpoints=None,  # number of scatter points\n   313\t        scatteryoffsets=None,\n   314\t        prop=None,           # properties for the legend texts\n   315\t        fontsize=None,       # keyword to set font size directly\n   316\t        labelcolor=None,     # keyword to set the text color\n   317\t\n   318\t        # spacing & pad defined as a fraction of the font-size\n   319\t        borderpad=None,      # whitespace inside the legend border\n   320\t        labelspacing=None,   # vertical space between the legend entries\n   321\t        handlelength=None,   # length of the legend handles\n   322\t        handleheight=None,   # height of the legend handles\n   323\t        handletextpad=None,  # pad between the legend handle and text\n   324\t        borderaxespad=None,  # pad between the axes and legend border\n   325\t        columnspacing=None,  # spacing between columns\n   326\t\n   327\t        ncols=1,     # number of columns\n   328\t        mode=None,  # horizontal distribution of columns: None or \"expand\"\n   329\t\n   330\t        fancybox=None,  # True: fancy box, False: rounded box, None: rcParam\n   331\t        shadow=None,\n   332\t        title=None,           # legend title\n   333\t        title_fontsize=None,  # legend title font size\n   334\t        framealpha=None,      # set frame alpha\n   335\t        edgecolor=None,       # frame patch edgecolor\n   336\t        facecolor=None,       # frame patch facecolor\n   337\t\n   338\t        bbox_to_anchor=None,  # bbox to which the legend will be anchored\n   339\t        bbox_transform=None,  # transform for the bbox\n   340\t        frameon=None,         # draw frame\n   341\t        handler_map=None,\n   342\t        title_fontproperties=None,  # properties for the legend title\n   343\t        alignment=\"center\",       # control the alignment within the legend box\n   344\t        *,\n   345\t        ncol=1  # synonym for ncols (backward compatibility)\n   346\t    ):\n   347\t        \"\"\"\n   348\t        Parameters\n   349\t        ----------\n   350\t        parent : `~matplotlib.axes.Axes` or `.Figure`\n   351\t            The artist that contains the legend.\n   352\t\n   353\t        handles : list of `.Artist`\n   354\t            A list of Artists (lines, patches) to be added to the legend.\n   355\t\n   356\t        labels : list of str\n   357\t            A list of labels to show next to the artists. The length of handles\n   358\t            and labels should be the same. If they are not, they are truncated\n   359\t            to the smaller of both lengths.\n   360\t\n   361\t        Other Parameters\n   362\t        ----------------\n   363\t        %(_legend_kw_doc)s\n   364\t\n   365\t        Notes\n   366\t        -----\n   367\t        Users can specify any arbitrary location for the legend using the\n   368\t        *bbox_to_anchor* keyword argument. *bbox_to_anchor* can be a\n   369\t        `.BboxBase` (or derived there from) or a tuple of 2 or 4 floats.\n   370\t        See `set_bbox_to_anchor` for more detail.\n   371\t\n   372\t        The legend location can be specified by setting *loc* with a tuple of\n   373\t        2 floats, which is interpreted as the lower-left corner of the legend\n   374\t        in the normalized axes coordinate.\n   375\t        \"\"\"\n   376\t        # local import only to avoid circularity\n   377\t        from matplotlib.axes import Axes\n   378\t        from matplotlib.figure import FigureBase\n   379\t\n   380\t        super().__init__()\n   381\t\n   382\t        if prop is None:\n   383\t            if fontsize is not None:\n   384\t                self.prop = FontProperties(size=fontsize)\n   385\t            else:\n   386\t                self.prop = FontProperties(\n   387\t                    size=mpl.rcParams[\"legend.fontsize\"])\n   388\t        else:\n   389\t            self.prop = FontProperties._from_any(prop)\n   390\t            if isinstance(prop, dict) and \"size\" not in prop:\n   391\t                self.prop.set_size(mpl.rcParams[\"legend.fontsize\"])\n   392\t\n   393\t        self._fontsize = self.prop.get_size_in_points()\n   394\t\n   395\t        self.texts = []\n   396\t        self.legendHandles = []\n   397\t        self._legend_title_box = None\n   398\t\n   399\t        #: A dictionary with the extra handler mappings for this Legend\n   400\t        #: instance.\n   401\t        self._custom_handler_map = handler_map\n   402\t\n   403\t        def val_or_rc(val, rc_name):\n   404\t            return val if val is not None else mpl.rcParams[rc_name]\n   405\t\n   406\t        self.numpoints = val_or_rc(numpoints, 'legend.numpoints')\n   407\t        self.markerscale = val_or_rc(markerscale, 'legend.markerscale')\n   408\t        self.scatterpoints = val_or_rc(scatterpoints, 'legend.scatterpoints')\n   409\t        self.borderpad = val_or_rc(borderpad, 'legend.borderpad')\n   410\t        self.labelspacing = val_or_rc(labelspacing, 'legend.labelspacing')\n   411\t        self.handlelength = val_or_rc(handlelength, 'legend.handlelength')\n   412\t        self.handleheight = val_or_rc(handleheight, 'legend.handleheight')\n   413\t        self.handletextpad = val_or_rc(handletextpad, 'legend.handletextpad')\n   414\t        self.borderaxespad = val_or_rc(borderaxespad, 'legend.borderaxespad')\n   415\t        self.columnspacing = val_or_rc(columnspacing, 'legend.columnspacing')\n   416\t        self.shadow = val_or_rc(shadow, 'legend.shadow')\n   417\t        # trim handles and labels if illegal label...\n   418\t        _lab, _hand = [], []\n   419\t        for label, handle in zip(labels, handles):\n   420\t            if isinstance(label, str) and label.startswith('_'):\n   421\t                _api.warn_external(f\"The label {label!r} of {handle!r} starts \"\n   422\t                                   \"with '_'. It is thus excluded from the \"\n   423\t                                   \"legend.\")\n   424\t            else:\n   425\t                _lab.append(label)\n   426\t                _hand.append(handle)\n   427\t        labels, handles = _lab, _hand\n   428\t\n   429\t        handles = list(handles)\n   430\t        if len(handles) < 2:\n   431\t            ncols = 1\n   432\t        self._ncols = ncols if ncols != 1 else ncol\n   433\t\n   434\t        if self.numpoints <= 0:\n   435\t            raise ValueError(\"numpoints must be > 0; it was %d\" % numpoints)\n   436\t\n   437\t        # introduce y-offset for handles of the scatter plot\n   438\t        if scatteryoffsets is None:\n   439\t            self._scatteryoffsets = np.array([3. / 8., 4. / 8., 2.5 / 8.])\n   440\t        else:\n   441\t            self._scatteryoffsets = np.asarray(scatteryoffsets)\n   442\t        reps = self.scatterpoints // len(self._scatteryoffsets) + 1\n   443\t        self._scatteryoffsets = np.tile(self._scatteryoffsets,\n   444\t                                        reps)[:self.scatterpoints]\n   445\t\n   446\t        # _legend_box is a VPacker instance that contains all\n   447\t        # legend items and will be initialized from _init_legend_box()\n   448\t        # method.\n   449\t        self._legend_box = None\n   450\t\n   451\t        if isinstance(parent, Axes):\n   452\t            self.isaxes = True\n   453\t            self.axes = parent\n   454\t            self.set_figure(parent.figure)\n   455\t        elif isinstance(parent, FigureBase):\n   456\t            self.isaxes = False\n   457\t            self.set_figure(parent)\n   458\t        else:\n   459\t            raise TypeError(\n   460\t                \"Legend needs either Axes or FigureBase as parent\"\n   461\t            )\n   462\t        self.parent = parent\n   463\t\n   464\t        self._loc_used_default = loc is None\n   465\t        if loc is None:\n   466\t            loc = mpl.rcParams[\"legend.loc\"]\n   467\t            if not self.isaxes and loc in [0, 'best']:\n   468\t                loc = 'upper right'\n   469\t        if isinstance(loc, str):\n   470\t            loc = _api.check_getitem(self.codes, loc=loc)\n   471\t        if not self.isaxes and loc == 0:\n   472\t            raise ValueError(\n   473\t                \"Automatic legend placement (loc='best') not implemented for \"\n   474\t                \"figure legend\")\n   475\t\n   476\t        self._mode = mode\n   477\t        self.set_bbox_to_anchor(bbox_to_anchor, bbox_transform)\n   478\t\n   479\t        # We use FancyBboxPatch to draw a legend frame. The location\n   480\t        # and size of the box will be updated during the drawing time.\n   481\t\n   482\t        if facecolor is None:\n   483\t            facecolor = mpl.rcParams[\"legend.facecolor\"]\n   484\t        if facecolor == 'inherit':\n   485\t            facecolor = mpl.rcParams[\"axes.facecolor\"]\n   486\t\n   487\t        if edgecolor is None:\n   488\t            edgecolor = mpl.rcParams[\"legend.edgecolor\"]\n   489\t        if edgecolor == 'inherit':\n   490\t            edgecolor = mpl.rcParams[\"axes.edgecolor\"]\n   491\t\n   492\t        if fancybox is None:\n   493\t            fancybox = mpl.rcParams[\"legend.fancybox\"]\n   494\t\n   495\t        self.legendPatch = FancyBboxPatch(\n   496\t            xy=(0, 0), width=1, height=1,\n   497\t            facecolor=facecolor, edgecolor=edgecolor,\n   498\t            # If shadow is used, default to alpha=1 (#8943).\n   499\t            alpha=(framealpha if framealpha is not None\n   500\t                   else 1 if shadow\n   501\t                   else mpl.rcParams[\"legend.framealpha\"]),\n   502\t            # The width and height of the legendPatch will be set (in draw())\n   503\t            # to the length that includes the padding. Thus we set pad=0 here.\n   504\t            boxstyle=(\"round,pad=0,rounding_size=0.2\" if fancybox\n   505\t                      else \"square,pad=0\"),\n   506\t            mutation_scale=self._fontsize,\n   507\t            snap=True,\n   508\t            visible=(frameon if frameon is not None\n   509\t                     else mpl.rcParams[\"legend.frameon\"])\n   510\t        )\n   511\t        self._set_artist_props(self.legendPatch)\n   512\t\n   513\t        _api.check_in_list([\"center\", \"left\", \"right\"], alignment=alignment)\n   514\t        self._alignment = alignment\n   515\t\n   516\t        # init with null renderer\n   517\t        self._init_legend_box(handles, labels, markerfirst)\n   518\t\n   519\t        tmp = self._loc_used_default\n   520\t        self._set_loc(loc)\n   521\t        self._loc_used_default = tmp  # ignore changes done by _set_loc\n   522\t\n   523\t        # figure out title font properties:\n   524\t        if title_fontsize is not None and title_fontproperties is not None:\n   525\t            raise ValueError(\n   526\t                \"title_fontsize and title_fontproperties can't be specified \"\n   527\t                \"at the same time. Only use one of them. \")\n   528\t        title_prop_fp = FontProperties._from_any(title_fontproperties)\n   529\t        if isinstance(title_fontproperties, dict):\n   530\t            if \"size\" not in title_fontproperties:\n   531\t                title_fontsize = mpl.rcParams[\"legend.title_fontsize\"]\n   532\t                title_prop_fp.set_size(title_fontsize)\n   533\t        elif title_fontsize is not None:\n   534\t            title_prop_fp.set_size(title_fontsize)\n   535\t        elif not isinstance(title_fontproperties, FontProperties):\n   536\t            title_fontsize = mpl.rcParams[\"legend.title_fontsize\"]\n   537\t            title_prop_fp.set_size(title_fontsize)\n   538\t\n   539\t        self.set_title(title, prop=title_prop_fp)\n   540\t        self._draggable = None\n   541\t\n   542\t        # set the text color\n   543\t\n   544\t        color_getters = {  # getter function depends on line or patch\n   545\t            'linecolor':       ['get_color',           'get_facecolor'],\n   546\t            'markerfacecolor': ['get_markerfacecolor', 'get_facecolor'],\n   547\t            'mfc':             ['get_markerfacecolor', 'get_facecolor'],\n   548\t            'markeredgecolor': ['get_markeredgecolor', 'get_edgecolor'],\n   549\t            'mec':             ['get_markeredgecolor', 'get_edgecolor'],\n   550\t        }\n   551\t        if labelcolor is None:\n   552\t            if mpl.rcParams['legend.labelcolor'] is not None:\n   553\t                labelcolor = mpl.rcParams['legend.labelcolor']\n   554\t            else:\n   555\t                labelcolor = mpl.rcParams['text.color']\n   556\t        if isinstance(labelcolor, str) and labelcolor in color_getters:\n   557\t            getter_names = color_getters[labelcolor]\n   558\t            for handle, text in zip(self.legendHandles, self.texts):\n   559\t                for getter_name in getter_names:\n   560\t                    try:\n   561\t                        color = getattr(handle, getter_name)()\n   562\t                        text.set_color(color)\n   563\t                        break\n   564\t                    except AttributeError:\n   565\t                        pass\n   566\t        elif isinstance(labelcolor, str) and labelcolor == 'none':\n   567\t            for text in self.texts:\n   568\t                text.set_color(labelcolor)\n   569\t        elif np.iterable(labelcolor):\n   570\t            for text, color in zip(self.texts,\n   571\t                                   itertools.cycle(\n   572\t                                       colors.to_rgba_array(labelcolor))):\n   573\t                text.set_color(color)\n   574\t        else:\n   575\t            raise ValueError(f\"Invalid labelcolor: {labelcolor!r}\")\n          # ...\n   622\t\n   623\t    @allow_rasterization\n   624\t    def draw(self, renderer):\n   625\t        # docstring inherited\n   626\t        if not self.get_visible():\n   627\t            return\n   628\t\n   629\t        renderer.open_group('legend', gid=self.get_gid())\n   630\t\n   631\t        fontsize = renderer.points_to_pixels(self._fontsize)\n   632\t\n   633\t        # if mode == fill, set the width of the legend_box to the\n   634\t        # width of the parent (minus pads)\n   635\t        if self._mode in [\"expand\"]:\n   636\t            pad = 2 * (self.borderaxespad + self.borderpad) * fontsize\n   637\t            self._legend_box.set_width(self.get_bbox_to_anchor().width - pad)\n   638\t\n   639\t        # update the location and size of the legend. This needs to\n   640\t        # be done in any case to clip the figure right.\n   641\t        bbox = self._legend_box.get_window_extent(renderer)\n   642\t        self.legendPatch.set_bounds(bbox.bounds)\n   643\t        self.legendPatch.set_mutation_scale(fontsize)\n   644\t\n   645\t        if self.shadow:\n   646\t            Shadow(self.legendPatch, 2, -2).draw(renderer)\n   647\t\n   648\t        self.legendPatch.draw(renderer)\n   649\t        self._legend_box.draw(renderer)\n   650\t\n   651\t        renderer.close_group('legend')\n   652\t        self.stale = False\n   653\t\n   654\t    # _default_handler_map defines the default mapping between plot\n   655\t    # elements and the legend handlers.\n          # ...\n      # ...\n```\n\n</observation>",
                  "type": "tool_result"
                }
              ]
            },
            {
              "role": "assistant",
              "content": [
                {
                  "type": "text",
                  "text": "<thoughts>\n1. I found the Legend class implementation in lib/matplotlib/legend.py\n2. I notice that:\n   - The Legend class already has a `_draggable` attribute initialized as None in __init__ (line 540)\n   - The class inherits from Artist and uses DraggableOffsetBox (imported on line 45)\n3. Let me search for the draggable functionality to understand how it's currently implemented\n</thoughts>"
                },
                {
                  "id": "call_05070c78",
                  "input": {
                    "file_pattern": null,
                    "query": "legend draggable method implementation",
                    "category": "implementation"
                  },
                  "type": "tool_use",
                  "name": "SemanticSearch"
                }
              ]
            },
            {
              "role": "user",
              "content": [
                {
                  "tool_use_id": "call_05070c78",
                  "content": "<observation>\nFound 14 code sections.\n\nViewed relevant code:\nlib/matplotlib/legend.py\n```\n\n    23\t\n    24\timport itertools\n    25\timport logging\n    26\timport time\n    27\t\n    28\timport numpy as np\n    29\t\n    30\timport matplotlib as mpl\n    31\tfrom matplotlib import _api, _docstring, colors, offsetbox\n    32\tfrom matplotlib.artist import Artist, allow_rasterization\n    33\tfrom matplotlib.cbook import silent_list\n    34\tfrom matplotlib.font_manager import FontProperties\n    35\tfrom matplotlib.lines import Line2D\n    36\tfrom matplotlib.patches import (Patch, Rectangle, Shadow, FancyBboxPatch,\n    37\t                                StepPatch)\n    38\tfrom matplotlib.collections import (\n    39\t    Collection, CircleCollection, LineCollection, PathCollection,\n    40\t    PolyCollection, RegularPolyCollection)\n    41\tfrom matplotlib.text import Text\n    42\tfrom matplotlib.transforms import Bbox, BboxBase, TransformedBbox\n    43\tfrom matplotlib.transforms import BboxTransformTo, BboxTransformFrom\n    44\tfrom matplotlib.offsetbox import (\n    45\t    AnchoredOffsetbox, DraggableOffsetBox,\n    46\t    HPacker, VPacker,\n    47\t    DrawingArea, TextArea,\n    48\t)\n    49\tfrom matplotlib.container import ErrorbarContainer, BarContainer, StemContainer\n    50\tfrom . import legend_handler\n    51\t\n    52\t\n    53\tclass DraggableLegend(DraggableOffsetBox):\n    54\t    def __init__(self, legend, use_blit=False, update=\"loc\"):\n    55\t        \"\"\"\n    56\t        Wrapper around a `.Legend` to support mouse dragging.\n    57\t\n    58\t        Parameters\n    59\t        ----------\n    60\t        legend : `.Legend`\n    61\t            The `.Legend` instance to wrap.\n    62\t        use_blit : bool, optional\n    63\t            Use blitting for faster image composition. For details see\n    64\t            :ref:`func-animation`.\n    65\t        update : {'loc', 'bbox'}, optional\n    66\t            If \"loc\", update the *loc* parameter of the legend upon finalizing.\n    67\t            If \"bbox\", update the *bbox_to_anchor* parameter.\n    68\t        \"\"\"\n    69\t        self.legend = legend\n    70\t\n    71\t        _api.check_in_list([\"loc\", \"bbox\"], update=update)\n    72\t        self._update = update\n    73\t\n    74\t        super().__init__(legend, legend._legend_box, use_blit=use_blit)\n    75\t\n    76\t    def finalize_offset(self):\n    77\t        if self._update == \"loc\":\n    78\t            self._update_loc(self.get_loc_in_canvas())\n    79\t        elif self._update == \"bbox\":\n    80\t            self._bbox_to_anchor(self.get_loc_in_canvas())\n    81\t\n    82\t    def _update_loc(self, loc_in_canvas):\n    83\t        bbox = self.legend.get_bbox_to_anchor()\n    84\t        # if bbox has zero width or height, the transformation is\n    85\t        # ill-defined. Fall back to the default bbox_to_anchor.\n    86\t        if bbox.width == 0 or bbox.height == 0:\n    87\t            self.legend.set_bbox_to_anchor(None)\n    88\t            bbox = self.legend.get_bbox_to_anchor()\n    89\t        _bbox_transform = BboxTransformFrom(bbox)\n    90\t        self.legend._loc = tuple(_bbox_transform.transform(loc_in_canvas))\n    91\t\n    92\t    def _update_bbox_to_anchor(self, loc_in_canvas):\n    93\t        loc_in_bbox = self.legend.axes.transAxes.transform(loc_in_canvas)\n    94\t        self.legend.set_bbox_to_anchor(loc_in_bbox)\n      # ...\n   290\t\n   291\t\n   292\tclass Legend(Artist):\n   293\t    \"\"\"\n   294\t    Place a legend on the axes at location loc.\n   295\t    \"\"\"\n   296\t\n   297\t    # 'best' is only implemented for axes legends\n   298\t    codes = {'best': 0, **AnchoredOffsetbox.codes}\n   299\t    zorder = 5\n          # ...\n  1078\t\n  1079\t    def set_draggable(self, state, use_blit=False, update='loc'):\n  1080\t        \"\"\"\n  1081\t        Enable or disable mouse dragging support of the legend.\n  1082\t\n  1083\t        Parameters\n  1084\t        ----------\n  1085\t        state : bool\n  1086\t            Whether mouse dragging is enabled.\n  1087\t        use_blit : bool, optional\n  1088\t            Use blitting for faster image composition. For details see\n  1089\t            :ref:`func-animation`.\n  1090\t        update : {'loc', 'bbox'}, optional\n  1091\t            The legend parameter to be changed when dragged:\n  1092\t\n  1093\t            - 'loc': update the *loc* parameter of the legend\n  1094\t            - 'bbox': update the *bbox_to_anchor* parameter of the legend\n  1095\t\n  1096\t        Returns\n  1097\t        -------\n  1098\t        `.DraggableLegend` or *None*\n  1099\t            If *state* is ``True`` this returns the `.DraggableLegend` helper\n  1100\t            instance. Otherwise this returns *None*.\n  1101\t        \"\"\"\n  1102\t        if state:\n  1103\t            if self._draggable is None:\n  1104\t                self._draggable = DraggableLegend(self,\n  1105\t                                                  use_blit,\n  1106\t                                                  update=update)\n  1107\t        else:\n  1108\t            if self._draggable is not None:\n  1109\t                self._draggable.disconnect()\n  1110\t            self._draggable = None\n  1111\t        return self._draggable\n  1112\t\n  1113\t    def get_draggable(self):\n  1114\t        \"\"\"Return ``True`` if the legend is draggable, ``False`` otherwise.\"\"\"\n  1115\t        return self._draggable is not None\n  1116\t\n  1117\t\n  1118\t# Helper functions to parse legend arguments for both `figure.legend` and\n  1119\t# `axes.legend`:\n      # ...\n```\n\n</observation>",
                  "type": "tool_result"
                }
              ]
            },
            {
              "role": "assistant",
              "content": [
                {
                  "type": "text",
                  "text": "<thoughts>\n1. I found the draggable functionality implementation:\n   - There's a DraggableLegend class that inherits from DraggableOffsetBox\n   - Legend class has set_draggable() and get_draggable() methods\n   - The _draggable attribute is initialized as None in __init__\n2. Adding a draggable parameter to __init__ seems feasible since:\n   - The infrastructure for draggable legends already exists\n   - It would just need to call set_draggable() during initialization\n3. Let me check if there are any tests for the draggable functionality to understand how to test the new parameter\n</thoughts>"
                },
                {
                  "id": "call_9dda00e0",
                  "input": {
                    "file_pattern": null,
                    "query": "legend draggable tests",
                    "category": "test"
                  },
                  "type": "tool_use",
                  "name": "SemanticSearch"
                }
              ]
            },
            {
              "role": "user",
              "content": [
                {
                  "tool_use_id": "call_9dda00e0",
                  "content": "<observation>\nFound 12 code sections.\n\nViewed relevant code:\nlib/matplotlib/tests/test_legend.py\n```\n     1\timport collections\n     2\timport platform\n     3\tfrom unittest import mock\n     4\timport warnings\n     5\t\n     6\timport numpy as np\n     7\timport pytest\n     8\t\n     9\tfrom matplotlib.testing.decorators import check_figures_equal, image_comparison\n    10\tfrom matplotlib.testing._markers import needs_usetex\n    11\timport matplotlib.pyplot as plt\n    12\timport matplotlib as mpl\n    13\timport matplotlib.transforms as mtransforms\n    14\timport matplotlib.collections as mcollections\n    15\timport matplotlib.lines as mlines\n    16\tfrom matplotlib.legend_handler import HandlerTuple\n    17\timport matplotlib.legend as mlegend\n    18\tfrom matplotlib import rc_context\n    19\tfrom matplotlib.font_manager import FontProperties\n      # ...\n   775\t\n   776\t\n   777\tdef test_get_set_draggable():\n   778\t    legend = plt.legend()\n   779\t    assert not legend.get_draggable()\n   780\t    legend.set_draggable(True)\n   781\t    assert legend.get_draggable()\n   782\t    legend.set_draggable(False)\n   783\t    assert not legend.get_draggable()\n      # ...\n```\n\n</observation>",
                  "type": "tool_result"
                }
              ]
            },
            {
              "role": "assistant",
              "content": [
                {
                  "type": "text",
                  "text": "<thoughts>\n1. I found the test for draggable functionality in test_legend.py\n2. The changes needed are:\n   - Add a draggable parameter to Legend.__init__\n   - Call set_draggable() in __init__ if draggable=True\n   - Add a test case for the new parameter\n3. Let me implement these changes\n</thoughts>"
                },
                {
                  "id": "call_8befcc99",
                  "input": {
                    "command": "str_replace",
                    "path": "lib/matplotlib/legend.py",
                    "file_text": null,
                    "view_range": null,
                    "old_str": "    def __init__(\n        self, parent, handles, labels,\n        loc=None,\n        numpoints=None,      # number of points in the legend line\n        markerscale=None,    # relative size of legend markers vs. original\n        markerfirst=True,    # left/right ordering of legend marker and label\n        scatterpoints=None,  # number of scatter points\n        scatteryoffsets=None,\n        prop=None,           # properties for the legend texts\n        fontsize=None,       # keyword to set font size directly\n        labelcolor=None,     # keyword to set the text color\n\n        # spacing & pad defined as a fraction of the font-size\n        borderpad=None,      # whitespace inside the legend border\n        labelspacing=None,   # vertical space between the legend entries\n        handlelength=None,   # length of the legend handles\n        handleheight=None,   # height of the legend handles\n        handletextpad=None,  # pad between the legend handle and text\n        borderaxespad=None,  # pad between the axes and legend border\n        columnspacing=None,  # spacing between columns\n\n        ncols=1,     # number of columns\n        mode=None,  # horizontal distribution of columns: None or \"expand\"\n\n        fancybox=None,  # True: fancy box, False: rounded box, None: rcParam\n        shadow=None,\n        title=None,           # legend title\n        title_fontsize=None,  # legend title font size\n        framealpha=None,      # set frame alpha\n        edgecolor=None,       # frame patch edgecolor\n        facecolor=None,       # frame patch facecolor\n\n        bbox_to_anchor=None,  # bbox to which the legend will be anchored\n        bbox_transform=None,  # transform for the bbox\n        frameon=None,         # draw frame\n        handler_map=None,\n        title_fontproperties=None,  # properties for the legend title\n        alignment=\"center\",       # control the alignment within the legend box\n        *,\n        ncol=1  # synonym for ncols (backward compatibility)",
                    "new_str": "    def __init__(\n        self, parent, handles, labels,\n        loc=None,\n        numpoints=None,      # number of points in the legend line\n        markerscale=None,    # relative size of legend markers vs. original\n        markerfirst=True,    # left/right ordering of legend marker and label\n        scatterpoints=None,  # number of scatter points\n        scatteryoffsets=None,\n        prop=None,           # properties for the legend texts\n        fontsize=None,       # keyword to set font size directly\n        labelcolor=None,     # keyword to set the text color\n\n        # spacing & pad defined as a fraction of the font-size\n        borderpad=None,      # whitespace inside the legend border\n        labelspacing=None,   # vertical space between the legend entries\n        handlelength=None,   # length of the legend handles\n        handleheight=None,   # height of the legend handles\n        handletextpad=None,  # pad between the legend handle and text\n        borderaxespad=None,  # pad between the axes and legend border\n        columnspacing=None,  # spacing between columns\n\n        ncols=1,     # number of columns\n        mode=None,  # horizontal distribution of columns: None or \"expand\"\n\n        fancybox=None,  # True: fancy box, False: rounded box, None: rcParam\n        shadow=None,\n        title=None,           # legend title\n        title_fontsize=None,  # legend title font size\n        framealpha=None,      # set frame alpha\n        edgecolor=None,       # frame patch edgecolor\n        facecolor=None,       # frame patch facecolor\n\n        bbox_to_anchor=None,  # bbox to which the legend will be anchored\n        bbox_transform=None,  # transform for the bbox\n        frameon=None,         # draw frame\n        handler_map=None,\n        title_fontproperties=None,  # properties for the legend title\n        alignment=\"center\",       # control the alignment within the legend box\n        draggable=False,      # enable mouse dragging support\n        *,\n        ncol=1  # synonym for ncols (backward compatibility)",
                    "insert_line": null
                  },
                  "type": "tool_use",
                  "name": "str_replace_editor"
                }
              ]
            },
            {
              "role": "user",
              "content": [
                {
                  "tool_use_id": "call_8befcc99",
                  "content": "<observation>\nThe file lib/matplotlib/legend.py has been edited. Here's the result of running `cat -n` on a snippet of lib/matplotlib/legend.py:\n   306\t    def __str__(self):\n   307\t        return \"Legend\"\n   308\t\n   309\t    @_api.make_keyword_only(\"3.6\", \"loc\")\n   310\t    @_docstring.dedent_interpd\n   311\t    def __init__(\n   312\t        self, parent, handles, labels,\n   313\t        loc=None,\n   314\t        numpoints=None,      # number of points in the legend line\n   315\t        markerscale=None,    # relative size of legend markers vs. original\n   316\t        markerfirst=True,    # left/right ordering of legend marker and label\n   317\t        scatterpoints=None,  # number of scatter points\n   318\t        scatteryoffsets=None,\n   319\t        prop=None,           # properties for the legend texts\n   320\t        fontsize=None,       # keyword to set font size directly\n   321\t        labelcolor=None,     # keyword to set the text color\n   322\t\n   323\t        # spacing & pad defined as a fraction of the font-size\n   324\t        borderpad=None,      # whitespace inside the legend border\n   325\t        labelspacing=None,   # vertical space between the legend entries\n   326\t        handlelength=None,   # length of the legend handles\n   327\t        handleheight=None,   # height of the legend handles\n   328\t        handletextpad=None,  # pad between the legend handle and text\n   329\t        borderaxespad=None,  # pad between the axes and legend border\n   330\t        columnspacing=None,  # spacing between columns\n   331\t\n   332\t        ncols=1,     # number of columns\n   333\t        mode=None,  # horizontal distribution of columns: None or \"expand\"\n   334\t\n   335\t        fancybox=None,  # True: fancy box, False: rounded box, None: rcParam\n   336\t        shadow=None,\n   337\t        title=None,           # legend title\n   338\t        title_fontsize=None,  # legend title font size\n   339\t        framealpha=None,      # set frame alpha\n   340\t        edgecolor=None,       # frame patch edgecolor\n   341\t        facecolor=None,       # frame patch facecolor\n   342\t\n   343\t        bbox_to_anchor=None,  # bbox to which the legend will be anchored\n   344\t        bbox_transform=None,  # transform for the bbox\n   345\t        frameon=None,         # draw frame\n   346\t        handler_map=None,\n   347\t        title_fontproperties=None,  # properties for the legend title\n   348\t        alignment=\"center\",       # control the alignment within the legend box\n   349\t        draggable=False,      # enable mouse dragging support\n   350\t        *,\n   351\t        ncol=1  # synonym for ncols (backward compatibility)\n   352\t    ):\n   353\t        \"\"\"\n   354\t        Parameters\nReview the changes and make sure they are as expected. Edit the file again if necessary.\n\nRunning 936 tests in the following files:\n * lib/matplotlib/tests/test_legend.py\n * lib/matplotlib/tests/test_contour.py\n * lib/matplotlib/tests/test_axes.py\n\n* FAILED lib/matplotlib/tests/test_contour.py test_contourf_log_extension>\n```\n\n    @image_comparison(['contour_log_extension.png'],\n                      remove_text=True, style='mpl20',\n                      tol=1.444)\n    def test_contourf_log_extension():\n        # Remove this line when this test image is regenerated.\n        plt.rcParams['pcolormesh.snap'] = False\n    \n        # Test that contourf with lognorm is extended correctly\n        fig, (ax1, ax2, ax3) = plt.subplots(1, 3, figsize=(10, 5))\n        fig.subplots_adjust(left=0.05, right=0.95)\n    \n        # make data set with large range e.g. between 1e-8 and 1e10\n        data_exp = np.linspace(-7.5, 9.5, 1200)\n        data = np.power(10, data_exp).reshape(30, 40)\n        # make manual levels e.g. between 1e-4 and 1e-6\n        levels_exp = np.arange(-4., 7.)\n        levels = np.power(10., levels_exp)\n    \n        # original data\n        c1 = ax1.contourf(data,\n                          norm=LogNorm(vmin=data.min(), vmax=data.max()))\n        # just show data in levels\n        c2 = ax2.contourf(data, levels=levels,\n                          norm=LogNorm(vmin=levels.min(), vmax=levels.max()),\n                          extend='neither')\n        # extend data from levels\n        c3 = ax3.contourf(data, levels=levels,\n                          norm=LogNorm(vmin=levels.min(), vmax=levels.max()),\n                          extend='both')\n        cb = plt.colorbar(c1, ax=ax1)\n        assert cb.ax.get_ylim() == (1e-8, 1e10)\n        cb = plt.colorbar(c2, ax=ax2)\n>       assert cb.ax.get_ylim() == (1e-4, 1e6)\nE       assert (9.9999999999...05, 1000000.0) == (0.0001, 1000000.0)\nE         \nE         At index 0 diff: 9.999999999999999e-05 != 0.0001\nE         Use -v to get more diff\n\nlib/matplotlib/tests/test_contour.py:316: AssertionError\n```\n\n\n935 passed. 1 failed. 0 errors.\n</observation>",
                  "type": "tool_result"
                }
              ]
            },
            {
              "role": "assistant",
              "content": [
                {
                  "type": "text",
                  "text": "<thoughts>\n1. I've added the draggable parameter to the __init__ signature, but I still need to:\n   - Add it to the docstring\n   - Actually implement the functionality by calling set_draggable() in __init__\n2. The test failure in test_contour.py seems unrelated to our changes (it's about colorbar limits)\n3. Let me continue with the implementation\n</thoughts>"
                },
                {
                  "id": "call_7590c0f7",
                  "input": {
                    "command": "str_replace",
                    "path": "lib/matplotlib/legend.py",
                    "file_text": null,
                    "view_range": null,
                    "old_str": "        self.set_title(title, prop=title_prop_fp)\n        self._draggable = None\n\n        # set the text color",
                    "new_str": "        self.set_title(title, prop=title_prop_fp)\n        self._draggable = None\n        if draggable:\n            self.set_draggable(True)\n\n        # set the text color",
                    "insert_line": null
                  },
                  "type": "tool_use",
                  "name": "str_replace_editor"
                }
              ]
            },
            {
              "role": "user",
              "content": [
                {
                  "tool_use_id": "call_7590c0f7",
                  "content": "<observation>\nThe file lib/matplotlib/legend.py has been edited. Here's the result of running `cat -n` on a snippet of lib/matplotlib/legend.py:\n   540\t            title_prop_fp.set_size(title_fontsize)\n   541\t        elif not isinstance(title_fontproperties, FontProperties):\n   542\t            title_fontsize = mpl.rcParams[\"legend.title_fontsize\"]\n   543\t            title_prop_fp.set_size(title_fontsize)\n   544\t\n   545\t        self.set_title(title, prop=title_prop_fp)\n   546\t        self._draggable = None\n   547\t        if draggable:\n   548\t            self.set_draggable(True)\n   549\t\n   550\t        # set the text color\n   551\t\n   552\t        color_getters = {  # getter function depends on line or patch\n   553\t            'linecolor':       ['get_color',           'get_facecolor'],\nReview the changes and make sure they are as expected. Edit the file again if necessary.\n\nRunning 936 tests in the following files:\n * lib/matplotlib/tests/test_legend.py\n * lib/matplotlib/tests/test_contour.py\n * lib/matplotlib/tests/test_axes.py\n\n* FAILED lib/matplotlib/tests/test_contour.py test_contourf_log_extension>\n```\n\n    @image_comparison(['contour_log_extension.png'],\n                      remove_text=True, style='mpl20',\n                      tol=1.444)\n    def test_contourf_log_extension():\n        # Remove this line when this test image is regenerated.\n        plt.rcParams['pcolormesh.snap'] = False\n    \n        # Test that contourf with lognorm is extended correctly\n        fig, (ax1, ax2, ax3) = plt.subplots(1, 3, figsize=(10, 5))\n        fig.subplots_adjust(left=0.05, right=0.95)\n    \n        # make data set with large range e.g. between 1e-8 and 1e10\n        data_exp = np.linspace(-7.5, 9.5, 1200)\n        data = np.power(10, data_exp).reshape(30, 40)\n        # make manual levels e.g. between 1e-4 and 1e-6\n        levels_exp = np.arange(-4., 7.)\n        levels = np.power(10., levels_exp)\n    \n        # original data\n        c1 = ax1.contourf(data,\n                          norm=LogNorm(vmin=data.min(), vmax=data.max()))\n        # just show data in levels\n        c2 = ax2.contourf(data, levels=levels,\n                          norm=LogNorm(vmin=levels.min(), vmax=levels.max()),\n                          extend='neither')\n        # extend data from levels\n        c3 = ax3.contourf(data, levels=levels,\n                          norm=LogNorm(vmin=levels.min(), vmax=levels.max()),\n                          extend='both')\n        cb = plt.colorbar(c1, ax=ax1)\n        assert cb.ax.get_ylim() == (1e-8, 1e10)\n        cb = plt.colorbar(c2, ax=ax2)\n>       assert cb.ax.get_ylim() == (1e-4, 1e6)\nE       assert (9.9999999999...05, 1000000.0) == (0.0001, 1000000.0)\nE         \nE         At index 0 diff: 9.999999999999999e-05 != 0.0001\nE         Use -v to get more diff\n\nlib/matplotlib/tests/test_contour.py:316: AssertionError\n```\n\n\n935 passed. 1 failed. 0 errors.\n</observation>",
                  "type": "tool_result",
                  "cache_control": {
                    "type": "ephemeral"
                  }
                }
              ]
            },
            {
              "role": "assistant",
              "content": [
                {
                  "type": "text",
                  "text": "<thoughts>\n1. I've added the implementation to enable draggable functionality when draggable=True\n2. Now I need to:\n   - Add the draggable parameter to the docstring\n   - Add a test case for the new parameter\n3. Let me update the docstring first\n</thoughts>"
                },
                {
                  "id": "call_340e706c",
                  "input": {
                    "command": "str_replace",
                    "path": "lib/matplotlib/legend.py",
                    "file_text": null,
                    "view_range": null,
                    "old_str": "        alignment : {'center', 'left', 'right'}, default: 'center'\n            The alignment value for the legend box. The valid values are:\n            {'center', 'left', 'right'}\n\n        Other Parameters\n        ----------------\n        **kwargs : `.Text` properties\n            Other keyword arguments are given to the `.Text` instance\n            containing the legend's text.\n\n        See Also\n        --------\n        .Figure.legend",
                    "new_str": "        alignment : {'center', 'left', 'right'}, default: 'center'\n            The alignment value for the legend box. The valid values are:\n            {'center', 'left', 'right'}\n\n        draggable : bool, default: False\n            Enable mouse dragging support for the legend.\n\n        Other Parameters\n        ----------------\n        **kwargs : `.Text` properties\n            Other keyword arguments are given to the `.Text` instance\n            containing the legend's text.\n\n        See Also\n        --------\n        .Figure.legend",
                    "insert_line": null
                  },
                  "type": "tool_use",
                  "name": "str_replace_editor",
                  "cache_control": {
                    "type": "ephemeral"
                  }
                }
              ]
            },
            {
              "role": "user",
              "content": [
                {
                  "tool_use_id": "call_340e706c",
                  "content": "<observation>\nString '        alignment : {'center', 'left', 'right'}, default: 'center'\n            The alignment value for the legend box. The valid values are:\n            {'center', 'left', 'right'}\n\n        Other Parameters\n        ----------------\n        **kwargs : `.Text` properties\n            Other keyword arguments are given to the `.Text` instance\n            containing the legend's text.\n\n        See Also\n        --------\n        .Figure.legend' not found in lib/matplotlib/legend.py\n</observation>",
                  "type": "tool_result",
                  "cache_control": {
                    "type": "ephemeral"
                  }
                }
              ]
            }
          ],
          "response": {
            "id": "msg_01HfURq9ppDDKZVyL6F8QrY7",
            "content": [
              {
                "text": "<thoughts>\n1. The docstring replacement failed because I didn't match the exact text. Let me try again with the correct text.\n2. First, let me view the current docstring to get the exact text\n</thoughts>",
                "type": "text"
              },
              {
                "id": "toolu_01FFmdjkqGz1q7k3ePpYG2dh",
                "input": {
                  "command": "view",
                  "path": "lib/matplotlib/legend.py",
                  "view_range": [
                    350,
                    400
                  ]
                },
                "name": "str_replace_editor",
                "type": "tool_use"
              }
            ],
            "model": "claude-3-5-sonnet-20241022",
            "role": "assistant",
            "stop_reason": "tool_use",
            "stop_sequence": null,
            "type": "message",
            "usage": {
              "cache_creation_input_tokens": 600,
              "cache_read_input_tokens": 16325,
              "input_tokens": 2,
              "output_tokens": 154
            }
          },
          "usage": {
            "completion_cost": 0.004116,
            "completion_tokens": 154,
            "prompt_tokens": 602,
            "cached_tokens": 16325
          }
        }
      },
      "possible_actions": [
        "SemanticSearch",
        "FindClass",
        "FindFunction",
        "FindCodeSnippet",
        "RequestMoreContext",
        "ClaudeEditTool",
        "Finish",
        "Reject"
      ],
      "output": {
        "message": "Here's the result of running `cat -n` on lib/matplotlib/legend.py:\n   350\t        ----------\n   351\t        parent : `~matplotlib.axes.Axes` or `.Figure`\n   352\t            The artist that contains the legend.\n   353\t\n   354\t        handles : list of `.Artist`\n   355\t            A list of Artists (lines, patches) to be added to the legend.\n   356\t\n   357\t        labels : list of str\n   358\t            A list of labels to show next to the artists. The length of handles\n   359\t            and labels should be the same. If they are not, they are truncated\n   360\t            to the smaller of both lengths.\n   361\t\n   362\t        Other Parameters\n   363\t        ----------------\n   364\t        %(_legend_kw_doc)s\n   365\t\n   366\t        Notes\n   367\t        -----\n   368\t        Users can specify any arbitrary location for the legend using the\n   369\t        *bbox_to_anchor* keyword argument. *bbox_to_anchor* can be a\n   370\t        `.BboxBase` (or derived there from) or a tuple of 2 or 4 floats.\n   371\t        See `set_bbox_to_anchor` for more detail.\n   372\t\n   373\t        The legend location can be specified by setting *loc* with a tuple of\n   374\t        2 floats, which is interpreted as the lower-left corner of the legend\n   375\t        in the normalized axes coordinate.\n   376\t        \"\"\"\n   377\t        # local import only to avoid circularity\n   378\t        from matplotlib.axes import Axes\n   379\t        from matplotlib.figure import FigureBase\n   380\t\n   381\t        super().__init__()\n   382\t\n   383\t        if prop is None:\n   384\t            if fontsize is not None:\n   385\t                self.prop = FontProperties(size=fontsize)\n   386\t            else:\n   387\t                self.prop = FontProperties(\n   388\t                    size=mpl.rcParams[\"legend.fontsize\"])\n   389\t        else:\n   390\t            self.prop = FontProperties._from_any(prop)\n   391\t            if isinstance(prop, dict) and \"size\" not in prop:\n   392\t                self.prop.set_size(mpl.rcParams[\"legend.fontsize\"])\n   393\t\n   394\t        self._fontsize = self.prop.get_size_in_points()\n   395\t\n   396\t        self.texts = []\n   397\t        self.legendHandles = []\n   398\t        self._legend_title_box = None\n   399\t\n   400\t        #: A dictionary with the extra handler mappings for this Legend\n",
        "terminal": false,
        "expect_correction": false,
        "properties": {
          "flag": "no_new_spans"
        }
      },
      "parent_id": 6
    },
    {
      "node_id": 8,
      "action": {
        "scratch_pad": "1. I see that the docstring uses %(_legend_kw_doc)s for the parameters, which means it's using a template system\n2. Let me search for where this template is defined",
        "code_snippet": "_legend_kw_doc",
        "action_args_class": "moatless.actions.find_code_snippet.FindCodeSnippetArgs"
      },
      "observation": {
        "message": "Found 10 code sections.\n\nViewed relevant code:\nlib/matplotlib/legend.py\n```\n\n    23\t\n    24\timport itertools\n    25\timport logging\n    26\timport time\n    27\t\n    28\timport numpy as np\n    29\t\n    30\timport matplotlib as mpl\n    31\tfrom matplotlib import _api, _docstring, colors, offsetbox\n    32\tfrom matplotlib.artist import Artist, allow_rasterization\n    33\tfrom matplotlib.cbook import silent_list\n    34\tfrom matplotlib.font_manager import FontProperties\n    35\tfrom matplotlib.lines import Line2D\n    36\tfrom matplotlib.patches import (Patch, Rectangle, Shadow, FancyBboxPatch,\n    37\t                                StepPatch)\n    38\tfrom matplotlib.collections import (\n    39\t    Collection, CircleCollection, LineCollection, PathCollection,\n    40\t    PolyCollection, RegularPolyCollection)\n    41\tfrom matplotlib.text import Text\n    42\tfrom matplotlib.transforms import Bbox, BboxBase, TransformedBbox\n    43\tfrom matplotlib.transforms import BboxTransformTo, BboxTransformFrom\n    44\tfrom matplotlib.offsetbox import (\n    45\t    AnchoredOffsetbox, DraggableOffsetBox,\n    46\t    HPacker, VPacker,\n    47\t    DrawingArea, TextArea,\n    48\t)\n    49\tfrom matplotlib.container import ErrorbarContainer, BarContainer, StemContainer\n    50\tfrom . import legend_handler\n      # ...\n    95\t\n    96\t\n    97\t_docstring.interpd.update(_legend_kw_doc=\"\"\"\n    98\tloc : str or pair of floats, default: :rc:`legend.loc` ('best' for axes, \\\n    99\t'upper right' for figures)\n   100\t    The location of the legend.\n   101\t\n   102\t    The strings\n   103\t    ``'upper left', 'upper right', 'lower left', 'lower right'``\n   104\t    place the legend at the corresponding corner of the axes/figure.\n   105\t\n   106\t    The strings\n   107\t    ``'upper center', 'lower center', 'center left', 'center right'``\n   108\t    place the legend at the center of the corresponding edge of the\n   109\t    axes/figure.\n   110\t\n   111\t    The string ``'center'`` places the legend at the center of the axes/figure.\n   112\t\n   113\t    The string ``'best'`` places the legend at the location, among the nine\n   114\t    locations defined so far, with the minimum overlap with other drawn\n   115\t    artists.  This option can be quite slow for plots with large amounts of\n   116\t    data; your plotting speed may benefit from providing a specific location.\n   117\t\n   118\t    The location can also be a 2-tuple giving the coordinates of the lower-left\n   119\t    corner of the legend in axes coordinates (in which case *bbox_to_anchor*\n   120\t    will be ignored).\n   121\t\n   122\t    For back-compatibility, ``'center right'`` (but no other location) can also\n   123\t    be spelled ``'right'``, and each \"string\" locations can also be given as a\n   124\t    numeric value:\n   125\t\n   126\t        ===============   =============\n   127\t        Location String   Location Code\n   128\t        ===============   =============\n   129\t        'best'            0\n   130\t        'upper right'     1\n   131\t        'upper left'      2\n   132\t        'lower left'      3\n   133\t        'lower right'     4\n   134\t        'right'           5\n   135\t        'center left'     6\n   136\t        'center right'    7\n   137\t        'lower center'    8\n   138\t        'upper center'    9\n   139\t        'center'          10\n   140\t        ===============   =============\n   141\t\n   142\tbbox_to_anchor : `.BboxBase`, 2-tuple, or 4-tuple of floats\n   143\t    Box that is used to position the legend in conjunction with *loc*.\n   144\t    Defaults to `axes.bbox` (if called as a method to `.Axes.legend`) or\n   145\t    `figure.bbox` (if `.Figure.legend`).  This argument allows arbitrary\n   146\t    placement of the legend.\n   147\t\n   148\t    Bbox coordinates are interpreted in the coordinate system given by\n   149\t    *bbox_transform*, with the default transform\n   150\t    Axes or Figure coordinates, depending on which ``legend`` is called.\n   151\t\n   152\t    If a 4-tuple or `.BboxBase` is given, then it specifies the bbox\n   153\t    ``(x, y, width, height)`` that the legend is placed in.\n   154\t    To put the legend in the best location in the bottom right\n   155\t    quadrant of the axes (or figure)::\n   156\t\n   157\t        loc='best', bbox_to_anchor=(0.5, 0., 0.5, 0.5)\n   158\t\n   159\t    A 2-tuple ``(x, y)`` places the corner of the legend specified by *loc* at\n   160\t    x, y.  For example, to put the legend's upper right-hand corner in the\n   161\t    center of the axes (or figure) the following keywords can be used::\n   162\t\n   163\t        loc='upper right', bbox_to_anchor=(0.5, 0.5)\n   164\t\n   165\tncols : int, default: 1\n   166\t    The number of columns that the legend has.\n   167\t\n   168\t    For backward compatibility, the spelling *ncol* is also supported\n   169\t    but it is discouraged. If both are given, *ncols* takes precedence.\n   170\t\n   171\tprop : None or `matplotlib.font_manager.FontProperties` or dict\n   172\t    The font properties of the legend. If None (default), the current\n   173\t    :data:`matplotlib.rcParams` will be used.\n   174\t\n   175\tfontsize : int or {'xx-small', 'x-small', 'small', 'medium', 'large', \\\n   176\t'x-large', 'xx-large'}\n   177\t    The font size of the legend. If the value is numeric the size will be the\n   178\t    absolute font size in points. String values are relative to the current\n   179\t    default font size. This argument is only used if *prop* is not specified.\n   180\t\n   181\tlabelcolor : str or list, default: :rc:`legend.labelcolor`\n   182\t    The color of the text in the legend. Either a valid color string\n   183\t    (for example, 'red'), or a list of color strings. The labelcolor can\n   184\t    also be made to match the color of the line or marker using 'linecolor',\n   185\t    'markerfacecolor' (or 'mfc'), or 'markeredgecolor' (or 'mec').\n   186\t\n   187\t    Labelcolor can be set globally using :rc:`legend.labelcolor`. If None,\n   188\t    use :rc:`text.color`.\n   189\t\n   190\tnumpoints : int, default: :rc:`legend.numpoints`\n   191\t    The number of marker points in the legend when creating a legend\n   192\t    entry for a `.Line2D` (line).\n   193\t\n   194\tscatterpoints : int, default: :rc:`legend.scatterpoints`\n   195\t    The number of marker points in the legend when creating\n   196\t    a legend entry for a `.PathCollection` (scatter plot).\n   197\t\n   198\tscatteryoffsets : iterable of floats, default: ``[0.375, 0.5, 0.3125]``\n   199\t    The vertical offset (relative to the font size) for the markers\n   200\t    created for a scatter plot legend entry. 0.0 is at the base the\n   201\t    legend text, and 1.0 is at the top. To draw all markers at the\n   202\t    same height, set to ``[0.5]``.\n   203\t\n   204\tmarkerscale : float, default: :rc:`legend.markerscale`\n   205\t    The relative size of legend markers compared with the originally\n   206\t    drawn ones.\n   207\t\n   208\tmarkerfirst : bool, default: True\n   209\t    If *True*, legend marker is placed to the left of the legend label.\n   210\t    If *False*, legend marker is placed to the right of the legend label.\n   211\t\n   212\tframeon : bool, default: :rc:`legend.frameon`\n   213\t    Whether the legend should be drawn on a patch (frame).\n   214\t\n   215\tfancybox : bool, default: :rc:`legend.fancybox`\n   216\t    Whether round edges should be enabled around the `.FancyBboxPatch` which\n   217\t    makes up the legend's background.\n   218\t\n   219\tshadow : bool, default: :rc:`legend.shadow`\n   220\t    Whether to draw a shadow behind the legend.\n   221\t\n   222\tframealpha : float, default: :rc:`legend.framealpha`\n   223\t    The alpha transparency of the legend's background.\n   224\t    If *shadow* is activated and *framealpha* is ``None``, the default value is\n   225\t    ignored.\n   226\t\n   227\tfacecolor : \"inherit\" or color, default: :rc:`legend.facecolor`\n   228\t    The legend's background color.\n   229\t    If ``\"inherit\"``, use :rc:`axes.facecolor`.\n   230\t\n   231\tedgecolor : \"inherit\" or color, default: :rc:`legend.edgecolor`\n   232\t    The legend's background patch edge color.\n   233\t    If ``\"inherit\"``, use take :rc:`axes.edgecolor`.\n   234\t\n   235\tmode : {\"expand\", None}\n   236\t    If *mode* is set to ``\"expand\"`` the legend will be horizontally\n   237\t    expanded to fill the axes area (or *bbox_to_anchor* if defines\n   238\t    the legend's size).\n   239\t\n   240\tbbox_transform : None or `matplotlib.transforms.Transform`\n   241\t    The transform for the bounding box (*bbox_to_anchor*). For a value\n   242\t    of ``None`` (default) the Axes'\n   243\t    :data:`~matplotlib.axes.Axes.transAxes` transform will be used.\n   244\t\n   245\ttitle : str or None\n   246\t    The legend's title. Default is no title (``None``).\n   247\t\n   248\ttitle_fontproperties : None or `matplotlib.font_manager.FontProperties` or dict\n   249\t    The font properties of the legend's title. If None (default), the\n   250\t    *title_fontsize* argument will be used if present; if *title_fontsize* is\n   251\t    also None, the current :rc:`legend.title_fontsize` will be used.\n   252\t\n   253\ttitle_fontsize : int or {'xx-small', 'x-small', 'small', 'medium', 'large', \\\n   254\t'x-large', 'xx-large'}, default: :rc:`legend.title_fontsize`\n   255\t    The font size of the legend's title.\n   256\t    Note: This cannot be combined with *title_fontproperties*. If you want\n   257\t    to set the fontsize alongside other font properties, use the *size*\n   258\t    parameter in *title_fontproperties*.\n   259\t\n   260\talignment : {'center', 'left', 'right'}, default: 'center'\n   261\t    The alignment of the legend title and the box of entries. The entries\n   262\t    are aligned as a single block, so that markers always lined up.\n   263\t\n   264\tborderpad : float, default: :rc:`legend.borderpad`\n   265\t    The fractional whitespace inside the legend border, in font-size units.\n   266\t\n   267\tlabelspacing : float, default: :rc:`legend.labelspacing`\n   268\t    The vertical space between the legend entries, in font-size units.\n   269\t\n   270\thandlelength : float, default: :rc:`legend.handlelength`\n   271\t    The length of the legend handles, in font-size units.\n   272\t\n   273\thandleheight : float, default: :rc:`legend.handleheight`\n   274\t    The height of the legend handles, in font-size units.\n   275\t\n   276\thandletextpad : float, default: :rc:`legend.handletextpad`\n   277\t    The pad between the legend handle and text, in font-size units.\n   278\t\n   279\tborderaxespad : float, default: :rc:`legend.borderaxespad`\n   280\t    The pad between the axes and legend border, in font-size units.\n   281\t\n   282\tcolumnspacing : float, default: :rc:`legend.columnspacing`\n   283\t    The spacing between columns, in font-size units.\n   284\t\n   285\thandler_map : dict or None\n   286\t    The custom dictionary mapping instances or types to a legend\n   287\t    handler. This *handler_map* updates the default handler map\n   288\t    found at `matplotlib.legend.Legend.get_legend_handler_map`.\n   289\t\"\"\")\n      # ...\n```\n",
        "summary": "Found relevant code sections in the search results.",
        "terminal": false,
        "expect_correction": false,
        "properties": {
          "search_hits": [],
          "search_tokens": 7230,
          "new_span_ids": [
            "impl"
          ]
        },
        "execution_completion": {
          "model": "claude-3-5-sonnet-20241022",
          "input": [
            {
              "role": "user",
              "content": "Search request:\nSearching for code snippet: _legend_kw_doc\n\nIdentify the relevant code sections in the search results to use them. \n\n<search_results>\nlib/matplotlib/axes/_axes.py\n```\n\n\n\n<span id='imports'>\n     1\timport functools\n     2\timport itertools\n     3\timport logging\n     4\timport math\n     5\tfrom numbers import Integral, Number\n     6\t\n     7\timport numpy as np\n     8\tfrom numpy import ma\n     9\t\n    10\timport matplotlib as mpl\n    11\timport matplotlib.category  # Register category unit converter as side-effect.\n    12\timport matplotlib.cbook as cbook\n    13\timport matplotlib.collections as mcoll\n    14\timport matplotlib.colors as mcolors\n    15\timport matplotlib.contour as mcontour\n    16\timport matplotlib.dates  # noqa # Register date unit converter as side-effect.\n    17\timport matplotlib.image as mimage\n    18\timport matplotlib.legend as mlegend\n    19\timport matplotlib.lines as mlines\n    20\timport matplotlib.markers as mmarkers\n    21\timport matplotlib.mlab as mlab\n    22\timport matplotlib.patches as mpatches\n    23\timport matplotlib.path as mpath\n    24\timport matplotlib.quiver as mquiver\n    25\timport matplotlib.stackplot as mstack\n    26\timport matplotlib.streamplot as mstream\n    27\timport matplotlib.table as mtable\n    28\timport matplotlib.text as mtext\n    29\timport matplotlib.ticker as mticker\n    30\timport matplotlib.transforms as mtransforms\n    31\timport matplotlib.tri as mtri\n    32\timport matplotlib.units as munits\n    33\tfrom matplotlib import _api, _docstring, _preprocess_data\n    34\tfrom matplotlib.axes._base import (\n    35\t    _AxesBase, _TransformedBoundsLocator, _process_plot_format)\n    36\tfrom matplotlib.axes._secondary_axes import SecondaryAxis\n    37\tfrom matplotlib.container import BarContainer, ErrorbarContainer, StemContainer\n    38\t\n    39\t_log = logging.getLogger(__name__)\n    40\t\n    41\t\n    42\t# The axes module contains all the wrappers to plotting functions.\n    43\t# All the other methods should go in the _AxesBase class.\n\n\n<span id='Axes'>\n    44\t\n    45\t\n    46\t@_docstring.interpd\n    47\tclass Axes(_AxesBase):\n    48\t    \"\"\"\n    49\t    The `Axes` contains most of the figure elements: `~.axis.Axis`,\n    50\t    `~.axis.Tick`, `~.lines.Line2D`, `~.text.Text`, `~.patches.Polygon`, etc.,\n    51\t    and sets the coordinate system.\n    52\t\n    53\t    The `Axes` instance supports callbacks through a callbacks attribute which\n    54\t    is a `~.cbook.CallbackRegistry` instance.  The events you can connect to\n    55\t    are 'xlim_changed' and 'ylim_changed' and the callback will be called with\n    56\t    func(*ax*) where *ax* is the `Axes` instance.\n    57\t\n    58\t    Attributes\n    59\t    ----------\n    60\t    dataLim : `.Bbox`\n    61\t        The bounding box enclosing all data displayed in the Axes.\n    62\t    viewLim : `.Bbox`\n    63\t        The view limits in data coordinates.\n    64\t\n    65\t    \"\"\"\n    66\t    ### Labelling, legend and texts\n          # ...\n\n\n<span id='Axes.legend'>\n   185\t\n   186\t    @_docstring.dedent_interpd\n   187\t    def legend(self, *args, **kwargs):\n   188\t        \"\"\"\n   189\t        Place a legend on the Axes.\n   190\t\n   191\t        Call signatures::\n   192\t\n   193\t            legend()\n   194\t            legend(handles, labels)\n   195\t            legend(handles=handles)\n   196\t            legend(labels)\n   197\t\n   198\t        The call signatures correspond to the following different ways to use\n   199\t        this method:\n   200\t\n   201\t        **1. Automatic detection of elements to be shown in the legend**\n   202\t\n   203\t        The elements to be added to the legend are automatically determined,\n   204\t        when you do not pass in any extra arguments.\n   205\t\n   206\t        In this case, the labels are taken from the artist. You can specify\n   207\t        them either at artist creation or by calling the\n   208\t        :meth:`~.Artist.set_label` method on the artist::\n   209\t\n   210\t            ax.plot([1, 2, 3], label='Inline label')\n   211\t            ax.legend()\n   212\t\n   213\t        or::\n   214\t\n   215\t            line, = ax.plot([1, 2, 3])\n   216\t            line.set_label('Label via method')\n   217\t            ax.legend()\n   218\t\n   219\t        .. note::\n   220\t            Specific artists can be excluded from the automatic legend element\n   221\t            selection by using a label starting with an underscore, \"_\".\n   222\t            A string starting with an underscore is the default label for all\n   223\t            artists, so calling `.Axes.legend` without any arguments and\n   224\t            without setting the labels manually will result in no legend being\n   225\t            drawn.\n   226\t\n   227\t\n   228\t        **2. Explicitly listing the artists and labels in the legend**\n   229\t\n   230\t        For full control of which artists have a legend entry, it is possible\n   231\t        to pass an iterable of legend artists followed by an iterable of\n   232\t        legend labels respectively::\n   233\t\n   234\t            ax.legend([line1, line2, line3], ['label1', 'label2', 'label3'])\n   235\t\n   236\t\n   237\t        **3. Explicitly listing the artists in the legend**\n   238\t\n   239\t        This is similar to 2, but the labels are taken from the artists'\n   240\t        label properties. Example::\n   241\t\n   242\t            line1, = ax.plot([1, 2, 3], label='label1')\n   243\t            line2, = ax.plot([1, 2, 3], label='label2')\n   244\t            ax.legend(handles=[line1, line2])\n   245\t\n   246\t\n   247\t        **4. Labeling existing plot elements**\n   248\t\n   249\t        .. admonition:: Discouraged\n   250\t\n   251\t            This call signature is discouraged, because the relation between\n   252\t            plot elements and labels is only implicit by their order and can\n   253\t            easily be mixed up.\n   254\t\n   255\t        To make a legend for all artists on an Axes, call this function with\n   256\t        an iterable of strings, one for each legend item. For example::\n   257\t\n   258\t            ax.plot([1, 2, 3])\n   259\t            ax.plot([5, 6, 7])\n   260\t            ax.legend(['First line', 'Second line'])\n   261\t\n   262\t\n   263\t        Parameters\n   264\t        ----------\n   265\t        handles : sequence of `.Artist`, optional\n   266\t            A list of Artists (lines, patches) to be added to the legend.\n   267\t            Use this together with *labels*, if you need full control on what\n   268\t            is shown in the legend and the automatic mechanism described above\n   269\t            is not sufficient.\n   270\t\n   271\t            The length of handles and labels should be the same in this\n   272\t            case. If they are not, they are truncated to the smaller length.\n   273\t\n   274\t        labels : list of str, optional\n   275\t            A list of labels to show next to the artists.\n   276\t            Use this together with *handles*, if you need full control on what\n   277\t            is shown in the legend and the automatic mechanism described above\n   278\t            is not sufficient.\n   279\t\n   280\t        Returns\n   281\t        -------\n   282\t        `~matplotlib.legend.Legend`\n   283\t\n   284\t        Other Parameters\n   285\t        ----------------\n   286\t        %(_legend_kw_doc)s\n   287\t\n   288\t        See Also\n   289\t        --------\n   290\t        .Figure.legend\n   291\t\n   292\t        Notes\n   293\t        -----\n   294\t        Some artists are not supported by this function.  See\n   295\t        :doc:`/tutorials/intermediate/legend_guide` for details.\n   296\t\n   297\t        Examples\n   298\t        --------\n   299\t        .. plot:: gallery/text_labels_and_annotations/legend.py\n   300\t        \"\"\"\n   301\t        handles, labels, extra_args, kwargs = mlegend._parse_legend_args(\n   302\t                [self],\n   303\t                *args,\n   304\t                **kwargs)\n   305\t        if len(extra_args):\n   306\t            raise TypeError('legend only accepts two non-keyword arguments')\n   307\t        self.legend_ = mlegend.Legend(self, handles, labels, **kwargs)\n   308\t        self.legend_._remove_method = self._remove_legend\n   309\t        return self.legend_\n          # ...\n```\n\n\nlib/matplotlib/figure.py\n```\n\n\n\n<span id='imports'>\n    16\t\n    17\tfrom contextlib import ExitStack\n    18\timport inspect\n    19\timport itertools\n    20\timport logging\n    21\tfrom numbers import Integral\n    22\t\n    23\timport numpy as np\n    24\t\n    25\timport matplotlib as mpl\n    26\tfrom matplotlib import _blocking_input, backend_bases, _docstring, projections\n    27\tfrom matplotlib.artist import (\n    28\t    Artist, allow_rasterization, _finalize_rasterization)\n    29\tfrom matplotlib.backend_bases import (\n    30\t    DrawEvent, FigureCanvasBase, NonGuiException, MouseButton, _get_renderer)\n    31\timport matplotlib._api as _api\n    32\timport matplotlib.cbook as cbook\n    33\timport matplotlib.colorbar as cbar\n    34\timport matplotlib.image as mimage\n    35\t\n    36\tfrom matplotlib.axes import Axes, SubplotBase, subplot_class_factory\n    37\tfrom matplotlib.gridspec import GridSpec\n    38\tfrom matplotlib.layout_engine import (\n    39\t    ConstrainedLayoutEngine, TightLayoutEngine, LayoutEngine,\n    40\t    PlaceHolderLayoutEngine\n    41\t)\n    42\timport matplotlib.legend as mlegend\n    43\tfrom matplotlib.patches import Rectangle\n    44\tfrom matplotlib.text import Text\n    45\tfrom matplotlib.transforms import (Affine2D, Bbox, BboxTransformTo,\n    46\t                                   TransformedBbox)\n    47\t\n    48\t_log = logging.getLogger(__name__)\n      # ...\n\n\n<span id='FigureBase'>\n   156\t\n   157\t\n   158\tclass FigureBase(Artist):\n   159\t    \"\"\"\n   160\t    Base class for `.Figure` and `.SubFigure` containing the methods that add\n   161\t    artists to the figure or subfigure, create Axes, etc.\n   162\t    \"\"\"\n          # ...\n\n\n<span id='FigureBase.legend'>\n   991\t    @_docstring.dedent_interpd\n   992\t    def legend(self, *args, **kwargs):\n   993\t        \"\"\"\n   994\t        Place a legend on the figure.\n   995\t\n   996\t        Call signatures::\n   997\t\n   998\t            legend()\n   999\t            legend(handles, labels)\n  1000\t            legend(handles=handles)\n  1001\t            legend(labels)\n  1002\t\n  1003\t        The call signatures correspond to the following different ways to use\n  1004\t        this method:\n  1005\t\n  1006\t        **1. Automatic detection of elements to be shown in the legend**\n  1007\t\n  1008\t        The elements to be added to the legend are automatically determined,\n  1009\t        when you do not pass in any extra arguments.\n  1010\t\n  1011\t        In this case, the labels are taken from the artist. You can specify\n  1012\t        them either at artist creation or by calling the\n  1013\t        :meth:`~.Artist.set_label` method on the artist::\n  1014\t\n  1015\t            ax.plot([1, 2, 3], label='Inline label')\n  1016\t            fig.legend()\n  1017\t\n  1018\t        or::\n  1019\t\n  1020\t            line, = ax.plot([1, 2, 3])\n  1021\t            line.set_label('Label via method')\n  1022\t            fig.legend()\n  1023\t\n  1024\t        Specific lines can be excluded from the automatic legend element\n  1025\t        selection by defining a label starting with an underscore.\n  1026\t        This is default for all artists, so calling `.Figure.legend` without\n  1027\t        any arguments and without setting the labels manually will result in\n  1028\t        no legend being drawn.\n  1029\t\n  1030\t\n  1031\t        **2. Explicitly listing the artists and labels in the legend**\n  1032\t\n  1033\t        For full control of which artists have a legend entry, it is possible\n  1034\t        to pass an iterable of legend artists followed by an iterable of\n  1035\t        legend labels respectively::\n  1036\t\n  1037\t            fig.legend([line1, line2, line3], ['label1', 'label2', 'label3'])\n  1038\t\n  1039\t\n  1040\t        **3. Explicitly listing the artists in the legend**\n  1041\t\n  1042\t        This is similar to 2, but the labels are taken from the artists'\n  1043\t        label properties. Example::\n  1044\t\n  1045\t            line1, = ax1.plot([1, 2, 3], label='label1')\n  1046\t            line2, = ax2.plot([1, 2, 3], label='label2')\n  1047\t            fig.legend(handles=[line1, line2])\n  1048\t\n  1049\t\n  1050\t        **4. Labeling existing plot elements**\n  1051\t\n  1052\t        .. admonition:: Discouraged\n  1053\t\n  1054\t            This call signature is discouraged, because the relation between\n  1055\t            plot elements and labels is only implicit by their order and can\n  1056\t            easily be mixed up.\n  1057\t\n  1058\t        To make a legend for all artists on all Axes, call this function with\n  1059\t        an iterable of strings, one for each legend item. For example::\n  1060\t\n  1061\t            fig, (ax1, ax2) = plt.subplots(1, 2)\n  1062\t            ax1.plot([1, 3, 5], color='blue')\n  1063\t            ax2.plot([2, 4, 6], color='red')\n  1064\t            fig.legend(['the blues', 'the reds'])\n  1065\t\n  1066\t\n  1067\t        Parameters\n  1068\t        ----------\n  1069\t        handles : list of `.Artist`, optional\n  1070\t            A list of Artists (lines, patches) to be added to the legend.\n  1071\t            Use this together with *labels*, if you need full control on what\n  1072\t            is shown in the legend and the automatic mechanism described above\n  1073\t            is not sufficient.\n  1074\t\n  1075\t            The length of handles and labels should be the same in this\n  1076\t            case. If they are not, they are truncated to the smaller length.\n  1077\t\n  1078\t        labels : list of str, optional\n  1079\t            A list of labels to show next to the artists.\n  1080\t            Use this together with *handles*, if you need full control on what\n  1081\t            is shown in the legend and the automatic mechanism described above\n  1082\t            is not sufficient.\n  1083\t\n  1084\t        Returns\n  1085\t        -------\n  1086\t        `~matplotlib.legend.Legend`\n  1087\t\n  1088\t        Other Parameters\n  1089\t        ----------------\n  1090\t        %(_legend_kw_doc)s\n  1091\t\n  1092\t        See Also\n  1093\t        --------\n  1094\t        .Axes.legend\n  1095\t\n  1096\t        Notes\n  1097\t        -----\n  1098\t        Some artists are not supported by this function.  See\n  1099\t        :doc:`/tutorials/intermediate/legend_guide` for details.\n  1100\t        \"\"\"\n  1101\t\n  1102\t        handles, labels, extra_args, kwargs = mlegend._parse_legend_args(\n  1103\t                self.axes,\n  1104\t                *args,\n  1105\t                **kwargs)\n  1106\t        # check for third arg\n  1107\t        if len(extra_args):\n  1108\t            # _api.warn_deprecated(\n  1109\t            #     \"2.1\",\n  1110\t            #     message=\"Figure.legend will accept no more than two \"\n  1111\t            #     \"positional arguments in the future.  Use \"\n  1112\t            #     \"'fig.legend(handles, labels, loc=location)' \"\n  1113\t            #     \"instead.\")\n  1114\t            # kwargs['loc'] = extra_args[0]\n  1115\t            # extra_args = extra_args[1:]\n  1116\t            pass\n  1117\t        transform = kwargs.pop('bbox_transform', self.transSubfigure)\n  1118\t        # explicitly set the bbox transform if the user hasn't.\n  1119\t        l = mlegend.Legend(self, handles, labels, *extra_args,\n  1120\t                           bbox_transform=transform, **kwargs)\n  1121\t        self.legends.append(l)\n  1122\t        l._remove_method = self.legends.remove\n  1123\t        self.stale = True\n  1124\t        return l\n          # ...\n      # ...\n```\n\n\nlib/matplotlib/legend.py\n```\n\n\n\n<span id='imports'>\n    23\t\n    24\timport itertools\n    25\timport logging\n    26\timport time\n    27\t\n    28\timport numpy as np\n    29\t\n    30\timport matplotlib as mpl\n    31\tfrom matplotlib import _api, _docstring, colors, offsetbox\n    32\tfrom matplotlib.artist import Artist, allow_rasterization\n    33\tfrom matplotlib.cbook import silent_list\n    34\tfrom matplotlib.font_manager import FontProperties\n    35\tfrom matplotlib.lines import Line2D\n    36\tfrom matplotlib.patches import (Patch, Rectangle, Shadow, FancyBboxPatch,\n    37\t                                StepPatch)\n    38\tfrom matplotlib.collections import (\n    39\t    Collection, CircleCollection, LineCollection, PathCollection,\n    40\t    PolyCollection, RegularPolyCollection)\n    41\tfrom matplotlib.text import Text\n    42\tfrom matplotlib.transforms import Bbox, BboxBase, TransformedBbox\n    43\tfrom matplotlib.transforms import BboxTransformTo, BboxTransformFrom\n    44\tfrom matplotlib.offsetbox import (\n    45\t    AnchoredOffsetbox, DraggableOffsetBox,\n    46\t    HPacker, VPacker,\n    47\t    DrawingArea, TextArea,\n    48\t)\n    49\tfrom matplotlib.container import ErrorbarContainer, BarContainer, StemContainer\n    50\tfrom . import legend_handler\n      # ...\n\n\n<span id='impl'>\n    95\t\n    96\t\n    97\t_docstring.interpd.update(_legend_kw_doc=\"\"\"\n    98\tloc : str or pair of floats, default: :rc:`legend.loc` ('best' for axes, \\\n    99\t'upper right' for figures)\n   100\t    The location of the legend.\n   101\t\n   102\t    The strings\n   103\t    ``'upper left', 'upper right', 'lower left', 'lower right'``\n   104\t    place the legend at the corresponding corner of the axes/figure.\n   105\t\n   106\t    The strings\n   107\t    ``'upper center', 'lower center', 'center left', 'center right'``\n   108\t    place the legend at the center of the corresponding edge of the\n   109\t    axes/figure.\n   110\t\n   111\t    The string ``'center'`` places the legend at the center of the axes/figure.\n   112\t\n   113\t    The string ``'best'`` places the legend at the location, among the nine\n   114\t    locations defined so far, with the minimum overlap with other drawn\n   115\t    artists.  This option can be quite slow for plots with large amounts of\n   116\t    data; your plotting speed may benefit from providing a specific location.\n   117\t\n   118\t    The location can also be a 2-tuple giving the coordinates of the lower-left\n   119\t    corner of the legend in axes coordinates (in which case *bbox_to_anchor*\n   120\t    will be ignored).\n   121\t\n   122\t    For back-compatibility, ``'center right'`` (but no other location) can also\n   123\t    be spelled ``'right'``, and each \"string\" locations can also be given as a\n   124\t    numeric value:\n   125\t\n   126\t        ===============   =============\n   127\t        Location String   Location Code\n   128\t        ===============   =============\n   129\t        'best'            0\n   130\t        'upper right'     1\n   131\t        'upper left'      2\n   132\t        'lower left'      3\n   133\t        'lower right'     4\n   134\t        'right'           5\n   135\t        'center left'     6\n   136\t        'center right'    7\n   137\t        'lower center'    8\n   138\t        'upper center'    9\n   139\t        'center'          10\n   140\t        ===============   =============\n   141\t\n   142\tbbox_to_anchor : `.BboxBase`, 2-tuple, or 4-tuple of floats\n   143\t    Box that is used to position the legend in conjunction with *loc*.\n   144\t    Defaults to `axes.bbox` (if called as a method to `.Axes.legend`) or\n   145\t    `figure.bbox` (if `.Figure.legend`).  This argument allows arbitrary\n   146\t    placement of the legend.\n   147\t\n   148\t    Bbox coordinates are interpreted in the coordinate system given by\n   149\t    *bbox_transform*, with the default transform\n   150\t    Axes or Figure coordinates, depending on which ``legend`` is called.\n   151\t\n   152\t    If a 4-tuple or `.BboxBase` is given, then it specifies the bbox\n   153\t    ``(x, y, width, height)`` that the legend is placed in.\n   154\t    To put the legend in the best location in the bottom right\n   155\t    quadrant of the axes (or figure)::\n   156\t\n   157\t        loc='best', bbox_to_anchor=(0.5, 0., 0.5, 0.5)\n   158\t\n   159\t    A 2-tuple ``(x, y)`` places the corner of the legend specified by *loc* at\n   160\t    x, y.  For example, to put the legend's upper right-hand corner in the\n   161\t    center of the axes (or figure) the following keywords can be used::\n   162\t\n   163\t        loc='upper right', bbox_to_anchor=(0.5, 0.5)\n   164\t\n   165\tncols : int, default: 1\n   166\t    The number of columns that the legend has.\n   167\t\n   168\t    For backward compatibility, the spelling *ncol* is also supported\n   169\t    but it is discouraged. If both are given, *ncols* takes precedence.\n   170\t\n   171\tprop : None or `matplotlib.font_manager.FontProperties` or dict\n   172\t    The font properties of the legend. If None (default), the current\n   173\t    :data:`matplotlib.rcParams` will be used.\n   174\t\n   175\tfontsize : int or {'xx-small', 'x-small', 'small', 'medium', 'large', \\\n   176\t'x-large', 'xx-large'}\n   177\t    The font size of the legend. If the value is numeric the size will be the\n   178\t    absolute font size in points. String values are relative to the current\n   179\t    default font size. This argument is only used if *prop* is not specified.\n   180\t\n   181\tlabelcolor : str or list, default: :rc:`legend.labelcolor`\n   182\t    The color of the text in the legend. Either a valid color string\n   183\t    (for example, 'red'), or a list of color strings. The labelcolor can\n   184\t    also be made to match the color of the line or marker using 'linecolor',\n   185\t    'markerfacecolor' (or 'mfc'), or 'markeredgecolor' (or 'mec').\n   186\t\n   187\t    Labelcolor can be set globally using :rc:`legend.labelcolor`. If None,\n   188\t    use :rc:`text.color`.\n   189\t\n   190\tnumpoints : int, default: :rc:`legend.numpoints`\n   191\t    The number of marker points in the legend when creating a legend\n   192\t    entry for a `.Line2D` (line).\n   193\t\n   194\tscatterpoints : int, default: :rc:`legend.scatterpoints`\n   195\t    The number of marker points in the legend when creating\n   196\t    a legend entry for a `.PathCollection` (scatter plot).\n   197\t\n   198\tscatteryoffsets : iterable of floats, default: ``[0.375, 0.5, 0.3125]``\n   199\t    The vertical offset (relative to the font size) for the markers\n   200\t    created for a scatter plot legend entry. 0.0 is at the base the\n   201\t    legend text, and 1.0 is at the top. To draw all markers at the\n   202\t    same height, set to ``[0.5]``.\n   203\t\n   204\tmarkerscale : float, default: :rc:`legend.markerscale`\n   205\t    The relative size of legend markers compared with the originally\n   206\t    drawn ones.\n   207\t\n   208\tmarkerfirst : bool, default: True\n   209\t    If *True*, legend marker is placed to the left of the legend label.\n   210\t    If *False*, legend marker is placed to the right of the legend label.\n   211\t\n   212\tframeon : bool, default: :rc:`legend.frameon`\n   213\t    Whether the legend should be drawn on a patch (frame).\n   214\t\n   215\tfancybox : bool, default: :rc:`legend.fancybox`\n   216\t    Whether round edges should be enabled around the `.FancyBboxPatch` which\n   217\t    makes up the legend's background.\n   218\t\n   219\tshadow : bool, default: :rc:`legend.shadow`\n   220\t    Whether to draw a shadow behind the legend.\n   221\t\n   222\tframealpha : float, default: :rc:`legend.framealpha`\n   223\t    The alpha transparency of the legend's background.\n   224\t    If *shadow* is activated and *framealpha* is ``None``, the default value is\n   225\t    ignored.\n   226\t\n   227\tfacecolor : \"inherit\" or color, default: :rc:`legend.facecolor`\n   228\t    The legend's background color.\n   229\t    If ``\"inherit\"``, use :rc:`axes.facecolor`.\n   230\t\n   231\tedgecolor : \"inherit\" or color, default: :rc:`legend.edgecolor`\n   232\t    The legend's background patch edge color.\n   233\t    If ``\"inherit\"``, use take :rc:`axes.edgecolor`.\n   234\t\n   235\tmode : {\"expand\", None}\n   236\t    If *mode* is set to ``\"expand\"`` the legend will be horizontally\n   237\t    expanded to fill the axes area (or *bbox_to_anchor* if defines\n   238\t    the legend's size).\n   239\t\n   240\tbbox_transform : None or `matplotlib.transforms.Transform`\n   241\t    The transform for the bounding box (*bbox_to_anchor*). For a value\n   242\t    of ``None`` (default) the Axes'\n   243\t    :data:`~matplotlib.axes.Axes.transAxes` transform will be used.\n   244\t\n   245\ttitle : str or None\n   246\t    The legend's title. Default is no title (``None``).\n   247\t\n   248\ttitle_fontproperties : None or `matplotlib.font_manager.FontProperties` or dict\n   249\t    The font properties of the legend's title. If None (default), the\n   250\t    *title_fontsize* argument will be used if present; if *title_fontsize* is\n   251\t    also None, the current :rc:`legend.title_fontsize` will be used.\n   252\t\n   253\ttitle_fontsize : int or {'xx-small', 'x-small', 'small', 'medium', 'large', \\\n   254\t'x-large', 'xx-large'}, default: :rc:`legend.title_fontsize`\n   255\t    The font size of the legend's title.\n   256\t    Note: This cannot be combined with *title_fontproperties*. If you want\n   257\t    to set the fontsize alongside other font properties, use the *size*\n   258\t    parameter in *title_fontproperties*.\n   259\t\n   260\talignment : {'center', 'left', 'right'}, default: 'center'\n   261\t    The alignment of the legend title and the box of entries. The entries\n   262\t    are aligned as a single block, so that markers always lined up.\n   263\t\n   264\tborderpad : float, default: :rc:`legend.borderpad`\n   265\t    The fractional whitespace inside the legend border, in font-size units.\n   266\t\n   267\tlabelspacing : float, default: :rc:`legend.labelspacing`\n   268\t    The vertical space between the legend entries, in font-size units.\n   269\t\n   270\thandlelength : float, default: :rc:`legend.handlelength`\n   271\t    The length of the legend handles, in font-size units.\n   272\t\n   273\thandleheight : float, default: :rc:`legend.handleheight`\n   274\t    The height of the legend handles, in font-size units.\n   275\t\n   276\thandletextpad : float, default: :rc:`legend.handletextpad`\n   277\t    The pad between the legend handle and text, in font-size units.\n   278\t\n   279\tborderaxespad : float, default: :rc:`legend.borderaxespad`\n   280\t    The pad between the axes and legend border, in font-size units.\n   281\t\n   282\tcolumnspacing : float, default: :rc:`legend.columnspacing`\n   283\t    The spacing between columns, in font-size units.\n   284\t\n   285\thandler_map : dict or None\n   286\t    The custom dictionary mapping instances or types to a legend\n   287\t    handler. This *handler_map* updates the default handler map\n   288\t    found at `matplotlib.legend.Legend.get_legend_handler_map`.\n   289\t\"\"\")\n\n\n<span id='Legend'>\n   290\t\n   291\t\n   292\tclass Legend(Artist):\n   293\t    \"\"\"\n   294\t    Place a legend on the axes at location loc.\n   295\t    \"\"\"\n   296\t\n   297\t    # 'best' is only implemented for axes legends\n   298\t    codes = {'best': 0, **AnchoredOffsetbox.codes}\n   299\t    zorder = 5\n          # ...\n\n\n<span id='Legend.__init__'>\n   303\t\n   304\t    @_api.make_keyword_only(\"3.6\", \"loc\")\n   305\t    @_docstring.dedent_interpd\n   306\t    def __init__(\n   307\t        self, parent, handles, labels,\n   308\t        loc=None,\n   309\t        numpoints=None,      # number of points in the legend line\n   310\t        markerscale=None,    # relative size of legend markers vs. original\n   311\t        markerfirst=True,    # left/right ordering of legend marker and label\n   312\t        scatterpoints=None,  # number of scatter points\n   313\t        scatteryoffsets=None,\n   314\t        prop=None,           # properties for the legend texts\n   315\t        fontsize=None,       # keyword to set font size directly\n   316\t        labelcolor=None,     # keyword to set the text color\n   317\t\n   318\t        # spacing & pad defined as a fraction of the font-size\n   319\t        borderpad=None,      # whitespace inside the legend border\n   320\t        labelspacing=None,   # vertical space between the legend entries\n   321\t        handlelength=None,   # length of the legend handles\n   322\t        handleheight=None,   # height of the legend handles\n   323\t        handletextpad=None,  # pad between the legend handle and text\n   324\t        borderaxespad=None,  # pad between the axes and legend border\n   325\t        columnspacing=None,  # spacing between columns\n   326\t\n   327\t        ncols=1,     # number of columns\n   328\t        mode=None,  # horizontal distribution of columns: None or \"expand\"\n   329\t\n   330\t        fancybox=None,  # True: fancy box, False: rounded box, None: rcParam\n   331\t        shadow=None,\n   332\t        title=None,           # legend title\n   333\t        title_fontsize=None,  # legend title font size\n   334\t        framealpha=None,      # set frame alpha\n   335\t        edgecolor=None,       # frame patch edgecolor\n   336\t        facecolor=None,       # frame patch facecolor\n   337\t\n   338\t        bbox_to_anchor=None,  # bbox to which the legend will be anchored\n   339\t        bbox_transform=None,  # transform for the bbox\n   340\t        frameon=None,         # draw frame\n   341\t        handler_map=None,\n   342\t        title_fontproperties=None,  # properties for the legend title\n   343\t        alignment=\"center\",       # control the alignment within the legend box\n   344\t        *,\n   345\t        ncol=1  # synonym for ncols (backward compatibility)\n   346\t    ):\n   347\t        \"\"\"\n   348\t        Parameters\n   349\t        ----------\n   350\t        parent : `~matplotlib.axes.Axes` or `.Figure`\n   351\t            The artist that contains the legend.\n   352\t\n   353\t        handles : list of `.Artist`\n   354\t            A list of Artists (lines, patches) to be added to the legend.\n   355\t\n   356\t        labels : list of str\n   357\t            A list of labels to show next to the artists. The length of handles\n   358\t            and labels should be the same. If they are not, they are truncated\n   359\t            to the smaller of both lengths.\n   360\t\n   361\t        Other Parameters\n   362\t        ----------------\n   363\t        %(_legend_kw_doc)s\n   364\t\n   365\t        Notes\n   366\t        -----\n   367\t        Users can specify any arbitrary location for the legend using the\n   368\t        *bbox_to_anchor* keyword argument. *bbox_to_anchor* can be a\n   369\t        `.BboxBase` (or derived there from) or a tuple of 2 or 4 floats.\n   370\t        See `set_bbox_to_anchor` for more detail.\n   371\t\n   372\t        The legend location can be specified by setting *loc* with a tuple of\n   373\t        2 floats, which is interpreted as the lower-left corner of the legend\n   374\t        in the normalized axes coordinate.\n   375\t        \"\"\"\n   376\t        # local import only to avoid circularity\n   377\t        from matplotlib.axes import Axes\n   378\t        from matplotlib.figure import FigureBase\n   379\t\n   380\t        super().__init__()\n   381\t\n   382\t        if prop is None:\n   383\t            if fontsize is not None:\n   384\t                self.prop = FontProperties(size=fontsize)\n   385\t            else:\n   386\t                self.prop = FontProperties(\n   387\t                    size=mpl.rcParams[\"legend.fontsize\"])\n   388\t        else:\n   389\t            self.prop = FontProperties._from_any(prop)\n   390\t            if isinstance(prop, dict) and \"size\" not in prop:\n   391\t                self.prop.set_size(mpl.rcParams[\"legend.fontsize\"])\n   392\t\n   393\t        self._fontsize = self.prop.get_size_in_points()\n   394\t\n   395\t        self.texts = []\n   396\t        self.legendHandles = []\n   397\t        self._legend_title_box = None\n   398\t\n   399\t        #: A dictionary with the extra handler mappings for this Legend\n   400\t        #: instance.\n   401\t        self._custom_handler_map = handler_map\n   402\t\n   403\t        def val_or_rc(val, rc_name):\n   404\t            return val if val is not None else mpl.rcParams[rc_name]\n   405\t\n   406\t        self.numpoints = val_or_rc(numpoints, 'legend.numpoints')\n   407\t        self.markerscale = val_or_rc(markerscale, 'legend.markerscale')\n   408\t        self.scatterpoints = val_or_rc(scatterpoints, 'legend.scatterpoints')\n   409\t        self.borderpad = val_or_rc(borderpad, 'legend.borderpad')\n   410\t        self.labelspacing = val_or_rc(labelspacing, 'legend.labelspacing')\n   411\t        self.handlelength = val_or_rc(handlelength, 'legend.handlelength')\n   412\t        self.handleheight = val_or_rc(handleheight, 'legend.handleheight')\n   413\t        self.handletextpad = val_or_rc(handletextpad, 'legend.handletextpad')\n   414\t        self.borderaxespad = val_or_rc(borderaxespad, 'legend.borderaxespad')\n   415\t        self.columnspacing = val_or_rc(columnspacing, 'legend.columnspacing')\n   416\t        self.shadow = val_or_rc(shadow, 'legend.shadow')\n   417\t        # trim handles and labels if illegal label...\n   418\t        _lab, _hand = [], []\n   419\t        for label, handle in zip(labels, handles):\n   420\t            if isinstance(label, str) and label.startswith('_'):\n   421\t                _api.warn_external(f\"The label {label!r} of {handle!r} starts \"\n   422\t                                   \"with '_'. It is thus excluded from the \"\n   423\t                                   \"legend.\")\n   424\t            else:\n   425\t                _lab.append(label)\n   426\t                _hand.append(handle)\n   427\t        labels, handles = _lab, _hand\n   428\t\n   429\t        handles = list(handles)\n   430\t        if len(handles) < 2:\n   431\t            ncols = 1\n   432\t        self._ncols = ncols if ncols != 1 else ncol\n   433\t\n   434\t        if self.numpoints <= 0:\n   435\t            raise ValueError(\"numpoints must be > 0; it was %d\" % numpoints)\n   436\t\n   437\t        # introduce y-offset for handles of the scatter plot\n   438\t        if scatteryoffsets is None:\n   439\t            self._scatteryoffsets = np.array([3. / 8., 4. / 8., 2.5 / 8.])\n   440\t        else:\n   441\t            self._scatteryoffsets = np.asarray(scatteryoffsets)\n   442\t        reps = self.scatterpoints // len(self._scatteryoffsets) + 1\n   443\t        self._scatteryoffsets = np.tile(self._scatteryoffsets,\n   444\t                                        reps)[:self.scatterpoints]\n   445\t\n   446\t        # _legend_box is a VPacker instance that contains all\n   447\t        # legend items and will be initialized from _init_legend_box()\n   448\t        # method.\n   449\t        self._legend_box = None\n   450\t\n   451\t        if isinstance(parent, Axes):\n   452\t            self.isaxes = True\n   453\t            self.axes = parent\n   454\t            self.set_figure(parent.figure)\n   455\t        elif isinstance(parent, FigureBase):\n   456\t            self.isaxes = False\n   457\t            self.set_figure(parent)\n   458\t        else:\n   459\t            raise TypeError(\n   460\t                \"Legend needs either Axes or FigureBase as parent\"\n   461\t            )\n   462\t        self.parent = parent\n   463\t\n   464\t        self._loc_used_default = loc is None\n   465\t        if loc is None:\n   466\t            loc = mpl.rcParams[\"legend.loc\"]\n   467\t            if not self.isaxes and loc in [0, 'best']:\n   468\t                loc = 'upper right'\n   469\t        if isinstance(loc, str):\n   470\t            loc = _api.check_getitem(self.codes, loc=loc)\n   471\t        if not self.isaxes and loc == 0:\n   472\t            raise ValueError(\n   473\t                \"Automatic legend placement (loc='best') not implemented for \"\n   474\t                \"figure legend\")\n   475\t\n   476\t        self._mode = mode\n   477\t        self.set_bbox_to_anchor(bbox_to_anchor, bbox_transform)\n   478\t\n   479\t        # We use FancyBboxPatch to draw a legend frame. The location\n   480\t        # and size of the box will be updated during the drawing time.\n   481\t\n   482\t        if facecolor is None:\n   483\t            facecolor = mpl.rcParams[\"legend.facecolor\"]\n   484\t        if facecolor == 'inherit':\n   485\t            facecolor = mpl.rcParams[\"axes.facecolor\"]\n   486\t\n   487\t        if edgecolor is None:\n   488\t            edgecolor = mpl.rcParams[\"legend.edgecolor\"]\n   489\t        if edgecolor == 'inherit':\n   490\t            edgecolor = mpl.rcParams[\"axes.edgecolor\"]\n   491\t\n   492\t        if fancybox is None:\n   493\t            fancybox = mpl.rcParams[\"legend.fancybox\"]\n   494\t\n   495\t        self.legendPatch = FancyBboxPatch(\n   496\t            xy=(0, 0), width=1, height=1,\n   497\t            facecolor=facecolor, edgecolor=edgecolor,\n   498\t            # If shadow is used, default to alpha=1 (#8943).\n   499\t            alpha=(framealpha if framealpha is not None\n   500\t                   else 1 if shadow\n   501\t                   else mpl.rcParams[\"legend.framealpha\"]),\n   502\t            # The width and height of the legendPatch will be set (in draw())\n   503\t            # to the length that includes the padding. Thus we set pad=0 here.\n   504\t            boxstyle=(\"round,pad=0,rounding_size=0.2\" if fancybox\n   505\t                      else \"square,pad=0\"),\n   506\t            mutation_scale=self._fontsize,\n   507\t            snap=True,\n   508\t            visible=(frameon if frameon is not None\n   509\t                     else mpl.rcParams[\"legend.frameon\"])\n   510\t        )\n   511\t        self._set_artist_props(self.legendPatch)\n   512\t\n   513\t        _api.check_in_list([\"center\", \"left\", \"right\"], alignment=alignment)\n   514\t        self._alignment = alignment\n   515\t\n   516\t        # init with null renderer\n   517\t        self._init_legend_box(handles, labels, markerfirst)\n   518\t\n   519\t        tmp = self._loc_used_default\n   520\t        self._set_loc(loc)\n   521\t        self._loc_used_default = tmp  # ignore changes done by _set_loc\n   522\t\n   523\t        # figure out title font properties:\n   524\t        if title_fontsize is not None and title_fontproperties is not None:\n   525\t            raise ValueError(\n   526\t                \"title_fontsize and title_fontproperties can't be specified \"\n   527\t                \"at the same time. Only use one of them. \")\n   528\t        title_prop_fp = FontProperties._from_any(title_fontproperties)\n   529\t        if isinstance(title_fontproperties, dict):\n   530\t            if \"size\" not in title_fontproperties:\n   531\t                title_fontsize = mpl.rcParams[\"legend.title_fontsize\"]\n   532\t                title_prop_fp.set_size(title_fontsize)\n   533\t        elif title_fontsize is not None:\n   534\t            title_prop_fp.set_size(title_fontsize)\n   535\t        elif not isinstance(title_fontproperties, FontProperties):\n   536\t            title_fontsize = mpl.rcParams[\"legend.title_fontsize\"]\n   537\t            title_prop_fp.set_size(title_fontsize)\n   538\t\n   539\t        self.set_title(title, prop=title_prop_fp)\n   540\t        self._draggable = None\n   541\t\n   542\t        # set the text color\n   543\t\n   544\t        color_getters = {  # getter function depends on line or patch\n   545\t            'linecolor':       ['get_color',           'get_facecolor'],\n   546\t            'markerfacecolor': ['get_markerfacecolor', 'get_facecolor'],\n   547\t            'mfc':             ['get_markerfacecolor', 'get_facecolor'],\n   548\t            'markeredgecolor': ['get_markeredgecolor', 'get_edgecolor'],\n   549\t            'mec':             ['get_markeredgecolor', 'get_edgecolor'],\n   550\t        }\n   551\t        if labelcolor is None:\n   552\t            if mpl.rcParams['legend.labelcolor'] is not None:\n   553\t                labelcolor = mpl.rcParams['legend.labelcolor']\n   554\t            else:\n   555\t                labelcolor = mpl.rcParams['text.color']\n   556\t        if isinstance(labelcolor, str) and labelcolor in color_getters:\n   557\t            getter_names = color_getters[labelcolor]\n   558\t            for handle, text in zip(self.legendHandles, self.texts):\n   559\t                for getter_name in getter_names:\n   560\t                    try:\n   561\t                        color = getattr(handle, getter_name)()\n   562\t                        text.set_color(color)\n   563\t                        break\n   564\t                    except AttributeError:\n   565\t                        pass\n   566\t        elif isinstance(labelcolor, str) and labelcolor == 'none':\n   567\t            for text in self.texts:\n   568\t                text.set_color(labelcolor)\n   569\t        elif np.iterable(labelcolor):\n   570\t            for text, color in zip(self.texts,\n   571\t                                   itertools.cycle(\n   572\t                                       colors.to_rgba_array(labelcolor))):\n   573\t                text.set_color(color)\n   574\t        else:\n   575\t            raise ValueError(f\"Invalid labelcolor: {labelcolor!r}\")\n          # ...\n      # ...\n```\n\n</search_result>\n"
            }
          ],
          "response": {
            "id": "msg_01PJX4LnVcGeSHQV7SLFdMU2",
            "content": [
              {
                "text": "Based on the search results, I'll identify the relevant code sections that define and use the `_legend_kw_doc` documentation string. Here's my analysis:\n\nThe most relevant code section is in `lib/matplotlib/legend.py` where `_legend_kw_doc` is defined and used:",
                "type": "text"
              },
              {
                "id": "toolu_01NdgP7P8nkiB2SiQuwkEDwd",
                "input": {
                  "scratch_pad": "The search request is looking for the `_legend_kw_doc` documentation string. The main definition is found in lib/matplotlib/legend.py where it's used to document legend parameters. This documentation string is used by both Axes.legend() and Figure.legend() methods through docstring interpolation.\n\nThe key section is where _legend_kw_doc is defined and updated in the docstring.interpd dictionary, containing comprehensive documentation for all legend keyword parameters.",
                  "identified_spans": [
                    {
                      "file_path": "lib/matplotlib/legend.py",
                      "start_line": 97,
                      "end_line": 289
                    }
                  ]
                },
                "name": "Action",
                "type": "tool_use"
              }
            ],
            "model": "claude-3-5-sonnet-20241022",
            "role": "assistant",
            "stop_reason": "tool_use",
            "stop_sequence": null,
            "type": "message",
            "usage": {
              "cache_creation_input_tokens": 0,
              "cache_read_input_tokens": 0,
              "input_tokens": 12979,
              "output_tokens": 277
            }
          },
          "usage": {
            "completion_cost": 0.043092,
            "completion_tokens": 277,
            "prompt_tokens": 12979,
            "cached_tokens": 0
          }
        }
      },
      "file_context": {
        "max_tokens": 8000,
        "files": [
          {
            "file_path": "lib/matplotlib/legend.py",
            "patch": "--- a/lib/matplotlib/legend.py\n+++ b/lib/matplotlib/legend.py\n@@ -341,6 +341,7 @@\n         handler_map=None,\n         title_fontproperties=None,  # properties for the legend title\n         alignment=\"center\",       # control the alignment within the legend box\n+        draggable=False,      # enable mouse dragging support\n         *,\n         ncol=1  # synonym for ncols (backward compatibility)\n     ):\n@@ -538,6 +539,8 @@\n \n         self.set_title(title, prop=title_prop_fp)\n         self._draggable = None\n+        if draggable:\n+            self.set_draggable(True)\n \n         # set the text color\n \n",
            "spans": [
              {
                "span_id": "imports",
                "pinned": false
              },
              {
                "span_id": "Legend",
                "pinned": false
              },
              {
                "span_id": "Legend.__init__",
                "pinned": false
              },
              {
                "span_id": "Legend.draw",
                "pinned": false
              },
              {
                "span_id": "DraggableLegend",
                "pinned": false
              },
              {
                "span_id": "DraggableLegend.__init__",
                "pinned": false
              },
              {
                "span_id": "DraggableLegend.finalize_offset",
                "pinned": false
              },
              {
                "span_id": "DraggableLegend._update_loc",
                "pinned": false
              },
              {
                "span_id": "DraggableLegend._update_bbox_to_anchor",
                "pinned": false
              },
              {
                "span_id": "Legend.set_draggable",
                "pinned": false
              },
              {
                "span_id": "Legend.get_draggable",
                "pinned": false
              },
              {
                "span_id": "impl",
                "pinned": false
              }
            ],
            "show_all_spans": false
          },
          {
            "file_path": "lib/matplotlib/tests/test_legend.py",
            "spans": [
              {
                "span_id": "imports",
                "pinned": false
              },
              {
                "span_id": "test_get_set_draggable",
                "pinned": false
              }
            ],
            "show_all_spans": false,
            "patch": null
          },
          {
            "file_path": "lib/matplotlib/tests/test_contour.py",
            "spans": [
              {
                "span_id": "test_contourf_log_extension",
                "pinned": false
              }
            ],
            "show_all_spans": false,
            "patch": null
          },
          {
            "file_path": "lib/matplotlib/tests/test_axes.py",
            "spans": [],
            "show_all_spans": false,
            "patch": null
          }
        ]
      },
      "completions": {
        "build_action": {
          "model": "claude-3-5-sonnet-20241022",
          "input": [
            {
              "role": "user",
              "content": "<task>\nlegend draggable as keyword\n<!--To help us understand and resolve your issue, please fill out the form to the best of your ability.-->\r\n<!--You can feel free to delete the sections that do not apply.-->\r\n\r\n### Feature request\r\n\r\n**There is not keyword to make legend draggable at creation**\r\n\r\n<!--A short 1-2 sentences that succinctly describes the bug-->\r\n\r\nIs there a code reason why one can not add a \"draggable=True\" keyword to the __init__ function for Legend?  This would be more handy than having to call it after legend creation.  And, naively, it would seem simple to do.  But maybe there is a reason why it would not work?\n\n</task>"
            },
            {
              "role": "assistant",
              "content": [
                {
                  "type": "text",
                  "text": "<thoughts>\n1. First, I need to locate the Legend class implementation to understand its current initialization\n2. Then I'll check if there are any technical limitations for adding the draggable parameter\n3. I'll also look for any tests related to legend draggability to understand the current testing approach\n4. Finally, I'll implement the change if there are no blockers\n</thoughts>"
                },
                {
                  "id": "call_85bc3e3e",
                  "input": {
                    "file_pattern": null,
                    "class_name": "Legend"
                  },
                  "type": "tool_use",
                  "name": "FindClass"
                }
              ]
            },
            {
              "role": "user",
              "content": [
                {
                  "tool_use_id": "call_85bc3e3e",
                  "content": "<observation>\nFound 40 code sections.\n\nViewed relevant code:\nlib/matplotlib/legend.py\n```\n\n    23\t\n    24\timport itertools\n    25\timport logging\n    26\timport time\n    27\t\n    28\timport numpy as np\n    29\t\n    30\timport matplotlib as mpl\n    31\tfrom matplotlib import _api, _docstring, colors, offsetbox\n    32\tfrom matplotlib.artist import Artist, allow_rasterization\n    33\tfrom matplotlib.cbook import silent_list\n    34\tfrom matplotlib.font_manager import FontProperties\n    35\tfrom matplotlib.lines import Line2D\n    36\tfrom matplotlib.patches import (Patch, Rectangle, Shadow, FancyBboxPatch,\n    37\t                                StepPatch)\n    38\tfrom matplotlib.collections import (\n    39\t    Collection, CircleCollection, LineCollection, PathCollection,\n    40\t    PolyCollection, RegularPolyCollection)\n    41\tfrom matplotlib.text import Text\n    42\tfrom matplotlib.transforms import Bbox, BboxBase, TransformedBbox\n    43\tfrom matplotlib.transforms import BboxTransformTo, BboxTransformFrom\n    44\tfrom matplotlib.offsetbox import (\n    45\t    AnchoredOffsetbox, DraggableOffsetBox,\n    46\t    HPacker, VPacker,\n    47\t    DrawingArea, TextArea,\n    48\t)\n    49\tfrom matplotlib.container import ErrorbarContainer, BarContainer, StemContainer\n    50\tfrom . import legend_handler\n      # ...\n   290\t\n   291\t\n   292\tclass Legend(Artist):\n   293\t    \"\"\"\n   294\t    Place a legend on the axes at location loc.\n   295\t    \"\"\"\n   296\t\n   297\t    # 'best' is only implemented for axes legends\n   298\t    codes = {'best': 0, **AnchoredOffsetbox.codes}\n   299\t    zorder = 5\n          # ...\n   303\t\n   304\t    @_api.make_keyword_only(\"3.6\", \"loc\")\n   305\t    @_docstring.dedent_interpd\n   306\t    def __init__(\n   307\t        self, parent, handles, labels,\n   308\t        loc=None,\n   309\t        numpoints=None,      # number of points in the legend line\n   310\t        markerscale=None,    # relative size of legend markers vs. original\n   311\t        markerfirst=True,    # left/right ordering of legend marker and label\n   312\t        scatterpoints=None,  # number of scatter points\n   313\t        scatteryoffsets=None,\n   314\t        prop=None,           # properties for the legend texts\n   315\t        fontsize=None,       # keyword to set font size directly\n   316\t        labelcolor=None,     # keyword to set the text color\n   317\t\n   318\t        # spacing & pad defined as a fraction of the font-size\n   319\t        borderpad=None,      # whitespace inside the legend border\n   320\t        labelspacing=None,   # vertical space between the legend entries\n   321\t        handlelength=None,   # length of the legend handles\n   322\t        handleheight=None,   # height of the legend handles\n   323\t        handletextpad=None,  # pad between the legend handle and text\n   324\t        borderaxespad=None,  # pad between the axes and legend border\n   325\t        columnspacing=None,  # spacing between columns\n   326\t\n   327\t        ncols=1,     # number of columns\n   328\t        mode=None,  # horizontal distribution of columns: None or \"expand\"\n   329\t\n   330\t        fancybox=None,  # True: fancy box, False: rounded box, None: rcParam\n   331\t        shadow=None,\n   332\t        title=None,           # legend title\n   333\t        title_fontsize=None,  # legend title font size\n   334\t        framealpha=None,      # set frame alpha\n   335\t        edgecolor=None,       # frame patch edgecolor\n   336\t        facecolor=None,       # frame patch facecolor\n   337\t\n   338\t        bbox_to_anchor=None,  # bbox to which the legend will be anchored\n   339\t        bbox_transform=None,  # transform for the bbox\n   340\t        frameon=None,         # draw frame\n   341\t        handler_map=None,\n   342\t        title_fontproperties=None,  # properties for the legend title\n   343\t        alignment=\"center\",       # control the alignment within the legend box\n   344\t        *,\n   345\t        ncol=1  # synonym for ncols (backward compatibility)\n   346\t    ):\n   347\t        \"\"\"\n   348\t        Parameters\n   349\t        ----------\n   350\t        parent : `~matplotlib.axes.Axes` or `.Figure`\n   351\t            The artist that contains the legend.\n   352\t\n   353\t        handles : list of `.Artist`\n   354\t            A list of Artists (lines, patches) to be added to the legend.\n   355\t\n   356\t        labels : list of str\n   357\t            A list of labels to show next to the artists. The length of handles\n   358\t            and labels should be the same. If they are not, they are truncated\n   359\t            to the smaller of both lengths.\n   360\t\n   361\t        Other Parameters\n   362\t        ----------------\n   363\t        %(_legend_kw_doc)s\n   364\t\n   365\t        Notes\n   366\t        -----\n   367\t        Users can specify any arbitrary location for the legend using the\n   368\t        *bbox_to_anchor* keyword argument. *bbox_to_anchor* can be a\n   369\t        `.BboxBase` (or derived there from) or a tuple of 2 or 4 floats.\n   370\t        See `set_bbox_to_anchor` for more detail.\n   371\t\n   372\t        The legend location can be specified by setting *loc* with a tuple of\n   373\t        2 floats, which is interpreted as the lower-left corner of the legend\n   374\t        in the normalized axes coordinate.\n   375\t        \"\"\"\n   376\t        # local import only to avoid circularity\n   377\t        from matplotlib.axes import Axes\n   378\t        from matplotlib.figure import FigureBase\n   379\t\n   380\t        super().__init__()\n   381\t\n   382\t        if prop is None:\n   383\t            if fontsize is not None:\n   384\t                self.prop = FontProperties(size=fontsize)\n   385\t            else:\n   386\t                self.prop = FontProperties(\n   387\t                    size=mpl.rcParams[\"legend.fontsize\"])\n   388\t        else:\n   389\t            self.prop = FontProperties._from_any(prop)\n   390\t            if isinstance(prop, dict) and \"size\" not in prop:\n   391\t                self.prop.set_size(mpl.rcParams[\"legend.fontsize\"])\n   392\t\n   393\t        self._fontsize = self.prop.get_size_in_points()\n   394\t\n   395\t        self.texts = []\n   396\t        self.legendHandles = []\n   397\t        self._legend_title_box = None\n   398\t\n   399\t        #: A dictionary with the extra handler mappings for this Legend\n   400\t        #: instance.\n   401\t        self._custom_handler_map = handler_map\n   402\t\n   403\t        def val_or_rc(val, rc_name):\n   404\t            return val if val is not None else mpl.rcParams[rc_name]\n   405\t\n   406\t        self.numpoints = val_or_rc(numpoints, 'legend.numpoints')\n   407\t        self.markerscale = val_or_rc(markerscale, 'legend.markerscale')\n   408\t        self.scatterpoints = val_or_rc(scatterpoints, 'legend.scatterpoints')\n   409\t        self.borderpad = val_or_rc(borderpad, 'legend.borderpad')\n   410\t        self.labelspacing = val_or_rc(labelspacing, 'legend.labelspacing')\n   411\t        self.handlelength = val_or_rc(handlelength, 'legend.handlelength')\n   412\t        self.handleheight = val_or_rc(handleheight, 'legend.handleheight')\n   413\t        self.handletextpad = val_or_rc(handletextpad, 'legend.handletextpad')\n   414\t        self.borderaxespad = val_or_rc(borderaxespad, 'legend.borderaxespad')\n   415\t        self.columnspacing = val_or_rc(columnspacing, 'legend.columnspacing')\n   416\t        self.shadow = val_or_rc(shadow, 'legend.shadow')\n   417\t        # trim handles and labels if illegal label...\n   418\t        _lab, _hand = [], []\n   419\t        for label, handle in zip(labels, handles):\n   420\t            if isinstance(label, str) and label.startswith('_'):\n   421\t                _api.warn_external(f\"The label {label!r} of {handle!r} starts \"\n   422\t                                   \"with '_'. It is thus excluded from the \"\n   423\t                                   \"legend.\")\n   424\t            else:\n   425\t                _lab.append(label)\n   426\t                _hand.append(handle)\n   427\t        labels, handles = _lab, _hand\n   428\t\n   429\t        handles = list(handles)\n   430\t        if len(handles) < 2:\n   431\t            ncols = 1\n   432\t        self._ncols = ncols if ncols != 1 else ncol\n   433\t\n   434\t        if self.numpoints <= 0:\n   435\t            raise ValueError(\"numpoints must be > 0; it was %d\" % numpoints)\n   436\t\n   437\t        # introduce y-offset for handles of the scatter plot\n   438\t        if scatteryoffsets is None:\n   439\t            self._scatteryoffsets = np.array([3. / 8., 4. / 8., 2.5 / 8.])\n   440\t        else:\n   441\t            self._scatteryoffsets = np.asarray(scatteryoffsets)\n   442\t        reps = self.scatterpoints // len(self._scatteryoffsets) + 1\n   443\t        self._scatteryoffsets = np.tile(self._scatteryoffsets,\n   444\t                                        reps)[:self.scatterpoints]\n   445\t\n   446\t        # _legend_box is a VPacker instance that contains all\n   447\t        # legend items and will be initialized from _init_legend_box()\n   448\t        # method.\n   449\t        self._legend_box = None\n   450\t\n   451\t        if isinstance(parent, Axes):\n   452\t            self.isaxes = True\n   453\t            self.axes = parent\n   454\t            self.set_figure(parent.figure)\n   455\t        elif isinstance(parent, FigureBase):\n   456\t            self.isaxes = False\n   457\t            self.set_figure(parent)\n   458\t        else:\n   459\t            raise TypeError(\n   460\t                \"Legend needs either Axes or FigureBase as parent\"\n   461\t            )\n   462\t        self.parent = parent\n   463\t\n   464\t        self._loc_used_default = loc is None\n   465\t        if loc is None:\n   466\t            loc = mpl.rcParams[\"legend.loc\"]\n   467\t            if not self.isaxes and loc in [0, 'best']:\n   468\t                loc = 'upper right'\n   469\t        if isinstance(loc, str):\n   470\t            loc = _api.check_getitem(self.codes, loc=loc)\n   471\t        if not self.isaxes and loc == 0:\n   472\t            raise ValueError(\n   473\t                \"Automatic legend placement (loc='best') not implemented for \"\n   474\t                \"figure legend\")\n   475\t\n   476\t        self._mode = mode\n   477\t        self.set_bbox_to_anchor(bbox_to_anchor, bbox_transform)\n   478\t\n   479\t        # We use FancyBboxPatch to draw a legend frame. The location\n   480\t        # and size of the box will be updated during the drawing time.\n   481\t\n   482\t        if facecolor is None:\n   483\t            facecolor = mpl.rcParams[\"legend.facecolor\"]\n   484\t        if facecolor == 'inherit':\n   485\t            facecolor = mpl.rcParams[\"axes.facecolor\"]\n   486\t\n   487\t        if edgecolor is None:\n   488\t            edgecolor = mpl.rcParams[\"legend.edgecolor\"]\n   489\t        if edgecolor == 'inherit':\n   490\t            edgecolor = mpl.rcParams[\"axes.edgecolor\"]\n   491\t\n   492\t        if fancybox is None:\n   493\t            fancybox = mpl.rcParams[\"legend.fancybox\"]\n   494\t\n   495\t        self.legendPatch = FancyBboxPatch(\n   496\t            xy=(0, 0), width=1, height=1,\n   497\t            facecolor=facecolor, edgecolor=edgecolor,\n   498\t            # If shadow is used, default to alpha=1 (#8943).\n   499\t            alpha=(framealpha if framealpha is not None\n   500\t                   else 1 if shadow\n   501\t                   else mpl.rcParams[\"legend.framealpha\"]),\n   502\t            # The width and height of the legendPatch will be set (in draw())\n   503\t            # to the length that includes the padding. Thus we set pad=0 here.\n   504\t            boxstyle=(\"round,pad=0,rounding_size=0.2\" if fancybox\n   505\t                      else \"square,pad=0\"),\n   506\t            mutation_scale=self._fontsize,\n   507\t            snap=True,\n   508\t            visible=(frameon if frameon is not None\n   509\t                     else mpl.rcParams[\"legend.frameon\"])\n   510\t        )\n   511\t        self._set_artist_props(self.legendPatch)\n   512\t\n   513\t        _api.check_in_list([\"center\", \"left\", \"right\"], alignment=alignment)\n   514\t        self._alignment = alignment\n   515\t\n   516\t        # init with null renderer\n   517\t        self._init_legend_box(handles, labels, markerfirst)\n   518\t\n   519\t        tmp = self._loc_used_default\n   520\t        self._set_loc(loc)\n   521\t        self._loc_used_default = tmp  # ignore changes done by _set_loc\n   522\t\n   523\t        # figure out title font properties:\n   524\t        if title_fontsize is not None and title_fontproperties is not None:\n   525\t            raise ValueError(\n   526\t                \"title_fontsize and title_fontproperties can't be specified \"\n   527\t                \"at the same time. Only use one of them. \")\n   528\t        title_prop_fp = FontProperties._from_any(title_fontproperties)\n   529\t        if isinstance(title_fontproperties, dict):\n   530\t            if \"size\" not in title_fontproperties:\n   531\t                title_fontsize = mpl.rcParams[\"legend.title_fontsize\"]\n   532\t                title_prop_fp.set_size(title_fontsize)\n   533\t        elif title_fontsize is not None:\n   534\t            title_prop_fp.set_size(title_fontsize)\n   535\t        elif not isinstance(title_fontproperties, FontProperties):\n   536\t            title_fontsize = mpl.rcParams[\"legend.title_fontsize\"]\n   537\t            title_prop_fp.set_size(title_fontsize)\n   538\t\n   539\t        self.set_title(title, prop=title_prop_fp)\n   540\t        self._draggable = None\n   541\t\n   542\t        # set the text color\n   543\t\n   544\t        color_getters = {  # getter function depends on line or patch\n   545\t            'linecolor':       ['get_color',           'get_facecolor'],\n   546\t            'markerfacecolor': ['get_markerfacecolor', 'get_facecolor'],\n   547\t            'mfc':             ['get_markerfacecolor', 'get_facecolor'],\n   548\t            'markeredgecolor': ['get_markeredgecolor', 'get_edgecolor'],\n   549\t            'mec':             ['get_markeredgecolor', 'get_edgecolor'],\n   550\t        }\n   551\t        if labelcolor is None:\n   552\t            if mpl.rcParams['legend.labelcolor'] is not None:\n   553\t                labelcolor = mpl.rcParams['legend.labelcolor']\n   554\t            else:\n   555\t                labelcolor = mpl.rcParams['text.color']\n   556\t        if isinstance(labelcolor, str) and labelcolor in color_getters:\n   557\t            getter_names = color_getters[labelcolor]\n   558\t            for handle, text in zip(self.legendHandles, self.texts):\n   559\t                for getter_name in getter_names:\n   560\t                    try:\n   561\t                        color = getattr(handle, getter_name)()\n   562\t                        text.set_color(color)\n   563\t                        break\n   564\t                    except AttributeError:\n   565\t                        pass\n   566\t        elif isinstance(labelcolor, str) and labelcolor == 'none':\n   567\t            for text in self.texts:\n   568\t                text.set_color(labelcolor)\n   569\t        elif np.iterable(labelcolor):\n   570\t            for text, color in zip(self.texts,\n   571\t                                   itertools.cycle(\n   572\t                                       colors.to_rgba_array(labelcolor))):\n   573\t                text.set_color(color)\n   574\t        else:\n   575\t            raise ValueError(f\"Invalid labelcolor: {labelcolor!r}\")\n          # ...\n   622\t\n   623\t    @allow_rasterization\n   624\t    def draw(self, renderer):\n   625\t        # docstring inherited\n   626\t        if not self.get_visible():\n   627\t            return\n   628\t\n   629\t        renderer.open_group('legend', gid=self.get_gid())\n   630\t\n   631\t        fontsize = renderer.points_to_pixels(self._fontsize)\n   632\t\n   633\t        # if mode == fill, set the width of the legend_box to the\n   634\t        # width of the parent (minus pads)\n   635\t        if self._mode in [\"expand\"]:\n   636\t            pad = 2 * (self.borderaxespad + self.borderpad) * fontsize\n   637\t            self._legend_box.set_width(self.get_bbox_to_anchor().width - pad)\n   638\t\n   639\t        # update the location and size of the legend. This needs to\n   640\t        # be done in any case to clip the figure right.\n   641\t        bbox = self._legend_box.get_window_extent(renderer)\n   642\t        self.legendPatch.set_bounds(bbox.bounds)\n   643\t        self.legendPatch.set_mutation_scale(fontsize)\n   644\t\n   645\t        if self.shadow:\n   646\t            Shadow(self.legendPatch, 2, -2).draw(renderer)\n   647\t\n   648\t        self.legendPatch.draw(renderer)\n   649\t        self._legend_box.draw(renderer)\n   650\t\n   651\t        renderer.close_group('legend')\n   652\t        self.stale = False\n   653\t\n   654\t    # _default_handler_map defines the default mapping between plot\n   655\t    # elements and the legend handlers.\n          # ...\n      # ...\n```\n\n</observation>",
                  "type": "tool_result"
                }
              ]
            },
            {
              "role": "assistant",
              "content": [
                {
                  "type": "text",
                  "text": "<thoughts>\n1. I found the Legend class implementation in lib/matplotlib/legend.py\n2. I notice that:\n   - The Legend class already has a `_draggable` attribute initialized as None in __init__ (line 540)\n   - The class inherits from Artist and uses DraggableOffsetBox (imported on line 45)\n3. Let me search for the draggable functionality to understand how it's currently implemented\n</thoughts>"
                },
                {
                  "id": "call_05070c78",
                  "input": {
                    "file_pattern": null,
                    "query": "legend draggable method implementation",
                    "category": "implementation"
                  },
                  "type": "tool_use",
                  "name": "SemanticSearch"
                }
              ]
            },
            {
              "role": "user",
              "content": [
                {
                  "tool_use_id": "call_05070c78",
                  "content": "<observation>\nFound 14 code sections.\n\nViewed relevant code:\nlib/matplotlib/legend.py\n```\n\n    23\t\n    24\timport itertools\n    25\timport logging\n    26\timport time\n    27\t\n    28\timport numpy as np\n    29\t\n    30\timport matplotlib as mpl\n    31\tfrom matplotlib import _api, _docstring, colors, offsetbox\n    32\tfrom matplotlib.artist import Artist, allow_rasterization\n    33\tfrom matplotlib.cbook import silent_list\n    34\tfrom matplotlib.font_manager import FontProperties\n    35\tfrom matplotlib.lines import Line2D\n    36\tfrom matplotlib.patches import (Patch, Rectangle, Shadow, FancyBboxPatch,\n    37\t                                StepPatch)\n    38\tfrom matplotlib.collections import (\n    39\t    Collection, CircleCollection, LineCollection, PathCollection,\n    40\t    PolyCollection, RegularPolyCollection)\n    41\tfrom matplotlib.text import Text\n    42\tfrom matplotlib.transforms import Bbox, BboxBase, TransformedBbox\n    43\tfrom matplotlib.transforms import BboxTransformTo, BboxTransformFrom\n    44\tfrom matplotlib.offsetbox import (\n    45\t    AnchoredOffsetbox, DraggableOffsetBox,\n    46\t    HPacker, VPacker,\n    47\t    DrawingArea, TextArea,\n    48\t)\n    49\tfrom matplotlib.container import ErrorbarContainer, BarContainer, StemContainer\n    50\tfrom . import legend_handler\n    51\t\n    52\t\n    53\tclass DraggableLegend(DraggableOffsetBox):\n    54\t    def __init__(self, legend, use_blit=False, update=\"loc\"):\n    55\t        \"\"\"\n    56\t        Wrapper around a `.Legend` to support mouse dragging.\n    57\t\n    58\t        Parameters\n    59\t        ----------\n    60\t        legend : `.Legend`\n    61\t            The `.Legend` instance to wrap.\n    62\t        use_blit : bool, optional\n    63\t            Use blitting for faster image composition. For details see\n    64\t            :ref:`func-animation`.\n    65\t        update : {'loc', 'bbox'}, optional\n    66\t            If \"loc\", update the *loc* parameter of the legend upon finalizing.\n    67\t            If \"bbox\", update the *bbox_to_anchor* parameter.\n    68\t        \"\"\"\n    69\t        self.legend = legend\n    70\t\n    71\t        _api.check_in_list([\"loc\", \"bbox\"], update=update)\n    72\t        self._update = update\n    73\t\n    74\t        super().__init__(legend, legend._legend_box, use_blit=use_blit)\n    75\t\n    76\t    def finalize_offset(self):\n    77\t        if self._update == \"loc\":\n    78\t            self._update_loc(self.get_loc_in_canvas())\n    79\t        elif self._update == \"bbox\":\n    80\t            self._bbox_to_anchor(self.get_loc_in_canvas())\n    81\t\n    82\t    def _update_loc(self, loc_in_canvas):\n    83\t        bbox = self.legend.get_bbox_to_anchor()\n    84\t        # if bbox has zero width or height, the transformation is\n    85\t        # ill-defined. Fall back to the default bbox_to_anchor.\n    86\t        if bbox.width == 0 or bbox.height == 0:\n    87\t            self.legend.set_bbox_to_anchor(None)\n    88\t            bbox = self.legend.get_bbox_to_anchor()\n    89\t        _bbox_transform = BboxTransformFrom(bbox)\n    90\t        self.legend._loc = tuple(_bbox_transform.transform(loc_in_canvas))\n    91\t\n    92\t    def _update_bbox_to_anchor(self, loc_in_canvas):\n    93\t        loc_in_bbox = self.legend.axes.transAxes.transform(loc_in_canvas)\n    94\t        self.legend.set_bbox_to_anchor(loc_in_bbox)\n      # ...\n   290\t\n   291\t\n   292\tclass Legend(Artist):\n   293\t    \"\"\"\n   294\t    Place a legend on the axes at location loc.\n   295\t    \"\"\"\n   296\t\n   297\t    # 'best' is only implemented for axes legends\n   298\t    codes = {'best': 0, **AnchoredOffsetbox.codes}\n   299\t    zorder = 5\n          # ...\n  1078\t\n  1079\t    def set_draggable(self, state, use_blit=False, update='loc'):\n  1080\t        \"\"\"\n  1081\t        Enable or disable mouse dragging support of the legend.\n  1082\t\n  1083\t        Parameters\n  1084\t        ----------\n  1085\t        state : bool\n  1086\t            Whether mouse dragging is enabled.\n  1087\t        use_blit : bool, optional\n  1088\t            Use blitting for faster image composition. For details see\n  1089\t            :ref:`func-animation`.\n  1090\t        update : {'loc', 'bbox'}, optional\n  1091\t            The legend parameter to be changed when dragged:\n  1092\t\n  1093\t            - 'loc': update the *loc* parameter of the legend\n  1094\t            - 'bbox': update the *bbox_to_anchor* parameter of the legend\n  1095\t\n  1096\t        Returns\n  1097\t        -------\n  1098\t        `.DraggableLegend` or *None*\n  1099\t            If *state* is ``True`` this returns the `.DraggableLegend` helper\n  1100\t            instance. Otherwise this returns *None*.\n  1101\t        \"\"\"\n  1102\t        if state:\n  1103\t            if self._draggable is None:\n  1104\t                self._draggable = DraggableLegend(self,\n  1105\t                                                  use_blit,\n  1106\t                                                  update=update)\n  1107\t        else:\n  1108\t            if self._draggable is not None:\n  1109\t                self._draggable.disconnect()\n  1110\t            self._draggable = None\n  1111\t        return self._draggable\n  1112\t\n  1113\t    def get_draggable(self):\n  1114\t        \"\"\"Return ``True`` if the legend is draggable, ``False`` otherwise.\"\"\"\n  1115\t        return self._draggable is not None\n  1116\t\n  1117\t\n  1118\t# Helper functions to parse legend arguments for both `figure.legend` and\n  1119\t# `axes.legend`:\n      # ...\n```\n\n</observation>",
                  "type": "tool_result"
                }
              ]
            },
            {
              "role": "assistant",
              "content": [
                {
                  "type": "text",
                  "text": "<thoughts>\n1. I found the draggable functionality implementation:\n   - There's a DraggableLegend class that inherits from DraggableOffsetBox\n   - Legend class has set_draggable() and get_draggable() methods\n   - The _draggable attribute is initialized as None in __init__\n2. Adding a draggable parameter to __init__ seems feasible since:\n   - The infrastructure for draggable legends already exists\n   - It would just need to call set_draggable() during initialization\n3. Let me check if there are any tests for the draggable functionality to understand how to test the new parameter\n</thoughts>"
                },
                {
                  "id": "call_9dda00e0",
                  "input": {
                    "file_pattern": null,
                    "query": "legend draggable tests",
                    "category": "test"
                  },
                  "type": "tool_use",
                  "name": "SemanticSearch"
                }
              ]
            },
            {
              "role": "user",
              "content": [
                {
                  "tool_use_id": "call_9dda00e0",
                  "content": "<observation>\nFound 12 code sections.\n\nViewed relevant code:\nlib/matplotlib/tests/test_legend.py\n```\n     1\timport collections\n     2\timport platform\n     3\tfrom unittest import mock\n     4\timport warnings\n     5\t\n     6\timport numpy as np\n     7\timport pytest\n     8\t\n     9\tfrom matplotlib.testing.decorators import check_figures_equal, image_comparison\n    10\tfrom matplotlib.testing._markers import needs_usetex\n    11\timport matplotlib.pyplot as plt\n    12\timport matplotlib as mpl\n    13\timport matplotlib.transforms as mtransforms\n    14\timport matplotlib.collections as mcollections\n    15\timport matplotlib.lines as mlines\n    16\tfrom matplotlib.legend_handler import HandlerTuple\n    17\timport matplotlib.legend as mlegend\n    18\tfrom matplotlib import rc_context\n    19\tfrom matplotlib.font_manager import FontProperties\n      # ...\n   775\t\n   776\t\n   777\tdef test_get_set_draggable():\n   778\t    legend = plt.legend()\n   779\t    assert not legend.get_draggable()\n   780\t    legend.set_draggable(True)\n   781\t    assert legend.get_draggable()\n   782\t    legend.set_draggable(False)\n   783\t    assert not legend.get_draggable()\n      # ...\n```\n\n</observation>",
                  "type": "tool_result"
                }
              ]
            },
            {
              "role": "assistant",
              "content": [
                {
                  "type": "text",
                  "text": "<thoughts>\n1. I found the test for draggable functionality in test_legend.py\n2. The changes needed are:\n   - Add a draggable parameter to Legend.__init__\n   - Call set_draggable() in __init__ if draggable=True\n   - Add a test case for the new parameter\n3. Let me implement these changes\n</thoughts>"
                },
                {
                  "id": "call_8befcc99",
                  "input": {
                    "command": "str_replace",
                    "path": "lib/matplotlib/legend.py",
                    "file_text": null,
                    "view_range": null,
                    "old_str": "    def __init__(\n        self, parent, handles, labels,\n        loc=None,\n        numpoints=None,      # number of points in the legend line\n        markerscale=None,    # relative size of legend markers vs. original\n        markerfirst=True,    # left/right ordering of legend marker and label\n        scatterpoints=None,  # number of scatter points\n        scatteryoffsets=None,\n        prop=None,           # properties for the legend texts\n        fontsize=None,       # keyword to set font size directly\n        labelcolor=None,     # keyword to set the text color\n\n        # spacing & pad defined as a fraction of the font-size\n        borderpad=None,      # whitespace inside the legend border\n        labelspacing=None,   # vertical space between the legend entries\n        handlelength=None,   # length of the legend handles\n        handleheight=None,   # height of the legend handles\n        handletextpad=None,  # pad between the legend handle and text\n        borderaxespad=None,  # pad between the axes and legend border\n        columnspacing=None,  # spacing between columns\n\n        ncols=1,     # number of columns\n        mode=None,  # horizontal distribution of columns: None or \"expand\"\n\n        fancybox=None,  # True: fancy box, False: rounded box, None: rcParam\n        shadow=None,\n        title=None,           # legend title\n        title_fontsize=None,  # legend title font size\n        framealpha=None,      # set frame alpha\n        edgecolor=None,       # frame patch edgecolor\n        facecolor=None,       # frame patch facecolor\n\n        bbox_to_anchor=None,  # bbox to which the legend will be anchored\n        bbox_transform=None,  # transform for the bbox\n        frameon=None,         # draw frame\n        handler_map=None,\n        title_fontproperties=None,  # properties for the legend title\n        alignment=\"center\",       # control the alignment within the legend box\n        *,\n        ncol=1  # synonym for ncols (backward compatibility)",
                    "new_str": "    def __init__(\n        self, parent, handles, labels,\n        loc=None,\n        numpoints=None,      # number of points in the legend line\n        markerscale=None,    # relative size of legend markers vs. original\n        markerfirst=True,    # left/right ordering of legend marker and label\n        scatterpoints=None,  # number of scatter points\n        scatteryoffsets=None,\n        prop=None,           # properties for the legend texts\n        fontsize=None,       # keyword to set font size directly\n        labelcolor=None,     # keyword to set the text color\n\n        # spacing & pad defined as a fraction of the font-size\n        borderpad=None,      # whitespace inside the legend border\n        labelspacing=None,   # vertical space between the legend entries\n        handlelength=None,   # length of the legend handles\n        handleheight=None,   # height of the legend handles\n        handletextpad=None,  # pad between the legend handle and text\n        borderaxespad=None,  # pad between the axes and legend border\n        columnspacing=None,  # spacing between columns\n\n        ncols=1,     # number of columns\n        mode=None,  # horizontal distribution of columns: None or \"expand\"\n\n        fancybox=None,  # True: fancy box, False: rounded box, None: rcParam\n        shadow=None,\n        title=None,           # legend title\n        title_fontsize=None,  # legend title font size\n        framealpha=None,      # set frame alpha\n        edgecolor=None,       # frame patch edgecolor\n        facecolor=None,       # frame patch facecolor\n\n        bbox_to_anchor=None,  # bbox to which the legend will be anchored\n        bbox_transform=None,  # transform for the bbox\n        frameon=None,         # draw frame\n        handler_map=None,\n        title_fontproperties=None,  # properties for the legend title\n        alignment=\"center\",       # control the alignment within the legend box\n        draggable=False,      # enable mouse dragging support\n        *,\n        ncol=1  # synonym for ncols (backward compatibility)",
                    "insert_line": null
                  },
                  "type": "tool_use",
                  "name": "str_replace_editor"
                }
              ]
            },
            {
              "role": "user",
              "content": [
                {
                  "tool_use_id": "call_8befcc99",
                  "content": "<observation>\nThe file lib/matplotlib/legend.py has been edited. Here's the result of running `cat -n` on a snippet of lib/matplotlib/legend.py:\n   306\t    def __str__(self):\n   307\t        return \"Legend\"\n   308\t\n   309\t    @_api.make_keyword_only(\"3.6\", \"loc\")\n   310\t    @_docstring.dedent_interpd\n   311\t    def __init__(\n   312\t        self, parent, handles, labels,\n   313\t        loc=None,\n   314\t        numpoints=None,      # number of points in the legend line\n   315\t        markerscale=None,    # relative size of legend markers vs. original\n   316\t        markerfirst=True,    # left/right ordering of legend marker and label\n   317\t        scatterpoints=None,  # number of scatter points\n   318\t        scatteryoffsets=None,\n   319\t        prop=None,           # properties for the legend texts\n   320\t        fontsize=None,       # keyword to set font size directly\n   321\t        labelcolor=None,     # keyword to set the text color\n   322\t\n   323\t        # spacing & pad defined as a fraction of the font-size\n   324\t        borderpad=None,      # whitespace inside the legend border\n   325\t        labelspacing=None,   # vertical space between the legend entries\n   326\t        handlelength=None,   # length of the legend handles\n   327\t        handleheight=None,   # height of the legend handles\n   328\t        handletextpad=None,  # pad between the legend handle and text\n   329\t        borderaxespad=None,  # pad between the axes and legend border\n   330\t        columnspacing=None,  # spacing between columns\n   331\t\n   332\t        ncols=1,     # number of columns\n   333\t        mode=None,  # horizontal distribution of columns: None or \"expand\"\n   334\t\n   335\t        fancybox=None,  # True: fancy box, False: rounded box, None: rcParam\n   336\t        shadow=None,\n   337\t        title=None,           # legend title\n   338\t        title_fontsize=None,  # legend title font size\n   339\t        framealpha=None,      # set frame alpha\n   340\t        edgecolor=None,       # frame patch edgecolor\n   341\t        facecolor=None,       # frame patch facecolor\n   342\t\n   343\t        bbox_to_anchor=None,  # bbox to which the legend will be anchored\n   344\t        bbox_transform=None,  # transform for the bbox\n   345\t        frameon=None,         # draw frame\n   346\t        handler_map=None,\n   347\t        title_fontproperties=None,  # properties for the legend title\n   348\t        alignment=\"center\",       # control the alignment within the legend box\n   349\t        draggable=False,      # enable mouse dragging support\n   350\t        *,\n   351\t        ncol=1  # synonym for ncols (backward compatibility)\n   352\t    ):\n   353\t        \"\"\"\n   354\t        Parameters\nReview the changes and make sure they are as expected. Edit the file again if necessary.\n\nRunning 936 tests in the following files:\n * lib/matplotlib/tests/test_legend.py\n * lib/matplotlib/tests/test_contour.py\n * lib/matplotlib/tests/test_axes.py\n\n* FAILED lib/matplotlib/tests/test_contour.py test_contourf_log_extension>\n```\n\n    @image_comparison(['contour_log_extension.png'],\n                      remove_text=True, style='mpl20',\n                      tol=1.444)\n    def test_contourf_log_extension():\n        # Remove this line when this test image is regenerated.\n        plt.rcParams['pcolormesh.snap'] = False\n    \n        # Test that contourf with lognorm is extended correctly\n        fig, (ax1, ax2, ax3) = plt.subplots(1, 3, figsize=(10, 5))\n        fig.subplots_adjust(left=0.05, right=0.95)\n    \n        # make data set with large range e.g. between 1e-8 and 1e10\n        data_exp = np.linspace(-7.5, 9.5, 1200)\n        data = np.power(10, data_exp).reshape(30, 40)\n        # make manual levels e.g. between 1e-4 and 1e-6\n        levels_exp = np.arange(-4., 7.)\n        levels = np.power(10., levels_exp)\n    \n        # original data\n        c1 = ax1.contourf(data,\n                          norm=LogNorm(vmin=data.min(), vmax=data.max()))\n        # just show data in levels\n        c2 = ax2.contourf(data, levels=levels,\n                          norm=LogNorm(vmin=levels.min(), vmax=levels.max()),\n                          extend='neither')\n        # extend data from levels\n        c3 = ax3.contourf(data, levels=levels,\n                          norm=LogNorm(vmin=levels.min(), vmax=levels.max()),\n                          extend='both')\n        cb = plt.colorbar(c1, ax=ax1)\n        assert cb.ax.get_ylim() == (1e-8, 1e10)\n        cb = plt.colorbar(c2, ax=ax2)\n>       assert cb.ax.get_ylim() == (1e-4, 1e6)\nE       assert (9.9999999999...05, 1000000.0) == (0.0001, 1000000.0)\nE         \nE         At index 0 diff: 9.999999999999999e-05 != 0.0001\nE         Use -v to get more diff\n\nlib/matplotlib/tests/test_contour.py:316: AssertionError\n```\n\n\n935 passed. 1 failed. 0 errors.\n</observation>",
                  "type": "tool_result"
                }
              ]
            },
            {
              "role": "assistant",
              "content": [
                {
                  "type": "text",
                  "text": "<thoughts>\n1. I've added the draggable parameter to the __init__ signature, but I still need to:\n   - Add it to the docstring\n   - Actually implement the functionality by calling set_draggable() in __init__\n2. The test failure in test_contour.py seems unrelated to our changes (it's about colorbar limits)\n3. Let me continue with the implementation\n</thoughts>"
                },
                {
                  "id": "call_7590c0f7",
                  "input": {
                    "command": "str_replace",
                    "path": "lib/matplotlib/legend.py",
                    "file_text": null,
                    "view_range": null,
                    "old_str": "        self.set_title(title, prop=title_prop_fp)\n        self._draggable = None\n\n        # set the text color",
                    "new_str": "        self.set_title(title, prop=title_prop_fp)\n        self._draggable = None\n        if draggable:\n            self.set_draggable(True)\n\n        # set the text color",
                    "insert_line": null
                  },
                  "type": "tool_use",
                  "name": "str_replace_editor"
                }
              ]
            },
            {
              "role": "user",
              "content": [
                {
                  "tool_use_id": "call_7590c0f7",
                  "content": "<observation>\nThe file lib/matplotlib/legend.py has been edited. Here's the result of running `cat -n` on a snippet of lib/matplotlib/legend.py:\n   540\t            title_prop_fp.set_size(title_fontsize)\n   541\t        elif not isinstance(title_fontproperties, FontProperties):\n   542\t            title_fontsize = mpl.rcParams[\"legend.title_fontsize\"]\n   543\t            title_prop_fp.set_size(title_fontsize)\n   544\t\n   545\t        self.set_title(title, prop=title_prop_fp)\n   546\t        self._draggable = None\n   547\t        if draggable:\n   548\t            self.set_draggable(True)\n   549\t\n   550\t        # set the text color\n   551\t\n   552\t        color_getters = {  # getter function depends on line or patch\n   553\t            'linecolor':       ['get_color',           'get_facecolor'],\nReview the changes and make sure they are as expected. Edit the file again if necessary.\n\nRunning 936 tests in the following files:\n * lib/matplotlib/tests/test_legend.py\n * lib/matplotlib/tests/test_contour.py\n * lib/matplotlib/tests/test_axes.py\n\n* FAILED lib/matplotlib/tests/test_contour.py test_contourf_log_extension>\n```\n\n    @image_comparison(['contour_log_extension.png'],\n                      remove_text=True, style='mpl20',\n                      tol=1.444)\n    def test_contourf_log_extension():\n        # Remove this line when this test image is regenerated.\n        plt.rcParams['pcolormesh.snap'] = False\n    \n        # Test that contourf with lognorm is extended correctly\n        fig, (ax1, ax2, ax3) = plt.subplots(1, 3, figsize=(10, 5))\n        fig.subplots_adjust(left=0.05, right=0.95)\n    \n        # make data set with large range e.g. between 1e-8 and 1e10\n        data_exp = np.linspace(-7.5, 9.5, 1200)\n        data = np.power(10, data_exp).reshape(30, 40)\n        # make manual levels e.g. between 1e-4 and 1e-6\n        levels_exp = np.arange(-4., 7.)\n        levels = np.power(10., levels_exp)\n    \n        # original data\n        c1 = ax1.contourf(data,\n                          norm=LogNorm(vmin=data.min(), vmax=data.max()))\n        # just show data in levels\n        c2 = ax2.contourf(data, levels=levels,\n                          norm=LogNorm(vmin=levels.min(), vmax=levels.max()),\n                          extend='neither')\n        # extend data from levels\n        c3 = ax3.contourf(data, levels=levels,\n                          norm=LogNorm(vmin=levels.min(), vmax=levels.max()),\n                          extend='both')\n        cb = plt.colorbar(c1, ax=ax1)\n        assert cb.ax.get_ylim() == (1e-8, 1e10)\n        cb = plt.colorbar(c2, ax=ax2)\n>       assert cb.ax.get_ylim() == (1e-4, 1e6)\nE       assert (9.9999999999...05, 1000000.0) == (0.0001, 1000000.0)\nE         \nE         At index 0 diff: 9.999999999999999e-05 != 0.0001\nE         Use -v to get more diff\n\nlib/matplotlib/tests/test_contour.py:316: AssertionError\n```\n\n\n935 passed. 1 failed. 0 errors.\n</observation>",
                  "type": "tool_result"
                }
              ]
            },
            {
              "role": "assistant",
              "content": [
                {
                  "type": "text",
                  "text": "<thoughts>\n1. I've added the implementation to enable draggable functionality when draggable=True\n2. Now I need to:\n   - Add the draggable parameter to the docstring\n   - Add a test case for the new parameter\n3. Let me update the docstring first\n</thoughts>"
                },
                {
                  "id": "call_340e706c",
                  "input": {
                    "command": "str_replace",
                    "path": "lib/matplotlib/legend.py",
                    "file_text": null,
                    "view_range": null,
                    "old_str": "        alignment : {'center', 'left', 'right'}, default: 'center'\n            The alignment value for the legend box. The valid values are:\n            {'center', 'left', 'right'}\n\n        Other Parameters\n        ----------------\n        **kwargs : `.Text` properties\n            Other keyword arguments are given to the `.Text` instance\n            containing the legend's text.\n\n        See Also\n        --------\n        .Figure.legend",
                    "new_str": "        alignment : {'center', 'left', 'right'}, default: 'center'\n            The alignment value for the legend box. The valid values are:\n            {'center', 'left', 'right'}\n\n        draggable : bool, default: False\n            Enable mouse dragging support for the legend.\n\n        Other Parameters\n        ----------------\n        **kwargs : `.Text` properties\n            Other keyword arguments are given to the `.Text` instance\n            containing the legend's text.\n\n        See Also\n        --------\n        .Figure.legend",
                    "insert_line": null
                  },
                  "type": "tool_use",
                  "name": "str_replace_editor"
                }
              ]
            },
            {
              "role": "user",
              "content": [
                {
                  "tool_use_id": "call_340e706c",
                  "content": "<observation>\nString '        alignment : {'center', 'left', 'right'}, default: 'center'\n            The alignment value for the legend box. The valid values are:\n            {'center', 'left', 'right'}\n\n        Other Parameters\n        ----------------\n        **kwargs : `.Text` properties\n            Other keyword arguments are given to the `.Text` instance\n            containing the legend's text.\n\n        See Also\n        --------\n        .Figure.legend' not found in lib/matplotlib/legend.py\n</observation>",
                  "type": "tool_result",
                  "cache_control": {
                    "type": "ephemeral"
                  }
                }
              ]
            },
            {
              "role": "assistant",
              "content": [
                {
                  "type": "text",
                  "text": "<thoughts>\n1. The docstring replacement failed because I didn't match the exact text. Let me try again with the correct text.\n2. First, let me view the current docstring to get the exact text\n</thoughts>"
                },
                {
                  "id": "call_9bda5a30",
                  "input": {
                    "command": "view",
                    "path": "lib/matplotlib/legend.py",
                    "file_text": null,
                    "view_range": [
                      350,
                      400
                    ],
                    "old_str": null,
                    "new_str": null,
                    "insert_line": null
                  },
                  "type": "tool_use",
                  "name": "str_replace_editor",
                  "cache_control": {
                    "type": "ephemeral"
                  }
                }
              ]
            },
            {
              "role": "user",
              "content": [
                {
                  "tool_use_id": "call_9bda5a30",
                  "content": "<observation>\nHere's the result of running `cat -n` on lib/matplotlib/legend.py:\n   350\t        ----------\n   351\t        parent : `~matplotlib.axes.Axes` or `.Figure`\n   352\t            The artist that contains the legend.\n   353\t\n   354\t        handles : list of `.Artist`\n   355\t            A list of Artists (lines, patches) to be added to the legend.\n   356\t\n   357\t        labels : list of str\n   358\t            A list of labels to show next to the artists. The length of handles\n   359\t            and labels should be the same. If they are not, they are truncated\n   360\t            to the smaller of both lengths.\n   361\t\n   362\t        Other Parameters\n   363\t        ----------------\n   364\t        %(_legend_kw_doc)s\n   365\t\n   366\t        Notes\n   367\t        -----\n   368\t        Users can specify any arbitrary location for the legend using the\n   369\t        *bbox_to_anchor* keyword argument. *bbox_to_anchor* can be a\n   370\t        `.BboxBase` (or derived there from) or a tuple of 2 or 4 floats.\n   371\t        See `set_bbox_to_anchor` for more detail.\n   372\t\n   373\t        The legend location can be specified by setting *loc* with a tuple of\n   374\t        2 floats, which is interpreted as the lower-left corner of the legend\n   375\t        in the normalized axes coordinate.\n   376\t        \"\"\"\n   377\t        # local import only to avoid circularity\n   378\t        from matplotlib.axes import Axes\n   379\t        from matplotlib.figure import FigureBase\n   380\t\n   381\t        super().__init__()\n   382\t\n   383\t        if prop is None:\n   384\t            if fontsize is not None:\n   385\t                self.prop = FontProperties(size=fontsize)\n   386\t            else:\n   387\t                self.prop = FontProperties(\n   388\t                    size=mpl.rcParams[\"legend.fontsize\"])\n   389\t        else:\n   390\t            self.prop = FontProperties._from_any(prop)\n   391\t            if isinstance(prop, dict) and \"size\" not in prop:\n   392\t                self.prop.set_size(mpl.rcParams[\"legend.fontsize\"])\n   393\t\n   394\t        self._fontsize = self.prop.get_size_in_points()\n   395\t\n   396\t        self.texts = []\n   397\t        self.legendHandles = []\n   398\t        self._legend_title_box = None\n   399\t\n   400\t        #: A dictionary with the extra handler mappings for this Legend\n\n</observation>",
                  "type": "tool_result",
                  "cache_control": {
                    "type": "ephemeral"
                  }
                }
              ]
            }
          ],
          "response": {
            "id": "msg_01UFWhUQ9GBdmgGRoqg4MYm3",
            "content": [
              {
                "text": "<thoughts>\n1. I see that the docstring uses %(_legend_kw_doc)s for the parameters, which means it's using a template system\n2. Let me search for where this template is defined\n</thoughts>",
                "type": "text"
              },
              {
                "id": "toolu_01TbR4Ho9VHB6giPp2pSBkft",
                "input": {
                  "file_pattern": null,
                  "code_snippet": "_legend_kw_doc"
                },
                "name": "FindCodeSnippet",
                "type": "tool_use"
              }
            ],
            "model": "claude-3-5-sonnet-20241022",
            "role": "assistant",
            "stop_reason": "tool_use",
            "stop_sequence": null,
            "type": "message",
            "usage": {
              "cache_creation_input_tokens": 906,
              "cache_read_input_tokens": 16925,
              "input_tokens": 1,
              "output_tokens": 135
            }
          },
          "usage": {
            "completion_cost": 0.004746,
            "completion_tokens": 135,
            "prompt_tokens": 907,
            "cached_tokens": 16925
          }
        },
        "execute_action": {
          "model": "claude-3-5-sonnet-20241022",
          "input": [
            {
              "role": "user",
              "content": "Search request:\nSearching for code snippet: _legend_kw_doc\n\nIdentify the relevant code sections in the search results to use them. \n\n<search_results>\nlib/matplotlib/axes/_axes.py\n```\n\n\n\n<span id='imports'>\n     1\timport functools\n     2\timport itertools\n     3\timport logging\n     4\timport math\n     5\tfrom numbers import Integral, Number\n     6\t\n     7\timport numpy as np\n     8\tfrom numpy import ma\n     9\t\n    10\timport matplotlib as mpl\n    11\timport matplotlib.category  # Register category unit converter as side-effect.\n    12\timport matplotlib.cbook as cbook\n    13\timport matplotlib.collections as mcoll\n    14\timport matplotlib.colors as mcolors\n    15\timport matplotlib.contour as mcontour\n    16\timport matplotlib.dates  # noqa # Register date unit converter as side-effect.\n    17\timport matplotlib.image as mimage\n    18\timport matplotlib.legend as mlegend\n    19\timport matplotlib.lines as mlines\n    20\timport matplotlib.markers as mmarkers\n    21\timport matplotlib.mlab as mlab\n    22\timport matplotlib.patches as mpatches\n    23\timport matplotlib.path as mpath\n    24\timport matplotlib.quiver as mquiver\n    25\timport matplotlib.stackplot as mstack\n    26\timport matplotlib.streamplot as mstream\n    27\timport matplotlib.table as mtable\n    28\timport matplotlib.text as mtext\n    29\timport matplotlib.ticker as mticker\n    30\timport matplotlib.transforms as mtransforms\n    31\timport matplotlib.tri as mtri\n    32\timport matplotlib.units as munits\n    33\tfrom matplotlib import _api, _docstring, _preprocess_data\n    34\tfrom matplotlib.axes._base import (\n    35\t    _AxesBase, _TransformedBoundsLocator, _process_plot_format)\n    36\tfrom matplotlib.axes._secondary_axes import SecondaryAxis\n    37\tfrom matplotlib.container import BarContainer, ErrorbarContainer, StemContainer\n    38\t\n    39\t_log = logging.getLogger(__name__)\n    40\t\n    41\t\n    42\t# The axes module contains all the wrappers to plotting functions.\n    43\t# All the other methods should go in the _AxesBase class.\n\n\n<span id='Axes'>\n    44\t\n    45\t\n    46\t@_docstring.interpd\n    47\tclass Axes(_AxesBase):\n    48\t    \"\"\"\n    49\t    The `Axes` contains most of the figure elements: `~.axis.Axis`,\n    50\t    `~.axis.Tick`, `~.lines.Line2D`, `~.text.Text`, `~.patches.Polygon`, etc.,\n    51\t    and sets the coordinate system.\n    52\t\n    53\t    The `Axes` instance supports callbacks through a callbacks attribute which\n    54\t    is a `~.cbook.CallbackRegistry` instance.  The events you can connect to\n    55\t    are 'xlim_changed' and 'ylim_changed' and the callback will be called with\n    56\t    func(*ax*) where *ax* is the `Axes` instance.\n    57\t\n    58\t    Attributes\n    59\t    ----------\n    60\t    dataLim : `.Bbox`\n    61\t        The bounding box enclosing all data displayed in the Axes.\n    62\t    viewLim : `.Bbox`\n    63\t        The view limits in data coordinates.\n    64\t\n    65\t    \"\"\"\n    66\t    ### Labelling, legend and texts\n          # ...\n\n\n<span id='Axes.legend'>\n   185\t\n   186\t    @_docstring.dedent_interpd\n   187\t    def legend(self, *args, **kwargs):\n   188\t        \"\"\"\n   189\t        Place a legend on the Axes.\n   190\t\n   191\t        Call signatures::\n   192\t\n   193\t            legend()\n   194\t            legend(handles, labels)\n   195\t            legend(handles=handles)\n   196\t            legend(labels)\n   197\t\n   198\t        The call signatures correspond to the following different ways to use\n   199\t        this method:\n   200\t\n   201\t        **1. Automatic detection of elements to be shown in the legend**\n   202\t\n   203\t        The elements to be added to the legend are automatically determined,\n   204\t        when you do not pass in any extra arguments.\n   205\t\n   206\t        In this case, the labels are taken from the artist. You can specify\n   207\t        them either at artist creation or by calling the\n   208\t        :meth:`~.Artist.set_label` method on the artist::\n   209\t\n   210\t            ax.plot([1, 2, 3], label='Inline label')\n   211\t            ax.legend()\n   212\t\n   213\t        or::\n   214\t\n   215\t            line, = ax.plot([1, 2, 3])\n   216\t            line.set_label('Label via method')\n   217\t            ax.legend()\n   218\t\n   219\t        .. note::\n   220\t            Specific artists can be excluded from the automatic legend element\n   221\t            selection by using a label starting with an underscore, \"_\".\n   222\t            A string starting with an underscore is the default label for all\n   223\t            artists, so calling `.Axes.legend` without any arguments and\n   224\t            without setting the labels manually will result in no legend being\n   225\t            drawn.\n   226\t\n   227\t\n   228\t        **2. Explicitly listing the artists and labels in the legend**\n   229\t\n   230\t        For full control of which artists have a legend entry, it is possible\n   231\t        to pass an iterable of legend artists followed by an iterable of\n   232\t        legend labels respectively::\n   233\t\n   234\t            ax.legend([line1, line2, line3], ['label1', 'label2', 'label3'])\n   235\t\n   236\t\n   237\t        **3. Explicitly listing the artists in the legend**\n   238\t\n   239\t        This is similar to 2, but the labels are taken from the artists'\n   240\t        label properties. Example::\n   241\t\n   242\t            line1, = ax.plot([1, 2, 3], label='label1')\n   243\t            line2, = ax.plot([1, 2, 3], label='label2')\n   244\t            ax.legend(handles=[line1, line2])\n   245\t\n   246\t\n   247\t        **4. Labeling existing plot elements**\n   248\t\n   249\t        .. admonition:: Discouraged\n   250\t\n   251\t            This call signature is discouraged, because the relation between\n   252\t            plot elements and labels is only implicit by their order and can\n   253\t            easily be mixed up.\n   254\t\n   255\t        To make a legend for all artists on an Axes, call this function with\n   256\t        an iterable of strings, one for each legend item. For example::\n   257\t\n   258\t            ax.plot([1, 2, 3])\n   259\t            ax.plot([5, 6, 7])\n   260\t            ax.legend(['First line', 'Second line'])\n   261\t\n   262\t\n   263\t        Parameters\n   264\t        ----------\n   265\t        handles : sequence of `.Artist`, optional\n   266\t            A list of Artists (lines, patches) to be added to the legend.\n   267\t            Use this together with *labels*, if you need full control on what\n   268\t            is shown in the legend and the automatic mechanism described above\n   269\t            is not sufficient.\n   270\t\n   271\t            The length of handles and labels should be the same in this\n   272\t            case. If they are not, they are truncated to the smaller length.\n   273\t\n   274\t        labels : list of str, optional\n   275\t            A list of labels to show next to the artists.\n   276\t            Use this together with *handles*, if you need full control on what\n   277\t            is shown in the legend and the automatic mechanism described above\n   278\t            is not sufficient.\n   279\t\n   280\t        Returns\n   281\t        -------\n   282\t        `~matplotlib.legend.Legend`\n   283\t\n   284\t        Other Parameters\n   285\t        ----------------\n   286\t        %(_legend_kw_doc)s\n   287\t\n   288\t        See Also\n   289\t        --------\n   290\t        .Figure.legend\n   291\t\n   292\t        Notes\n   293\t        -----\n   294\t        Some artists are not supported by this function.  See\n   295\t        :doc:`/tutorials/intermediate/legend_guide` for details.\n   296\t\n   297\t        Examples\n   298\t        --------\n   299\t        .. plot:: gallery/text_labels_and_annotations/legend.py\n   300\t        \"\"\"\n   301\t        handles, labels, extra_args, kwargs = mlegend._parse_legend_args(\n   302\t                [self],\n   303\t                *args,\n   304\t                **kwargs)\n   305\t        if len(extra_args):\n   306\t            raise TypeError('legend only accepts two non-keyword arguments')\n   307\t        self.legend_ = mlegend.Legend(self, handles, labels, **kwargs)\n   308\t        self.legend_._remove_method = self._remove_legend\n   309\t        return self.legend_\n          # ...\n```\n\n\nlib/matplotlib/figure.py\n```\n\n\n\n<span id='imports'>\n    16\t\n    17\tfrom contextlib import ExitStack\n    18\timport inspect\n    19\timport itertools\n    20\timport logging\n    21\tfrom numbers import Integral\n    22\t\n    23\timport numpy as np\n    24\t\n    25\timport matplotlib as mpl\n    26\tfrom matplotlib import _blocking_input, backend_bases, _docstring, projections\n    27\tfrom matplotlib.artist import (\n    28\t    Artist, allow_rasterization, _finalize_rasterization)\n    29\tfrom matplotlib.backend_bases import (\n    30\t    DrawEvent, FigureCanvasBase, NonGuiException, MouseButton, _get_renderer)\n    31\timport matplotlib._api as _api\n    32\timport matplotlib.cbook as cbook\n    33\timport matplotlib.colorbar as cbar\n    34\timport matplotlib.image as mimage\n    35\t\n    36\tfrom matplotlib.axes import Axes, SubplotBase, subplot_class_factory\n    37\tfrom matplotlib.gridspec import GridSpec\n    38\tfrom matplotlib.layout_engine import (\n    39\t    ConstrainedLayoutEngine, TightLayoutEngine, LayoutEngine,\n    40\t    PlaceHolderLayoutEngine\n    41\t)\n    42\timport matplotlib.legend as mlegend\n    43\tfrom matplotlib.patches import Rectangle\n    44\tfrom matplotlib.text import Text\n    45\tfrom matplotlib.transforms import (Affine2D, Bbox, BboxTransformTo,\n    46\t                                   TransformedBbox)\n    47\t\n    48\t_log = logging.getLogger(__name__)\n      # ...\n\n\n<span id='FigureBase'>\n   156\t\n   157\t\n   158\tclass FigureBase(Artist):\n   159\t    \"\"\"\n   160\t    Base class for `.Figure` and `.SubFigure` containing the methods that add\n   161\t    artists to the figure or subfigure, create Axes, etc.\n   162\t    \"\"\"\n          # ...\n\n\n<span id='FigureBase.legend'>\n   991\t    @_docstring.dedent_interpd\n   992\t    def legend(self, *args, **kwargs):\n   993\t        \"\"\"\n   994\t        Place a legend on the figure.\n   995\t\n   996\t        Call signatures::\n   997\t\n   998\t            legend()\n   999\t            legend(handles, labels)\n  1000\t            legend(handles=handles)\n  1001\t            legend(labels)\n  1002\t\n  1003\t        The call signatures correspond to the following different ways to use\n  1004\t        this method:\n  1005\t\n  1006\t        **1. Automatic detection of elements to be shown in the legend**\n  1007\t\n  1008\t        The elements to be added to the legend are automatically determined,\n  1009\t        when you do not pass in any extra arguments.\n  1010\t\n  1011\t        In this case, the labels are taken from the artist. You can specify\n  1012\t        them either at artist creation or by calling the\n  1013\t        :meth:`~.Artist.set_label` method on the artist::\n  1014\t\n  1015\t            ax.plot([1, 2, 3], label='Inline label')\n  1016\t            fig.legend()\n  1017\t\n  1018\t        or::\n  1019\t\n  1020\t            line, = ax.plot([1, 2, 3])\n  1021\t            line.set_label('Label via method')\n  1022\t            fig.legend()\n  1023\t\n  1024\t        Specific lines can be excluded from the automatic legend element\n  1025\t        selection by defining a label starting with an underscore.\n  1026\t        This is default for all artists, so calling `.Figure.legend` without\n  1027\t        any arguments and without setting the labels manually will result in\n  1028\t        no legend being drawn.\n  1029\t\n  1030\t\n  1031\t        **2. Explicitly listing the artists and labels in the legend**\n  1032\t\n  1033\t        For full control of which artists have a legend entry, it is possible\n  1034\t        to pass an iterable of legend artists followed by an iterable of\n  1035\t        legend labels respectively::\n  1036\t\n  1037\t            fig.legend([line1, line2, line3], ['label1', 'label2', 'label3'])\n  1038\t\n  1039\t\n  1040\t        **3. Explicitly listing the artists in the legend**\n  1041\t\n  1042\t        This is similar to 2, but the labels are taken from the artists'\n  1043\t        label properties. Example::\n  1044\t\n  1045\t            line1, = ax1.plot([1, 2, 3], label='label1')\n  1046\t            line2, = ax2.plot([1, 2, 3], label='label2')\n  1047\t            fig.legend(handles=[line1, line2])\n  1048\t\n  1049\t\n  1050\t        **4. Labeling existing plot elements**\n  1051\t\n  1052\t        .. admonition:: Discouraged\n  1053\t\n  1054\t            This call signature is discouraged, because the relation between\n  1055\t            plot elements and labels is only implicit by their order and can\n  1056\t            easily be mixed up.\n  1057\t\n  1058\t        To make a legend for all artists on all Axes, call this function with\n  1059\t        an iterable of strings, one for each legend item. For example::\n  1060\t\n  1061\t            fig, (ax1, ax2) = plt.subplots(1, 2)\n  1062\t            ax1.plot([1, 3, 5], color='blue')\n  1063\t            ax2.plot([2, 4, 6], color='red')\n  1064\t            fig.legend(['the blues', 'the reds'])\n  1065\t\n  1066\t\n  1067\t        Parameters\n  1068\t        ----------\n  1069\t        handles : list of `.Artist`, optional\n  1070\t            A list of Artists (lines, patches) to be added to the legend.\n  1071\t            Use this together with *labels*, if you need full control on what\n  1072\t            is shown in the legend and the automatic mechanism described above\n  1073\t            is not sufficient.\n  1074\t\n  1075\t            The length of handles and labels should be the same in this\n  1076\t            case. If they are not, they are truncated to the smaller length.\n  1077\t\n  1078\t        labels : list of str, optional\n  1079\t            A list of labels to show next to the artists.\n  1080\t            Use this together with *handles*, if you need full control on what\n  1081\t            is shown in the legend and the automatic mechanism described above\n  1082\t            is not sufficient.\n  1083\t\n  1084\t        Returns\n  1085\t        -------\n  1086\t        `~matplotlib.legend.Legend`\n  1087\t\n  1088\t        Other Parameters\n  1089\t        ----------------\n  1090\t        %(_legend_kw_doc)s\n  1091\t\n  1092\t        See Also\n  1093\t        --------\n  1094\t        .Axes.legend\n  1095\t\n  1096\t        Notes\n  1097\t        -----\n  1098\t        Some artists are not supported by this function.  See\n  1099\t        :doc:`/tutorials/intermediate/legend_guide` for details.\n  1100\t        \"\"\"\n  1101\t\n  1102\t        handles, labels, extra_args, kwargs = mlegend._parse_legend_args(\n  1103\t                self.axes,\n  1104\t                *args,\n  1105\t                **kwargs)\n  1106\t        # check for third arg\n  1107\t        if len(extra_args):\n  1108\t            # _api.warn_deprecated(\n  1109\t            #     \"2.1\",\n  1110\t            #     message=\"Figure.legend will accept no more than two \"\n  1111\t            #     \"positional arguments in the future.  Use \"\n  1112\t            #     \"'fig.legend(handles, labels, loc=location)' \"\n  1113\t            #     \"instead.\")\n  1114\t            # kwargs['loc'] = extra_args[0]\n  1115\t            # extra_args = extra_args[1:]\n  1116\t            pass\n  1117\t        transform = kwargs.pop('bbox_transform', self.transSubfigure)\n  1118\t        # explicitly set the bbox transform if the user hasn't.\n  1119\t        l = mlegend.Legend(self, handles, labels, *extra_args,\n  1120\t                           bbox_transform=transform, **kwargs)\n  1121\t        self.legends.append(l)\n  1122\t        l._remove_method = self.legends.remove\n  1123\t        self.stale = True\n  1124\t        return l\n          # ...\n      # ...\n```\n\n\nlib/matplotlib/legend.py\n```\n\n\n\n<span id='imports'>\n    23\t\n    24\timport itertools\n    25\timport logging\n    26\timport time\n    27\t\n    28\timport numpy as np\n    29\t\n    30\timport matplotlib as mpl\n    31\tfrom matplotlib import _api, _docstring, colors, offsetbox\n    32\tfrom matplotlib.artist import Artist, allow_rasterization\n    33\tfrom matplotlib.cbook import silent_list\n    34\tfrom matplotlib.font_manager import FontProperties\n    35\tfrom matplotlib.lines import Line2D\n    36\tfrom matplotlib.patches import (Patch, Rectangle, Shadow, FancyBboxPatch,\n    37\t                                StepPatch)\n    38\tfrom matplotlib.collections import (\n    39\t    Collection, CircleCollection, LineCollection, PathCollection,\n    40\t    PolyCollection, RegularPolyCollection)\n    41\tfrom matplotlib.text import Text\n    42\tfrom matplotlib.transforms import Bbox, BboxBase, TransformedBbox\n    43\tfrom matplotlib.transforms import BboxTransformTo, BboxTransformFrom\n    44\tfrom matplotlib.offsetbox import (\n    45\t    AnchoredOffsetbox, DraggableOffsetBox,\n    46\t    HPacker, VPacker,\n    47\t    DrawingArea, TextArea,\n    48\t)\n    49\tfrom matplotlib.container import ErrorbarContainer, BarContainer, StemContainer\n    50\tfrom . import legend_handler\n      # ...\n\n\n<span id='impl'>\n    95\t\n    96\t\n    97\t_docstring.interpd.update(_legend_kw_doc=\"\"\"\n    98\tloc : str or pair of floats, default: :rc:`legend.loc` ('best' for axes, \\\n    99\t'upper right' for figures)\n   100\t    The location of the legend.\n   101\t\n   102\t    The strings\n   103\t    ``'upper left', 'upper right', 'lower left', 'lower right'``\n   104\t    place the legend at the corresponding corner of the axes/figure.\n   105\t\n   106\t    The strings\n   107\t    ``'upper center', 'lower center', 'center left', 'center right'``\n   108\t    place the legend at the center of the corresponding edge of the\n   109\t    axes/figure.\n   110\t\n   111\t    The string ``'center'`` places the legend at the center of the axes/figure.\n   112\t\n   113\t    The string ``'best'`` places the legend at the location, among the nine\n   114\t    locations defined so far, with the minimum overlap with other drawn\n   115\t    artists.  This option can be quite slow for plots with large amounts of\n   116\t    data; your plotting speed may benefit from providing a specific location.\n   117\t\n   118\t    The location can also be a 2-tuple giving the coordinates of the lower-left\n   119\t    corner of the legend in axes coordinates (in which case *bbox_to_anchor*\n   120\t    will be ignored).\n   121\t\n   122\t    For back-compatibility, ``'center right'`` (but no other location) can also\n   123\t    be spelled ``'right'``, and each \"string\" locations can also be given as a\n   124\t    numeric value:\n   125\t\n   126\t        ===============   =============\n   127\t        Location String   Location Code\n   128\t        ===============   =============\n   129\t        'best'            0\n   130\t        'upper right'     1\n   131\t        'upper left'      2\n   132\t        'lower left'      3\n   133\t        'lower right'     4\n   134\t        'right'           5\n   135\t        'center left'     6\n   136\t        'center right'    7\n   137\t        'lower center'    8\n   138\t        'upper center'    9\n   139\t        'center'          10\n   140\t        ===============   =============\n   141\t\n   142\tbbox_to_anchor : `.BboxBase`, 2-tuple, or 4-tuple of floats\n   143\t    Box that is used to position the legend in conjunction with *loc*.\n   144\t    Defaults to `axes.bbox` (if called as a method to `.Axes.legend`) or\n   145\t    `figure.bbox` (if `.Figure.legend`).  This argument allows arbitrary\n   146\t    placement of the legend.\n   147\t\n   148\t    Bbox coordinates are interpreted in the coordinate system given by\n   149\t    *bbox_transform*, with the default transform\n   150\t    Axes or Figure coordinates, depending on which ``legend`` is called.\n   151\t\n   152\t    If a 4-tuple or `.BboxBase` is given, then it specifies the bbox\n   153\t    ``(x, y, width, height)`` that the legend is placed in.\n   154\t    To put the legend in the best location in the bottom right\n   155\t    quadrant of the axes (or figure)::\n   156\t\n   157\t        loc='best', bbox_to_anchor=(0.5, 0., 0.5, 0.5)\n   158\t\n   159\t    A 2-tuple ``(x, y)`` places the corner of the legend specified by *loc* at\n   160\t    x, y.  For example, to put the legend's upper right-hand corner in the\n   161\t    center of the axes (or figure) the following keywords can be used::\n   162\t\n   163\t        loc='upper right', bbox_to_anchor=(0.5, 0.5)\n   164\t\n   165\tncols : int, default: 1\n   166\t    The number of columns that the legend has.\n   167\t\n   168\t    For backward compatibility, the spelling *ncol* is also supported\n   169\t    but it is discouraged. If both are given, *ncols* takes precedence.\n   170\t\n   171\tprop : None or `matplotlib.font_manager.FontProperties` or dict\n   172\t    The font properties of the legend. If None (default), the current\n   173\t    :data:`matplotlib.rcParams` will be used.\n   174\t\n   175\tfontsize : int or {'xx-small', 'x-small', 'small', 'medium', 'large', \\\n   176\t'x-large', 'xx-large'}\n   177\t    The font size of the legend. If the value is numeric the size will be the\n   178\t    absolute font size in points. String values are relative to the current\n   179\t    default font size. This argument is only used if *prop* is not specified.\n   180\t\n   181\tlabelcolor : str or list, default: :rc:`legend.labelcolor`\n   182\t    The color of the text in the legend. Either a valid color string\n   183\t    (for example, 'red'), or a list of color strings. The labelcolor can\n   184\t    also be made to match the color of the line or marker using 'linecolor',\n   185\t    'markerfacecolor' (or 'mfc'), or 'markeredgecolor' (or 'mec').\n   186\t\n   187\t    Labelcolor can be set globally using :rc:`legend.labelcolor`. If None,\n   188\t    use :rc:`text.color`.\n   189\t\n   190\tnumpoints : int, default: :rc:`legend.numpoints`\n   191\t    The number of marker points in the legend when creating a legend\n   192\t    entry for a `.Line2D` (line).\n   193\t\n   194\tscatterpoints : int, default: :rc:`legend.scatterpoints`\n   195\t    The number of marker points in the legend when creating\n   196\t    a legend entry for a `.PathCollection` (scatter plot).\n   197\t\n   198\tscatteryoffsets : iterable of floats, default: ``[0.375, 0.5, 0.3125]``\n   199\t    The vertical offset (relative to the font size) for the markers\n   200\t    created for a scatter plot legend entry. 0.0 is at the base the\n   201\t    legend text, and 1.0 is at the top. To draw all markers at the\n   202\t    same height, set to ``[0.5]``.\n   203\t\n   204\tmarkerscale : float, default: :rc:`legend.markerscale`\n   205\t    The relative size of legend markers compared with the originally\n   206\t    drawn ones.\n   207\t\n   208\tmarkerfirst : bool, default: True\n   209\t    If *True*, legend marker is placed to the left of the legend label.\n   210\t    If *False*, legend marker is placed to the right of the legend label.\n   211\t\n   212\tframeon : bool, default: :rc:`legend.frameon`\n   213\t    Whether the legend should be drawn on a patch (frame).\n   214\t\n   215\tfancybox : bool, default: :rc:`legend.fancybox`\n   216\t    Whether round edges should be enabled around the `.FancyBboxPatch` which\n   217\t    makes up the legend's background.\n   218\t\n   219\tshadow : bool, default: :rc:`legend.shadow`\n   220\t    Whether to draw a shadow behind the legend.\n   221\t\n   222\tframealpha : float, default: :rc:`legend.framealpha`\n   223\t    The alpha transparency of the legend's background.\n   224\t    If *shadow* is activated and *framealpha* is ``None``, the default value is\n   225\t    ignored.\n   226\t\n   227\tfacecolor : \"inherit\" or color, default: :rc:`legend.facecolor`\n   228\t    The legend's background color.\n   229\t    If ``\"inherit\"``, use :rc:`axes.facecolor`.\n   230\t\n   231\tedgecolor : \"inherit\" or color, default: :rc:`legend.edgecolor`\n   232\t    The legend's background patch edge color.\n   233\t    If ``\"inherit\"``, use take :rc:`axes.edgecolor`.\n   234\t\n   235\tmode : {\"expand\", None}\n   236\t    If *mode* is set to ``\"expand\"`` the legend will be horizontally\n   237\t    expanded to fill the axes area (or *bbox_to_anchor* if defines\n   238\t    the legend's size).\n   239\t\n   240\tbbox_transform : None or `matplotlib.transforms.Transform`\n   241\t    The transform for the bounding box (*bbox_to_anchor*). For a value\n   242\t    of ``None`` (default) the Axes'\n   243\t    :data:`~matplotlib.axes.Axes.transAxes` transform will be used.\n   244\t\n   245\ttitle : str or None\n   246\t    The legend's title. Default is no title (``None``).\n   247\t\n   248\ttitle_fontproperties : None or `matplotlib.font_manager.FontProperties` or dict\n   249\t    The font properties of the legend's title. If None (default), the\n   250\t    *title_fontsize* argument will be used if present; if *title_fontsize* is\n   251\t    also None, the current :rc:`legend.title_fontsize` will be used.\n   252\t\n   253\ttitle_fontsize : int or {'xx-small', 'x-small', 'small', 'medium', 'large', \\\n   254\t'x-large', 'xx-large'}, default: :rc:`legend.title_fontsize`\n   255\t    The font size of the legend's title.\n   256\t    Note: This cannot be combined with *title_fontproperties*. If you want\n   257\t    to set the fontsize alongside other font properties, use the *size*\n   258\t    parameter in *title_fontproperties*.\n   259\t\n   260\talignment : {'center', 'left', 'right'}, default: 'center'\n   261\t    The alignment of the legend title and the box of entries. The entries\n   262\t    are aligned as a single block, so that markers always lined up.\n   263\t\n   264\tborderpad : float, default: :rc:`legend.borderpad`\n   265\t    The fractional whitespace inside the legend border, in font-size units.\n   266\t\n   267\tlabelspacing : float, default: :rc:`legend.labelspacing`\n   268\t    The vertical space between the legend entries, in font-size units.\n   269\t\n   270\thandlelength : float, default: :rc:`legend.handlelength`\n   271\t    The length of the legend handles, in font-size units.\n   272\t\n   273\thandleheight : float, default: :rc:`legend.handleheight`\n   274\t    The height of the legend handles, in font-size units.\n   275\t\n   276\thandletextpad : float, default: :rc:`legend.handletextpad`\n   277\t    The pad between the legend handle and text, in font-size units.\n   278\t\n   279\tborderaxespad : float, default: :rc:`legend.borderaxespad`\n   280\t    The pad between the axes and legend border, in font-size units.\n   281\t\n   282\tcolumnspacing : float, default: :rc:`legend.columnspacing`\n   283\t    The spacing between columns, in font-size units.\n   284\t\n   285\thandler_map : dict or None\n   286\t    The custom dictionary mapping instances or types to a legend\n   287\t    handler. This *handler_map* updates the default handler map\n   288\t    found at `matplotlib.legend.Legend.get_legend_handler_map`.\n   289\t\"\"\")\n\n\n<span id='Legend'>\n   290\t\n   291\t\n   292\tclass Legend(Artist):\n   293\t    \"\"\"\n   294\t    Place a legend on the axes at location loc.\n   295\t    \"\"\"\n   296\t\n   297\t    # 'best' is only implemented for axes legends\n   298\t    codes = {'best': 0, **AnchoredOffsetbox.codes}\n   299\t    zorder = 5\n          # ...\n\n\n<span id='Legend.__init__'>\n   303\t\n   304\t    @_api.make_keyword_only(\"3.6\", \"loc\")\n   305\t    @_docstring.dedent_interpd\n   306\t    def __init__(\n   307\t        self, parent, handles, labels,\n   308\t        loc=None,\n   309\t        numpoints=None,      # number of points in the legend line\n   310\t        markerscale=None,    # relative size of legend markers vs. original\n   311\t        markerfirst=True,    # left/right ordering of legend marker and label\n   312\t        scatterpoints=None,  # number of scatter points\n   313\t        scatteryoffsets=None,\n   314\t        prop=None,           # properties for the legend texts\n   315\t        fontsize=None,       # keyword to set font size directly\n   316\t        labelcolor=None,     # keyword to set the text color\n   317\t\n   318\t        # spacing & pad defined as a fraction of the font-size\n   319\t        borderpad=None,      # whitespace inside the legend border\n   320\t        labelspacing=None,   # vertical space between the legend entries\n   321\t        handlelength=None,   # length of the legend handles\n   322\t        handleheight=None,   # height of the legend handles\n   323\t        handletextpad=None,  # pad between the legend handle and text\n   324\t        borderaxespad=None,  # pad between the axes and legend border\n   325\t        columnspacing=None,  # spacing between columns\n   326\t\n   327\t        ncols=1,     # number of columns\n   328\t        mode=None,  # horizontal distribution of columns: None or \"expand\"\n   329\t\n   330\t        fancybox=None,  # True: fancy box, False: rounded box, None: rcParam\n   331\t        shadow=None,\n   332\t        title=None,           # legend title\n   333\t        title_fontsize=None,  # legend title font size\n   334\t        framealpha=None,      # set frame alpha\n   335\t        edgecolor=None,       # frame patch edgecolor\n   336\t        facecolor=None,       # frame patch facecolor\n   337\t\n   338\t        bbox_to_anchor=None,  # bbox to which the legend will be anchored\n   339\t        bbox_transform=None,  # transform for the bbox\n   340\t        frameon=None,         # draw frame\n   341\t        handler_map=None,\n   342\t        title_fontproperties=None,  # properties for the legend title\n   343\t        alignment=\"center\",       # control the alignment within the legend box\n   344\t        *,\n   345\t        ncol=1  # synonym for ncols (backward compatibility)\n   346\t    ):\n   347\t        \"\"\"\n   348\t        Parameters\n   349\t        ----------\n   350\t        parent : `~matplotlib.axes.Axes` or `.Figure`\n   351\t            The artist that contains the legend.\n   352\t\n   353\t        handles : list of `.Artist`\n   354\t            A list of Artists (lines, patches) to be added to the legend.\n   355\t\n   356\t        labels : list of str\n   357\t            A list of labels to show next to the artists. The length of handles\n   358\t            and labels should be the same. If they are not, they are truncated\n   359\t            to the smaller of both lengths.\n   360\t\n   361\t        Other Parameters\n   362\t        ----------------\n   363\t        %(_legend_kw_doc)s\n   364\t\n   365\t        Notes\n   366\t        -----\n   367\t        Users can specify any arbitrary location for the legend using the\n   368\t        *bbox_to_anchor* keyword argument. *bbox_to_anchor* can be a\n   369\t        `.BboxBase` (or derived there from) or a tuple of 2 or 4 floats.\n   370\t        See `set_bbox_to_anchor` for more detail.\n   371\t\n   372\t        The legend location can be specified by setting *loc* with a tuple of\n   373\t        2 floats, which is interpreted as the lower-left corner of the legend\n   374\t        in the normalized axes coordinate.\n   375\t        \"\"\"\n   376\t        # local import only to avoid circularity\n   377\t        from matplotlib.axes import Axes\n   378\t        from matplotlib.figure import FigureBase\n   379\t\n   380\t        super().__init__()\n   381\t\n   382\t        if prop is None:\n   383\t            if fontsize is not None:\n   384\t                self.prop = FontProperties(size=fontsize)\n   385\t            else:\n   386\t                self.prop = FontProperties(\n   387\t                    size=mpl.rcParams[\"legend.fontsize\"])\n   388\t        else:\n   389\t            self.prop = FontProperties._from_any(prop)\n   390\t            if isinstance(prop, dict) and \"size\" not in prop:\n   391\t                self.prop.set_size(mpl.rcParams[\"legend.fontsize\"])\n   392\t\n   393\t        self._fontsize = self.prop.get_size_in_points()\n   394\t\n   395\t        self.texts = []\n   396\t        self.legendHandles = []\n   397\t        self._legend_title_box = None\n   398\t\n   399\t        #: A dictionary with the extra handler mappings for this Legend\n   400\t        #: instance.\n   401\t        self._custom_handler_map = handler_map\n   402\t\n   403\t        def val_or_rc(val, rc_name):\n   404\t            return val if val is not None else mpl.rcParams[rc_name]\n   405\t\n   406\t        self.numpoints = val_or_rc(numpoints, 'legend.numpoints')\n   407\t        self.markerscale = val_or_rc(markerscale, 'legend.markerscale')\n   408\t        self.scatterpoints = val_or_rc(scatterpoints, 'legend.scatterpoints')\n   409\t        self.borderpad = val_or_rc(borderpad, 'legend.borderpad')\n   410\t        self.labelspacing = val_or_rc(labelspacing, 'legend.labelspacing')\n   411\t        self.handlelength = val_or_rc(handlelength, 'legend.handlelength')\n   412\t        self.handleheight = val_or_rc(handleheight, 'legend.handleheight')\n   413\t        self.handletextpad = val_or_rc(handletextpad, 'legend.handletextpad')\n   414\t        self.borderaxespad = val_or_rc(borderaxespad, 'legend.borderaxespad')\n   415\t        self.columnspacing = val_or_rc(columnspacing, 'legend.columnspacing')\n   416\t        self.shadow = val_or_rc(shadow, 'legend.shadow')\n   417\t        # trim handles and labels if illegal label...\n   418\t        _lab, _hand = [], []\n   419\t        for label, handle in zip(labels, handles):\n   420\t            if isinstance(label, str) and label.startswith('_'):\n   421\t                _api.warn_external(f\"The label {label!r} of {handle!r} starts \"\n   422\t                                   \"with '_'. It is thus excluded from the \"\n   423\t                                   \"legend.\")\n   424\t            else:\n   425\t                _lab.append(label)\n   426\t                _hand.append(handle)\n   427\t        labels, handles = _lab, _hand\n   428\t\n   429\t        handles = list(handles)\n   430\t        if len(handles) < 2:\n   431\t            ncols = 1\n   432\t        self._ncols = ncols if ncols != 1 else ncol\n   433\t\n   434\t        if self.numpoints <= 0:\n   435\t            raise ValueError(\"numpoints must be > 0; it was %d\" % numpoints)\n   436\t\n   437\t        # introduce y-offset for handles of the scatter plot\n   438\t        if scatteryoffsets is None:\n   439\t            self._scatteryoffsets = np.array([3. / 8., 4. / 8., 2.5 / 8.])\n   440\t        else:\n   441\t            self._scatteryoffsets = np.asarray(scatteryoffsets)\n   442\t        reps = self.scatterpoints // len(self._scatteryoffsets) + 1\n   443\t        self._scatteryoffsets = np.tile(self._scatteryoffsets,\n   444\t                                        reps)[:self.scatterpoints]\n   445\t\n   446\t        # _legend_box is a VPacker instance that contains all\n   447\t        # legend items and will be initialized from _init_legend_box()\n   448\t        # method.\n   449\t        self._legend_box = None\n   450\t\n   451\t        if isinstance(parent, Axes):\n   452\t            self.isaxes = True\n   453\t            self.axes = parent\n   454\t            self.set_figure(parent.figure)\n   455\t        elif isinstance(parent, FigureBase):\n   456\t            self.isaxes = False\n   457\t            self.set_figure(parent)\n   458\t        else:\n   459\t            raise TypeError(\n   460\t                \"Legend needs either Axes or FigureBase as parent\"\n   461\t            )\n   462\t        self.parent = parent\n   463\t\n   464\t        self._loc_used_default = loc is None\n   465\t        if loc is None:\n   466\t            loc = mpl.rcParams[\"legend.loc\"]\n   467\t            if not self.isaxes and loc in [0, 'best']:\n   468\t                loc = 'upper right'\n   469\t        if isinstance(loc, str):\n   470\t            loc = _api.check_getitem(self.codes, loc=loc)\n   471\t        if not self.isaxes and loc == 0:\n   472\t            raise ValueError(\n   473\t                \"Automatic legend placement (loc='best') not implemented for \"\n   474\t                \"figure legend\")\n   475\t\n   476\t        self._mode = mode\n   477\t        self.set_bbox_to_anchor(bbox_to_anchor, bbox_transform)\n   478\t\n   479\t        # We use FancyBboxPatch to draw a legend frame. The location\n   480\t        # and size of the box will be updated during the drawing time.\n   481\t\n   482\t        if facecolor is None:\n   483\t            facecolor = mpl.rcParams[\"legend.facecolor\"]\n   484\t        if facecolor == 'inherit':\n   485\t            facecolor = mpl.rcParams[\"axes.facecolor\"]\n   486\t\n   487\t        if edgecolor is None:\n   488\t            edgecolor = mpl.rcParams[\"legend.edgecolor\"]\n   489\t        if edgecolor == 'inherit':\n   490\t            edgecolor = mpl.rcParams[\"axes.edgecolor\"]\n   491\t\n   492\t        if fancybox is None:\n   493\t            fancybox = mpl.rcParams[\"legend.fancybox\"]\n   494\t\n   495\t        self.legendPatch = FancyBboxPatch(\n   496\t            xy=(0, 0), width=1, height=1,\n   497\t            facecolor=facecolor, edgecolor=edgecolor,\n   498\t            # If shadow is used, default to alpha=1 (#8943).\n   499\t            alpha=(framealpha if framealpha is not None\n   500\t                   else 1 if shadow\n   501\t                   else mpl.rcParams[\"legend.framealpha\"]),\n   502\t            # The width and height of the legendPatch will be set (in draw())\n   503\t            # to the length that includes the padding. Thus we set pad=0 here.\n   504\t            boxstyle=(\"round,pad=0,rounding_size=0.2\" if fancybox\n   505\t                      else \"square,pad=0\"),\n   506\t            mutation_scale=self._fontsize,\n   507\t            snap=True,\n   508\t            visible=(frameon if frameon is not None\n   509\t                     else mpl.rcParams[\"legend.frameon\"])\n   510\t        )\n   511\t        self._set_artist_props(self.legendPatch)\n   512\t\n   513\t        _api.check_in_list([\"center\", \"left\", \"right\"], alignment=alignment)\n   514\t        self._alignment = alignment\n   515\t\n   516\t        # init with null renderer\n   517\t        self._init_legend_box(handles, labels, markerfirst)\n   518\t\n   519\t        tmp = self._loc_used_default\n   520\t        self._set_loc(loc)\n   521\t        self._loc_used_default = tmp  # ignore changes done by _set_loc\n   522\t\n   523\t        # figure out title font properties:\n   524\t        if title_fontsize is not None and title_fontproperties is not None:\n   525\t            raise ValueError(\n   526\t                \"title_fontsize and title_fontproperties can't be specified \"\n   527\t                \"at the same time. Only use one of them. \")\n   528\t        title_prop_fp = FontProperties._from_any(title_fontproperties)\n   529\t        if isinstance(title_fontproperties, dict):\n   530\t            if \"size\" not in title_fontproperties:\n   531\t                title_fontsize = mpl.rcParams[\"legend.title_fontsize\"]\n   532\t                title_prop_fp.set_size(title_fontsize)\n   533\t        elif title_fontsize is not None:\n   534\t            title_prop_fp.set_size(title_fontsize)\n   535\t        elif not isinstance(title_fontproperties, FontProperties):\n   536\t            title_fontsize = mpl.rcParams[\"legend.title_fontsize\"]\n   537\t            title_prop_fp.set_size(title_fontsize)\n   538\t\n   539\t        self.set_title(title, prop=title_prop_fp)\n   540\t        self._draggable = None\n   541\t\n   542\t        # set the text color\n   543\t\n   544\t        color_getters = {  # getter function depends on line or patch\n   545\t            'linecolor':       ['get_color',           'get_facecolor'],\n   546\t            'markerfacecolor': ['get_markerfacecolor', 'get_facecolor'],\n   547\t            'mfc':             ['get_markerfacecolor', 'get_facecolor'],\n   548\t            'markeredgecolor': ['get_markeredgecolor', 'get_edgecolor'],\n   549\t            'mec':             ['get_markeredgecolor', 'get_edgecolor'],\n   550\t        }\n   551\t        if labelcolor is None:\n   552\t            if mpl.rcParams['legend.labelcolor'] is not None:\n   553\t                labelcolor = mpl.rcParams['legend.labelcolor']\n   554\t            else:\n   555\t                labelcolor = mpl.rcParams['text.color']\n   556\t        if isinstance(labelcolor, str) and labelcolor in color_getters:\n   557\t            getter_names = color_getters[labelcolor]\n   558\t            for handle, text in zip(self.legendHandles, self.texts):\n   559\t                for getter_name in getter_names:\n   560\t                    try:\n   561\t                        color = getattr(handle, getter_name)()\n   562\t                        text.set_color(color)\n   563\t                        break\n   564\t                    except AttributeError:\n   565\t                        pass\n   566\t        elif isinstance(labelcolor, str) and labelcolor == 'none':\n   567\t            for text in self.texts:\n   568\t                text.set_color(labelcolor)\n   569\t        elif np.iterable(labelcolor):\n   570\t            for text, color in zip(self.texts,\n   571\t                                   itertools.cycle(\n   572\t                                       colors.to_rgba_array(labelcolor))):\n   573\t                text.set_color(color)\n   574\t        else:\n   575\t            raise ValueError(f\"Invalid labelcolor: {labelcolor!r}\")\n          # ...\n      # ...\n```\n\n</search_result>\n"
            }
          ],
          "response": {
            "id": "msg_01PJX4LnVcGeSHQV7SLFdMU2",
            "content": [
              {
                "text": "Based on the search results, I'll identify the relevant code sections that define and use the `_legend_kw_doc` documentation string. Here's my analysis:\n\nThe most relevant code section is in `lib/matplotlib/legend.py` where `_legend_kw_doc` is defined and used:",
                "type": "text"
              },
              {
                "id": "toolu_01NdgP7P8nkiB2SiQuwkEDwd",
                "input": {
                  "scratch_pad": "The search request is looking for the `_legend_kw_doc` documentation string. The main definition is found in lib/matplotlib/legend.py where it's used to document legend parameters. This documentation string is used by both Axes.legend() and Figure.legend() methods through docstring interpolation.\n\nThe key section is where _legend_kw_doc is defined and updated in the docstring.interpd dictionary, containing comprehensive documentation for all legend keyword parameters.",
                  "identified_spans": [
                    {
                      "file_path": "lib/matplotlib/legend.py",
                      "start_line": 97,
                      "end_line": 289
                    }
                  ]
                },
                "name": "Action",
                "type": "tool_use"
              }
            ],
            "model": "claude-3-5-sonnet-20241022",
            "role": "assistant",
            "stop_reason": "tool_use",
            "stop_sequence": null,
            "type": "message",
            "usage": {
              "cache_creation_input_tokens": 0,
              "cache_read_input_tokens": 0,
              "input_tokens": 12979,
              "output_tokens": 277
            }
          },
          "usage": {
            "completion_cost": 0.043092,
            "completion_tokens": 277,
            "prompt_tokens": 12979,
            "cached_tokens": 0
          }
        }
      },
      "possible_actions": [
        "SemanticSearch",
        "FindClass",
        "FindFunction",
        "FindCodeSnippet",
        "RequestMoreContext",
        "ClaudeEditTool",
        "Finish",
        "Reject"
      ],
      "output": {
        "message": "Found 10 code sections.\n\nViewed relevant code:\nlib/matplotlib/legend.py\n```\n\n    23\t\n    24\timport itertools\n    25\timport logging\n    26\timport time\n    27\t\n    28\timport numpy as np\n    29\t\n    30\timport matplotlib as mpl\n    31\tfrom matplotlib import _api, _docstring, colors, offsetbox\n    32\tfrom matplotlib.artist import Artist, allow_rasterization\n    33\tfrom matplotlib.cbook import silent_list\n    34\tfrom matplotlib.font_manager import FontProperties\n    35\tfrom matplotlib.lines import Line2D\n    36\tfrom matplotlib.patches import (Patch, Rectangle, Shadow, FancyBboxPatch,\n    37\t                                StepPatch)\n    38\tfrom matplotlib.collections import (\n    39\t    Collection, CircleCollection, LineCollection, PathCollection,\n    40\t    PolyCollection, RegularPolyCollection)\n    41\tfrom matplotlib.text import Text\n    42\tfrom matplotlib.transforms import Bbox, BboxBase, TransformedBbox\n    43\tfrom matplotlib.transforms import BboxTransformTo, BboxTransformFrom\n    44\tfrom matplotlib.offsetbox import (\n    45\t    AnchoredOffsetbox, DraggableOffsetBox,\n    46\t    HPacker, VPacker,\n    47\t    DrawingArea, TextArea,\n    48\t)\n    49\tfrom matplotlib.container import ErrorbarContainer, BarContainer, StemContainer\n    50\tfrom . import legend_handler\n      # ...\n    95\t\n    96\t\n    97\t_docstring.interpd.update(_legend_kw_doc=\"\"\"\n    98\tloc : str or pair of floats, default: :rc:`legend.loc` ('best' for axes, \\\n    99\t'upper right' for figures)\n   100\t    The location of the legend.\n   101\t\n   102\t    The strings\n   103\t    ``'upper left', 'upper right', 'lower left', 'lower right'``\n   104\t    place the legend at the corresponding corner of the axes/figure.\n   105\t\n   106\t    The strings\n   107\t    ``'upper center', 'lower center', 'center left', 'center right'``\n   108\t    place the legend at the center of the corresponding edge of the\n   109\t    axes/figure.\n   110\t\n   111\t    The string ``'center'`` places the legend at the center of the axes/figure.\n   112\t\n   113\t    The string ``'best'`` places the legend at the location, among the nine\n   114\t    locations defined so far, with the minimum overlap with other drawn\n   115\t    artists.  This option can be quite slow for plots with large amounts of\n   116\t    data; your plotting speed may benefit from providing a specific location.\n   117\t\n   118\t    The location can also be a 2-tuple giving the coordinates of the lower-left\n   119\t    corner of the legend in axes coordinates (in which case *bbox_to_anchor*\n   120\t    will be ignored).\n   121\t\n   122\t    For back-compatibility, ``'center right'`` (but no other location) can also\n   123\t    be spelled ``'right'``, and each \"string\" locations can also be given as a\n   124\t    numeric value:\n   125\t\n   126\t        ===============   =============\n   127\t        Location String   Location Code\n   128\t        ===============   =============\n   129\t        'best'            0\n   130\t        'upper right'     1\n   131\t        'upper left'      2\n   132\t        'lower left'      3\n   133\t        'lower right'     4\n   134\t        'right'           5\n   135\t        'center left'     6\n   136\t        'center right'    7\n   137\t        'lower center'    8\n   138\t        'upper center'    9\n   139\t        'center'          10\n   140\t        ===============   =============\n   141\t\n   142\tbbox_to_anchor : `.BboxBase`, 2-tuple, or 4-tuple of floats\n   143\t    Box that is used to position the legend in conjunction with *loc*.\n   144\t    Defaults to `axes.bbox` (if called as a method to `.Axes.legend`) or\n   145\t    `figure.bbox` (if `.Figure.legend`).  This argument allows arbitrary\n   146\t    placement of the legend.\n   147\t\n   148\t    Bbox coordinates are interpreted in the coordinate system given by\n   149\t    *bbox_transform*, with the default transform\n   150\t    Axes or Figure coordinates, depending on which ``legend`` is called.\n   151\t\n   152\t    If a 4-tuple or `.BboxBase` is given, then it specifies the bbox\n   153\t    ``(x, y, width, height)`` that the legend is placed in.\n   154\t    To put the legend in the best location in the bottom right\n   155\t    quadrant of the axes (or figure)::\n   156\t\n   157\t        loc='best', bbox_to_anchor=(0.5, 0., 0.5, 0.5)\n   158\t\n   159\t    A 2-tuple ``(x, y)`` places the corner of the legend specified by *loc* at\n   160\t    x, y.  For example, to put the legend's upper right-hand corner in the\n   161\t    center of the axes (or figure) the following keywords can be used::\n   162\t\n   163\t        loc='upper right', bbox_to_anchor=(0.5, 0.5)\n   164\t\n   165\tncols : int, default: 1\n   166\t    The number of columns that the legend has.\n   167\t\n   168\t    For backward compatibility, the spelling *ncol* is also supported\n   169\t    but it is discouraged. If both are given, *ncols* takes precedence.\n   170\t\n   171\tprop : None or `matplotlib.font_manager.FontProperties` or dict\n   172\t    The font properties of the legend. If None (default), the current\n   173\t    :data:`matplotlib.rcParams` will be used.\n   174\t\n   175\tfontsize : int or {'xx-small', 'x-small', 'small', 'medium', 'large', \\\n   176\t'x-large', 'xx-large'}\n   177\t    The font size of the legend. If the value is numeric the size will be the\n   178\t    absolute font size in points. String values are relative to the current\n   179\t    default font size. This argument is only used if *prop* is not specified.\n   180\t\n   181\tlabelcolor : str or list, default: :rc:`legend.labelcolor`\n   182\t    The color of the text in the legend. Either a valid color string\n   183\t    (for example, 'red'), or a list of color strings. The labelcolor can\n   184\t    also be made to match the color of the line or marker using 'linecolor',\n   185\t    'markerfacecolor' (or 'mfc'), or 'markeredgecolor' (or 'mec').\n   186\t\n   187\t    Labelcolor can be set globally using :rc:`legend.labelcolor`. If None,\n   188\t    use :rc:`text.color`.\n   189\t\n   190\tnumpoints : int, default: :rc:`legend.numpoints`\n   191\t    The number of marker points in the legend when creating a legend\n   192\t    entry for a `.Line2D` (line).\n   193\t\n   194\tscatterpoints : int, default: :rc:`legend.scatterpoints`\n   195\t    The number of marker points in the legend when creating\n   196\t    a legend entry for a `.PathCollection` (scatter plot).\n   197\t\n   198\tscatteryoffsets : iterable of floats, default: ``[0.375, 0.5, 0.3125]``\n   199\t    The vertical offset (relative to the font size) for the markers\n   200\t    created for a scatter plot legend entry. 0.0 is at the base the\n   201\t    legend text, and 1.0 is at the top. To draw all markers at the\n   202\t    same height, set to ``[0.5]``.\n   203\t\n   204\tmarkerscale : float, default: :rc:`legend.markerscale`\n   205\t    The relative size of legend markers compared with the originally\n   206\t    drawn ones.\n   207\t\n   208\tmarkerfirst : bool, default: True\n   209\t    If *True*, legend marker is placed to the left of the legend label.\n   210\t    If *False*, legend marker is placed to the right of the legend label.\n   211\t\n   212\tframeon : bool, default: :rc:`legend.frameon`\n   213\t    Whether the legend should be drawn on a patch (frame).\n   214\t\n   215\tfancybox : bool, default: :rc:`legend.fancybox`\n   216\t    Whether round edges should be enabled around the `.FancyBboxPatch` which\n   217\t    makes up the legend's background.\n   218\t\n   219\tshadow : bool, default: :rc:`legend.shadow`\n   220\t    Whether to draw a shadow behind the legend.\n   221\t\n   222\tframealpha : float, default: :rc:`legend.framealpha`\n   223\t    The alpha transparency of the legend's background.\n   224\t    If *shadow* is activated and *framealpha* is ``None``, the default value is\n   225\t    ignored.\n   226\t\n   227\tfacecolor : \"inherit\" or color, default: :rc:`legend.facecolor`\n   228\t    The legend's background color.\n   229\t    If ``\"inherit\"``, use :rc:`axes.facecolor`.\n   230\t\n   231\tedgecolor : \"inherit\" or color, default: :rc:`legend.edgecolor`\n   232\t    The legend's background patch edge color.\n   233\t    If ``\"inherit\"``, use take :rc:`axes.edgecolor`.\n   234\t\n   235\tmode : {\"expand\", None}\n   236\t    If *mode* is set to ``\"expand\"`` the legend will be horizontally\n   237\t    expanded to fill the axes area (or *bbox_to_anchor* if defines\n   238\t    the legend's size).\n   239\t\n   240\tbbox_transform : None or `matplotlib.transforms.Transform`\n   241\t    The transform for the bounding box (*bbox_to_anchor*). For a value\n   242\t    of ``None`` (default) the Axes'\n   243\t    :data:`~matplotlib.axes.Axes.transAxes` transform will be used.\n   244\t\n   245\ttitle : str or None\n   246\t    The legend's title. Default is no title (``None``).\n   247\t\n   248\ttitle_fontproperties : None or `matplotlib.font_manager.FontProperties` or dict\n   249\t    The font properties of the legend's title. If None (default), the\n   250\t    *title_fontsize* argument will be used if present; if *title_fontsize* is\n   251\t    also None, the current :rc:`legend.title_fontsize` will be used.\n   252\t\n   253\ttitle_fontsize : int or {'xx-small', 'x-small', 'small', 'medium', 'large', \\\n   254\t'x-large', 'xx-large'}, default: :rc:`legend.title_fontsize`\n   255\t    The font size of the legend's title.\n   256\t    Note: This cannot be combined with *title_fontproperties*. If you want\n   257\t    to set the fontsize alongside other font properties, use the *size*\n   258\t    parameter in *title_fontproperties*.\n   259\t\n   260\talignment : {'center', 'left', 'right'}, default: 'center'\n   261\t    The alignment of the legend title and the box of entries. The entries\n   262\t    are aligned as a single block, so that markers always lined up.\n   263\t\n   264\tborderpad : float, default: :rc:`legend.borderpad`\n   265\t    The fractional whitespace inside the legend border, in font-size units.\n   266\t\n   267\tlabelspacing : float, default: :rc:`legend.labelspacing`\n   268\t    The vertical space between the legend entries, in font-size units.\n   269\t\n   270\thandlelength : float, default: :rc:`legend.handlelength`\n   271\t    The length of the legend handles, in font-size units.\n   272\t\n   273\thandleheight : float, default: :rc:`legend.handleheight`\n   274\t    The height of the legend handles, in font-size units.\n   275\t\n   276\thandletextpad : float, default: :rc:`legend.handletextpad`\n   277\t    The pad between the legend handle and text, in font-size units.\n   278\t\n   279\tborderaxespad : float, default: :rc:`legend.borderaxespad`\n   280\t    The pad between the axes and legend border, in font-size units.\n   281\t\n   282\tcolumnspacing : float, default: :rc:`legend.columnspacing`\n   283\t    The spacing between columns, in font-size units.\n   284\t\n   285\thandler_map : dict or None\n   286\t    The custom dictionary mapping instances or types to a legend\n   287\t    handler. This *handler_map* updates the default handler map\n   288\t    found at `matplotlib.legend.Legend.get_legend_handler_map`.\n   289\t\"\"\")\n      # ...\n```\n",
        "summary": "Found relevant code sections in the search results.",
        "terminal": false,
        "expect_correction": false,
        "properties": {
          "search_hits": [],
          "search_tokens": 7230,
          "new_span_ids": [
            "impl"
          ]
        },
        "execution_completion": {
          "model": "claude-3-5-sonnet-20241022",
          "input": [
            {
              "role": "user",
              "content": "Search request:\nSearching for code snippet: _legend_kw_doc\n\nIdentify the relevant code sections in the search results to use them. \n\n<search_results>\nlib/matplotlib/axes/_axes.py\n```\n\n\n\n<span id='imports'>\n     1\timport functools\n     2\timport itertools\n     3\timport logging\n     4\timport math\n     5\tfrom numbers import Integral, Number\n     6\t\n     7\timport numpy as np\n     8\tfrom numpy import ma\n     9\t\n    10\timport matplotlib as mpl\n    11\timport matplotlib.category  # Register category unit converter as side-effect.\n    12\timport matplotlib.cbook as cbook\n    13\timport matplotlib.collections as mcoll\n    14\timport matplotlib.colors as mcolors\n    15\timport matplotlib.contour as mcontour\n    16\timport matplotlib.dates  # noqa # Register date unit converter as side-effect.\n    17\timport matplotlib.image as mimage\n    18\timport matplotlib.legend as mlegend\n    19\timport matplotlib.lines as mlines\n    20\timport matplotlib.markers as mmarkers\n    21\timport matplotlib.mlab as mlab\n    22\timport matplotlib.patches as mpatches\n    23\timport matplotlib.path as mpath\n    24\timport matplotlib.quiver as mquiver\n    25\timport matplotlib.stackplot as mstack\n    26\timport matplotlib.streamplot as mstream\n    27\timport matplotlib.table as mtable\n    28\timport matplotlib.text as mtext\n    29\timport matplotlib.ticker as mticker\n    30\timport matplotlib.transforms as mtransforms\n    31\timport matplotlib.tri as mtri\n    32\timport matplotlib.units as munits\n    33\tfrom matplotlib import _api, _docstring, _preprocess_data\n    34\tfrom matplotlib.axes._base import (\n    35\t    _AxesBase, _TransformedBoundsLocator, _process_plot_format)\n    36\tfrom matplotlib.axes._secondary_axes import SecondaryAxis\n    37\tfrom matplotlib.container import BarContainer, ErrorbarContainer, StemContainer\n    38\t\n    39\t_log = logging.getLogger(__name__)\n    40\t\n    41\t\n    42\t# The axes module contains all the wrappers to plotting functions.\n    43\t# All the other methods should go in the _AxesBase class.\n\n\n<span id='Axes'>\n    44\t\n    45\t\n    46\t@_docstring.interpd\n    47\tclass Axes(_AxesBase):\n    48\t    \"\"\"\n    49\t    The `Axes` contains most of the figure elements: `~.axis.Axis`,\n    50\t    `~.axis.Tick`, `~.lines.Line2D`, `~.text.Text`, `~.patches.Polygon`, etc.,\n    51\t    and sets the coordinate system.\n    52\t\n    53\t    The `Axes` instance supports callbacks through a callbacks attribute which\n    54\t    is a `~.cbook.CallbackRegistry` instance.  The events you can connect to\n    55\t    are 'xlim_changed' and 'ylim_changed' and the callback will be called with\n    56\t    func(*ax*) where *ax* is the `Axes` instance.\n    57\t\n    58\t    Attributes\n    59\t    ----------\n    60\t    dataLim : `.Bbox`\n    61\t        The bounding box enclosing all data displayed in the Axes.\n    62\t    viewLim : `.Bbox`\n    63\t        The view limits in data coordinates.\n    64\t\n    65\t    \"\"\"\n    66\t    ### Labelling, legend and texts\n          # ...\n\n\n<span id='Axes.legend'>\n   185\t\n   186\t    @_docstring.dedent_interpd\n   187\t    def legend(self, *args, **kwargs):\n   188\t        \"\"\"\n   189\t        Place a legend on the Axes.\n   190\t\n   191\t        Call signatures::\n   192\t\n   193\t            legend()\n   194\t            legend(handles, labels)\n   195\t            legend(handles=handles)\n   196\t            legend(labels)\n   197\t\n   198\t        The call signatures correspond to the following different ways to use\n   199\t        this method:\n   200\t\n   201\t        **1. Automatic detection of elements to be shown in the legend**\n   202\t\n   203\t        The elements to be added to the legend are automatically determined,\n   204\t        when you do not pass in any extra arguments.\n   205\t\n   206\t        In this case, the labels are taken from the artist. You can specify\n   207\t        them either at artist creation or by calling the\n   208\t        :meth:`~.Artist.set_label` method on the artist::\n   209\t\n   210\t            ax.plot([1, 2, 3], label='Inline label')\n   211\t            ax.legend()\n   212\t\n   213\t        or::\n   214\t\n   215\t            line, = ax.plot([1, 2, 3])\n   216\t            line.set_label('Label via method')\n   217\t            ax.legend()\n   218\t\n   219\t        .. note::\n   220\t            Specific artists can be excluded from the automatic legend element\n   221\t            selection by using a label starting with an underscore, \"_\".\n   222\t            A string starting with an underscore is the default label for all\n   223\t            artists, so calling `.Axes.legend` without any arguments and\n   224\t            without setting the labels manually will result in no legend being\n   225\t            drawn.\n   226\t\n   227\t\n   228\t        **2. Explicitly listing the artists and labels in the legend**\n   229\t\n   230\t        For full control of which artists have a legend entry, it is possible\n   231\t        to pass an iterable of legend artists followed by an iterable of\n   232\t        legend labels respectively::\n   233\t\n   234\t            ax.legend([line1, line2, line3], ['label1', 'label2', 'label3'])\n   235\t\n   236\t\n   237\t        **3. Explicitly listing the artists in the legend**\n   238\t\n   239\t        This is similar to 2, but the labels are taken from the artists'\n   240\t        label properties. Example::\n   241\t\n   242\t            line1, = ax.plot([1, 2, 3], label='label1')\n   243\t            line2, = ax.plot([1, 2, 3], label='label2')\n   244\t            ax.legend(handles=[line1, line2])\n   245\t\n   246\t\n   247\t        **4. Labeling existing plot elements**\n   248\t\n   249\t        .. admonition:: Discouraged\n   250\t\n   251\t            This call signature is discouraged, because the relation between\n   252\t            plot elements and labels is only implicit by their order and can\n   253\t            easily be mixed up.\n   254\t\n   255\t        To make a legend for all artists on an Axes, call this function with\n   256\t        an iterable of strings, one for each legend item. For example::\n   257\t\n   258\t            ax.plot([1, 2, 3])\n   259\t            ax.plot([5, 6, 7])\n   260\t            ax.legend(['First line', 'Second line'])\n   261\t\n   262\t\n   263\t        Parameters\n   264\t        ----------\n   265\t        handles : sequence of `.Artist`, optional\n   266\t            A list of Artists (lines, patches) to be added to the legend.\n   267\t            Use this together with *labels*, if you need full control on what\n   268\t            is shown in the legend and the automatic mechanism described above\n   269\t            is not sufficient.\n   270\t\n   271\t            The length of handles and labels should be the same in this\n   272\t            case. If they are not, they are truncated to the smaller length.\n   273\t\n   274\t        labels : list of str, optional\n   275\t            A list of labels to show next to the artists.\n   276\t            Use this together with *handles*, if you need full control on what\n   277\t            is shown in the legend and the automatic mechanism described above\n   278\t            is not sufficient.\n   279\t\n   280\t        Returns\n   281\t        -------\n   282\t        `~matplotlib.legend.Legend`\n   283\t\n   284\t        Other Parameters\n   285\t        ----------------\n   286\t        %(_legend_kw_doc)s\n   287\t\n   288\t        See Also\n   289\t        --------\n   290\t        .Figure.legend\n   291\t\n   292\t        Notes\n   293\t        -----\n   294\t        Some artists are not supported by this function.  See\n   295\t        :doc:`/tutorials/intermediate/legend_guide` for details.\n   296\t\n   297\t        Examples\n   298\t        --------\n   299\t        .. plot:: gallery/text_labels_and_annotations/legend.py\n   300\t        \"\"\"\n   301\t        handles, labels, extra_args, kwargs = mlegend._parse_legend_args(\n   302\t                [self],\n   303\t                *args,\n   304\t                **kwargs)\n   305\t        if len(extra_args):\n   306\t            raise TypeError('legend only accepts two non-keyword arguments')\n   307\t        self.legend_ = mlegend.Legend(self, handles, labels, **kwargs)\n   308\t        self.legend_._remove_method = self._remove_legend\n   309\t        return self.legend_\n          # ...\n```\n\n\nlib/matplotlib/figure.py\n```\n\n\n\n<span id='imports'>\n    16\t\n    17\tfrom contextlib import ExitStack\n    18\timport inspect\n    19\timport itertools\n    20\timport logging\n    21\tfrom numbers import Integral\n    22\t\n    23\timport numpy as np\n    24\t\n    25\timport matplotlib as mpl\n    26\tfrom matplotlib import _blocking_input, backend_bases, _docstring, projections\n    27\tfrom matplotlib.artist import (\n    28\t    Artist, allow_rasterization, _finalize_rasterization)\n    29\tfrom matplotlib.backend_bases import (\n    30\t    DrawEvent, FigureCanvasBase, NonGuiException, MouseButton, _get_renderer)\n    31\timport matplotlib._api as _api\n    32\timport matplotlib.cbook as cbook\n    33\timport matplotlib.colorbar as cbar\n    34\timport matplotlib.image as mimage\n    35\t\n    36\tfrom matplotlib.axes import Axes, SubplotBase, subplot_class_factory\n    37\tfrom matplotlib.gridspec import GridSpec\n    38\tfrom matplotlib.layout_engine import (\n    39\t    ConstrainedLayoutEngine, TightLayoutEngine, LayoutEngine,\n    40\t    PlaceHolderLayoutEngine\n    41\t)\n    42\timport matplotlib.legend as mlegend\n    43\tfrom matplotlib.patches import Rectangle\n    44\tfrom matplotlib.text import Text\n    45\tfrom matplotlib.transforms import (Affine2D, Bbox, BboxTransformTo,\n    46\t                                   TransformedBbox)\n    47\t\n    48\t_log = logging.getLogger(__name__)\n      # ...\n\n\n<span id='FigureBase'>\n   156\t\n   157\t\n   158\tclass FigureBase(Artist):\n   159\t    \"\"\"\n   160\t    Base class for `.Figure` and `.SubFigure` containing the methods that add\n   161\t    artists to the figure or subfigure, create Axes, etc.\n   162\t    \"\"\"\n          # ...\n\n\n<span id='FigureBase.legend'>\n   991\t    @_docstring.dedent_interpd\n   992\t    def legend(self, *args, **kwargs):\n   993\t        \"\"\"\n   994\t        Place a legend on the figure.\n   995\t\n   996\t        Call signatures::\n   997\t\n   998\t            legend()\n   999\t            legend(handles, labels)\n  1000\t            legend(handles=handles)\n  1001\t            legend(labels)\n  1002\t\n  1003\t        The call signatures correspond to the following different ways to use\n  1004\t        this method:\n  1005\t\n  1006\t        **1. Automatic detection of elements to be shown in the legend**\n  1007\t\n  1008\t        The elements to be added to the legend are automatically determined,\n  1009\t        when you do not pass in any extra arguments.\n  1010\t\n  1011\t        In this case, the labels are taken from the artist. You can specify\n  1012\t        them either at artist creation or by calling the\n  1013\t        :meth:`~.Artist.set_label` method on the artist::\n  1014\t\n  1015\t            ax.plot([1, 2, 3], label='Inline label')\n  1016\t            fig.legend()\n  1017\t\n  1018\t        or::\n  1019\t\n  1020\t            line, = ax.plot([1, 2, 3])\n  1021\t            line.set_label('Label via method')\n  1022\t            fig.legend()\n  1023\t\n  1024\t        Specific lines can be excluded from the automatic legend element\n  1025\t        selection by defining a label starting with an underscore.\n  1026\t        This is default for all artists, so calling `.Figure.legend` without\n  1027\t        any arguments and without setting the labels manually will result in\n  1028\t        no legend being drawn.\n  1029\t\n  1030\t\n  1031\t        **2. Explicitly listing the artists and labels in the legend**\n  1032\t\n  1033\t        For full control of which artists have a legend entry, it is possible\n  1034\t        to pass an iterable of legend artists followed by an iterable of\n  1035\t        legend labels respectively::\n  1036\t\n  1037\t            fig.legend([line1, line2, line3], ['label1', 'label2', 'label3'])\n  1038\t\n  1039\t\n  1040\t        **3. Explicitly listing the artists in the legend**\n  1041\t\n  1042\t        This is similar to 2, but the labels are taken from the artists'\n  1043\t        label properties. Example::\n  1044\t\n  1045\t            line1, = ax1.plot([1, 2, 3], label='label1')\n  1046\t            line2, = ax2.plot([1, 2, 3], label='label2')\n  1047\t            fig.legend(handles=[line1, line2])\n  1048\t\n  1049\t\n  1050\t        **4. Labeling existing plot elements**\n  1051\t\n  1052\t        .. admonition:: Discouraged\n  1053\t\n  1054\t            This call signature is discouraged, because the relation between\n  1055\t            plot elements and labels is only implicit by their order and can\n  1056\t            easily be mixed up.\n  1057\t\n  1058\t        To make a legend for all artists on all Axes, call this function with\n  1059\t        an iterable of strings, one for each legend item. For example::\n  1060\t\n  1061\t            fig, (ax1, ax2) = plt.subplots(1, 2)\n  1062\t            ax1.plot([1, 3, 5], color='blue')\n  1063\t            ax2.plot([2, 4, 6], color='red')\n  1064\t            fig.legend(['the blues', 'the reds'])\n  1065\t\n  1066\t\n  1067\t        Parameters\n  1068\t        ----------\n  1069\t        handles : list of `.Artist`, optional\n  1070\t            A list of Artists (lines, patches) to be added to the legend.\n  1071\t            Use this together with *labels*, if you need full control on what\n  1072\t            is shown in the legend and the automatic mechanism described above\n  1073\t            is not sufficient.\n  1074\t\n  1075\t            The length of handles and labels should be the same in this\n  1076\t            case. If they are not, they are truncated to the smaller length.\n  1077\t\n  1078\t        labels : list of str, optional\n  1079\t            A list of labels to show next to the artists.\n  1080\t            Use this together with *handles*, if you need full control on what\n  1081\t            is shown in the legend and the automatic mechanism described above\n  1082\t            is not sufficient.\n  1083\t\n  1084\t        Returns\n  1085\t        -------\n  1086\t        `~matplotlib.legend.Legend`\n  1087\t\n  1088\t        Other Parameters\n  1089\t        ----------------\n  1090\t        %(_legend_kw_doc)s\n  1091\t\n  1092\t        See Also\n  1093\t        --------\n  1094\t        .Axes.legend\n  1095\t\n  1096\t        Notes\n  1097\t        -----\n  1098\t        Some artists are not supported by this function.  See\n  1099\t        :doc:`/tutorials/intermediate/legend_guide` for details.\n  1100\t        \"\"\"\n  1101\t\n  1102\t        handles, labels, extra_args, kwargs = mlegend._parse_legend_args(\n  1103\t                self.axes,\n  1104\t                *args,\n  1105\t                **kwargs)\n  1106\t        # check for third arg\n  1107\t        if len(extra_args):\n  1108\t            # _api.warn_deprecated(\n  1109\t            #     \"2.1\",\n  1110\t            #     message=\"Figure.legend will accept no more than two \"\n  1111\t            #     \"positional arguments in the future.  Use \"\n  1112\t            #     \"'fig.legend(handles, labels, loc=location)' \"\n  1113\t            #     \"instead.\")\n  1114\t            # kwargs['loc'] = extra_args[0]\n  1115\t            # extra_args = extra_args[1:]\n  1116\t            pass\n  1117\t        transform = kwargs.pop('bbox_transform', self.transSubfigure)\n  1118\t        # explicitly set the bbox transform if the user hasn't.\n  1119\t        l = mlegend.Legend(self, handles, labels, *extra_args,\n  1120\t                           bbox_transform=transform, **kwargs)\n  1121\t        self.legends.append(l)\n  1122\t        l._remove_method = self.legends.remove\n  1123\t        self.stale = True\n  1124\t        return l\n          # ...\n      # ...\n```\n\n\nlib/matplotlib/legend.py\n```\n\n\n\n<span id='imports'>\n    23\t\n    24\timport itertools\n    25\timport logging\n    26\timport time\n    27\t\n    28\timport numpy as np\n    29\t\n    30\timport matplotlib as mpl\n    31\tfrom matplotlib import _api, _docstring, colors, offsetbox\n    32\tfrom matplotlib.artist import Artist, allow_rasterization\n    33\tfrom matplotlib.cbook import silent_list\n    34\tfrom matplotlib.font_manager import FontProperties\n    35\tfrom matplotlib.lines import Line2D\n    36\tfrom matplotlib.patches import (Patch, Rectangle, Shadow, FancyBboxPatch,\n    37\t                                StepPatch)\n    38\tfrom matplotlib.collections import (\n    39\t    Collection, CircleCollection, LineCollection, PathCollection,\n    40\t    PolyCollection, RegularPolyCollection)\n    41\tfrom matplotlib.text import Text\n    42\tfrom matplotlib.transforms import Bbox, BboxBase, TransformedBbox\n    43\tfrom matplotlib.transforms import BboxTransformTo, BboxTransformFrom\n    44\tfrom matplotlib.offsetbox import (\n    45\t    AnchoredOffsetbox, DraggableOffsetBox,\n    46\t    HPacker, VPacker,\n    47\t    DrawingArea, TextArea,\n    48\t)\n    49\tfrom matplotlib.container import ErrorbarContainer, BarContainer, StemContainer\n    50\tfrom . import legend_handler\n      # ...\n\n\n<span id='impl'>\n    95\t\n    96\t\n    97\t_docstring.interpd.update(_legend_kw_doc=\"\"\"\n    98\tloc : str or pair of floats, default: :rc:`legend.loc` ('best' for axes, \\\n    99\t'upper right' for figures)\n   100\t    The location of the legend.\n   101\t\n   102\t    The strings\n   103\t    ``'upper left', 'upper right', 'lower left', 'lower right'``\n   104\t    place the legend at the corresponding corner of the axes/figure.\n   105\t\n   106\t    The strings\n   107\t    ``'upper center', 'lower center', 'center left', 'center right'``\n   108\t    place the legend at the center of the corresponding edge of the\n   109\t    axes/figure.\n   110\t\n   111\t    The string ``'center'`` places the legend at the center of the axes/figure.\n   112\t\n   113\t    The string ``'best'`` places the legend at the location, among the nine\n   114\t    locations defined so far, with the minimum overlap with other drawn\n   115\t    artists.  This option can be quite slow for plots with large amounts of\n   116\t    data; your plotting speed may benefit from providing a specific location.\n   117\t\n   118\t    The location can also be a 2-tuple giving the coordinates of the lower-left\n   119\t    corner of the legend in axes coordinates (in which case *bbox_to_anchor*\n   120\t    will be ignored).\n   121\t\n   122\t    For back-compatibility, ``'center right'`` (but no other location) can also\n   123\t    be spelled ``'right'``, and each \"string\" locations can also be given as a\n   124\t    numeric value:\n   125\t\n   126\t        ===============   =============\n   127\t        Location String   Location Code\n   128\t        ===============   =============\n   129\t        'best'            0\n   130\t        'upper right'     1\n   131\t        'upper left'      2\n   132\t        'lower left'      3\n   133\t        'lower right'     4\n   134\t        'right'           5\n   135\t        'center left'     6\n   136\t        'center right'    7\n   137\t        'lower center'    8\n   138\t        'upper center'    9\n   139\t        'center'          10\n   140\t        ===============   =============\n   141\t\n   142\tbbox_to_anchor : `.BboxBase`, 2-tuple, or 4-tuple of floats\n   143\t    Box that is used to position the legend in conjunction with *loc*.\n   144\t    Defaults to `axes.bbox` (if called as a method to `.Axes.legend`) or\n   145\t    `figure.bbox` (if `.Figure.legend`).  This argument allows arbitrary\n   146\t    placement of the legend.\n   147\t\n   148\t    Bbox coordinates are interpreted in the coordinate system given by\n   149\t    *bbox_transform*, with the default transform\n   150\t    Axes or Figure coordinates, depending on which ``legend`` is called.\n   151\t\n   152\t    If a 4-tuple or `.BboxBase` is given, then it specifies the bbox\n   153\t    ``(x, y, width, height)`` that the legend is placed in.\n   154\t    To put the legend in the best location in the bottom right\n   155\t    quadrant of the axes (or figure)::\n   156\t\n   157\t        loc='best', bbox_to_anchor=(0.5, 0., 0.5, 0.5)\n   158\t\n   159\t    A 2-tuple ``(x, y)`` places the corner of the legend specified by *loc* at\n   160\t    x, y.  For example, to put the legend's upper right-hand corner in the\n   161\t    center of the axes (or figure) the following keywords can be used::\n   162\t\n   163\t        loc='upper right', bbox_to_anchor=(0.5, 0.5)\n   164\t\n   165\tncols : int, default: 1\n   166\t    The number of columns that the legend has.\n   167\t\n   168\t    For backward compatibility, the spelling *ncol* is also supported\n   169\t    but it is discouraged. If both are given, *ncols* takes precedence.\n   170\t\n   171\tprop : None or `matplotlib.font_manager.FontProperties` or dict\n   172\t    The font properties of the legend. If None (default), the current\n   173\t    :data:`matplotlib.rcParams` will be used.\n   174\t\n   175\tfontsize : int or {'xx-small', 'x-small', 'small', 'medium', 'large', \\\n   176\t'x-large', 'xx-large'}\n   177\t    The font size of the legend. If the value is numeric the size will be the\n   178\t    absolute font size in points. String values are relative to the current\n   179\t    default font size. This argument is only used if *prop* is not specified.\n   180\t\n   181\tlabelcolor : str or list, default: :rc:`legend.labelcolor`\n   182\t    The color of the text in the legend. Either a valid color string\n   183\t    (for example, 'red'), or a list of color strings. The labelcolor can\n   184\t    also be made to match the color of the line or marker using 'linecolor',\n   185\t    'markerfacecolor' (or 'mfc'), or 'markeredgecolor' (or 'mec').\n   186\t\n   187\t    Labelcolor can be set globally using :rc:`legend.labelcolor`. If None,\n   188\t    use :rc:`text.color`.\n   189\t\n   190\tnumpoints : int, default: :rc:`legend.numpoints`\n   191\t    The number of marker points in the legend when creating a legend\n   192\t    entry for a `.Line2D` (line).\n   193\t\n   194\tscatterpoints : int, default: :rc:`legend.scatterpoints`\n   195\t    The number of marker points in the legend when creating\n   196\t    a legend entry for a `.PathCollection` (scatter plot).\n   197\t\n   198\tscatteryoffsets : iterable of floats, default: ``[0.375, 0.5, 0.3125]``\n   199\t    The vertical offset (relative to the font size) for the markers\n   200\t    created for a scatter plot legend entry. 0.0 is at the base the\n   201\t    legend text, and 1.0 is at the top. To draw all markers at the\n   202\t    same height, set to ``[0.5]``.\n   203\t\n   204\tmarkerscale : float, default: :rc:`legend.markerscale`\n   205\t    The relative size of legend markers compared with the originally\n   206\t    drawn ones.\n   207\t\n   208\tmarkerfirst : bool, default: True\n   209\t    If *True*, legend marker is placed to the left of the legend label.\n   210\t    If *False*, legend marker is placed to the right of the legend label.\n   211\t\n   212\tframeon : bool, default: :rc:`legend.frameon`\n   213\t    Whether the legend should be drawn on a patch (frame).\n   214\t\n   215\tfancybox : bool, default: :rc:`legend.fancybox`\n   216\t    Whether round edges should be enabled around the `.FancyBboxPatch` which\n   217\t    makes up the legend's background.\n   218\t\n   219\tshadow : bool, default: :rc:`legend.shadow`\n   220\t    Whether to draw a shadow behind the legend.\n   221\t\n   222\tframealpha : float, default: :rc:`legend.framealpha`\n   223\t    The alpha transparency of the legend's background.\n   224\t    If *shadow* is activated and *framealpha* is ``None``, the default value is\n   225\t    ignored.\n   226\t\n   227\tfacecolor : \"inherit\" or color, default: :rc:`legend.facecolor`\n   228\t    The legend's background color.\n   229\t    If ``\"inherit\"``, use :rc:`axes.facecolor`.\n   230\t\n   231\tedgecolor : \"inherit\" or color, default: :rc:`legend.edgecolor`\n   232\t    The legend's background patch edge color.\n   233\t    If ``\"inherit\"``, use take :rc:`axes.edgecolor`.\n   234\t\n   235\tmode : {\"expand\", None}\n   236\t    If *mode* is set to ``\"expand\"`` the legend will be horizontally\n   237\t    expanded to fill the axes area (or *bbox_to_anchor* if defines\n   238\t    the legend's size).\n   239\t\n   240\tbbox_transform : None or `matplotlib.transforms.Transform`\n   241\t    The transform for the bounding box (*bbox_to_anchor*). For a value\n   242\t    of ``None`` (default) the Axes'\n   243\t    :data:`~matplotlib.axes.Axes.transAxes` transform will be used.\n   244\t\n   245\ttitle : str or None\n   246\t    The legend's title. Default is no title (``None``).\n   247\t\n   248\ttitle_fontproperties : None or `matplotlib.font_manager.FontProperties` or dict\n   249\t    The font properties of the legend's title. If None (default), the\n   250\t    *title_fontsize* argument will be used if present; if *title_fontsize* is\n   251\t    also None, the current :rc:`legend.title_fontsize` will be used.\n   252\t\n   253\ttitle_fontsize : int or {'xx-small', 'x-small', 'small', 'medium', 'large', \\\n   254\t'x-large', 'xx-large'}, default: :rc:`legend.title_fontsize`\n   255\t    The font size of the legend's title.\n   256\t    Note: This cannot be combined with *title_fontproperties*. If you want\n   257\t    to set the fontsize alongside other font properties, use the *size*\n   258\t    parameter in *title_fontproperties*.\n   259\t\n   260\talignment : {'center', 'left', 'right'}, default: 'center'\n   261\t    The alignment of the legend title and the box of entries. The entries\n   262\t    are aligned as a single block, so that markers always lined up.\n   263\t\n   264\tborderpad : float, default: :rc:`legend.borderpad`\n   265\t    The fractional whitespace inside the legend border, in font-size units.\n   266\t\n   267\tlabelspacing : float, default: :rc:`legend.labelspacing`\n   268\t    The vertical space between the legend entries, in font-size units.\n   269\t\n   270\thandlelength : float, default: :rc:`legend.handlelength`\n   271\t    The length of the legend handles, in font-size units.\n   272\t\n   273\thandleheight : float, default: :rc:`legend.handleheight`\n   274\t    The height of the legend handles, in font-size units.\n   275\t\n   276\thandletextpad : float, default: :rc:`legend.handletextpad`\n   277\t    The pad between the legend handle and text, in font-size units.\n   278\t\n   279\tborderaxespad : float, default: :rc:`legend.borderaxespad`\n   280\t    The pad between the axes and legend border, in font-size units.\n   281\t\n   282\tcolumnspacing : float, default: :rc:`legend.columnspacing`\n   283\t    The spacing between columns, in font-size units.\n   284\t\n   285\thandler_map : dict or None\n   286\t    The custom dictionary mapping instances or types to a legend\n   287\t    handler. This *handler_map* updates the default handler map\n   288\t    found at `matplotlib.legend.Legend.get_legend_handler_map`.\n   289\t\"\"\")\n\n\n<span id='Legend'>\n   290\t\n   291\t\n   292\tclass Legend(Artist):\n   293\t    \"\"\"\n   294\t    Place a legend on the axes at location loc.\n   295\t    \"\"\"\n   296\t\n   297\t    # 'best' is only implemented for axes legends\n   298\t    codes = {'best': 0, **AnchoredOffsetbox.codes}\n   299\t    zorder = 5\n          # ...\n\n\n<span id='Legend.__init__'>\n   303\t\n   304\t    @_api.make_keyword_only(\"3.6\", \"loc\")\n   305\t    @_docstring.dedent_interpd\n   306\t    def __init__(\n   307\t        self, parent, handles, labels,\n   308\t        loc=None,\n   309\t        numpoints=None,      # number of points in the legend line\n   310\t        markerscale=None,    # relative size of legend markers vs. original\n   311\t        markerfirst=True,    # left/right ordering of legend marker and label\n   312\t        scatterpoints=None,  # number of scatter points\n   313\t        scatteryoffsets=None,\n   314\t        prop=None,           # properties for the legend texts\n   315\t        fontsize=None,       # keyword to set font size directly\n   316\t        labelcolor=None,     # keyword to set the text color\n   317\t\n   318\t        # spacing & pad defined as a fraction of the font-size\n   319\t        borderpad=None,      # whitespace inside the legend border\n   320\t        labelspacing=None,   # vertical space between the legend entries\n   321\t        handlelength=None,   # length of the legend handles\n   322\t        handleheight=None,   # height of the legend handles\n   323\t        handletextpad=None,  # pad between the legend handle and text\n   324\t        borderaxespad=None,  # pad between the axes and legend border\n   325\t        columnspacing=None,  # spacing between columns\n   326\t\n   327\t        ncols=1,     # number of columns\n   328\t        mode=None,  # horizontal distribution of columns: None or \"expand\"\n   329\t\n   330\t        fancybox=None,  # True: fancy box, False: rounded box, None: rcParam\n   331\t        shadow=None,\n   332\t        title=None,           # legend title\n   333\t        title_fontsize=None,  # legend title font size\n   334\t        framealpha=None,      # set frame alpha\n   335\t        edgecolor=None,       # frame patch edgecolor\n   336\t        facecolor=None,       # frame patch facecolor\n   337\t\n   338\t        bbox_to_anchor=None,  # bbox to which the legend will be anchored\n   339\t        bbox_transform=None,  # transform for the bbox\n   340\t        frameon=None,         # draw frame\n   341\t        handler_map=None,\n   342\t        title_fontproperties=None,  # properties for the legend title\n   343\t        alignment=\"center\",       # control the alignment within the legend box\n   344\t        *,\n   345\t        ncol=1  # synonym for ncols (backward compatibility)\n   346\t    ):\n   347\t        \"\"\"\n   348\t        Parameters\n   349\t        ----------\n   350\t        parent : `~matplotlib.axes.Axes` or `.Figure`\n   351\t            The artist that contains the legend.\n   352\t\n   353\t        handles : list of `.Artist`\n   354\t            A list of Artists (lines, patches) to be added to the legend.\n   355\t\n   356\t        labels : list of str\n   357\t            A list of labels to show next to the artists. The length of handles\n   358\t            and labels should be the same. If they are not, they are truncated\n   359\t            to the smaller of both lengths.\n   360\t\n   361\t        Other Parameters\n   362\t        ----------------\n   363\t        %(_legend_kw_doc)s\n   364\t\n   365\t        Notes\n   366\t        -----\n   367\t        Users can specify any arbitrary location for the legend using the\n   368\t        *bbox_to_anchor* keyword argument. *bbox_to_anchor* can be a\n   369\t        `.BboxBase` (or derived there from) or a tuple of 2 or 4 floats.\n   370\t        See `set_bbox_to_anchor` for more detail.\n   371\t\n   372\t        The legend location can be specified by setting *loc* with a tuple of\n   373\t        2 floats, which is interpreted as the lower-left corner of the legend\n   374\t        in the normalized axes coordinate.\n   375\t        \"\"\"\n   376\t        # local import only to avoid circularity\n   377\t        from matplotlib.axes import Axes\n   378\t        from matplotlib.figure import FigureBase\n   379\t\n   380\t        super().__init__()\n   381\t\n   382\t        if prop is None:\n   383\t            if fontsize is not None:\n   384\t                self.prop = FontProperties(size=fontsize)\n   385\t            else:\n   386\t                self.prop = FontProperties(\n   387\t                    size=mpl.rcParams[\"legend.fontsize\"])\n   388\t        else:\n   389\t            self.prop = FontProperties._from_any(prop)\n   390\t            if isinstance(prop, dict) and \"size\" not in prop:\n   391\t                self.prop.set_size(mpl.rcParams[\"legend.fontsize\"])\n   392\t\n   393\t        self._fontsize = self.prop.get_size_in_points()\n   394\t\n   395\t        self.texts = []\n   396\t        self.legendHandles = []\n   397\t        self._legend_title_box = None\n   398\t\n   399\t        #: A dictionary with the extra handler mappings for this Legend\n   400\t        #: instance.\n   401\t        self._custom_handler_map = handler_map\n   402\t\n   403\t        def val_or_rc(val, rc_name):\n   404\t            return val if val is not None else mpl.rcParams[rc_name]\n   405\t\n   406\t        self.numpoints = val_or_rc(numpoints, 'legend.numpoints')\n   407\t        self.markerscale = val_or_rc(markerscale, 'legend.markerscale')\n   408\t        self.scatterpoints = val_or_rc(scatterpoints, 'legend.scatterpoints')\n   409\t        self.borderpad = val_or_rc(borderpad, 'legend.borderpad')\n   410\t        self.labelspacing = val_or_rc(labelspacing, 'legend.labelspacing')\n   411\t        self.handlelength = val_or_rc(handlelength, 'legend.handlelength')\n   412\t        self.handleheight = val_or_rc(handleheight, 'legend.handleheight')\n   413\t        self.handletextpad = val_or_rc(handletextpad, 'legend.handletextpad')\n   414\t        self.borderaxespad = val_or_rc(borderaxespad, 'legend.borderaxespad')\n   415\t        self.columnspacing = val_or_rc(columnspacing, 'legend.columnspacing')\n   416\t        self.shadow = val_or_rc(shadow, 'legend.shadow')\n   417\t        # trim handles and labels if illegal label...\n   418\t        _lab, _hand = [], []\n   419\t        for label, handle in zip(labels, handles):\n   420\t            if isinstance(label, str) and label.startswith('_'):\n   421\t                _api.warn_external(f\"The label {label!r} of {handle!r} starts \"\n   422\t                                   \"with '_'. It is thus excluded from the \"\n   423\t                                   \"legend.\")\n   424\t            else:\n   425\t                _lab.append(label)\n   426\t                _hand.append(handle)\n   427\t        labels, handles = _lab, _hand\n   428\t\n   429\t        handles = list(handles)\n   430\t        if len(handles) < 2:\n   431\t            ncols = 1\n   432\t        self._ncols = ncols if ncols != 1 else ncol\n   433\t\n   434\t        if self.numpoints <= 0:\n   435\t            raise ValueError(\"numpoints must be > 0; it was %d\" % numpoints)\n   436\t\n   437\t        # introduce y-offset for handles of the scatter plot\n   438\t        if scatteryoffsets is None:\n   439\t            self._scatteryoffsets = np.array([3. / 8., 4. / 8., 2.5 / 8.])\n   440\t        else:\n   441\t            self._scatteryoffsets = np.asarray(scatteryoffsets)\n   442\t        reps = self.scatterpoints // len(self._scatteryoffsets) + 1\n   443\t        self._scatteryoffsets = np.tile(self._scatteryoffsets,\n   444\t                                        reps)[:self.scatterpoints]\n   445\t\n   446\t        # _legend_box is a VPacker instance that contains all\n   447\t        # legend items and will be initialized from _init_legend_box()\n   448\t        # method.\n   449\t        self._legend_box = None\n   450\t\n   451\t        if isinstance(parent, Axes):\n   452\t            self.isaxes = True\n   453\t            self.axes = parent\n   454\t            self.set_figure(parent.figure)\n   455\t        elif isinstance(parent, FigureBase):\n   456\t            self.isaxes = False\n   457\t            self.set_figure(parent)\n   458\t        else:\n   459\t            raise TypeError(\n   460\t                \"Legend needs either Axes or FigureBase as parent\"\n   461\t            )\n   462\t        self.parent = parent\n   463\t\n   464\t        self._loc_used_default = loc is None\n   465\t        if loc is None:\n   466\t            loc = mpl.rcParams[\"legend.loc\"]\n   467\t            if not self.isaxes and loc in [0, 'best']:\n   468\t                loc = 'upper right'\n   469\t        if isinstance(loc, str):\n   470\t            loc = _api.check_getitem(self.codes, loc=loc)\n   471\t        if not self.isaxes and loc == 0:\n   472\t            raise ValueError(\n   473\t                \"Automatic legend placement (loc='best') not implemented for \"\n   474\t                \"figure legend\")\n   475\t\n   476\t        self._mode = mode\n   477\t        self.set_bbox_to_anchor(bbox_to_anchor, bbox_transform)\n   478\t\n   479\t        # We use FancyBboxPatch to draw a legend frame. The location\n   480\t        # and size of the box will be updated during the drawing time.\n   481\t\n   482\t        if facecolor is None:\n   483\t            facecolor = mpl.rcParams[\"legend.facecolor\"]\n   484\t        if facecolor == 'inherit':\n   485\t            facecolor = mpl.rcParams[\"axes.facecolor\"]\n   486\t\n   487\t        if edgecolor is None:\n   488\t            edgecolor = mpl.rcParams[\"legend.edgecolor\"]\n   489\t        if edgecolor == 'inherit':\n   490\t            edgecolor = mpl.rcParams[\"axes.edgecolor\"]\n   491\t\n   492\t        if fancybox is None:\n   493\t            fancybox = mpl.rcParams[\"legend.fancybox\"]\n   494\t\n   495\t        self.legendPatch = FancyBboxPatch(\n   496\t            xy=(0, 0), width=1, height=1,\n   497\t            facecolor=facecolor, edgecolor=edgecolor,\n   498\t            # If shadow is used, default to alpha=1 (#8943).\n   499\t            alpha=(framealpha if framealpha is not None\n   500\t                   else 1 if shadow\n   501\t                   else mpl.rcParams[\"legend.framealpha\"]),\n   502\t            # The width and height of the legendPatch will be set (in draw())\n   503\t            # to the length that includes the padding. Thus we set pad=0 here.\n   504\t            boxstyle=(\"round,pad=0,rounding_size=0.2\" if fancybox\n   505\t                      else \"square,pad=0\"),\n   506\t            mutation_scale=self._fontsize,\n   507\t            snap=True,\n   508\t            visible=(frameon if frameon is not None\n   509\t                     else mpl.rcParams[\"legend.frameon\"])\n   510\t        )\n   511\t        self._set_artist_props(self.legendPatch)\n   512\t\n   513\t        _api.check_in_list([\"center\", \"left\", \"right\"], alignment=alignment)\n   514\t        self._alignment = alignment\n   515\t\n   516\t        # init with null renderer\n   517\t        self._init_legend_box(handles, labels, markerfirst)\n   518\t\n   519\t        tmp = self._loc_used_default\n   520\t        self._set_loc(loc)\n   521\t        self._loc_used_default = tmp  # ignore changes done by _set_loc\n   522\t\n   523\t        # figure out title font properties:\n   524\t        if title_fontsize is not None and title_fontproperties is not None:\n   525\t            raise ValueError(\n   526\t                \"title_fontsize and title_fontproperties can't be specified \"\n   527\t                \"at the same time. Only use one of them. \")\n   528\t        title_prop_fp = FontProperties._from_any(title_fontproperties)\n   529\t        if isinstance(title_fontproperties, dict):\n   530\t            if \"size\" not in title_fontproperties:\n   531\t                title_fontsize = mpl.rcParams[\"legend.title_fontsize\"]\n   532\t                title_prop_fp.set_size(title_fontsize)\n   533\t        elif title_fontsize is not None:\n   534\t            title_prop_fp.set_size(title_fontsize)\n   535\t        elif not isinstance(title_fontproperties, FontProperties):\n   536\t            title_fontsize = mpl.rcParams[\"legend.title_fontsize\"]\n   537\t            title_prop_fp.set_size(title_fontsize)\n   538\t\n   539\t        self.set_title(title, prop=title_prop_fp)\n   540\t        self._draggable = None\n   541\t\n   542\t        # set the text color\n   543\t\n   544\t        color_getters = {  # getter function depends on line or patch\n   545\t            'linecolor':       ['get_color',           'get_facecolor'],\n   546\t            'markerfacecolor': ['get_markerfacecolor', 'get_facecolor'],\n   547\t            'mfc':             ['get_markerfacecolor', 'get_facecolor'],\n   548\t            'markeredgecolor': ['get_markeredgecolor', 'get_edgecolor'],\n   549\t            'mec':             ['get_markeredgecolor', 'get_edgecolor'],\n   550\t        }\n   551\t        if labelcolor is None:\n   552\t            if mpl.rcParams['legend.labelcolor'] is not None:\n   553\t                labelcolor = mpl.rcParams['legend.labelcolor']\n   554\t            else:\n   555\t                labelcolor = mpl.rcParams['text.color']\n   556\t        if isinstance(labelcolor, str) and labelcolor in color_getters:\n   557\t            getter_names = color_getters[labelcolor]\n   558\t            for handle, text in zip(self.legendHandles, self.texts):\n   559\t                for getter_name in getter_names:\n   560\t                    try:\n   561\t                        color = getattr(handle, getter_name)()\n   562\t                        text.set_color(color)\n   563\t                        break\n   564\t                    except AttributeError:\n   565\t                        pass\n   566\t        elif isinstance(labelcolor, str) and labelcolor == 'none':\n   567\t            for text in self.texts:\n   568\t                text.set_color(labelcolor)\n   569\t        elif np.iterable(labelcolor):\n   570\t            for text, color in zip(self.texts,\n   571\t                                   itertools.cycle(\n   572\t                                       colors.to_rgba_array(labelcolor))):\n   573\t                text.set_color(color)\n   574\t        else:\n   575\t            raise ValueError(f\"Invalid labelcolor: {labelcolor!r}\")\n          # ...\n      # ...\n```\n\n</search_result>\n"
            }
          ],
          "response": {
            "id": "msg_01PJX4LnVcGeSHQV7SLFdMU2",
            "content": [
              {
                "text": "Based on the search results, I'll identify the relevant code sections that define and use the `_legend_kw_doc` documentation string. Here's my analysis:\n\nThe most relevant code section is in `lib/matplotlib/legend.py` where `_legend_kw_doc` is defined and used:",
                "type": "text"
              },
              {
                "id": "toolu_01NdgP7P8nkiB2SiQuwkEDwd",
                "input": {
                  "scratch_pad": "The search request is looking for the `_legend_kw_doc` documentation string. The main definition is found in lib/matplotlib/legend.py where it's used to document legend parameters. This documentation string is used by both Axes.legend() and Figure.legend() methods through docstring interpolation.\n\nThe key section is where _legend_kw_doc is defined and updated in the docstring.interpd dictionary, containing comprehensive documentation for all legend keyword parameters.",
                  "identified_spans": [
                    {
                      "file_path": "lib/matplotlib/legend.py",
                      "start_line": 97,
                      "end_line": 289
                    }
                  ]
                },
                "name": "Action",
                "type": "tool_use"
              }
            ],
            "model": "claude-3-5-sonnet-20241022",
            "role": "assistant",
            "stop_reason": "tool_use",
            "stop_sequence": null,
            "type": "message",
            "usage": {
              "cache_creation_input_tokens": 0,
              "cache_read_input_tokens": 0,
              "input_tokens": 12979,
              "output_tokens": 277
            }
          },
          "usage": {
            "completion_cost": 0.043092,
            "completion_tokens": 277,
            "prompt_tokens": 12979,
            "cached_tokens": 0
          }
        }
      },
      "parent_id": 7
    },
    {
      "node_id": 9,
      "action": {
        "scratch_pad": "1. I found that the docstring is defined in _legend_kw_doc template\n2. I need to add the draggable parameter documentation to this template\n3. Let me update the template with the new parameter",
        "command": "str_replace",
        "path": "lib/matplotlib/legend.py",
        "old_str": "handler_map : dict or None\n    The custom dictionary mapping instances or types to a legend\n    handler. This *handler_map* updates the default handler map\n    found at `matplotlib.legend.Legend.get_legend_handler_map`.\n\"\"\")",
        "new_str": "handler_map : dict or None\n    The custom dictionary mapping instances or types to a legend\n    handler. This *handler_map* updates the default handler map\n    found at `matplotlib.legend.Legend.get_legend_handler_map`.\n\ndraggable : bool, default: False\n    Enable mouse dragging support for the legend.\n\"\"\")",
        "action_args_class": "moatless.actions.edit.EditActionArguments"
      },
      "observation": {
        "message": "The file lib/matplotlib/legend.py has been edited. Here's the result of running `cat -n` on a snippet of lib/matplotlib/legend.py:\n   285\t    The pad between the axes and legend border, in font-size units.\n   286\t\n   287\tcolumnspacing : float, default: :rc:`legend.columnspacing`\n   288\t    The spacing between columns, in font-size units.\n   289\t\n   290\thandler_map : dict or None\n   291\t    The custom dictionary mapping instances or types to a legend\n   292\t    handler. This *handler_map* updates the default handler map\n   293\t    found at `matplotlib.legend.Legend.get_legend_handler_map`.\n   294\t\n   295\tdraggable : bool, default: False\n   296\t    Enable mouse dragging support for the legend.\n   297\t\"\"\")\n   298\t\n   299\t\n   300\tclass Legend(Artist):\nReview the changes and make sure they are as expected. Edit the file again if necessary.\n\nRunning 936 tests in the following files:\n * lib/matplotlib/tests/test_legend.py\n * lib/matplotlib/tests/test_contour.py\n * lib/matplotlib/tests/test_axes.py\n\n* FAILED lib/matplotlib/tests/test_contour.py test_contourf_log_extension>\n```\n\n    @image_comparison(['contour_log_extension.png'],\n                      remove_text=True, style='mpl20',\n                      tol=1.444)\n    def test_contourf_log_extension():\n        # Remove this line when this test image is regenerated.\n        plt.rcParams['pcolormesh.snap'] = False\n    \n        # Test that contourf with lognorm is extended correctly\n        fig, (ax1, ax2, ax3) = plt.subplots(1, 3, figsize=(10, 5))\n        fig.subplots_adjust(left=0.05, right=0.95)\n    \n        # make data set with large range e.g. between 1e-8 and 1e10\n        data_exp = np.linspace(-7.5, 9.5, 1200)\n        data = np.power(10, data_exp).reshape(30, 40)\n        # make manual levels e.g. between 1e-4 and 1e-6\n        levels_exp = np.arange(-4., 7.)\n        levels = np.power(10., levels_exp)\n    \n        # original data\n        c1 = ax1.contourf(data,\n                          norm=LogNorm(vmin=data.min(), vmax=data.max()))\n        # just show data in levels\n        c2 = ax2.contourf(data, levels=levels,\n                          norm=LogNorm(vmin=levels.min(), vmax=levels.max()),\n                          extend='neither')\n        # extend data from levels\n        c3 = ax3.contourf(data, levels=levels,\n                          norm=LogNorm(vmin=levels.min(), vmax=levels.max()),\n                          extend='both')\n        cb = plt.colorbar(c1, ax=ax1)\n        assert cb.ax.get_ylim() == (1e-8, 1e10)\n        cb = plt.colorbar(c2, ax=ax2)\n>       assert cb.ax.get_ylim() == (1e-4, 1e6)\nE       assert (9.9999999999...05, 1000000.0) == (0.0001, 1000000.0)\nE         \nE         At index 0 diff: 9.999999999999999e-05 != 0.0001\nE         Use -v to get more diff\n\nlib/matplotlib/tests/test_contour.py:316: AssertionError\n```\n\n\n935 passed. 1 failed. 0 errors.",
        "terminal": false,
        "expect_correction": false,
        "properties": {
          "flags": [
            "lines_not_in_context"
          ],
          "diff": "--- lib/matplotlib/legend.py\n+++ lib/matplotlib/legend.py\n@@ -286,6 +286,9 @@\n     The custom dictionary mapping instances or types to a legend\n     handler. This *handler_map* updates the default handler map\n     found at `matplotlib.legend.Legend.get_legend_handler_map`.\n+\n+draggable : bool, default: False\n+    Enable mouse dragging support for the legend.\n \"\"\")\n \n \n",
          "test_results": [
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_legend.py::test_legend_ordereddict",
              "file_path": "lib/matplotlib/tests/test_legend.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_legend.py::test_legend_auto1[png]",
              "file_path": "lib/matplotlib/tests/test_legend.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_legend.py::test_legend_auto1[pdf]",
              "file_path": "lib/matplotlib/tests/test_legend.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_legend.py::test_legend_auto2[png]",
              "file_path": "lib/matplotlib/tests/test_legend.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_legend.py::test_legend_auto2[pdf]",
              "file_path": "lib/matplotlib/tests/test_legend.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_legend.py::test_legend_auto3[png]",
              "file_path": "lib/matplotlib/tests/test_legend.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_legend.py::test_legend_auto3[pdf]",
              "file_path": "lib/matplotlib/tests/test_legend.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_legend.py::test_various_labels[png]",
              "file_path": "lib/matplotlib/tests/test_legend.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_legend.py::test_various_labels[pdf]",
              "file_path": "lib/matplotlib/tests/test_legend.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_legend.py::test_legend_label_with_leading_underscore",
              "file_path": "lib/matplotlib/tests/test_legend.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_legend.py::test_labels_first[png]",
              "file_path": "lib/matplotlib/tests/test_legend.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_legend.py::test_multiple_keys[png]",
              "file_path": "lib/matplotlib/tests/test_legend.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_legend.py::test_alpha_rgba[png]",
              "file_path": "lib/matplotlib/tests/test_legend.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_legend.py::test_alpha_rcparam[png]",
              "file_path": "lib/matplotlib/tests/test_legend.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_legend.py::test_fancy[png]",
              "file_path": "lib/matplotlib/tests/test_legend.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_legend.py::test_fancy[pdf]",
              "file_path": "lib/matplotlib/tests/test_legend.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_legend.py::test_framealpha[png]",
              "file_path": "lib/matplotlib/tests/test_legend.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_legend.py::test_framealpha[pdf]",
              "file_path": "lib/matplotlib/tests/test_legend.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_legend.py::test_rc[png]",
              "file_path": "lib/matplotlib/tests/test_legend.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_legend.py::test_rc[pdf]",
              "file_path": "lib/matplotlib/tests/test_legend.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_legend.py::test_legend_expand[png]",
              "file_path": "lib/matplotlib/tests/test_legend.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_legend.py::test_legend_expand[pdf]",
              "file_path": "lib/matplotlib/tests/test_legend.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_legend.py::test_hatching[png]",
              "file_path": "lib/matplotlib/tests/test_legend.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_legend.py::test_hatching[pdf]",
              "file_path": "lib/matplotlib/tests/test_legend.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_legend.py::test_legend_remove",
              "file_path": "lib/matplotlib/tests/test_legend.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_legend.py::TestLegendFunction::test_legend_no_args",
              "file_path": "lib/matplotlib/tests/test_legend.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_legend.py::TestLegendFunction::test_legend_positional_handles_labels",
              "file_path": "lib/matplotlib/tests/test_legend.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_legend.py::TestLegendFunction::test_legend_positional_handles_only",
              "file_path": "lib/matplotlib/tests/test_legend.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_legend.py::TestLegendFunction::test_legend_positional_labels_only",
              "file_path": "lib/matplotlib/tests/test_legend.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_legend.py::TestLegendFunction::test_legend_three_args",
              "file_path": "lib/matplotlib/tests/test_legend.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_legend.py::TestLegendFunction::test_legend_handler_map",
              "file_path": "lib/matplotlib/tests/test_legend.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_legend.py::TestLegendFunction::test_legend_kwargs_handles_only",
              "file_path": "lib/matplotlib/tests/test_legend.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_legend.py::TestLegendFunction::test_legend_kwargs_labels_only",
              "file_path": "lib/matplotlib/tests/test_legend.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_legend.py::TestLegendFunction::test_legend_kwargs_handles_labels",
              "file_path": "lib/matplotlib/tests/test_legend.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_legend.py::TestLegendFunction::test_warn_mixed_args_and_kwargs",
              "file_path": "lib/matplotlib/tests/test_legend.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_legend.py::TestLegendFunction::test_parasite",
              "file_path": "lib/matplotlib/tests/test_legend.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_legend.py::TestLegendFigureFunction::test_legend_handle_label",
              "file_path": "lib/matplotlib/tests/test_legend.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_legend.py::TestLegendFigureFunction::test_legend_no_args",
              "file_path": "lib/matplotlib/tests/test_legend.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_legend.py::TestLegendFigureFunction::test_legend_label_arg",
              "file_path": "lib/matplotlib/tests/test_legend.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_legend.py::TestLegendFigureFunction::test_legend_label_three_args",
              "file_path": "lib/matplotlib/tests/test_legend.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_legend.py::TestLegendFigureFunction::test_legend_label_three_args_pluskw",
              "file_path": "lib/matplotlib/tests/test_legend.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_legend.py::TestLegendFigureFunction::test_legend_kw_args",
              "file_path": "lib/matplotlib/tests/test_legend.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_legend.py::TestLegendFigureFunction::test_warn_args_kwargs",
              "file_path": "lib/matplotlib/tests/test_legend.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_legend.py::test_legend_stackplot[png]",
              "file_path": "lib/matplotlib/tests/test_legend.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_legend.py::test_cross_figure_patch_legend",
              "file_path": "lib/matplotlib/tests/test_legend.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_legend.py::test_nanscatter",
              "file_path": "lib/matplotlib/tests/test_legend.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_legend.py::test_legend_repeatcheckok",
              "file_path": "lib/matplotlib/tests/test_legend.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_legend.py::test_not_covering_scatter[png]",
              "file_path": "lib/matplotlib/tests/test_legend.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_legend.py::test_not_covering_scatter_transform[png]",
              "file_path": "lib/matplotlib/tests/test_legend.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_legend.py::test_linecollection_scaled_dashes",
              "file_path": "lib/matplotlib/tests/test_legend.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_legend.py::test_handler_numpoints",
              "file_path": "lib/matplotlib/tests/test_legend.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_legend.py::test_text_nohandler_warning",
              "file_path": "lib/matplotlib/tests/test_legend.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_legend.py::test_empty_bar_chart_with_legend",
              "file_path": "lib/matplotlib/tests/test_legend.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_legend.py::test_shadow_framealpha",
              "file_path": "lib/matplotlib/tests/test_legend.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_legend.py::test_legend_title_empty",
              "file_path": "lib/matplotlib/tests/test_legend.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_legend.py::test_legend_proper_window_extent",
              "file_path": "lib/matplotlib/tests/test_legend.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_legend.py::test_window_extent_cached_renderer",
              "file_path": "lib/matplotlib/tests/test_legend.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_legend.py::test_legend_title_fontprop_fontsize",
              "file_path": "lib/matplotlib/tests/test_legend.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_legend.py::test_legend_alignment[center]",
              "file_path": "lib/matplotlib/tests/test_legend.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_legend.py::test_legend_alignment[left]",
              "file_path": "lib/matplotlib/tests/test_legend.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_legend.py::test_legend_alignment[right]",
              "file_path": "lib/matplotlib/tests/test_legend.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_legend.py::test_legend_set_alignment[center]",
              "file_path": "lib/matplotlib/tests/test_legend.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_legend.py::test_legend_set_alignment[left]",
              "file_path": "lib/matplotlib/tests/test_legend.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_legend.py::test_legend_set_alignment[right]",
              "file_path": "lib/matplotlib/tests/test_legend.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_legend.py::test_legend_labelcolor_single[red]",
              "file_path": "lib/matplotlib/tests/test_legend.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_legend.py::test_legend_labelcolor_single[none]",
              "file_path": "lib/matplotlib/tests/test_legend.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_legend.py::test_legend_labelcolor_single[color2]",
              "file_path": "lib/matplotlib/tests/test_legend.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_legend.py::test_legend_labelcolor_list",
              "file_path": "lib/matplotlib/tests/test_legend.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_legend.py::test_legend_labelcolor_linecolor",
              "file_path": "lib/matplotlib/tests/test_legend.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_legend.py::test_legend_labelcolor_markeredgecolor",
              "file_path": "lib/matplotlib/tests/test_legend.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_legend.py::test_legend_labelcolor_markerfacecolor",
              "file_path": "lib/matplotlib/tests/test_legend.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_legend.py::test_legend_labelcolor_rcparam_single[red]",
              "file_path": "lib/matplotlib/tests/test_legend.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_legend.py::test_legend_labelcolor_rcparam_single[none]",
              "file_path": "lib/matplotlib/tests/test_legend.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_legend.py::test_legend_labelcolor_rcparam_single[color2]",
              "file_path": "lib/matplotlib/tests/test_legend.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_legend.py::test_legend_labelcolor_rcparam_linecolor",
              "file_path": "lib/matplotlib/tests/test_legend.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_legend.py::test_legend_labelcolor_rcparam_markeredgecolor",
              "file_path": "lib/matplotlib/tests/test_legend.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_legend.py::test_legend_labelcolor_rcparam_markeredgecolor_short",
              "file_path": "lib/matplotlib/tests/test_legend.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_legend.py::test_legend_labelcolor_rcparam_markerfacecolor",
              "file_path": "lib/matplotlib/tests/test_legend.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_legend.py::test_legend_labelcolor_rcparam_markerfacecolor_short",
              "file_path": "lib/matplotlib/tests/test_legend.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_legend.py::test_get_set_draggable",
              "file_path": "lib/matplotlib/tests/test_legend.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_legend.py::test_alpha_handles",
              "file_path": "lib/matplotlib/tests/test_legend.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_legend.py::test_usetex_no_warn",
              "file_path": "lib/matplotlib/tests/test_legend.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_legend.py::test_warn_big_data_best_loc",
              "file_path": "lib/matplotlib/tests/test_legend.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_legend.py::test_no_warn_big_data_when_loc_specified",
              "file_path": "lib/matplotlib/tests/test_legend.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_legend.py::test_plot_multiple_input_multiple_label[label_array0]",
              "file_path": "lib/matplotlib/tests/test_legend.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_legend.py::test_plot_multiple_input_multiple_label[label_array1]",
              "file_path": "lib/matplotlib/tests/test_legend.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_legend.py::test_plot_multiple_input_multiple_label[label_array2]",
              "file_path": "lib/matplotlib/tests/test_legend.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_legend.py::test_plot_multiple_input_single_label[one]",
              "file_path": "lib/matplotlib/tests/test_legend.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_legend.py::test_plot_multiple_input_single_label[1]",
              "file_path": "lib/matplotlib/tests/test_legend.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_legend.py::test_plot_multiple_input_single_label[int]",
              "file_path": "lib/matplotlib/tests/test_legend.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_legend.py::test_plot_single_input_multiple_label[label_array0]",
              "file_path": "lib/matplotlib/tests/test_legend.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_legend.py::test_plot_single_input_multiple_label[label_array1]",
              "file_path": "lib/matplotlib/tests/test_legend.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_legend.py::test_plot_single_input_multiple_label[label_array2]",
              "file_path": "lib/matplotlib/tests/test_legend.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_legend.py::test_plot_multiple_label_incorrect_length_exception",
              "file_path": "lib/matplotlib/tests/test_legend.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_legend.py::test_legend_face_edgecolor",
              "file_path": "lib/matplotlib/tests/test_legend.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_legend.py::test_legend_text_axes",
              "file_path": "lib/matplotlib/tests/test_legend.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_legend.py::test_handlerline2d",
              "file_path": "lib/matplotlib/tests/test_legend.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_legend.py::test_subfigure_legend",
              "file_path": "lib/matplotlib/tests/test_legend.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_legend.py::test_setting_alpha_keeps_polycollection_color",
              "file_path": "lib/matplotlib/tests/test_legend.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_legend.py::test_legend_markers_from_line2d",
              "file_path": "lib/matplotlib/tests/test_legend.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_legend.py::test_ncol_ncols[png]",
              "file_path": "lib/matplotlib/tests/test_legend.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_legend.py::test_ncol_ncols[pdf]",
              "file_path": "lib/matplotlib/tests/test_legend.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "SKIPPED",
              "message": "../opt/miniconda3/envs/testbed/lib/python3.11/contextlib.py:81: Cannot compare svg files because Inkscape is not installed",
              "file_path": "../opt/miniconda3/envs/testbed/lib/python3.11/contextlib.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "SKIPPED",
              "message": "lib/matplotlib/testing/compare.py:285: Don't know how to convert .svg files to png",
              "file_path": "lib/matplotlib/testing/compare.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_contour.py::test_contour_shape_1d_valid",
              "file_path": "lib/matplotlib/tests/test_contour.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_contour.py::test_contour_shape_2d_valid",
              "file_path": "lib/matplotlib/tests/test_contour.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_contour.py::test_contour_shape_error[args0-Length",
              "file_path": "lib/matplotlib/tests/test_contour.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_contour.py::test_contour_shape_error[args1-Length",
              "file_path": "lib/matplotlib/tests/test_contour.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_contour.py::test_contour_shape_error[args2-Number",
              "file_path": "lib/matplotlib/tests/test_contour.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_contour.py::test_contour_shape_error[args3-Number",
              "file_path": "lib/matplotlib/tests/test_contour.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_contour.py::test_contour_shape_error[args4-Shapes",
              "file_path": "lib/matplotlib/tests/test_contour.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_contour.py::test_contour_shape_error[args5-Shapes",
              "file_path": "lib/matplotlib/tests/test_contour.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_contour.py::test_contour_shape_error[args6-Inputs",
              "file_path": "lib/matplotlib/tests/test_contour.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_contour.py::test_contour_shape_error[args7-Input",
              "file_path": "lib/matplotlib/tests/test_contour.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_contour.py::test_contour_shape_error[args8-Input",
              "file_path": "lib/matplotlib/tests/test_contour.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_contour.py::test_contour_shape_error[args9-Input",
              "file_path": "lib/matplotlib/tests/test_contour.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_contour.py::test_contour_empty_levels",
              "file_path": "lib/matplotlib/tests/test_contour.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_contour.py::test_contour_Nlevels",
              "file_path": "lib/matplotlib/tests/test_contour.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_contour.py::test_contour_badlevel_fmt",
              "file_path": "lib/matplotlib/tests/test_contour.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_contour.py::test_contour_uniform_z",
              "file_path": "lib/matplotlib/tests/test_contour.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_contour.py::test_contour_manual_labels[png]",
              "file_path": "lib/matplotlib/tests/test_contour.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_contour.py::test_contour_manual_labels[pdf]",
              "file_path": "lib/matplotlib/tests/test_contour.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_contour.py::test_given_colors_levels_and_extends[png]",
              "file_path": "lib/matplotlib/tests/test_contour.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_contour.py::test_contour_datetime_axis[png]",
              "file_path": "lib/matplotlib/tests/test_contour.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_contour.py::test_labels[png]",
              "file_path": "lib/matplotlib/tests/test_contour.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_contour.py::test_corner_mask[png]",
              "file_path": "lib/matplotlib/tests/test_contour.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_contour.py::test_contourf_decreasing_levels",
              "file_path": "lib/matplotlib/tests/test_contour.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_contour.py::test_contourf_symmetric_locator",
              "file_path": "lib/matplotlib/tests/test_contour.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_contour.py::test_circular_contour_warning",
              "file_path": "lib/matplotlib/tests/test_contour.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_contour.py::test_clabel_zorder[True-123-1234]",
              "file_path": "lib/matplotlib/tests/test_contour.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_contour.py::test_clabel_zorder[False-123-1234]",
              "file_path": "lib/matplotlib/tests/test_contour.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_contour.py::test_clabel_zorder[True-123-None]",
              "file_path": "lib/matplotlib/tests/test_contour.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_contour.py::test_clabel_zorder[False-123-None]",
              "file_path": "lib/matplotlib/tests/test_contour.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_contour.py::test_contour_addlines[png]",
              "file_path": "lib/matplotlib/tests/test_contour.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_contour.py::test_contour_uneven[png]",
              "file_path": "lib/matplotlib/tests/test_contour.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_contour.py::test_contour_linewidth[1.23-None-None-1.23]",
              "file_path": "lib/matplotlib/tests/test_contour.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_contour.py::test_contour_linewidth[1.23-4.24-None-4.24]",
              "file_path": "lib/matplotlib/tests/test_contour.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_contour.py::test_contour_linewidth[1.23-4.24-5.02-5.02]",
              "file_path": "lib/matplotlib/tests/test_contour.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_contour.py::test_label_nonagg",
              "file_path": "lib/matplotlib/tests/test_contour.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_contour.py::test_contour_closed_line_loop[png]",
              "file_path": "lib/matplotlib/tests/test_contour.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_contour.py::test_quadcontourset_reuse",
              "file_path": "lib/matplotlib/tests/test_contour.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_contour.py::test_contour_manual[png]",
              "file_path": "lib/matplotlib/tests/test_contour.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_contour.py::test_contour_line_start_on_corner_edge[png]",
              "file_path": "lib/matplotlib/tests/test_contour.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_contour.py::test_find_nearest_contour",
              "file_path": "lib/matplotlib/tests/test_contour.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_contour.py::test_find_nearest_contour_no_filled",
              "file_path": "lib/matplotlib/tests/test_contour.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_contour.py::test_contour_autolabel_beyond_powerlimits",
              "file_path": "lib/matplotlib/tests/test_contour.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_contour.py::test_contourf_legend_elements",
              "file_path": "lib/matplotlib/tests/test_contour.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_contour.py::test_contour_legend_elements",
              "file_path": "lib/matplotlib/tests/test_contour.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_contour.py::test_algorithm_name[mpl2005-Mpl2005ContourGenerator]",
              "file_path": "lib/matplotlib/tests/test_contour.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_contour.py::test_algorithm_name[mpl2014-Mpl2014ContourGenerator]",
              "file_path": "lib/matplotlib/tests/test_contour.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_contour.py::test_algorithm_name[serial-SerialContourGenerator]",
              "file_path": "lib/matplotlib/tests/test_contour.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_contour.py::test_algorithm_name[threaded-ThreadedContourGenerator]",
              "file_path": "lib/matplotlib/tests/test_contour.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_contour.py::test_algorithm_name[invalid-None]",
              "file_path": "lib/matplotlib/tests/test_contour.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_contour.py::test_algorithm_supports_corner_mask[mpl2005]",
              "file_path": "lib/matplotlib/tests/test_contour.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_contour.py::test_algorithm_supports_corner_mask[mpl2014]",
              "file_path": "lib/matplotlib/tests/test_contour.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_contour.py::test_algorithm_supports_corner_mask[serial]",
              "file_path": "lib/matplotlib/tests/test_contour.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_contour.py::test_algorithm_supports_corner_mask[threaded]",
              "file_path": "lib/matplotlib/tests/test_contour.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_contour.py::test_all_algorithms[png]",
              "file_path": "lib/matplotlib/tests/test_contour.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_contour.py::test_subfigure_clabel",
              "file_path": "lib/matplotlib/tests/test_contour.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_contour.py::test_linestyles[solid]",
              "file_path": "lib/matplotlib/tests/test_contour.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_contour.py::test_linestyles[dashed]",
              "file_path": "lib/matplotlib/tests/test_contour.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_contour.py::test_linestyles[dashdot]",
              "file_path": "lib/matplotlib/tests/test_contour.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_contour.py::test_linestyles[dotted]",
              "file_path": "lib/matplotlib/tests/test_contour.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_contour.py::test_negative_linestyles[solid]",
              "file_path": "lib/matplotlib/tests/test_contour.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_contour.py::test_negative_linestyles[dashed]",
              "file_path": "lib/matplotlib/tests/test_contour.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_contour.py::test_negative_linestyles[dashdot]",
              "file_path": "lib/matplotlib/tests/test_contour.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_contour.py::test_negative_linestyles[dotted]",
              "file_path": "lib/matplotlib/tests/test_contour.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "SKIPPED",
              "message": "../opt/miniconda3/envs/testbed/lib/python3.11/contextlib.py:81: Cannot compare svg files because Inkscape is not installed",
              "file_path": "../opt/miniconda3/envs/testbed/lib/python3.11/contextlib.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "FAILED",
              "message": "\n    @image_comparison(['contour_log_extension.png'],\n                      remove_text=True, style='mpl20',\n                      tol=1.444)\n    def test_contourf_log_extension():\n        # Remove this line when this test image is regenerated.\n        plt.rcParams['pcolormesh.snap'] = False\n    \n        # Test that contourf with lognorm is extended correctly\n        fig, (ax1, ax2, ax3) = plt.subplots(1, 3, figsize=(10, 5))\n        fig.subplots_adjust(left=0.05, right=0.95)\n    \n        # make data set with large range e.g. between 1e-8 and 1e10\n        data_exp = np.linspace(-7.5, 9.5, 1200)\n        data = np.power(10, data_exp).reshape(30, 40)\n        # make manual levels e.g. between 1e-4 and 1e-6\n        levels_exp = np.arange(-4., 7.)\n        levels = np.power(10., levels_exp)\n    \n        # original data\n        c1 = ax1.contourf(data,\n                          norm=LogNorm(vmin=data.min(), vmax=data.max()))\n        # just show data in levels\n        c2 = ax2.contourf(data, levels=levels,\n                          norm=LogNorm(vmin=levels.min(), vmax=levels.max()),\n                          extend='neither')\n        # extend data from levels\n        c3 = ax3.contourf(data, levels=levels,\n                          norm=LogNorm(vmin=levels.min(), vmax=levels.max()),\n                          extend='both')\n        cb = plt.colorbar(c1, ax=ax1)\n        assert cb.ax.get_ylim() == (1e-8, 1e10)\n        cb = plt.colorbar(c2, ax=ax2)\n>       assert cb.ax.get_ylim() == (1e-4, 1e6)\nE       assert (9.9999999999...05, 1000000.0) == (0.0001, 1000000.0)\nE         \nE         At index 0 diff: 9.999999999999999e-05 != 0.0001\nE         Use -v to get more diff\n\nlib/matplotlib/tests/test_contour.py:316: AssertionError",
              "file_path": "lib/matplotlib/tests/test_contour.py",
              "span_id": "test_contourf_log_extension",
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_invisible_axes[png]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_get_labels",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_repr",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_label_loc_vertical[png]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_label_loc_vertical[pdf]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_label_loc_horizontal[png]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_label_loc_horizontal[pdf]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_label_loc_rc[png]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_label_loc_rc[pdf]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_label_shift",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_acorr[png]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_spy[png]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_spy_invalid_kwargs",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_matshow[png]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_formatter_ticker[png]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_formatter_ticker[pdf]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_funcformatter_auto_formatter",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_strmethodformatter_auto_formatter",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_twin_axis_locators_formatters[png]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_twin_axis_locators_formatters[pdf]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_twinx_cla",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_twin_logscale[png-x]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_twin_logscale[png-y]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_twinx_axis_scales[png]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_twin_inherit_autoscale_setting",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_inverted_cla",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_subclass_clear_cla",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_cla_not_redefined_internally",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_minorticks_on_rcParams_both[png]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_autoscale_tiny_range[png]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_autoscale_tiny_range[pdf]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_autoscale_tight",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_autoscale_log_shared",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_use_sticky_edges",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_sticky_shared_axes[png]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_basic_annotate[png]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_basic_annotate[pdf]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_arrow_simple[png]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_arrow_empty",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_arrow_in_view",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_annotate_default_arrow",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_annotate_signature",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_fill_units[png]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_plot_format_kwarg_redundant",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_errorbar_dashes[png]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_single_point[png]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_single_point[pdf]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_single_date[png]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_shaped_data[png]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_structured_data",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_aitoff_proj[png]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_axvspan_epoch[png]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_axvspan_epoch[pdf]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_axhspan_epoch[png]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_axhspan_epoch[pdf]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_hexbin_extent[png]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_hexbin_empty[png]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_hexbin_pickable",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_hexbin_log[png]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_hexbin_linear[png]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_hexbin_log_clim",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_inverted_limits",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_nonfinite_limits[png]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_nonfinite_limits[pdf]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_limits_empty_data[png-scatter]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_limits_empty_data[png-plot]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_limits_empty_data[png-fill_between]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_imshow[png]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_imshow[pdf]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_imshow_clip[png]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_imshow_clip[pdf]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_imshow_norm_vminvmax",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_polycollection_joinstyle[png]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_polycollection_joinstyle[pdf]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_fill_between_input[2d_x_input]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_fill_between_input[2d_y1_input]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_fill_between_input[2d_y2_input]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_fill_betweenx_input[2d_y_input]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_fill_betweenx_input[2d_x1_input]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_fill_betweenx_input[2d_x2_input]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_fill_between_interpolate[png]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_fill_between_interpolate[pdf]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_fill_between_interpolate_decreasing[png]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_fill_between_interpolate_decreasing[pdf]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_fill_between_interpolate_nan[png]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_fill_between_interpolate_nan[pdf]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_symlog[pdf]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_symlog2[pdf]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_pcolorargs_5205",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_pcolormesh[png]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_pcolormesh[pdf]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_pcolormesh_small[eps]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_pcolormesh_alpha[png]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_pcolormesh_alpha[pdf]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_pcolormesh_datetime_axis[png]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_pcolor_datetime_axis[png]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_pcolorargs",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_pcolornearest[png]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_pcolornearestunits[png]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_pcolorflaterror",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_pcolorauto[png-False]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_pcolorauto[png-True]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_canonical[png]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_canonical[pdf]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_arc_angles[png]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_arc_ellipse[png]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_arc_ellipse[pdf]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_marker_as_markerstyle",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_markevery[png]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_markevery[pdf]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_markevery_line[png]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_markevery_line[pdf]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_markevery_linear_scales[png]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_markevery_linear_scales[pdf]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_markevery_linear_scales_zoomed[png]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_markevery_linear_scales_zoomed[pdf]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_markevery_log_scales[png]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_markevery_log_scales[pdf]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_markevery_polar[png]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_markevery_polar[pdf]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_markevery_linear_scales_nans[png]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_markevery_linear_scales_nans[pdf]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_marker_edges[png]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_marker_edges[pdf]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_bar_tick_label_single[png]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_nan_bar_values",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_bar_ticklabel_fail",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_bar_tick_label_multiple[png]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_bar_tick_label_multiple_old_alignment[png]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_bar_decimal_center[png]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_barh_decimal_center[png]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_bar_decimal_width[png]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_barh_decimal_height[png]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_bar_color_none_alpha",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_bar_edgecolor_none_alpha",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_barh_tick_label[png]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_bar_timedelta",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_boxplot_dates_pandas",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_boxplot_capwidths",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_pcolor_regression",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_bar_pandas",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_bar_pandas_indexed",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_bar_hatches[png]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_bar_hatches[pdf]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_bar_labels[x-1-x-expected_labels0-x]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_bar_labels[x1-width1-label1-expected_labels1-_nolegend_]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_bar_labels[x2-width2-label2-expected_labels2-_nolegend_]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_bar_labels[x3-width3-bars-expected_labels3-bars]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_bar_labels_length",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_pandas_minimal_plot",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_hist_log[png]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_hist_log[pdf]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_hist_log_2[png]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_hist_log_barstacked",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_hist_bar_empty[png]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_hist_float16",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_hist_step_empty[png]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_hist_step_filled[png]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_hist_density[png]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_hist_unequal_bins_density",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_hist_datetime_datasets",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_hist_datetime_datasets_bins[date2num]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_hist_datetime_datasets_bins[datetime.datetime]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_hist_datetime_datasets_bins[np.datetime64]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_hist_with_empty_input[data0-1]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_hist_with_empty_input[data1-1]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_hist_with_empty_input[data2-2]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_hist_zorder[bar-1]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_hist_zorder[step-2]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_hist_zorder[stepfilled-1]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_stairs[png]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_stairs_fill[png]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_stairs_update[png]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_stairs_baseline_0[png]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_stairs_empty",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_stairs_invalid_nan",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_stairs_invalid_mismatch",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_stairs_invalid_update",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_stairs_invalid_update2",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_stairs_options[png]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_stairs_datetime[png]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_stairs_edge_handling[png]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_contour_hatching[png]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_contour_hatching[pdf]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_contour_colorbar[png]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_contour_colorbar[pdf]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_hist2d[png]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_hist2d[pdf]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_hist2d_transpose[png]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_hist2d_transpose[pdf]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_hist2d_density",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::TestScatter::test_scatter_plot[png]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::TestScatter::test_scatter_plot[pdf]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::TestScatter::test_scatter_marker[png]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::TestScatter::test_scatter_2D[png]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::TestScatter::test_scatter_decimal[png]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::TestScatter::test_scatter_color",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::TestScatter::test_scatter_color_warning[kwargs0]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::TestScatter::test_scatter_color_warning[kwargs1]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::TestScatter::test_scatter_color_warning[kwargs2]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::TestScatter::test_scatter_color_warning[kwargs3]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::TestScatter::test_scatter_unfilled",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::TestScatter::test_scatter_unfillable",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::TestScatter::test_scatter_size_arg_size",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::TestScatter::test_scatter_edgecolor_RGB",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::TestScatter::test_scatter_invalid_color[png]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::TestScatter::test_scatter_no_invalid_color[png]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::TestScatter::test_scatter_norm_vminvmax",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::TestScatter::test_scatter_single_point[png]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::TestScatter::test_scatter_different_shapes[png]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::TestScatter::test_scatter_c[0.5-None]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::TestScatter::test_scatter_c[c_case1-conversion]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::TestScatter::test_scatter_c[red-None]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::TestScatter::test_scatter_c[none-None]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::TestScatter::test_scatter_c[None-None]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::TestScatter::test_scatter_c[c_case5-None]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::TestScatter::test_scatter_c[jaune-conversion]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::TestScatter::test_scatter_c[c_case7-conversion]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::TestScatter::test_scatter_c[c_case8-conversion]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::TestScatter::test_scatter_c[c_case9-None]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::TestScatter::test_scatter_c[c_case10-None]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::TestScatter::test_scatter_c[c_case11-shape]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::TestScatter::test_scatter_c[c_case12-None]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::TestScatter::test_scatter_c[c_case13-None]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::TestScatter::test_scatter_c[c_case14-conversion]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::TestScatter::test_scatter_c[c_case15-None]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::TestScatter::test_scatter_c[c_case16-shape]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::TestScatter::test_scatter_c[c_case17-None]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::TestScatter::test_scatter_c[c_case18-shape]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::TestScatter::test_scatter_c[c_case19-None]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::TestScatter::test_scatter_c[c_case20-shape]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::TestScatter::test_scatter_c[c_case21-None]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::TestScatter::test_scatter_c[c_case22-shape]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::TestScatter::test_scatter_c[c_case23-None]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::TestScatter::test_scatter_c[c_case24-shape]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::TestScatter::test_scatter_c[c_case25-None]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::TestScatter::test_scatter_c[c_case26-shape]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::TestScatter::test_scatter_c[c_case27-conversion]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::TestScatter::test_scatter_c[c_case28-conversion]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::TestScatter::test_scatter_c[c_case29-conversion]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::TestScatter::test_scatter_single_color_c[png]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::TestScatter::test_scatter_linewidths",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_parse_scatter_color_args[params0-expected_result0]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_parse_scatter_color_args[params1-expected_result1]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_parse_scatter_color_args[params2-expected_result2]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_parse_scatter_color_args[params3-expected_result3]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_parse_scatter_color_args[params4-expected_result4]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_parse_scatter_color_args_edgecolors[kwargs0-None]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_parse_scatter_color_args_edgecolors[kwargs1-None]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_parse_scatter_color_args_edgecolors[kwargs2-r]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_parse_scatter_color_args_edgecolors[kwargs3-expected_edgecolors3]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_parse_scatter_color_args_edgecolors[kwargs4-r]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_parse_scatter_color_args_edgecolors[kwargs5-face]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_parse_scatter_color_args_edgecolors[kwargs6-none]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_parse_scatter_color_args_edgecolors[kwargs7-r]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_parse_scatter_color_args_edgecolors[kwargs8-r]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_parse_scatter_color_args_edgecolors[kwargs9-r]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_parse_scatter_color_args_edgecolors[kwargs10-g]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_parse_scatter_color_args_error",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_as_mpl_axes_api",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_pyplot_axes",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_log_scales",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_log_scales_no_data",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_log_scales_invalid",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_stackplot[png]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_stackplot[pdf]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_stackplot_baseline[png]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_stackplot_baseline[pdf]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_bxp_baseline[png]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_bxp_rangewhis[png]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_bxp_percentilewhis[png]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_bxp_with_xlabels[png]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_bxp_horizontal[png]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_bxp_with_ylabels[png]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_bxp_patchartist[png]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_bxp_custompatchartist[png]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_bxp_customoutlier[png]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_bxp_showcustommean[png]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_bxp_custombox[png]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_bxp_custommedian[png]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_bxp_customcap[png]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_bxp_customwhisker[png]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_bxp_shownotches[png]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_bxp_nocaps[png]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_bxp_nobox[png]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_bxp_no_flier_stats[png]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_bxp_showmean[png]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_bxp_showmeanasline[png]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_bxp_scalarwidth[png]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_bxp_customwidths[png]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_bxp_custompositions[png]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_bxp_bad_widths",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_bxp_bad_positions",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_bxp_custom_capwidths[png]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_bxp_custom_capwidth[png]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_bxp_bad_capwidths",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_boxplot[png]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_boxplot[pdf]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_boxplot_custom_capwidths[png]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_boxplot_sym2[png]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_boxplot_sym[png]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_boxplot_autorange_whiskers[png]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_boxplot_rc_parameters[png]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_boxplot_rc_parameters[pdf]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_boxplot_with_CIarray[png]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_boxplot_no_weird_whisker[png]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_boxplot_bad_medians",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_boxplot_bad_ci",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_boxplot_zorder",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_boxplot_marker_behavior",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_boxplot_mod_artist_after_plotting[png]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_vert_violinplot_baseline[png]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_vert_violinplot_showmeans[png]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_vert_violinplot_showextrema[png]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_vert_violinplot_showmedians[png]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_vert_violinplot_showall[png]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_vert_violinplot_custompoints_10[png]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_vert_violinplot_custompoints_200[png]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_horiz_violinplot_baseline[png]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_horiz_violinplot_showmedians[png]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_horiz_violinplot_showmeans[png]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_horiz_violinplot_showextrema[png]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_horiz_violinplot_showall[png]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_horiz_violinplot_custompoints_10[png]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_horiz_violinplot_custompoints_200[png]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_violinplot_bad_positions",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_violinplot_bad_widths",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_violinplot_bad_quantiles",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_violinplot_outofrange_quantiles",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_violinplot_single_list_quantiles[png]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_violinplot_pandas_series[png]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_manage_xticks",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_boxplot_not_single",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_tick_space_size_0",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_errorbar[png]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_errorbar[pdf]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_errorbar_colorcycle",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_errorbar_cycle_ecolor[png]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_errorbar_cycle_ecolor[pdf]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_errorbar_shape",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_errorbar_limits[png]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_errorbar_limits[pdf]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_errorbar_nonefmt",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_errorbar_line_specific_kwargs",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_errorbar_with_prop_cycle[png]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_errorbar_every_invalid",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_xerr_yerr_not_negative",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_errorbar_every[png]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_errorbar_every[pdf]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_errorbar_linewidth_type[elinewidth0]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_errorbar_linewidth_type[elinewidth1]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_errorbar_linewidth_type[1]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_errorbar_nan[png]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_hist_stacked_stepfilled[png]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_hist_stacked_stepfilled[pdf]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_hist_offset[png]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_hist_offset[pdf]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_hist_step[png]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_hist_step_horiz[png]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_hist_stacked_weighted[png]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_hist_stacked_weighted[pdf]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_stem[png-w/",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_stem[png-w/o",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_stem_args",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_stem_markerfmt",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_stem_dates",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_stem_orientation[png-w/",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_stem_orientation[png-w/o",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_hist_stacked_stepfilled_alpha[png]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_hist_stacked_stepfilled_alpha[pdf]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_hist_stacked_step[png]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_hist_stacked_step[pdf]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_hist_stacked_density[png]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_hist_stacked_density[pdf]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_hist_step_bottom[png]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_hist_stepfilled_geometry",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_hist_step_geometry",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_hist_stepfilled_bottom_geometry",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_hist_step_bottom_geometry",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_hist_stacked_stepfilled_geometry",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_hist_stacked_step_geometry",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_hist_stacked_stepfilled_bottom_geometry",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_hist_stacked_step_bottom_geometry",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_hist_stacked_bar[png]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_hist_stacked_bar[pdf]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_hist_barstacked_bottom_unchanged",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_hist_emptydata",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_hist_labels",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_transparent_markers[png]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_transparent_markers[pdf]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_rgba_markers[png]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_rgba_markers[pdf]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_mollweide_grid[png]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_mollweide_grid[pdf]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_mollweide_forward_inverse_closure",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_mollweide_inverse_forward_closure",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_alpha[png]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_alpha[pdf]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_eventplot[png]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_eventplot[pdf]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_eventplot_defaults[png]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_eventplot_colors[colors0]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_eventplot_colors[colors1]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_eventplot_colors[colors2]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_eventplot_problem_kwargs[png]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_empty_eventplot",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_eventplot_orientation[None-data0]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_eventplot_orientation[None-data1]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_eventplot_orientation[None-data2]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_eventplot_orientation[vertical-data0]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_eventplot_orientation[vertical-data1]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_eventplot_orientation[vertical-data2]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_eventplot_orientation[horizontal-data0]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_eventplot_orientation[horizontal-data1]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_eventplot_orientation[horizontal-data2]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_eventplot_units_list[png]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_marker_styles[png]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_markers_fillstyle_rcparams[png]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_vertex_markers[png]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_eb_line_zorder[png]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_eb_line_zorder[pdf]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_axline_loglog[png]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_axline_loglog[pdf]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_axline[png]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_axline[pdf]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_axline_transaxes[png]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_axline_transaxes[pdf]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_axline_transaxes_panzoom[png]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_axline_transaxes_panzoom[pdf]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_axline_args",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_vlines[png]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_vlines_default",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_hlines[png]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_hlines_default",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_lines_with_colors[png-data0]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_lines_with_colors[png-data1]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_step_linestyle[png]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_step_linestyle[pdf]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_mixed_collection[png]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_mixed_collection[pdf]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_subplot_key_hash",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_specgram[png]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_specgram_magnitude[png]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_specgram_angle[png]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_specgram_fs_none",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_specgram_origin_rcparam[png]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_specgram_origin_kwarg",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_psd_csd[png]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_spectrum[png]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_psd_csd_edge_cases",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_twin_remove[png]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_twin_spines[png]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_twin_spines_on_top[png]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_rcparam_grid_minor[both-True-True]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_rcparam_grid_minor[major-True-False]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_rcparam_grid_minor[minor-False-True]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_grid",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_reset_grid",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_reset_ticks[png]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_vline_limit",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_axline_minmax[axvline-axhline-args0]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_axline_minmax[axvspan-axhspan-args1]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_empty_shared_subplots",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_shared_with_aspect_1",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_shared_with_aspect_2",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_shared_with_aspect_3",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_shared_aspect_error",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_axis_errors[TypeError-args0-kwargs0-axis\\\\(\\\\)",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_axis_errors[ValueError-args1-kwargs1-Unrecognized",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_axis_errors[TypeError-args2-kwargs2-the",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_axis_errors[TypeError-args3-kwargs3-axis\\\\(\\\\)",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_axis_method_errors",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_twin_with_aspect[x]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_twin_with_aspect[y]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_relim_visible_only",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_text_labelsize",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_pie_default[png]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_pie_linewidth_0[png]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_pie_center_radius[png]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_pie_linewidth_2[png]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_pie_ccw_true[png]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_pie_frame_grid[png]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_pie_rotatelabels_true[png]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_pie_nolabel_but_legend[png]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_pie_textprops",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_pie_get_negative_values",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_normalize_kwarg_pie",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_set_get_ticklabels[png]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_set_ticks_with_labels[png]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_set_noniterable_ticklabels",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_subsampled_ticklabels",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_mismatched_ticklabels",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_empty_ticks_fixed_loc",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_retain_tick_visibility[png]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_tick_label_update",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_o_marker_path_snap[png]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_margins",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_set_margin_updates_limits",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_margins_errors[ValueError-args0-kwargs0-margin",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_margins_errors[ValueError-args1-kwargs1-margin",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_margins_errors[ValueError-args2-kwargs2-margin",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_margins_errors[ValueError-args3-kwargs3-margin",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_margins_errors[TypeError-args4-kwargs4-Cannot",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_margins_errors[TypeError-args5-kwargs5-Cannot",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_margins_errors[TypeError-args6-kwargs6-Must",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_length_one_hist",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_set_xy_bound",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_pathological_hexbin",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_color_None",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_color_alias",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_numerical_hist_label",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_unicode_hist_label",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_move_offsetlabel",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_rc_spines[png]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_rc_grid[png]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_rc_tick",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_rc_major_minor_tick",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_square_plot",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_bad_plot_args",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_pcolorfast[data0-xy0-AxesImage]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_pcolorfast[data0-xy1-AxesImage]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_pcolorfast[data0-xy2-AxesImage]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_pcolorfast[data0-xy3-PcolorImage]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_pcolorfast[data0-xy4-QuadMesh]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_pcolorfast[data1-xy0-AxesImage]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_pcolorfast[data1-xy1-AxesImage]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_pcolorfast[data1-xy2-AxesImage]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_pcolorfast[data1-xy3-PcolorImage]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_pcolorfast[data1-xy4-QuadMesh]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_shared_scale",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_shared_bool",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_violin_point_mass",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_errorbar_inputs_shotgun[kwargs0]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_errorbar_inputs_shotgun[kwargs1]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_errorbar_inputs_shotgun[kwargs2]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_errorbar_inputs_shotgun[kwargs3]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_errorbar_inputs_shotgun[kwargs4]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_errorbar_inputs_shotgun[kwargs5]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_errorbar_inputs_shotgun[kwargs6]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_errorbar_inputs_shotgun[kwargs7]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_errorbar_inputs_shotgun[kwargs8]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_errorbar_inputs_shotgun[kwargs9]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_errorbar_inputs_shotgun[kwargs10]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_errorbar_inputs_shotgun[kwargs11]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_errorbar_inputs_shotgun[kwargs12]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_errorbar_inputs_shotgun[kwargs13]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_errorbar_inputs_shotgun[kwargs14]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_errorbar_inputs_shotgun[kwargs15]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_errorbar_inputs_shotgun[kwargs16]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_errorbar_inputs_shotgun[kwargs17]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_errorbar_inputs_shotgun[kwargs18]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_errorbar_inputs_shotgun[kwargs19]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_errorbar_inputs_shotgun[kwargs20]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_errorbar_inputs_shotgun[kwargs21]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_errorbar_inputs_shotgun[kwargs22]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_errorbar_inputs_shotgun[kwargs23]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_errorbar_inputs_shotgun[kwargs24]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_errorbar_inputs_shotgun[kwargs25]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_errorbar_inputs_shotgun[kwargs26]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_errorbar_inputs_shotgun[kwargs27]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_errorbar_inputs_shotgun[kwargs28]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_errorbar_inputs_shotgun[kwargs29]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_errorbar_inputs_shotgun[kwargs30]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_errorbar_inputs_shotgun[kwargs31]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_errorbar_inputs_shotgun[kwargs32]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_errorbar_inputs_shotgun[kwargs33]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_errorbar_inputs_shotgun[kwargs34]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_errorbar_inputs_shotgun[kwargs35]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_errorbar_inputs_shotgun[kwargs36]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_errorbar_inputs_shotgun[kwargs37]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_errorbar_inputs_shotgun[kwargs38]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_errorbar_inputs_shotgun[kwargs39]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_errorbar_inputs_shotgun[kwargs40]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_errorbar_inputs_shotgun[kwargs41]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_errorbar_inputs_shotgun[kwargs42]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_errorbar_inputs_shotgun[kwargs43]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_errorbar_inputs_shotgun[kwargs44]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_errorbar_inputs_shotgun[kwargs45]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_errorbar_inputs_shotgun[kwargs46]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_errorbar_inputs_shotgun[kwargs47]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_errorbar_inputs_shotgun[kwargs48]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_errorbar_inputs_shotgun[kwargs49]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_errorbar_inputs_shotgun[kwargs50]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_errorbar_inputs_shotgun[kwargs51]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_dash_offset[png]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_dash_offset[pdf]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_title_pad",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_title_location_roundtrip",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_title_location_shared[True]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_title_location_shared[False]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_loglog[png]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_loglog_nonpos[png]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_axes_margins",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_remove_shared_axes[gca-x]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_remove_shared_axes[gca-y]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_remove_shared_axes[subplots-x]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_remove_shared_axes[subplots-y]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_remove_shared_axes[subplots_shared-x]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_remove_shared_axes[subplots_shared-y]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_remove_shared_axes[add_axes-x]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_remove_shared_axes[add_axes-y]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_remove_shared_axes_relim",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_shared_axes_autoscale",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_adjust_numtick_aspect",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_auto_numticks",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_auto_numticks_log",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_broken_barh_empty",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_broken_barh_timedelta",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_pandas_pcolormesh",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_pandas_indexing_dates",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_pandas_errorbar_indexing",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_pandas_index_shape",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_pandas_indexing_hist",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_pandas_bar_align_center",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_tick_apply_tickdir_deprecation",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_axis_set_tick_params_labelsize_labelcolor",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_axes_tick_params_gridlines",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_axes_tick_params_ylabelside",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_axes_tick_params_xlabelside",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_none_kwargs",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_bar_uint8",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_date_timezone_x[png]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_date_timezone_y[png]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_date_timezone_x_and_y[png]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_axisbelow[png]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_titletwiny",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_titlesetpos",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_title_xticks_top",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_title_xticks_top_both",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_title_above_offset[left",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_title_above_offset[center",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_title_above_offset[both",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_title_no_move_off_page",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_offset_label_color",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_offset_text_visible",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_large_offset",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_barb_units",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_quiver_units",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_bar_color_cycle",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_tick_param_label_rotation",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_fillbetween_cycle",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_log_margins",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_color_length_mismatch",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_eventplot_legend",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_bar_broadcast_args",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_invalid_axis_limits",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_minorticks_on[symlog-symlog]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_minorticks_on[symlog-log]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_minorticks_on[log-symlog]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_minorticks_on[log-log]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_twinx_knows_limits",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_zero_linewidth",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_empty_errorbar_legend",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_plot_decimal[png]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_markerfacecolor_none_alpha[png]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_tick_padding_tightbbox",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_inset",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_zoom_inset",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_inset_polar[png]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_inset_projection",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_inset_subclass",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_indicate_inset_inverted[False-False]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_indicate_inset_inverted[False-True]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_indicate_inset_inverted[True-False]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_indicate_inset_inverted[True-True]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_set_position",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_spines_properbbox_after_zoom",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_gettightbbox_ignore_nan",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_scatter_series_non_zero_index",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_scatter_empty_data",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_annotate_across_transforms[png]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_secondary_xy[png]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_secondary_fail",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_secondary_resize",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_secondary_minorloc",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_secondary_formatter",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_secondary_repr",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_normal_axes",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_nodecorator",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_displaced_spine",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_tickdirs",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_minor_accountedfor",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_axis_bool_arguments[png]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_axis_extent_arg",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_axis_extent_arg2",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_hist_auto_bins",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_hist_nan_data",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_hist_range_and_density",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_bar_errbar_zorder",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_set_ticks_inverted",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_aspect_nonlinear_adjustable_box",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_aspect_nonlinear_adjustable_datalim",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_box_aspect",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_box_aspect_custom_position",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_bbox_aspect_axes_init",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_redraw_in_frame",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_invisible_axes_events",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_xtickcolor_is_not_markercolor",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_ytickcolor_is_not_markercolor",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_unautoscale[True-x]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_unautoscale[True-y]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_unautoscale[False-x]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_unautoscale[False-y]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_unautoscale[None-x]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_unautoscale[None-y]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_polar_interpolation_steps_variable_r[png]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_autoscale_tiny_sticky",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_xtickcolor_is_not_xticklabelcolor",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_ytickcolor_is_not_yticklabelcolor",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_relative_ticklabel_sizes[xx-small]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_relative_ticklabel_sizes[x-small]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_relative_ticklabel_sizes[small]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_relative_ticklabel_sizes[medium]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_relative_ticklabel_sizes[large]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_relative_ticklabel_sizes[x-large]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_relative_ticklabel_sizes[xx-large]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_relative_ticklabel_sizes[larger]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_relative_ticklabel_sizes[smaller]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_relative_ticklabel_sizes[8]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_relative_ticklabel_sizes[10]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_relative_ticklabel_sizes[12]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_multiplot_autoscale",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_sharing_does_not_link_positions",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_2dcolor_plot[pdf]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_shared_axes_clear[png]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_shared_axes_retick",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_ylabel_ha_with_position[left]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_ylabel_ha_with_position[center]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_ylabel_ha_with_position[right]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_bar_label_location_vertical",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_bar_label_location_vertical_yinverted",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_bar_label_location_horizontal",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_bar_label_location_horizontal_yinverted",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_bar_label_location_horizontal_xinverted",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_bar_label_location_horizontal_xyinverted",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_bar_label_location_center",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_bar_label_location_errorbars",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_bar_label_fmt[%.2f]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_bar_label_fmt[{:.2f}]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_bar_label_fmt[format]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_bar_label_fmt_error",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_bar_label_labels",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_bar_label_nan_ydata",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_bar_label_nan_ydata_inverted",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_nan_barlabels",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_patch_bounds",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_warn_ignored_scatter_kwargs",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_artist_sublists",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_empty_line_plots",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_plot_format_errors[None-f-'f'",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_plot_format_errors[None-o+-'o\\\\+'",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_plot_format_errors[None-:--':-'",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_plot_format_errors[None-rk-'rk'",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_plot_format_errors[None-:o-r-':o-r'",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_plot_format_errors[data1-f-'f'",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_plot_format_errors[data1-o+-'o\\\\+'",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_plot_format_errors[data1-:--':-'",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_plot_format_errors[data1-rk-'rk'",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_plot_format_errors[data1-:o-r-':o-r'",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_plot_format",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_automatic_legend",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_plot_errors",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_clim",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_bezier_autoscale",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_get_xticklabel",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "SKIPPED",
              "message": "lib/matplotlib/testing/compare.py:285: Don't know how to convert .svg files to png",
              "file_path": "lib/matplotlib/testing/compare.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "SKIPPED",
              "message": "../opt/miniconda3/envs/testbed/lib/python3.11/contextlib.py:81: Cannot compare svg files because Inkscape is not installed",
              "file_path": "../opt/miniconda3/envs/testbed/lib/python3.11/contextlib.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            }
          ]
        }
      },
      "file_context": {
        "max_tokens": 8000,
        "files": [
          {
            "file_path": "lib/matplotlib/legend.py",
            "patch": "--- a/lib/matplotlib/legend.py\n+++ b/lib/matplotlib/legend.py\n@@ -286,6 +286,9 @@\n     The custom dictionary mapping instances or types to a legend\n     handler. This *handler_map* updates the default handler map\n     found at `matplotlib.legend.Legend.get_legend_handler_map`.\n+\n+draggable : bool, default: False\n+    Enable mouse dragging support for the legend.\n \"\"\")\n \n \n@@ -341,6 +344,7 @@\n         handler_map=None,\n         title_fontproperties=None,  # properties for the legend title\n         alignment=\"center\",       # control the alignment within the legend box\n+        draggable=False,      # enable mouse dragging support\n         *,\n         ncol=1  # synonym for ncols (backward compatibility)\n     ):\n@@ -538,6 +542,8 @@\n \n         self.set_title(title, prop=title_prop_fp)\n         self._draggable = None\n+        if draggable:\n+            self.set_draggable(True)\n \n         # set the text color\n \n",
            "spans": [
              {
                "span_id": "imports",
                "pinned": false
              },
              {
                "span_id": "Legend",
                "pinned": false
              },
              {
                "span_id": "Legend.__init__",
                "pinned": false
              },
              {
                "span_id": "Legend.draw",
                "pinned": false
              },
              {
                "span_id": "DraggableLegend",
                "pinned": false
              },
              {
                "span_id": "DraggableLegend.__init__",
                "pinned": false
              },
              {
                "span_id": "DraggableLegend.finalize_offset",
                "pinned": false
              },
              {
                "span_id": "DraggableLegend._update_loc",
                "pinned": false
              },
              {
                "span_id": "DraggableLegend._update_bbox_to_anchor",
                "pinned": false
              },
              {
                "span_id": "Legend.set_draggable",
                "pinned": false
              },
              {
                "span_id": "Legend.get_draggable",
                "pinned": false
              },
              {
                "span_id": "impl",
                "pinned": false
              }
            ],
            "show_all_spans": false
          },
          {
            "file_path": "lib/matplotlib/tests/test_legend.py",
            "spans": [
              {
                "span_id": "imports",
                "pinned": false
              },
              {
                "span_id": "test_get_set_draggable",
                "pinned": false
              }
            ],
            "show_all_spans": false,
            "patch": null
          },
          {
            "file_path": "lib/matplotlib/tests/test_contour.py",
            "spans": [
              {
                "span_id": "test_contourf_log_extension",
                "pinned": false
              }
            ],
            "show_all_spans": false,
            "patch": null
          },
          {
            "file_path": "lib/matplotlib/tests/test_axes.py",
            "spans": [],
            "show_all_spans": false,
            "patch": null
          }
        ]
      },
      "completions": {
        "build_action": {
          "model": "claude-3-5-sonnet-20241022",
          "input": [
            {
              "role": "user",
              "content": "<task>\nlegend draggable as keyword\n<!--To help us understand and resolve your issue, please fill out the form to the best of your ability.-->\r\n<!--You can feel free to delete the sections that do not apply.-->\r\n\r\n### Feature request\r\n\r\n**There is not keyword to make legend draggable at creation**\r\n\r\n<!--A short 1-2 sentences that succinctly describes the bug-->\r\n\r\nIs there a code reason why one can not add a \"draggable=True\" keyword to the __init__ function for Legend?  This would be more handy than having to call it after legend creation.  And, naively, it would seem simple to do.  But maybe there is a reason why it would not work?\n\n</task>"
            },
            {
              "role": "assistant",
              "content": [
                {
                  "type": "text",
                  "text": "<thoughts>\n1. First, I need to locate the Legend class implementation to understand its current initialization\n2. Then I'll check if there are any technical limitations for adding the draggable parameter\n3. I'll also look for any tests related to legend draggability to understand the current testing approach\n4. Finally, I'll implement the change if there are no blockers\n</thoughts>"
                },
                {
                  "id": "call_85bc3e3e",
                  "input": {
                    "file_pattern": null,
                    "class_name": "Legend"
                  },
                  "type": "tool_use",
                  "name": "FindClass"
                }
              ]
            },
            {
              "role": "user",
              "content": [
                {
                  "tool_use_id": "call_85bc3e3e",
                  "content": "<observation>\nFound 40 code sections.\n\nViewed relevant code:\nlib/matplotlib/legend.py\n```\n\n    23\t\n    24\timport itertools\n    25\timport logging\n    26\timport time\n    27\t\n    28\timport numpy as np\n    29\t\n    30\timport matplotlib as mpl\n    31\tfrom matplotlib import _api, _docstring, colors, offsetbox\n    32\tfrom matplotlib.artist import Artist, allow_rasterization\n    33\tfrom matplotlib.cbook import silent_list\n    34\tfrom matplotlib.font_manager import FontProperties\n    35\tfrom matplotlib.lines import Line2D\n    36\tfrom matplotlib.patches import (Patch, Rectangle, Shadow, FancyBboxPatch,\n    37\t                                StepPatch)\n    38\tfrom matplotlib.collections import (\n    39\t    Collection, CircleCollection, LineCollection, PathCollection,\n    40\t    PolyCollection, RegularPolyCollection)\n    41\tfrom matplotlib.text import Text\n    42\tfrom matplotlib.transforms import Bbox, BboxBase, TransformedBbox\n    43\tfrom matplotlib.transforms import BboxTransformTo, BboxTransformFrom\n    44\tfrom matplotlib.offsetbox import (\n    45\t    AnchoredOffsetbox, DraggableOffsetBox,\n    46\t    HPacker, VPacker,\n    47\t    DrawingArea, TextArea,\n    48\t)\n    49\tfrom matplotlib.container import ErrorbarContainer, BarContainer, StemContainer\n    50\tfrom . import legend_handler\n      # ...\n   290\t\n   291\t\n   292\tclass Legend(Artist):\n   293\t    \"\"\"\n   294\t    Place a legend on the axes at location loc.\n   295\t    \"\"\"\n   296\t\n   297\t    # 'best' is only implemented for axes legends\n   298\t    codes = {'best': 0, **AnchoredOffsetbox.codes}\n   299\t    zorder = 5\n          # ...\n   303\t\n   304\t    @_api.make_keyword_only(\"3.6\", \"loc\")\n   305\t    @_docstring.dedent_interpd\n   306\t    def __init__(\n   307\t        self, parent, handles, labels,\n   308\t        loc=None,\n   309\t        numpoints=None,      # number of points in the legend line\n   310\t        markerscale=None,    # relative size of legend markers vs. original\n   311\t        markerfirst=True,    # left/right ordering of legend marker and label\n   312\t        scatterpoints=None,  # number of scatter points\n   313\t        scatteryoffsets=None,\n   314\t        prop=None,           # properties for the legend texts\n   315\t        fontsize=None,       # keyword to set font size directly\n   316\t        labelcolor=None,     # keyword to set the text color\n   317\t\n   318\t        # spacing & pad defined as a fraction of the font-size\n   319\t        borderpad=None,      # whitespace inside the legend border\n   320\t        labelspacing=None,   # vertical space between the legend entries\n   321\t        handlelength=None,   # length of the legend handles\n   322\t        handleheight=None,   # height of the legend handles\n   323\t        handletextpad=None,  # pad between the legend handle and text\n   324\t        borderaxespad=None,  # pad between the axes and legend border\n   325\t        columnspacing=None,  # spacing between columns\n   326\t\n   327\t        ncols=1,     # number of columns\n   328\t        mode=None,  # horizontal distribution of columns: None or \"expand\"\n   329\t\n   330\t        fancybox=None,  # True: fancy box, False: rounded box, None: rcParam\n   331\t        shadow=None,\n   332\t        title=None,           # legend title\n   333\t        title_fontsize=None,  # legend title font size\n   334\t        framealpha=None,      # set frame alpha\n   335\t        edgecolor=None,       # frame patch edgecolor\n   336\t        facecolor=None,       # frame patch facecolor\n   337\t\n   338\t        bbox_to_anchor=None,  # bbox to which the legend will be anchored\n   339\t        bbox_transform=None,  # transform for the bbox\n   340\t        frameon=None,         # draw frame\n   341\t        handler_map=None,\n   342\t        title_fontproperties=None,  # properties for the legend title\n   343\t        alignment=\"center\",       # control the alignment within the legend box\n   344\t        *,\n   345\t        ncol=1  # synonym for ncols (backward compatibility)\n   346\t    ):\n   347\t        \"\"\"\n   348\t        Parameters\n   349\t        ----------\n   350\t        parent : `~matplotlib.axes.Axes` or `.Figure`\n   351\t            The artist that contains the legend.\n   352\t\n   353\t        handles : list of `.Artist`\n   354\t            A list of Artists (lines, patches) to be added to the legend.\n   355\t\n   356\t        labels : list of str\n   357\t            A list of labels to show next to the artists. The length of handles\n   358\t            and labels should be the same. If they are not, they are truncated\n   359\t            to the smaller of both lengths.\n   360\t\n   361\t        Other Parameters\n   362\t        ----------------\n   363\t        %(_legend_kw_doc)s\n   364\t\n   365\t        Notes\n   366\t        -----\n   367\t        Users can specify any arbitrary location for the legend using the\n   368\t        *bbox_to_anchor* keyword argument. *bbox_to_anchor* can be a\n   369\t        `.BboxBase` (or derived there from) or a tuple of 2 or 4 floats.\n   370\t        See `set_bbox_to_anchor` for more detail.\n   371\t\n   372\t        The legend location can be specified by setting *loc* with a tuple of\n   373\t        2 floats, which is interpreted as the lower-left corner of the legend\n   374\t        in the normalized axes coordinate.\n   375\t        \"\"\"\n   376\t        # local import only to avoid circularity\n   377\t        from matplotlib.axes import Axes\n   378\t        from matplotlib.figure import FigureBase\n   379\t\n   380\t        super().__init__()\n   381\t\n   382\t        if prop is None:\n   383\t            if fontsize is not None:\n   384\t                self.prop = FontProperties(size=fontsize)\n   385\t            else:\n   386\t                self.prop = FontProperties(\n   387\t                    size=mpl.rcParams[\"legend.fontsize\"])\n   388\t        else:\n   389\t            self.prop = FontProperties._from_any(prop)\n   390\t            if isinstance(prop, dict) and \"size\" not in prop:\n   391\t                self.prop.set_size(mpl.rcParams[\"legend.fontsize\"])\n   392\t\n   393\t        self._fontsize = self.prop.get_size_in_points()\n   394\t\n   395\t        self.texts = []\n   396\t        self.legendHandles = []\n   397\t        self._legend_title_box = None\n   398\t\n   399\t        #: A dictionary with the extra handler mappings for this Legend\n   400\t        #: instance.\n   401\t        self._custom_handler_map = handler_map\n   402\t\n   403\t        def val_or_rc(val, rc_name):\n   404\t            return val if val is not None else mpl.rcParams[rc_name]\n   405\t\n   406\t        self.numpoints = val_or_rc(numpoints, 'legend.numpoints')\n   407\t        self.markerscale = val_or_rc(markerscale, 'legend.markerscale')\n   408\t        self.scatterpoints = val_or_rc(scatterpoints, 'legend.scatterpoints')\n   409\t        self.borderpad = val_or_rc(borderpad, 'legend.borderpad')\n   410\t        self.labelspacing = val_or_rc(labelspacing, 'legend.labelspacing')\n   411\t        self.handlelength = val_or_rc(handlelength, 'legend.handlelength')\n   412\t        self.handleheight = val_or_rc(handleheight, 'legend.handleheight')\n   413\t        self.handletextpad = val_or_rc(handletextpad, 'legend.handletextpad')\n   414\t        self.borderaxespad = val_or_rc(borderaxespad, 'legend.borderaxespad')\n   415\t        self.columnspacing = val_or_rc(columnspacing, 'legend.columnspacing')\n   416\t        self.shadow = val_or_rc(shadow, 'legend.shadow')\n   417\t        # trim handles and labels if illegal label...\n   418\t        _lab, _hand = [], []\n   419\t        for label, handle in zip(labels, handles):\n   420\t            if isinstance(label, str) and label.startswith('_'):\n   421\t                _api.warn_external(f\"The label {label!r} of {handle!r} starts \"\n   422\t                                   \"with '_'. It is thus excluded from the \"\n   423\t                                   \"legend.\")\n   424\t            else:\n   425\t                _lab.append(label)\n   426\t                _hand.append(handle)\n   427\t        labels, handles = _lab, _hand\n   428\t\n   429\t        handles = list(handles)\n   430\t        if len(handles) < 2:\n   431\t            ncols = 1\n   432\t        self._ncols = ncols if ncols != 1 else ncol\n   433\t\n   434\t        if self.numpoints <= 0:\n   435\t            raise ValueError(\"numpoints must be > 0; it was %d\" % numpoints)\n   436\t\n   437\t        # introduce y-offset for handles of the scatter plot\n   438\t        if scatteryoffsets is None:\n   439\t            self._scatteryoffsets = np.array([3. / 8., 4. / 8., 2.5 / 8.])\n   440\t        else:\n   441\t            self._scatteryoffsets = np.asarray(scatteryoffsets)\n   442\t        reps = self.scatterpoints // len(self._scatteryoffsets) + 1\n   443\t        self._scatteryoffsets = np.tile(self._scatteryoffsets,\n   444\t                                        reps)[:self.scatterpoints]\n   445\t\n   446\t        # _legend_box is a VPacker instance that contains all\n   447\t        # legend items and will be initialized from _init_legend_box()\n   448\t        # method.\n   449\t        self._legend_box = None\n   450\t\n   451\t        if isinstance(parent, Axes):\n   452\t            self.isaxes = True\n   453\t            self.axes = parent\n   454\t            self.set_figure(parent.figure)\n   455\t        elif isinstance(parent, FigureBase):\n   456\t            self.isaxes = False\n   457\t            self.set_figure(parent)\n   458\t        else:\n   459\t            raise TypeError(\n   460\t                \"Legend needs either Axes or FigureBase as parent\"\n   461\t            )\n   462\t        self.parent = parent\n   463\t\n   464\t        self._loc_used_default = loc is None\n   465\t        if loc is None:\n   466\t            loc = mpl.rcParams[\"legend.loc\"]\n   467\t            if not self.isaxes and loc in [0, 'best']:\n   468\t                loc = 'upper right'\n   469\t        if isinstance(loc, str):\n   470\t            loc = _api.check_getitem(self.codes, loc=loc)\n   471\t        if not self.isaxes and loc == 0:\n   472\t            raise ValueError(\n   473\t                \"Automatic legend placement (loc='best') not implemented for \"\n   474\t                \"figure legend\")\n   475\t\n   476\t        self._mode = mode\n   477\t        self.set_bbox_to_anchor(bbox_to_anchor, bbox_transform)\n   478\t\n   479\t        # We use FancyBboxPatch to draw a legend frame. The location\n   480\t        # and size of the box will be updated during the drawing time.\n   481\t\n   482\t        if facecolor is None:\n   483\t            facecolor = mpl.rcParams[\"legend.facecolor\"]\n   484\t        if facecolor == 'inherit':\n   485\t            facecolor = mpl.rcParams[\"axes.facecolor\"]\n   486\t\n   487\t        if edgecolor is None:\n   488\t            edgecolor = mpl.rcParams[\"legend.edgecolor\"]\n   489\t        if edgecolor == 'inherit':\n   490\t            edgecolor = mpl.rcParams[\"axes.edgecolor\"]\n   491\t\n   492\t        if fancybox is None:\n   493\t            fancybox = mpl.rcParams[\"legend.fancybox\"]\n   494\t\n   495\t        self.legendPatch = FancyBboxPatch(\n   496\t            xy=(0, 0), width=1, height=1,\n   497\t            facecolor=facecolor, edgecolor=edgecolor,\n   498\t            # If shadow is used, default to alpha=1 (#8943).\n   499\t            alpha=(framealpha if framealpha is not None\n   500\t                   else 1 if shadow\n   501\t                   else mpl.rcParams[\"legend.framealpha\"]),\n   502\t            # The width and height of the legendPatch will be set (in draw())\n   503\t            # to the length that includes the padding. Thus we set pad=0 here.\n   504\t            boxstyle=(\"round,pad=0,rounding_size=0.2\" if fancybox\n   505\t                      else \"square,pad=0\"),\n   506\t            mutation_scale=self._fontsize,\n   507\t            snap=True,\n   508\t            visible=(frameon if frameon is not None\n   509\t                     else mpl.rcParams[\"legend.frameon\"])\n   510\t        )\n   511\t        self._set_artist_props(self.legendPatch)\n   512\t\n   513\t        _api.check_in_list([\"center\", \"left\", \"right\"], alignment=alignment)\n   514\t        self._alignment = alignment\n   515\t\n   516\t        # init with null renderer\n   517\t        self._init_legend_box(handles, labels, markerfirst)\n   518\t\n   519\t        tmp = self._loc_used_default\n   520\t        self._set_loc(loc)\n   521\t        self._loc_used_default = tmp  # ignore changes done by _set_loc\n   522\t\n   523\t        # figure out title font properties:\n   524\t        if title_fontsize is not None and title_fontproperties is not None:\n   525\t            raise ValueError(\n   526\t                \"title_fontsize and title_fontproperties can't be specified \"\n   527\t                \"at the same time. Only use one of them. \")\n   528\t        title_prop_fp = FontProperties._from_any(title_fontproperties)\n   529\t        if isinstance(title_fontproperties, dict):\n   530\t            if \"size\" not in title_fontproperties:\n   531\t                title_fontsize = mpl.rcParams[\"legend.title_fontsize\"]\n   532\t                title_prop_fp.set_size(title_fontsize)\n   533\t        elif title_fontsize is not None:\n   534\t            title_prop_fp.set_size(title_fontsize)\n   535\t        elif not isinstance(title_fontproperties, FontProperties):\n   536\t            title_fontsize = mpl.rcParams[\"legend.title_fontsize\"]\n   537\t            title_prop_fp.set_size(title_fontsize)\n   538\t\n   539\t        self.set_title(title, prop=title_prop_fp)\n   540\t        self._draggable = None\n   541\t\n   542\t        # set the text color\n   543\t\n   544\t        color_getters = {  # getter function depends on line or patch\n   545\t            'linecolor':       ['get_color',           'get_facecolor'],\n   546\t            'markerfacecolor': ['get_markerfacecolor', 'get_facecolor'],\n   547\t            'mfc':             ['get_markerfacecolor', 'get_facecolor'],\n   548\t            'markeredgecolor': ['get_markeredgecolor', 'get_edgecolor'],\n   549\t            'mec':             ['get_markeredgecolor', 'get_edgecolor'],\n   550\t        }\n   551\t        if labelcolor is None:\n   552\t            if mpl.rcParams['legend.labelcolor'] is not None:\n   553\t                labelcolor = mpl.rcParams['legend.labelcolor']\n   554\t            else:\n   555\t                labelcolor = mpl.rcParams['text.color']\n   556\t        if isinstance(labelcolor, str) and labelcolor in color_getters:\n   557\t            getter_names = color_getters[labelcolor]\n   558\t            for handle, text in zip(self.legendHandles, self.texts):\n   559\t                for getter_name in getter_names:\n   560\t                    try:\n   561\t                        color = getattr(handle, getter_name)()\n   562\t                        text.set_color(color)\n   563\t                        break\n   564\t                    except AttributeError:\n   565\t                        pass\n   566\t        elif isinstance(labelcolor, str) and labelcolor == 'none':\n   567\t            for text in self.texts:\n   568\t                text.set_color(labelcolor)\n   569\t        elif np.iterable(labelcolor):\n   570\t            for text, color in zip(self.texts,\n   571\t                                   itertools.cycle(\n   572\t                                       colors.to_rgba_array(labelcolor))):\n   573\t                text.set_color(color)\n   574\t        else:\n   575\t            raise ValueError(f\"Invalid labelcolor: {labelcolor!r}\")\n          # ...\n   622\t\n   623\t    @allow_rasterization\n   624\t    def draw(self, renderer):\n   625\t        # docstring inherited\n   626\t        if not self.get_visible():\n   627\t            return\n   628\t\n   629\t        renderer.open_group('legend', gid=self.get_gid())\n   630\t\n   631\t        fontsize = renderer.points_to_pixels(self._fontsize)\n   632\t\n   633\t        # if mode == fill, set the width of the legend_box to the\n   634\t        # width of the parent (minus pads)\n   635\t        if self._mode in [\"expand\"]:\n   636\t            pad = 2 * (self.borderaxespad + self.borderpad) * fontsize\n   637\t            self._legend_box.set_width(self.get_bbox_to_anchor().width - pad)\n   638\t\n   639\t        # update the location and size of the legend. This needs to\n   640\t        # be done in any case to clip the figure right.\n   641\t        bbox = self._legend_box.get_window_extent(renderer)\n   642\t        self.legendPatch.set_bounds(bbox.bounds)\n   643\t        self.legendPatch.set_mutation_scale(fontsize)\n   644\t\n   645\t        if self.shadow:\n   646\t            Shadow(self.legendPatch, 2, -2).draw(renderer)\n   647\t\n   648\t        self.legendPatch.draw(renderer)\n   649\t        self._legend_box.draw(renderer)\n   650\t\n   651\t        renderer.close_group('legend')\n   652\t        self.stale = False\n   653\t\n   654\t    # _default_handler_map defines the default mapping between plot\n   655\t    # elements and the legend handlers.\n          # ...\n      # ...\n```\n\n</observation>",
                  "type": "tool_result"
                }
              ]
            },
            {
              "role": "assistant",
              "content": [
                {
                  "type": "text",
                  "text": "<thoughts>\n1. I found the Legend class implementation in lib/matplotlib/legend.py\n2. I notice that:\n   - The Legend class already has a `_draggable` attribute initialized as None in __init__ (line 540)\n   - The class inherits from Artist and uses DraggableOffsetBox (imported on line 45)\n3. Let me search for the draggable functionality to understand how it's currently implemented\n</thoughts>"
                },
                {
                  "id": "call_05070c78",
                  "input": {
                    "file_pattern": null,
                    "query": "legend draggable method implementation",
                    "category": "implementation"
                  },
                  "type": "tool_use",
                  "name": "SemanticSearch"
                }
              ]
            },
            {
              "role": "user",
              "content": [
                {
                  "tool_use_id": "call_05070c78",
                  "content": "<observation>\nFound 14 code sections.\n\nViewed relevant code:\nlib/matplotlib/legend.py\n```\n\n    23\t\n    24\timport itertools\n    25\timport logging\n    26\timport time\n    27\t\n    28\timport numpy as np\n    29\t\n    30\timport matplotlib as mpl\n    31\tfrom matplotlib import _api, _docstring, colors, offsetbox\n    32\tfrom matplotlib.artist import Artist, allow_rasterization\n    33\tfrom matplotlib.cbook import silent_list\n    34\tfrom matplotlib.font_manager import FontProperties\n    35\tfrom matplotlib.lines import Line2D\n    36\tfrom matplotlib.patches import (Patch, Rectangle, Shadow, FancyBboxPatch,\n    37\t                                StepPatch)\n    38\tfrom matplotlib.collections import (\n    39\t    Collection, CircleCollection, LineCollection, PathCollection,\n    40\t    PolyCollection, RegularPolyCollection)\n    41\tfrom matplotlib.text import Text\n    42\tfrom matplotlib.transforms import Bbox, BboxBase, TransformedBbox\n    43\tfrom matplotlib.transforms import BboxTransformTo, BboxTransformFrom\n    44\tfrom matplotlib.offsetbox import (\n    45\t    AnchoredOffsetbox, DraggableOffsetBox,\n    46\t    HPacker, VPacker,\n    47\t    DrawingArea, TextArea,\n    48\t)\n    49\tfrom matplotlib.container import ErrorbarContainer, BarContainer, StemContainer\n    50\tfrom . import legend_handler\n    51\t\n    52\t\n    53\tclass DraggableLegend(DraggableOffsetBox):\n    54\t    def __init__(self, legend, use_blit=False, update=\"loc\"):\n    55\t        \"\"\"\n    56\t        Wrapper around a `.Legend` to support mouse dragging.\n    57\t\n    58\t        Parameters\n    59\t        ----------\n    60\t        legend : `.Legend`\n    61\t            The `.Legend` instance to wrap.\n    62\t        use_blit : bool, optional\n    63\t            Use blitting for faster image composition. For details see\n    64\t            :ref:`func-animation`.\n    65\t        update : {'loc', 'bbox'}, optional\n    66\t            If \"loc\", update the *loc* parameter of the legend upon finalizing.\n    67\t            If \"bbox\", update the *bbox_to_anchor* parameter.\n    68\t        \"\"\"\n    69\t        self.legend = legend\n    70\t\n    71\t        _api.check_in_list([\"loc\", \"bbox\"], update=update)\n    72\t        self._update = update\n    73\t\n    74\t        super().__init__(legend, legend._legend_box, use_blit=use_blit)\n    75\t\n    76\t    def finalize_offset(self):\n    77\t        if self._update == \"loc\":\n    78\t            self._update_loc(self.get_loc_in_canvas())\n    79\t        elif self._update == \"bbox\":\n    80\t            self._bbox_to_anchor(self.get_loc_in_canvas())\n    81\t\n    82\t    def _update_loc(self, loc_in_canvas):\n    83\t        bbox = self.legend.get_bbox_to_anchor()\n    84\t        # if bbox has zero width or height, the transformation is\n    85\t        # ill-defined. Fall back to the default bbox_to_anchor.\n    86\t        if bbox.width == 0 or bbox.height == 0:\n    87\t            self.legend.set_bbox_to_anchor(None)\n    88\t            bbox = self.legend.get_bbox_to_anchor()\n    89\t        _bbox_transform = BboxTransformFrom(bbox)\n    90\t        self.legend._loc = tuple(_bbox_transform.transform(loc_in_canvas))\n    91\t\n    92\t    def _update_bbox_to_anchor(self, loc_in_canvas):\n    93\t        loc_in_bbox = self.legend.axes.transAxes.transform(loc_in_canvas)\n    94\t        self.legend.set_bbox_to_anchor(loc_in_bbox)\n      # ...\n   290\t\n   291\t\n   292\tclass Legend(Artist):\n   293\t    \"\"\"\n   294\t    Place a legend on the axes at location loc.\n   295\t    \"\"\"\n   296\t\n   297\t    # 'best' is only implemented for axes legends\n   298\t    codes = {'best': 0, **AnchoredOffsetbox.codes}\n   299\t    zorder = 5\n          # ...\n  1078\t\n  1079\t    def set_draggable(self, state, use_blit=False, update='loc'):\n  1080\t        \"\"\"\n  1081\t        Enable or disable mouse dragging support of the legend.\n  1082\t\n  1083\t        Parameters\n  1084\t        ----------\n  1085\t        state : bool\n  1086\t            Whether mouse dragging is enabled.\n  1087\t        use_blit : bool, optional\n  1088\t            Use blitting for faster image composition. For details see\n  1089\t            :ref:`func-animation`.\n  1090\t        update : {'loc', 'bbox'}, optional\n  1091\t            The legend parameter to be changed when dragged:\n  1092\t\n  1093\t            - 'loc': update the *loc* parameter of the legend\n  1094\t            - 'bbox': update the *bbox_to_anchor* parameter of the legend\n  1095\t\n  1096\t        Returns\n  1097\t        -------\n  1098\t        `.DraggableLegend` or *None*\n  1099\t            If *state* is ``True`` this returns the `.DraggableLegend` helper\n  1100\t            instance. Otherwise this returns *None*.\n  1101\t        \"\"\"\n  1102\t        if state:\n  1103\t            if self._draggable is None:\n  1104\t                self._draggable = DraggableLegend(self,\n  1105\t                                                  use_blit,\n  1106\t                                                  update=update)\n  1107\t        else:\n  1108\t            if self._draggable is not None:\n  1109\t                self._draggable.disconnect()\n  1110\t            self._draggable = None\n  1111\t        return self._draggable\n  1112\t\n  1113\t    def get_draggable(self):\n  1114\t        \"\"\"Return ``True`` if the legend is draggable, ``False`` otherwise.\"\"\"\n  1115\t        return self._draggable is not None\n  1116\t\n  1117\t\n  1118\t# Helper functions to parse legend arguments for both `figure.legend` and\n  1119\t# `axes.legend`:\n      # ...\n```\n\n</observation>",
                  "type": "tool_result"
                }
              ]
            },
            {
              "role": "assistant",
              "content": [
                {
                  "type": "text",
                  "text": "<thoughts>\n1. I found the draggable functionality implementation:\n   - There's a DraggableLegend class that inherits from DraggableOffsetBox\n   - Legend class has set_draggable() and get_draggable() methods\n   - The _draggable attribute is initialized as None in __init__\n2. Adding a draggable parameter to __init__ seems feasible since:\n   - The infrastructure for draggable legends already exists\n   - It would just need to call set_draggable() during initialization\n3. Let me check if there are any tests for the draggable functionality to understand how to test the new parameter\n</thoughts>"
                },
                {
                  "id": "call_9dda00e0",
                  "input": {
                    "file_pattern": null,
                    "query": "legend draggable tests",
                    "category": "test"
                  },
                  "type": "tool_use",
                  "name": "SemanticSearch"
                }
              ]
            },
            {
              "role": "user",
              "content": [
                {
                  "tool_use_id": "call_9dda00e0",
                  "content": "<observation>\nFound 12 code sections.\n\nViewed relevant code:\nlib/matplotlib/tests/test_legend.py\n```\n     1\timport collections\n     2\timport platform\n     3\tfrom unittest import mock\n     4\timport warnings\n     5\t\n     6\timport numpy as np\n     7\timport pytest\n     8\t\n     9\tfrom matplotlib.testing.decorators import check_figures_equal, image_comparison\n    10\tfrom matplotlib.testing._markers import needs_usetex\n    11\timport matplotlib.pyplot as plt\n    12\timport matplotlib as mpl\n    13\timport matplotlib.transforms as mtransforms\n    14\timport matplotlib.collections as mcollections\n    15\timport matplotlib.lines as mlines\n    16\tfrom matplotlib.legend_handler import HandlerTuple\n    17\timport matplotlib.legend as mlegend\n    18\tfrom matplotlib import rc_context\n    19\tfrom matplotlib.font_manager import FontProperties\n      # ...\n   775\t\n   776\t\n   777\tdef test_get_set_draggable():\n   778\t    legend = plt.legend()\n   779\t    assert not legend.get_draggable()\n   780\t    legend.set_draggable(True)\n   781\t    assert legend.get_draggable()\n   782\t    legend.set_draggable(False)\n   783\t    assert not legend.get_draggable()\n      # ...\n```\n\n</observation>",
                  "type": "tool_result"
                }
              ]
            },
            {
              "role": "assistant",
              "content": [
                {
                  "type": "text",
                  "text": "<thoughts>\n1. I found the test for draggable functionality in test_legend.py\n2. The changes needed are:\n   - Add a draggable parameter to Legend.__init__\n   - Call set_draggable() in __init__ if draggable=True\n   - Add a test case for the new parameter\n3. Let me implement these changes\n</thoughts>"
                },
                {
                  "id": "call_8befcc99",
                  "input": {
                    "command": "str_replace",
                    "path": "lib/matplotlib/legend.py",
                    "file_text": null,
                    "view_range": null,
                    "old_str": "    def __init__(\n        self, parent, handles, labels,\n        loc=None,\n        numpoints=None,      # number of points in the legend line\n        markerscale=None,    # relative size of legend markers vs. original\n        markerfirst=True,    # left/right ordering of legend marker and label\n        scatterpoints=None,  # number of scatter points\n        scatteryoffsets=None,\n        prop=None,           # properties for the legend texts\n        fontsize=None,       # keyword to set font size directly\n        labelcolor=None,     # keyword to set the text color\n\n        # spacing & pad defined as a fraction of the font-size\n        borderpad=None,      # whitespace inside the legend border\n        labelspacing=None,   # vertical space between the legend entries\n        handlelength=None,   # length of the legend handles\n        handleheight=None,   # height of the legend handles\n        handletextpad=None,  # pad between the legend handle and text\n        borderaxespad=None,  # pad between the axes and legend border\n        columnspacing=None,  # spacing between columns\n\n        ncols=1,     # number of columns\n        mode=None,  # horizontal distribution of columns: None or \"expand\"\n\n        fancybox=None,  # True: fancy box, False: rounded box, None: rcParam\n        shadow=None,\n        title=None,           # legend title\n        title_fontsize=None,  # legend title font size\n        framealpha=None,      # set frame alpha\n        edgecolor=None,       # frame patch edgecolor\n        facecolor=None,       # frame patch facecolor\n\n        bbox_to_anchor=None,  # bbox to which the legend will be anchored\n        bbox_transform=None,  # transform for the bbox\n        frameon=None,         # draw frame\n        handler_map=None,\n        title_fontproperties=None,  # properties for the legend title\n        alignment=\"center\",       # control the alignment within the legend box\n        *,\n        ncol=1  # synonym for ncols (backward compatibility)",
                    "new_str": "    def __init__(\n        self, parent, handles, labels,\n        loc=None,\n        numpoints=None,      # number of points in the legend line\n        markerscale=None,    # relative size of legend markers vs. original\n        markerfirst=True,    # left/right ordering of legend marker and label\n        scatterpoints=None,  # number of scatter points\n        scatteryoffsets=None,\n        prop=None,           # properties for the legend texts\n        fontsize=None,       # keyword to set font size directly\n        labelcolor=None,     # keyword to set the text color\n\n        # spacing & pad defined as a fraction of the font-size\n        borderpad=None,      # whitespace inside the legend border\n        labelspacing=None,   # vertical space between the legend entries\n        handlelength=None,   # length of the legend handles\n        handleheight=None,   # height of the legend handles\n        handletextpad=None,  # pad between the legend handle and text\n        borderaxespad=None,  # pad between the axes and legend border\n        columnspacing=None,  # spacing between columns\n\n        ncols=1,     # number of columns\n        mode=None,  # horizontal distribution of columns: None or \"expand\"\n\n        fancybox=None,  # True: fancy box, False: rounded box, None: rcParam\n        shadow=None,\n        title=None,           # legend title\n        title_fontsize=None,  # legend title font size\n        framealpha=None,      # set frame alpha\n        edgecolor=None,       # frame patch edgecolor\n        facecolor=None,       # frame patch facecolor\n\n        bbox_to_anchor=None,  # bbox to which the legend will be anchored\n        bbox_transform=None,  # transform for the bbox\n        frameon=None,         # draw frame\n        handler_map=None,\n        title_fontproperties=None,  # properties for the legend title\n        alignment=\"center\",       # control the alignment within the legend box\n        draggable=False,      # enable mouse dragging support\n        *,\n        ncol=1  # synonym for ncols (backward compatibility)",
                    "insert_line": null
                  },
                  "type": "tool_use",
                  "name": "str_replace_editor"
                }
              ]
            },
            {
              "role": "user",
              "content": [
                {
                  "tool_use_id": "call_8befcc99",
                  "content": "<observation>\nThe file lib/matplotlib/legend.py has been edited. Here's the result of running `cat -n` on a snippet of lib/matplotlib/legend.py:\n   306\t    def __str__(self):\n   307\t        return \"Legend\"\n   308\t\n   309\t    @_api.make_keyword_only(\"3.6\", \"loc\")\n   310\t    @_docstring.dedent_interpd\n   311\t    def __init__(\n   312\t        self, parent, handles, labels,\n   313\t        loc=None,\n   314\t        numpoints=None,      # number of points in the legend line\n   315\t        markerscale=None,    # relative size of legend markers vs. original\n   316\t        markerfirst=True,    # left/right ordering of legend marker and label\n   317\t        scatterpoints=None,  # number of scatter points\n   318\t        scatteryoffsets=None,\n   319\t        prop=None,           # properties for the legend texts\n   320\t        fontsize=None,       # keyword to set font size directly\n   321\t        labelcolor=None,     # keyword to set the text color\n   322\t\n   323\t        # spacing & pad defined as a fraction of the font-size\n   324\t        borderpad=None,      # whitespace inside the legend border\n   325\t        labelspacing=None,   # vertical space between the legend entries\n   326\t        handlelength=None,   # length of the legend handles\n   327\t        handleheight=None,   # height of the legend handles\n   328\t        handletextpad=None,  # pad between the legend handle and text\n   329\t        borderaxespad=None,  # pad between the axes and legend border\n   330\t        columnspacing=None,  # spacing between columns\n   331\t\n   332\t        ncols=1,     # number of columns\n   333\t        mode=None,  # horizontal distribution of columns: None or \"expand\"\n   334\t\n   335\t        fancybox=None,  # True: fancy box, False: rounded box, None: rcParam\n   336\t        shadow=None,\n   337\t        title=None,           # legend title\n   338\t        title_fontsize=None,  # legend title font size\n   339\t        framealpha=None,      # set frame alpha\n   340\t        edgecolor=None,       # frame patch edgecolor\n   341\t        facecolor=None,       # frame patch facecolor\n   342\t\n   343\t        bbox_to_anchor=None,  # bbox to which the legend will be anchored\n   344\t        bbox_transform=None,  # transform for the bbox\n   345\t        frameon=None,         # draw frame\n   346\t        handler_map=None,\n   347\t        title_fontproperties=None,  # properties for the legend title\n   348\t        alignment=\"center\",       # control the alignment within the legend box\n   349\t        draggable=False,      # enable mouse dragging support\n   350\t        *,\n   351\t        ncol=1  # synonym for ncols (backward compatibility)\n   352\t    ):\n   353\t        \"\"\"\n   354\t        Parameters\nReview the changes and make sure they are as expected. Edit the file again if necessary.\n\nRunning 936 tests in the following files:\n * lib/matplotlib/tests/test_legend.py\n * lib/matplotlib/tests/test_contour.py\n * lib/matplotlib/tests/test_axes.py\n\n* FAILED lib/matplotlib/tests/test_contour.py test_contourf_log_extension>\n```\n\n    @image_comparison(['contour_log_extension.png'],\n                      remove_text=True, style='mpl20',\n                      tol=1.444)\n    def test_contourf_log_extension():\n        # Remove this line when this test image is regenerated.\n        plt.rcParams['pcolormesh.snap'] = False\n    \n        # Test that contourf with lognorm is extended correctly\n        fig, (ax1, ax2, ax3) = plt.subplots(1, 3, figsize=(10, 5))\n        fig.subplots_adjust(left=0.05, right=0.95)\n    \n        # make data set with large range e.g. between 1e-8 and 1e10\n        data_exp = np.linspace(-7.5, 9.5, 1200)\n        data = np.power(10, data_exp).reshape(30, 40)\n        # make manual levels e.g. between 1e-4 and 1e-6\n        levels_exp = np.arange(-4., 7.)\n        levels = np.power(10., levels_exp)\n    \n        # original data\n        c1 = ax1.contourf(data,\n                          norm=LogNorm(vmin=data.min(), vmax=data.max()))\n        # just show data in levels\n        c2 = ax2.contourf(data, levels=levels,\n                          norm=LogNorm(vmin=levels.min(), vmax=levels.max()),\n                          extend='neither')\n        # extend data from levels\n        c3 = ax3.contourf(data, levels=levels,\n                          norm=LogNorm(vmin=levels.min(), vmax=levels.max()),\n                          extend='both')\n        cb = plt.colorbar(c1, ax=ax1)\n        assert cb.ax.get_ylim() == (1e-8, 1e10)\n        cb = plt.colorbar(c2, ax=ax2)\n>       assert cb.ax.get_ylim() == (1e-4, 1e6)\nE       assert (9.9999999999...05, 1000000.0) == (0.0001, 1000000.0)\nE         \nE         At index 0 diff: 9.999999999999999e-05 != 0.0001\nE         Use -v to get more diff\n\nlib/matplotlib/tests/test_contour.py:316: AssertionError\n```\n\n\n935 passed. 1 failed. 0 errors.\n</observation>",
                  "type": "tool_result"
                }
              ]
            },
            {
              "role": "assistant",
              "content": [
                {
                  "type": "text",
                  "text": "<thoughts>\n1. I've added the draggable parameter to the __init__ signature, but I still need to:\n   - Add it to the docstring\n   - Actually implement the functionality by calling set_draggable() in __init__\n2. The test failure in test_contour.py seems unrelated to our changes (it's about colorbar limits)\n3. Let me continue with the implementation\n</thoughts>"
                },
                {
                  "id": "call_7590c0f7",
                  "input": {
                    "command": "str_replace",
                    "path": "lib/matplotlib/legend.py",
                    "file_text": null,
                    "view_range": null,
                    "old_str": "        self.set_title(title, prop=title_prop_fp)\n        self._draggable = None\n\n        # set the text color",
                    "new_str": "        self.set_title(title, prop=title_prop_fp)\n        self._draggable = None\n        if draggable:\n            self.set_draggable(True)\n\n        # set the text color",
                    "insert_line": null
                  },
                  "type": "tool_use",
                  "name": "str_replace_editor"
                }
              ]
            },
            {
              "role": "user",
              "content": [
                {
                  "tool_use_id": "call_7590c0f7",
                  "content": "<observation>\nThe file lib/matplotlib/legend.py has been edited. Here's the result of running `cat -n` on a snippet of lib/matplotlib/legend.py:\n   540\t            title_prop_fp.set_size(title_fontsize)\n   541\t        elif not isinstance(title_fontproperties, FontProperties):\n   542\t            title_fontsize = mpl.rcParams[\"legend.title_fontsize\"]\n   543\t            title_prop_fp.set_size(title_fontsize)\n   544\t\n   545\t        self.set_title(title, prop=title_prop_fp)\n   546\t        self._draggable = None\n   547\t        if draggable:\n   548\t            self.set_draggable(True)\n   549\t\n   550\t        # set the text color\n   551\t\n   552\t        color_getters = {  # getter function depends on line or patch\n   553\t            'linecolor':       ['get_color',           'get_facecolor'],\nReview the changes and make sure they are as expected. Edit the file again if necessary.\n\nRunning 936 tests in the following files:\n * lib/matplotlib/tests/test_legend.py\n * lib/matplotlib/tests/test_contour.py\n * lib/matplotlib/tests/test_axes.py\n\n* FAILED lib/matplotlib/tests/test_contour.py test_contourf_log_extension>\n```\n\n    @image_comparison(['contour_log_extension.png'],\n                      remove_text=True, style='mpl20',\n                      tol=1.444)\n    def test_contourf_log_extension():\n        # Remove this line when this test image is regenerated.\n        plt.rcParams['pcolormesh.snap'] = False\n    \n        # Test that contourf with lognorm is extended correctly\n        fig, (ax1, ax2, ax3) = plt.subplots(1, 3, figsize=(10, 5))\n        fig.subplots_adjust(left=0.05, right=0.95)\n    \n        # make data set with large range e.g. between 1e-8 and 1e10\n        data_exp = np.linspace(-7.5, 9.5, 1200)\n        data = np.power(10, data_exp).reshape(30, 40)\n        # make manual levels e.g. between 1e-4 and 1e-6\n        levels_exp = np.arange(-4., 7.)\n        levels = np.power(10., levels_exp)\n    \n        # original data\n        c1 = ax1.contourf(data,\n                          norm=LogNorm(vmin=data.min(), vmax=data.max()))\n        # just show data in levels\n        c2 = ax2.contourf(data, levels=levels,\n                          norm=LogNorm(vmin=levels.min(), vmax=levels.max()),\n                          extend='neither')\n        # extend data from levels\n        c3 = ax3.contourf(data, levels=levels,\n                          norm=LogNorm(vmin=levels.min(), vmax=levels.max()),\n                          extend='both')\n        cb = plt.colorbar(c1, ax=ax1)\n        assert cb.ax.get_ylim() == (1e-8, 1e10)\n        cb = plt.colorbar(c2, ax=ax2)\n>       assert cb.ax.get_ylim() == (1e-4, 1e6)\nE       assert (9.9999999999...05, 1000000.0) == (0.0001, 1000000.0)\nE         \nE         At index 0 diff: 9.999999999999999e-05 != 0.0001\nE         Use -v to get more diff\n\nlib/matplotlib/tests/test_contour.py:316: AssertionError\n```\n\n\n935 passed. 1 failed. 0 errors.\n</observation>",
                  "type": "tool_result"
                }
              ]
            },
            {
              "role": "assistant",
              "content": [
                {
                  "type": "text",
                  "text": "<thoughts>\n1. I've added the implementation to enable draggable functionality when draggable=True\n2. Now I need to:\n   - Add the draggable parameter to the docstring\n   - Add a test case for the new parameter\n3. Let me update the docstring first\n</thoughts>"
                },
                {
                  "id": "call_340e706c",
                  "input": {
                    "command": "str_replace",
                    "path": "lib/matplotlib/legend.py",
                    "file_text": null,
                    "view_range": null,
                    "old_str": "        alignment : {'center', 'left', 'right'}, default: 'center'\n            The alignment value for the legend box. The valid values are:\n            {'center', 'left', 'right'}\n\n        Other Parameters\n        ----------------\n        **kwargs : `.Text` properties\n            Other keyword arguments are given to the `.Text` instance\n            containing the legend's text.\n\n        See Also\n        --------\n        .Figure.legend",
                    "new_str": "        alignment : {'center', 'left', 'right'}, default: 'center'\n            The alignment value for the legend box. The valid values are:\n            {'center', 'left', 'right'}\n\n        draggable : bool, default: False\n            Enable mouse dragging support for the legend.\n\n        Other Parameters\n        ----------------\n        **kwargs : `.Text` properties\n            Other keyword arguments are given to the `.Text` instance\n            containing the legend's text.\n\n        See Also\n        --------\n        .Figure.legend",
                    "insert_line": null
                  },
                  "type": "tool_use",
                  "name": "str_replace_editor"
                }
              ]
            },
            {
              "role": "user",
              "content": [
                {
                  "tool_use_id": "call_340e706c",
                  "content": "<observation>\nString '        alignment : {'center', 'left', 'right'}, default: 'center'\n            The alignment value for the legend box. The valid values are:\n            {'center', 'left', 'right'}\n\n        Other Parameters\n        ----------------\n        **kwargs : `.Text` properties\n            Other keyword arguments are given to the `.Text` instance\n            containing the legend's text.\n\n        See Also\n        --------\n        .Figure.legend' not found in lib/matplotlib/legend.py\n</observation>",
                  "type": "tool_result"
                }
              ]
            },
            {
              "role": "assistant",
              "content": [
                {
                  "type": "text",
                  "text": "<thoughts>\n1. The docstring replacement failed because I didn't match the exact text. Let me try again with the correct text.\n2. First, let me view the current docstring to get the exact text\n</thoughts>"
                },
                {
                  "id": "call_9bda5a30",
                  "input": {
                    "command": "view",
                    "path": "lib/matplotlib/legend.py",
                    "file_text": null,
                    "view_range": [
                      350,
                      400
                    ],
                    "old_str": null,
                    "new_str": null,
                    "insert_line": null
                  },
                  "type": "tool_use",
                  "name": "str_replace_editor"
                }
              ]
            },
            {
              "role": "user",
              "content": [
                {
                  "tool_use_id": "call_9bda5a30",
                  "content": "<observation>\nHere's the result of running `cat -n` on lib/matplotlib/legend.py:\n   350\t        ----------\n   351\t        parent : `~matplotlib.axes.Axes` or `.Figure`\n   352\t            The artist that contains the legend.\n   353\t\n   354\t        handles : list of `.Artist`\n   355\t            A list of Artists (lines, patches) to be added to the legend.\n   356\t\n   357\t        labels : list of str\n   358\t            A list of labels to show next to the artists. The length of handles\n   359\t            and labels should be the same. If they are not, they are truncated\n   360\t            to the smaller of both lengths.\n   361\t\n   362\t        Other Parameters\n   363\t        ----------------\n   364\t        %(_legend_kw_doc)s\n   365\t\n   366\t        Notes\n   367\t        -----\n   368\t        Users can specify any arbitrary location for the legend using the\n   369\t        *bbox_to_anchor* keyword argument. *bbox_to_anchor* can be a\n   370\t        `.BboxBase` (or derived there from) or a tuple of 2 or 4 floats.\n   371\t        See `set_bbox_to_anchor` for more detail.\n   372\t\n   373\t        The legend location can be specified by setting *loc* with a tuple of\n   374\t        2 floats, which is interpreted as the lower-left corner of the legend\n   375\t        in the normalized axes coordinate.\n   376\t        \"\"\"\n   377\t        # local import only to avoid circularity\n   378\t        from matplotlib.axes import Axes\n   379\t        from matplotlib.figure import FigureBase\n   380\t\n   381\t        super().__init__()\n   382\t\n   383\t        if prop is None:\n   384\t            if fontsize is not None:\n   385\t                self.prop = FontProperties(size=fontsize)\n   386\t            else:\n   387\t                self.prop = FontProperties(\n   388\t                    size=mpl.rcParams[\"legend.fontsize\"])\n   389\t        else:\n   390\t            self.prop = FontProperties._from_any(prop)\n   391\t            if isinstance(prop, dict) and \"size\" not in prop:\n   392\t                self.prop.set_size(mpl.rcParams[\"legend.fontsize\"])\n   393\t\n   394\t        self._fontsize = self.prop.get_size_in_points()\n   395\t\n   396\t        self.texts = []\n   397\t        self.legendHandles = []\n   398\t        self._legend_title_box = None\n   399\t\n   400\t        #: A dictionary with the extra handler mappings for this Legend\n\n</observation>",
                  "type": "tool_result",
                  "cache_control": {
                    "type": "ephemeral"
                  }
                }
              ]
            },
            {
              "role": "assistant",
              "content": [
                {
                  "type": "text",
                  "text": "<thoughts>\n1. I see that the docstring uses %(_legend_kw_doc)s for the parameters, which means it's using a template system\n2. Let me search for where this template is defined\n</thoughts>"
                },
                {
                  "id": "call_74c47f7a",
                  "input": {
                    "file_pattern": null,
                    "code_snippet": "_legend_kw_doc"
                  },
                  "type": "tool_use",
                  "name": "FindCodeSnippet",
                  "cache_control": {
                    "type": "ephemeral"
                  }
                }
              ]
            },
            {
              "role": "user",
              "content": [
                {
                  "tool_use_id": "call_74c47f7a",
                  "content": "<observation>\nFound 10 code sections.\n\nViewed relevant code:\nlib/matplotlib/legend.py\n```\n\n    23\t\n    24\timport itertools\n    25\timport logging\n    26\timport time\n    27\t\n    28\timport numpy as np\n    29\t\n    30\timport matplotlib as mpl\n    31\tfrom matplotlib import _api, _docstring, colors, offsetbox\n    32\tfrom matplotlib.artist import Artist, allow_rasterization\n    33\tfrom matplotlib.cbook import silent_list\n    34\tfrom matplotlib.font_manager import FontProperties\n    35\tfrom matplotlib.lines import Line2D\n    36\tfrom matplotlib.patches import (Patch, Rectangle, Shadow, FancyBboxPatch,\n    37\t                                StepPatch)\n    38\tfrom matplotlib.collections import (\n    39\t    Collection, CircleCollection, LineCollection, PathCollection,\n    40\t    PolyCollection, RegularPolyCollection)\n    41\tfrom matplotlib.text import Text\n    42\tfrom matplotlib.transforms import Bbox, BboxBase, TransformedBbox\n    43\tfrom matplotlib.transforms import BboxTransformTo, BboxTransformFrom\n    44\tfrom matplotlib.offsetbox import (\n    45\t    AnchoredOffsetbox, DraggableOffsetBox,\n    46\t    HPacker, VPacker,\n    47\t    DrawingArea, TextArea,\n    48\t)\n    49\tfrom matplotlib.container import ErrorbarContainer, BarContainer, StemContainer\n    50\tfrom . import legend_handler\n      # ...\n    95\t\n    96\t\n    97\t_docstring.interpd.update(_legend_kw_doc=\"\"\"\n    98\tloc : str or pair of floats, default: :rc:`legend.loc` ('best' for axes, \\\n    99\t'upper right' for figures)\n   100\t    The location of the legend.\n   101\t\n   102\t    The strings\n   103\t    ``'upper left', 'upper right', 'lower left', 'lower right'``\n   104\t    place the legend at the corresponding corner of the axes/figure.\n   105\t\n   106\t    The strings\n   107\t    ``'upper center', 'lower center', 'center left', 'center right'``\n   108\t    place the legend at the center of the corresponding edge of the\n   109\t    axes/figure.\n   110\t\n   111\t    The string ``'center'`` places the legend at the center of the axes/figure.\n   112\t\n   113\t    The string ``'best'`` places the legend at the location, among the nine\n   114\t    locations defined so far, with the minimum overlap with other drawn\n   115\t    artists.  This option can be quite slow for plots with large amounts of\n   116\t    data; your plotting speed may benefit from providing a specific location.\n   117\t\n   118\t    The location can also be a 2-tuple giving the coordinates of the lower-left\n   119\t    corner of the legend in axes coordinates (in which case *bbox_to_anchor*\n   120\t    will be ignored).\n   121\t\n   122\t    For back-compatibility, ``'center right'`` (but no other location) can also\n   123\t    be spelled ``'right'``, and each \"string\" locations can also be given as a\n   124\t    numeric value:\n   125\t\n   126\t        ===============   =============\n   127\t        Location String   Location Code\n   128\t        ===============   =============\n   129\t        'best'            0\n   130\t        'upper right'     1\n   131\t        'upper left'      2\n   132\t        'lower left'      3\n   133\t        'lower right'     4\n   134\t        'right'           5\n   135\t        'center left'     6\n   136\t        'center right'    7\n   137\t        'lower center'    8\n   138\t        'upper center'    9\n   139\t        'center'          10\n   140\t        ===============   =============\n   141\t\n   142\tbbox_to_anchor : `.BboxBase`, 2-tuple, or 4-tuple of floats\n   143\t    Box that is used to position the legend in conjunction with *loc*.\n   144\t    Defaults to `axes.bbox` (if called as a method to `.Axes.legend`) or\n   145\t    `figure.bbox` (if `.Figure.legend`).  This argument allows arbitrary\n   146\t    placement of the legend.\n   147\t\n   148\t    Bbox coordinates are interpreted in the coordinate system given by\n   149\t    *bbox_transform*, with the default transform\n   150\t    Axes or Figure coordinates, depending on which ``legend`` is called.\n   151\t\n   152\t    If a 4-tuple or `.BboxBase` is given, then it specifies the bbox\n   153\t    ``(x, y, width, height)`` that the legend is placed in.\n   154\t    To put the legend in the best location in the bottom right\n   155\t    quadrant of the axes (or figure)::\n   156\t\n   157\t        loc='best', bbox_to_anchor=(0.5, 0., 0.5, 0.5)\n   158\t\n   159\t    A 2-tuple ``(x, y)`` places the corner of the legend specified by *loc* at\n   160\t    x, y.  For example, to put the legend's upper right-hand corner in the\n   161\t    center of the axes (or figure) the following keywords can be used::\n   162\t\n   163\t        loc='upper right', bbox_to_anchor=(0.5, 0.5)\n   164\t\n   165\tncols : int, default: 1\n   166\t    The number of columns that the legend has.\n   167\t\n   168\t    For backward compatibility, the spelling *ncol* is also supported\n   169\t    but it is discouraged. If both are given, *ncols* takes precedence.\n   170\t\n   171\tprop : None or `matplotlib.font_manager.FontProperties` or dict\n   172\t    The font properties of the legend. If None (default), the current\n   173\t    :data:`matplotlib.rcParams` will be used.\n   174\t\n   175\tfontsize : int or {'xx-small', 'x-small', 'small', 'medium', 'large', \\\n   176\t'x-large', 'xx-large'}\n   177\t    The font size of the legend. If the value is numeric the size will be the\n   178\t    absolute font size in points. String values are relative to the current\n   179\t    default font size. This argument is only used if *prop* is not specified.\n   180\t\n   181\tlabelcolor : str or list, default: :rc:`legend.labelcolor`\n   182\t    The color of the text in the legend. Either a valid color string\n   183\t    (for example, 'red'), or a list of color strings. The labelcolor can\n   184\t    also be made to match the color of the line or marker using 'linecolor',\n   185\t    'markerfacecolor' (or 'mfc'), or 'markeredgecolor' (or 'mec').\n   186\t\n   187\t    Labelcolor can be set globally using :rc:`legend.labelcolor`. If None,\n   188\t    use :rc:`text.color`.\n   189\t\n   190\tnumpoints : int, default: :rc:`legend.numpoints`\n   191\t    The number of marker points in the legend when creating a legend\n   192\t    entry for a `.Line2D` (line).\n   193\t\n   194\tscatterpoints : int, default: :rc:`legend.scatterpoints`\n   195\t    The number of marker points in the legend when creating\n   196\t    a legend entry for a `.PathCollection` (scatter plot).\n   197\t\n   198\tscatteryoffsets : iterable of floats, default: ``[0.375, 0.5, 0.3125]``\n   199\t    The vertical offset (relative to the font size) for the markers\n   200\t    created for a scatter plot legend entry. 0.0 is at the base the\n   201\t    legend text, and 1.0 is at the top. To draw all markers at the\n   202\t    same height, set to ``[0.5]``.\n   203\t\n   204\tmarkerscale : float, default: :rc:`legend.markerscale`\n   205\t    The relative size of legend markers compared with the originally\n   206\t    drawn ones.\n   207\t\n   208\tmarkerfirst : bool, default: True\n   209\t    If *True*, legend marker is placed to the left of the legend label.\n   210\t    If *False*, legend marker is placed to the right of the legend label.\n   211\t\n   212\tframeon : bool, default: :rc:`legend.frameon`\n   213\t    Whether the legend should be drawn on a patch (frame).\n   214\t\n   215\tfancybox : bool, default: :rc:`legend.fancybox`\n   216\t    Whether round edges should be enabled around the `.FancyBboxPatch` which\n   217\t    makes up the legend's background.\n   218\t\n   219\tshadow : bool, default: :rc:`legend.shadow`\n   220\t    Whether to draw a shadow behind the legend.\n   221\t\n   222\tframealpha : float, default: :rc:`legend.framealpha`\n   223\t    The alpha transparency of the legend's background.\n   224\t    If *shadow* is activated and *framealpha* is ``None``, the default value is\n   225\t    ignored.\n   226\t\n   227\tfacecolor : \"inherit\" or color, default: :rc:`legend.facecolor`\n   228\t    The legend's background color.\n   229\t    If ``\"inherit\"``, use :rc:`axes.facecolor`.\n   230\t\n   231\tedgecolor : \"inherit\" or color, default: :rc:`legend.edgecolor`\n   232\t    The legend's background patch edge color.\n   233\t    If ``\"inherit\"``, use take :rc:`axes.edgecolor`.\n   234\t\n   235\tmode : {\"expand\", None}\n   236\t    If *mode* is set to ``\"expand\"`` the legend will be horizontally\n   237\t    expanded to fill the axes area (or *bbox_to_anchor* if defines\n   238\t    the legend's size).\n   239\t\n   240\tbbox_transform : None or `matplotlib.transforms.Transform`\n   241\t    The transform for the bounding box (*bbox_to_anchor*). For a value\n   242\t    of ``None`` (default) the Axes'\n   243\t    :data:`~matplotlib.axes.Axes.transAxes` transform will be used.\n   244\t\n   245\ttitle : str or None\n   246\t    The legend's title. Default is no title (``None``).\n   247\t\n   248\ttitle_fontproperties : None or `matplotlib.font_manager.FontProperties` or dict\n   249\t    The font properties of the legend's title. If None (default), the\n   250\t    *title_fontsize* argument will be used if present; if *title_fontsize* is\n   251\t    also None, the current :rc:`legend.title_fontsize` will be used.\n   252\t\n   253\ttitle_fontsize : int or {'xx-small', 'x-small', 'small', 'medium', 'large', \\\n   254\t'x-large', 'xx-large'}, default: :rc:`legend.title_fontsize`\n   255\t    The font size of the legend's title.\n   256\t    Note: This cannot be combined with *title_fontproperties*. If you want\n   257\t    to set the fontsize alongside other font properties, use the *size*\n   258\t    parameter in *title_fontproperties*.\n   259\t\n   260\talignment : {'center', 'left', 'right'}, default: 'center'\n   261\t    The alignment of the legend title and the box of entries. The entries\n   262\t    are aligned as a single block, so that markers always lined up.\n   263\t\n   264\tborderpad : float, default: :rc:`legend.borderpad`\n   265\t    The fractional whitespace inside the legend border, in font-size units.\n   266\t\n   267\tlabelspacing : float, default: :rc:`legend.labelspacing`\n   268\t    The vertical space between the legend entries, in font-size units.\n   269\t\n   270\thandlelength : float, default: :rc:`legend.handlelength`\n   271\t    The length of the legend handles, in font-size units.\n   272\t\n   273\thandleheight : float, default: :rc:`legend.handleheight`\n   274\t    The height of the legend handles, in font-size units.\n   275\t\n   276\thandletextpad : float, default: :rc:`legend.handletextpad`\n   277\t    The pad between the legend handle and text, in font-size units.\n   278\t\n   279\tborderaxespad : float, default: :rc:`legend.borderaxespad`\n   280\t    The pad between the axes and legend border, in font-size units.\n   281\t\n   282\tcolumnspacing : float, default: :rc:`legend.columnspacing`\n   283\t    The spacing between columns, in font-size units.\n   284\t\n   285\thandler_map : dict or None\n   286\t    The custom dictionary mapping instances or types to a legend\n   287\t    handler. This *handler_map* updates the default handler map\n   288\t    found at `matplotlib.legend.Legend.get_legend_handler_map`.\n   289\t\"\"\")\n      # ...\n```\n\n</observation>",
                  "type": "tool_result",
                  "cache_control": {
                    "type": "ephemeral"
                  }
                }
              ]
            }
          ],
          "response": {
            "id": "msg_01LLwZTQC7vbUyBzQL1979SW",
            "content": [
              {
                "text": "<thoughts>\n1. I found that the docstring is defined in _legend_kw_doc template\n2. I need to add the draggable parameter documentation to this template\n3. Let me update the template with the new parameter\n</thoughts>",
                "type": "text"
              },
              {
                "id": "toolu_012JAntqaeHJE1pTQRrkgyPf",
                "input": {
                  "command": "str_replace",
                  "path": "lib/matplotlib/legend.py",
                  "file_text": "null",
                  "view_range": "null",
                  "old_str": "handler_map : dict or None\n    The custom dictionary mapping instances or types to a legend\n    handler. This *handler_map* updates the default handler map\n    found at `matplotlib.legend.Legend.get_legend_handler_map`.\n\"\"\")",
                  "new_str": "handler_map : dict or None\n    The custom dictionary mapping instances or types to a legend\n    handler. This *handler_map* updates the default handler map\n    found at `matplotlib.legend.Legend.get_legend_handler_map`.\n\ndraggable : bool, default: False\n    Enable mouse dragging support for the legend.\n\"\"\")",
                  "insert_line": "null"
                },
                "name": "str_replace_editor",
                "type": "tool_use"
              }
            ],
            "model": "claude-3-5-sonnet-20241022",
            "role": "assistant",
            "stop_reason": "tool_use",
            "stop_sequence": null,
            "type": "message",
            "usage": {
              "cache_creation_input_tokens": 3483,
              "cache_read_input_tokens": 17831,
              "input_tokens": 0,
              "output_tokens": 361
            }
          },
          "usage": {
            "completion_cost": 0.015864,
            "completion_tokens": 361,
            "prompt_tokens": 3483,
            "cached_tokens": 17831
          }
        }
      },
      "possible_actions": [
        "SemanticSearch",
        "FindClass",
        "FindFunction",
        "FindCodeSnippet",
        "RequestMoreContext",
        "ClaudeEditTool",
        "Finish",
        "Reject"
      ],
      "output": {
        "message": "The file lib/matplotlib/legend.py has been edited. Here's the result of running `cat -n` on a snippet of lib/matplotlib/legend.py:\n   285\t    The pad between the axes and legend border, in font-size units.\n   286\t\n   287\tcolumnspacing : float, default: :rc:`legend.columnspacing`\n   288\t    The spacing between columns, in font-size units.\n   289\t\n   290\thandler_map : dict or None\n   291\t    The custom dictionary mapping instances or types to a legend\n   292\t    handler. This *handler_map* updates the default handler map\n   293\t    found at `matplotlib.legend.Legend.get_legend_handler_map`.\n   294\t\n   295\tdraggable : bool, default: False\n   296\t    Enable mouse dragging support for the legend.\n   297\t\"\"\")\n   298\t\n   299\t\n   300\tclass Legend(Artist):\nReview the changes and make sure they are as expected. Edit the file again if necessary.\n\nRunning 936 tests in the following files:\n * lib/matplotlib/tests/test_legend.py\n * lib/matplotlib/tests/test_contour.py\n * lib/matplotlib/tests/test_axes.py\n\n* FAILED lib/matplotlib/tests/test_contour.py test_contourf_log_extension>\n```\n\n    @image_comparison(['contour_log_extension.png'],\n                      remove_text=True, style='mpl20',\n                      tol=1.444)\n    def test_contourf_log_extension():\n        # Remove this line when this test image is regenerated.\n        plt.rcParams['pcolormesh.snap'] = False\n    \n        # Test that contourf with lognorm is extended correctly\n        fig, (ax1, ax2, ax3) = plt.subplots(1, 3, figsize=(10, 5))\n        fig.subplots_adjust(left=0.05, right=0.95)\n    \n        # make data set with large range e.g. between 1e-8 and 1e10\n        data_exp = np.linspace(-7.5, 9.5, 1200)\n        data = np.power(10, data_exp).reshape(30, 40)\n        # make manual levels e.g. between 1e-4 and 1e-6\n        levels_exp = np.arange(-4., 7.)\n        levels = np.power(10., levels_exp)\n    \n        # original data\n        c1 = ax1.contourf(data,\n                          norm=LogNorm(vmin=data.min(), vmax=data.max()))\n        # just show data in levels\n        c2 = ax2.contourf(data, levels=levels,\n                          norm=LogNorm(vmin=levels.min(), vmax=levels.max()),\n                          extend='neither')\n        # extend data from levels\n        c3 = ax3.contourf(data, levels=levels,\n                          norm=LogNorm(vmin=levels.min(), vmax=levels.max()),\n                          extend='both')\n        cb = plt.colorbar(c1, ax=ax1)\n        assert cb.ax.get_ylim() == (1e-8, 1e10)\n        cb = plt.colorbar(c2, ax=ax2)\n>       assert cb.ax.get_ylim() == (1e-4, 1e6)\nE       assert (9.9999999999...05, 1000000.0) == (0.0001, 1000000.0)\nE         \nE         At index 0 diff: 9.999999999999999e-05 != 0.0001\nE         Use -v to get more diff\n\nlib/matplotlib/tests/test_contour.py:316: AssertionError\n```\n\n\n935 passed. 1 failed. 0 errors.",
        "terminal": false,
        "expect_correction": false,
        "properties": {
          "flags": [
            "lines_not_in_context"
          ],
          "diff": "--- lib/matplotlib/legend.py\n+++ lib/matplotlib/legend.py\n@@ -286,6 +286,9 @@\n     The custom dictionary mapping instances or types to a legend\n     handler. This *handler_map* updates the default handler map\n     found at `matplotlib.legend.Legend.get_legend_handler_map`.\n+\n+draggable : bool, default: False\n+    Enable mouse dragging support for the legend.\n \"\"\")\n \n \n",
          "test_results": [
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_legend.py::test_legend_ordereddict",
              "file_path": "lib/matplotlib/tests/test_legend.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_legend.py::test_legend_auto1[png]",
              "file_path": "lib/matplotlib/tests/test_legend.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_legend.py::test_legend_auto1[pdf]",
              "file_path": "lib/matplotlib/tests/test_legend.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_legend.py::test_legend_auto2[png]",
              "file_path": "lib/matplotlib/tests/test_legend.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_legend.py::test_legend_auto2[pdf]",
              "file_path": "lib/matplotlib/tests/test_legend.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_legend.py::test_legend_auto3[png]",
              "file_path": "lib/matplotlib/tests/test_legend.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_legend.py::test_legend_auto3[pdf]",
              "file_path": "lib/matplotlib/tests/test_legend.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_legend.py::test_various_labels[png]",
              "file_path": "lib/matplotlib/tests/test_legend.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_legend.py::test_various_labels[pdf]",
              "file_path": "lib/matplotlib/tests/test_legend.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_legend.py::test_legend_label_with_leading_underscore",
              "file_path": "lib/matplotlib/tests/test_legend.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_legend.py::test_labels_first[png]",
              "file_path": "lib/matplotlib/tests/test_legend.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_legend.py::test_multiple_keys[png]",
              "file_path": "lib/matplotlib/tests/test_legend.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_legend.py::test_alpha_rgba[png]",
              "file_path": "lib/matplotlib/tests/test_legend.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_legend.py::test_alpha_rcparam[png]",
              "file_path": "lib/matplotlib/tests/test_legend.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_legend.py::test_fancy[png]",
              "file_path": "lib/matplotlib/tests/test_legend.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_legend.py::test_fancy[pdf]",
              "file_path": "lib/matplotlib/tests/test_legend.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_legend.py::test_framealpha[png]",
              "file_path": "lib/matplotlib/tests/test_legend.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_legend.py::test_framealpha[pdf]",
              "file_path": "lib/matplotlib/tests/test_legend.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_legend.py::test_rc[png]",
              "file_path": "lib/matplotlib/tests/test_legend.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_legend.py::test_rc[pdf]",
              "file_path": "lib/matplotlib/tests/test_legend.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_legend.py::test_legend_expand[png]",
              "file_path": "lib/matplotlib/tests/test_legend.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_legend.py::test_legend_expand[pdf]",
              "file_path": "lib/matplotlib/tests/test_legend.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_legend.py::test_hatching[png]",
              "file_path": "lib/matplotlib/tests/test_legend.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_legend.py::test_hatching[pdf]",
              "file_path": "lib/matplotlib/tests/test_legend.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_legend.py::test_legend_remove",
              "file_path": "lib/matplotlib/tests/test_legend.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_legend.py::TestLegendFunction::test_legend_no_args",
              "file_path": "lib/matplotlib/tests/test_legend.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_legend.py::TestLegendFunction::test_legend_positional_handles_labels",
              "file_path": "lib/matplotlib/tests/test_legend.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_legend.py::TestLegendFunction::test_legend_positional_handles_only",
              "file_path": "lib/matplotlib/tests/test_legend.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_legend.py::TestLegendFunction::test_legend_positional_labels_only",
              "file_path": "lib/matplotlib/tests/test_legend.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_legend.py::TestLegendFunction::test_legend_three_args",
              "file_path": "lib/matplotlib/tests/test_legend.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_legend.py::TestLegendFunction::test_legend_handler_map",
              "file_path": "lib/matplotlib/tests/test_legend.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_legend.py::TestLegendFunction::test_legend_kwargs_handles_only",
              "file_path": "lib/matplotlib/tests/test_legend.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_legend.py::TestLegendFunction::test_legend_kwargs_labels_only",
              "file_path": "lib/matplotlib/tests/test_legend.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_legend.py::TestLegendFunction::test_legend_kwargs_handles_labels",
              "file_path": "lib/matplotlib/tests/test_legend.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_legend.py::TestLegendFunction::test_warn_mixed_args_and_kwargs",
              "file_path": "lib/matplotlib/tests/test_legend.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_legend.py::TestLegendFunction::test_parasite",
              "file_path": "lib/matplotlib/tests/test_legend.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_legend.py::TestLegendFigureFunction::test_legend_handle_label",
              "file_path": "lib/matplotlib/tests/test_legend.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_legend.py::TestLegendFigureFunction::test_legend_no_args",
              "file_path": "lib/matplotlib/tests/test_legend.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_legend.py::TestLegendFigureFunction::test_legend_label_arg",
              "file_path": "lib/matplotlib/tests/test_legend.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_legend.py::TestLegendFigureFunction::test_legend_label_three_args",
              "file_path": "lib/matplotlib/tests/test_legend.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_legend.py::TestLegendFigureFunction::test_legend_label_three_args_pluskw",
              "file_path": "lib/matplotlib/tests/test_legend.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_legend.py::TestLegendFigureFunction::test_legend_kw_args",
              "file_path": "lib/matplotlib/tests/test_legend.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_legend.py::TestLegendFigureFunction::test_warn_args_kwargs",
              "file_path": "lib/matplotlib/tests/test_legend.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_legend.py::test_legend_stackplot[png]",
              "file_path": "lib/matplotlib/tests/test_legend.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_legend.py::test_cross_figure_patch_legend",
              "file_path": "lib/matplotlib/tests/test_legend.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_legend.py::test_nanscatter",
              "file_path": "lib/matplotlib/tests/test_legend.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_legend.py::test_legend_repeatcheckok",
              "file_path": "lib/matplotlib/tests/test_legend.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_legend.py::test_not_covering_scatter[png]",
              "file_path": "lib/matplotlib/tests/test_legend.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_legend.py::test_not_covering_scatter_transform[png]",
              "file_path": "lib/matplotlib/tests/test_legend.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_legend.py::test_linecollection_scaled_dashes",
              "file_path": "lib/matplotlib/tests/test_legend.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_legend.py::test_handler_numpoints",
              "file_path": "lib/matplotlib/tests/test_legend.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_legend.py::test_text_nohandler_warning",
              "file_path": "lib/matplotlib/tests/test_legend.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_legend.py::test_empty_bar_chart_with_legend",
              "file_path": "lib/matplotlib/tests/test_legend.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_legend.py::test_shadow_framealpha",
              "file_path": "lib/matplotlib/tests/test_legend.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_legend.py::test_legend_title_empty",
              "file_path": "lib/matplotlib/tests/test_legend.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_legend.py::test_legend_proper_window_extent",
              "file_path": "lib/matplotlib/tests/test_legend.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_legend.py::test_window_extent_cached_renderer",
              "file_path": "lib/matplotlib/tests/test_legend.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_legend.py::test_legend_title_fontprop_fontsize",
              "file_path": "lib/matplotlib/tests/test_legend.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_legend.py::test_legend_alignment[center]",
              "file_path": "lib/matplotlib/tests/test_legend.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_legend.py::test_legend_alignment[left]",
              "file_path": "lib/matplotlib/tests/test_legend.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_legend.py::test_legend_alignment[right]",
              "file_path": "lib/matplotlib/tests/test_legend.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_legend.py::test_legend_set_alignment[center]",
              "file_path": "lib/matplotlib/tests/test_legend.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_legend.py::test_legend_set_alignment[left]",
              "file_path": "lib/matplotlib/tests/test_legend.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_legend.py::test_legend_set_alignment[right]",
              "file_path": "lib/matplotlib/tests/test_legend.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_legend.py::test_legend_labelcolor_single[red]",
              "file_path": "lib/matplotlib/tests/test_legend.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_legend.py::test_legend_labelcolor_single[none]",
              "file_path": "lib/matplotlib/tests/test_legend.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_legend.py::test_legend_labelcolor_single[color2]",
              "file_path": "lib/matplotlib/tests/test_legend.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_legend.py::test_legend_labelcolor_list",
              "file_path": "lib/matplotlib/tests/test_legend.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_legend.py::test_legend_labelcolor_linecolor",
              "file_path": "lib/matplotlib/tests/test_legend.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_legend.py::test_legend_labelcolor_markeredgecolor",
              "file_path": "lib/matplotlib/tests/test_legend.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_legend.py::test_legend_labelcolor_markerfacecolor",
              "file_path": "lib/matplotlib/tests/test_legend.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_legend.py::test_legend_labelcolor_rcparam_single[red]",
              "file_path": "lib/matplotlib/tests/test_legend.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_legend.py::test_legend_labelcolor_rcparam_single[none]",
              "file_path": "lib/matplotlib/tests/test_legend.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_legend.py::test_legend_labelcolor_rcparam_single[color2]",
              "file_path": "lib/matplotlib/tests/test_legend.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_legend.py::test_legend_labelcolor_rcparam_linecolor",
              "file_path": "lib/matplotlib/tests/test_legend.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_legend.py::test_legend_labelcolor_rcparam_markeredgecolor",
              "file_path": "lib/matplotlib/tests/test_legend.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_legend.py::test_legend_labelcolor_rcparam_markeredgecolor_short",
              "file_path": "lib/matplotlib/tests/test_legend.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_legend.py::test_legend_labelcolor_rcparam_markerfacecolor",
              "file_path": "lib/matplotlib/tests/test_legend.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_legend.py::test_legend_labelcolor_rcparam_markerfacecolor_short",
              "file_path": "lib/matplotlib/tests/test_legend.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_legend.py::test_get_set_draggable",
              "file_path": "lib/matplotlib/tests/test_legend.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_legend.py::test_alpha_handles",
              "file_path": "lib/matplotlib/tests/test_legend.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_legend.py::test_usetex_no_warn",
              "file_path": "lib/matplotlib/tests/test_legend.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_legend.py::test_warn_big_data_best_loc",
              "file_path": "lib/matplotlib/tests/test_legend.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_legend.py::test_no_warn_big_data_when_loc_specified",
              "file_path": "lib/matplotlib/tests/test_legend.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_legend.py::test_plot_multiple_input_multiple_label[label_array0]",
              "file_path": "lib/matplotlib/tests/test_legend.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_legend.py::test_plot_multiple_input_multiple_label[label_array1]",
              "file_path": "lib/matplotlib/tests/test_legend.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_legend.py::test_plot_multiple_input_multiple_label[label_array2]",
              "file_path": "lib/matplotlib/tests/test_legend.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_legend.py::test_plot_multiple_input_single_label[one]",
              "file_path": "lib/matplotlib/tests/test_legend.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_legend.py::test_plot_multiple_input_single_label[1]",
              "file_path": "lib/matplotlib/tests/test_legend.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_legend.py::test_plot_multiple_input_single_label[int]",
              "file_path": "lib/matplotlib/tests/test_legend.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_legend.py::test_plot_single_input_multiple_label[label_array0]",
              "file_path": "lib/matplotlib/tests/test_legend.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_legend.py::test_plot_single_input_multiple_label[label_array1]",
              "file_path": "lib/matplotlib/tests/test_legend.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_legend.py::test_plot_single_input_multiple_label[label_array2]",
              "file_path": "lib/matplotlib/tests/test_legend.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_legend.py::test_plot_multiple_label_incorrect_length_exception",
              "file_path": "lib/matplotlib/tests/test_legend.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_legend.py::test_legend_face_edgecolor",
              "file_path": "lib/matplotlib/tests/test_legend.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_legend.py::test_legend_text_axes",
              "file_path": "lib/matplotlib/tests/test_legend.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_legend.py::test_handlerline2d",
              "file_path": "lib/matplotlib/tests/test_legend.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_legend.py::test_subfigure_legend",
              "file_path": "lib/matplotlib/tests/test_legend.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_legend.py::test_setting_alpha_keeps_polycollection_color",
              "file_path": "lib/matplotlib/tests/test_legend.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_legend.py::test_legend_markers_from_line2d",
              "file_path": "lib/matplotlib/tests/test_legend.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_legend.py::test_ncol_ncols[png]",
              "file_path": "lib/matplotlib/tests/test_legend.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_legend.py::test_ncol_ncols[pdf]",
              "file_path": "lib/matplotlib/tests/test_legend.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "SKIPPED",
              "message": "../opt/miniconda3/envs/testbed/lib/python3.11/contextlib.py:81: Cannot compare svg files because Inkscape is not installed",
              "file_path": "../opt/miniconda3/envs/testbed/lib/python3.11/contextlib.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "SKIPPED",
              "message": "lib/matplotlib/testing/compare.py:285: Don't know how to convert .svg files to png",
              "file_path": "lib/matplotlib/testing/compare.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_contour.py::test_contour_shape_1d_valid",
              "file_path": "lib/matplotlib/tests/test_contour.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_contour.py::test_contour_shape_2d_valid",
              "file_path": "lib/matplotlib/tests/test_contour.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_contour.py::test_contour_shape_error[args0-Length",
              "file_path": "lib/matplotlib/tests/test_contour.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_contour.py::test_contour_shape_error[args1-Length",
              "file_path": "lib/matplotlib/tests/test_contour.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_contour.py::test_contour_shape_error[args2-Number",
              "file_path": "lib/matplotlib/tests/test_contour.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_contour.py::test_contour_shape_error[args3-Number",
              "file_path": "lib/matplotlib/tests/test_contour.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_contour.py::test_contour_shape_error[args4-Shapes",
              "file_path": "lib/matplotlib/tests/test_contour.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_contour.py::test_contour_shape_error[args5-Shapes",
              "file_path": "lib/matplotlib/tests/test_contour.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_contour.py::test_contour_shape_error[args6-Inputs",
              "file_path": "lib/matplotlib/tests/test_contour.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_contour.py::test_contour_shape_error[args7-Input",
              "file_path": "lib/matplotlib/tests/test_contour.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_contour.py::test_contour_shape_error[args8-Input",
              "file_path": "lib/matplotlib/tests/test_contour.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_contour.py::test_contour_shape_error[args9-Input",
              "file_path": "lib/matplotlib/tests/test_contour.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_contour.py::test_contour_empty_levels",
              "file_path": "lib/matplotlib/tests/test_contour.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_contour.py::test_contour_Nlevels",
              "file_path": "lib/matplotlib/tests/test_contour.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_contour.py::test_contour_badlevel_fmt",
              "file_path": "lib/matplotlib/tests/test_contour.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_contour.py::test_contour_uniform_z",
              "file_path": "lib/matplotlib/tests/test_contour.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_contour.py::test_contour_manual_labels[png]",
              "file_path": "lib/matplotlib/tests/test_contour.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_contour.py::test_contour_manual_labels[pdf]",
              "file_path": "lib/matplotlib/tests/test_contour.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_contour.py::test_given_colors_levels_and_extends[png]",
              "file_path": "lib/matplotlib/tests/test_contour.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_contour.py::test_contour_datetime_axis[png]",
              "file_path": "lib/matplotlib/tests/test_contour.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_contour.py::test_labels[png]",
              "file_path": "lib/matplotlib/tests/test_contour.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_contour.py::test_corner_mask[png]",
              "file_path": "lib/matplotlib/tests/test_contour.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_contour.py::test_contourf_decreasing_levels",
              "file_path": "lib/matplotlib/tests/test_contour.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_contour.py::test_contourf_symmetric_locator",
              "file_path": "lib/matplotlib/tests/test_contour.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_contour.py::test_circular_contour_warning",
              "file_path": "lib/matplotlib/tests/test_contour.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_contour.py::test_clabel_zorder[True-123-1234]",
              "file_path": "lib/matplotlib/tests/test_contour.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_contour.py::test_clabel_zorder[False-123-1234]",
              "file_path": "lib/matplotlib/tests/test_contour.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_contour.py::test_clabel_zorder[True-123-None]",
              "file_path": "lib/matplotlib/tests/test_contour.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_contour.py::test_clabel_zorder[False-123-None]",
              "file_path": "lib/matplotlib/tests/test_contour.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_contour.py::test_contour_addlines[png]",
              "file_path": "lib/matplotlib/tests/test_contour.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_contour.py::test_contour_uneven[png]",
              "file_path": "lib/matplotlib/tests/test_contour.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_contour.py::test_contour_linewidth[1.23-None-None-1.23]",
              "file_path": "lib/matplotlib/tests/test_contour.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_contour.py::test_contour_linewidth[1.23-4.24-None-4.24]",
              "file_path": "lib/matplotlib/tests/test_contour.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_contour.py::test_contour_linewidth[1.23-4.24-5.02-5.02]",
              "file_path": "lib/matplotlib/tests/test_contour.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_contour.py::test_label_nonagg",
              "file_path": "lib/matplotlib/tests/test_contour.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_contour.py::test_contour_closed_line_loop[png]",
              "file_path": "lib/matplotlib/tests/test_contour.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_contour.py::test_quadcontourset_reuse",
              "file_path": "lib/matplotlib/tests/test_contour.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_contour.py::test_contour_manual[png]",
              "file_path": "lib/matplotlib/tests/test_contour.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_contour.py::test_contour_line_start_on_corner_edge[png]",
              "file_path": "lib/matplotlib/tests/test_contour.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_contour.py::test_find_nearest_contour",
              "file_path": "lib/matplotlib/tests/test_contour.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_contour.py::test_find_nearest_contour_no_filled",
              "file_path": "lib/matplotlib/tests/test_contour.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_contour.py::test_contour_autolabel_beyond_powerlimits",
              "file_path": "lib/matplotlib/tests/test_contour.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_contour.py::test_contourf_legend_elements",
              "file_path": "lib/matplotlib/tests/test_contour.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_contour.py::test_contour_legend_elements",
              "file_path": "lib/matplotlib/tests/test_contour.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_contour.py::test_algorithm_name[mpl2005-Mpl2005ContourGenerator]",
              "file_path": "lib/matplotlib/tests/test_contour.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_contour.py::test_algorithm_name[mpl2014-Mpl2014ContourGenerator]",
              "file_path": "lib/matplotlib/tests/test_contour.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_contour.py::test_algorithm_name[serial-SerialContourGenerator]",
              "file_path": "lib/matplotlib/tests/test_contour.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_contour.py::test_algorithm_name[threaded-ThreadedContourGenerator]",
              "file_path": "lib/matplotlib/tests/test_contour.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_contour.py::test_algorithm_name[invalid-None]",
              "file_path": "lib/matplotlib/tests/test_contour.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_contour.py::test_algorithm_supports_corner_mask[mpl2005]",
              "file_path": "lib/matplotlib/tests/test_contour.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_contour.py::test_algorithm_supports_corner_mask[mpl2014]",
              "file_path": "lib/matplotlib/tests/test_contour.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_contour.py::test_algorithm_supports_corner_mask[serial]",
              "file_path": "lib/matplotlib/tests/test_contour.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_contour.py::test_algorithm_supports_corner_mask[threaded]",
              "file_path": "lib/matplotlib/tests/test_contour.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_contour.py::test_all_algorithms[png]",
              "file_path": "lib/matplotlib/tests/test_contour.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_contour.py::test_subfigure_clabel",
              "file_path": "lib/matplotlib/tests/test_contour.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_contour.py::test_linestyles[solid]",
              "file_path": "lib/matplotlib/tests/test_contour.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_contour.py::test_linestyles[dashed]",
              "file_path": "lib/matplotlib/tests/test_contour.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_contour.py::test_linestyles[dashdot]",
              "file_path": "lib/matplotlib/tests/test_contour.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_contour.py::test_linestyles[dotted]",
              "file_path": "lib/matplotlib/tests/test_contour.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_contour.py::test_negative_linestyles[solid]",
              "file_path": "lib/matplotlib/tests/test_contour.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_contour.py::test_negative_linestyles[dashed]",
              "file_path": "lib/matplotlib/tests/test_contour.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_contour.py::test_negative_linestyles[dashdot]",
              "file_path": "lib/matplotlib/tests/test_contour.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_contour.py::test_negative_linestyles[dotted]",
              "file_path": "lib/matplotlib/tests/test_contour.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "SKIPPED",
              "message": "../opt/miniconda3/envs/testbed/lib/python3.11/contextlib.py:81: Cannot compare svg files because Inkscape is not installed",
              "file_path": "../opt/miniconda3/envs/testbed/lib/python3.11/contextlib.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "FAILED",
              "message": "\n    @image_comparison(['contour_log_extension.png'],\n                      remove_text=True, style='mpl20',\n                      tol=1.444)\n    def test_contourf_log_extension():\n        # Remove this line when this test image is regenerated.\n        plt.rcParams['pcolormesh.snap'] = False\n    \n        # Test that contourf with lognorm is extended correctly\n        fig, (ax1, ax2, ax3) = plt.subplots(1, 3, figsize=(10, 5))\n        fig.subplots_adjust(left=0.05, right=0.95)\n    \n        # make data set with large range e.g. between 1e-8 and 1e10\n        data_exp = np.linspace(-7.5, 9.5, 1200)\n        data = np.power(10, data_exp).reshape(30, 40)\n        # make manual levels e.g. between 1e-4 and 1e-6\n        levels_exp = np.arange(-4., 7.)\n        levels = np.power(10., levels_exp)\n    \n        # original data\n        c1 = ax1.contourf(data,\n                          norm=LogNorm(vmin=data.min(), vmax=data.max()))\n        # just show data in levels\n        c2 = ax2.contourf(data, levels=levels,\n                          norm=LogNorm(vmin=levels.min(), vmax=levels.max()),\n                          extend='neither')\n        # extend data from levels\n        c3 = ax3.contourf(data, levels=levels,\n                          norm=LogNorm(vmin=levels.min(), vmax=levels.max()),\n                          extend='both')\n        cb = plt.colorbar(c1, ax=ax1)\n        assert cb.ax.get_ylim() == (1e-8, 1e10)\n        cb = plt.colorbar(c2, ax=ax2)\n>       assert cb.ax.get_ylim() == (1e-4, 1e6)\nE       assert (9.9999999999...05, 1000000.0) == (0.0001, 1000000.0)\nE         \nE         At index 0 diff: 9.999999999999999e-05 != 0.0001\nE         Use -v to get more diff\n\nlib/matplotlib/tests/test_contour.py:316: AssertionError",
              "file_path": "lib/matplotlib/tests/test_contour.py",
              "span_id": "test_contourf_log_extension",
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_invisible_axes[png]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_get_labels",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_repr",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_label_loc_vertical[png]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_label_loc_vertical[pdf]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_label_loc_horizontal[png]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_label_loc_horizontal[pdf]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_label_loc_rc[png]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_label_loc_rc[pdf]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_label_shift",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_acorr[png]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_spy[png]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_spy_invalid_kwargs",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_matshow[png]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_formatter_ticker[png]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_formatter_ticker[pdf]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_funcformatter_auto_formatter",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_strmethodformatter_auto_formatter",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_twin_axis_locators_formatters[png]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_twin_axis_locators_formatters[pdf]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_twinx_cla",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_twin_logscale[png-x]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_twin_logscale[png-y]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_twinx_axis_scales[png]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_twin_inherit_autoscale_setting",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_inverted_cla",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_subclass_clear_cla",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_cla_not_redefined_internally",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_minorticks_on_rcParams_both[png]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_autoscale_tiny_range[png]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_autoscale_tiny_range[pdf]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_autoscale_tight",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_autoscale_log_shared",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_use_sticky_edges",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_sticky_shared_axes[png]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_basic_annotate[png]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_basic_annotate[pdf]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_arrow_simple[png]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_arrow_empty",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_arrow_in_view",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_annotate_default_arrow",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_annotate_signature",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_fill_units[png]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_plot_format_kwarg_redundant",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_errorbar_dashes[png]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_single_point[png]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_single_point[pdf]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_single_date[png]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_shaped_data[png]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_structured_data",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_aitoff_proj[png]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_axvspan_epoch[png]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_axvspan_epoch[pdf]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_axhspan_epoch[png]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_axhspan_epoch[pdf]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_hexbin_extent[png]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_hexbin_empty[png]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_hexbin_pickable",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_hexbin_log[png]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_hexbin_linear[png]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_hexbin_log_clim",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_inverted_limits",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_nonfinite_limits[png]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_nonfinite_limits[pdf]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_limits_empty_data[png-scatter]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_limits_empty_data[png-plot]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_limits_empty_data[png-fill_between]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_imshow[png]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_imshow[pdf]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_imshow_clip[png]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_imshow_clip[pdf]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_imshow_norm_vminvmax",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_polycollection_joinstyle[png]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_polycollection_joinstyle[pdf]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_fill_between_input[2d_x_input]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_fill_between_input[2d_y1_input]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_fill_between_input[2d_y2_input]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_fill_betweenx_input[2d_y_input]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_fill_betweenx_input[2d_x1_input]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_fill_betweenx_input[2d_x2_input]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_fill_between_interpolate[png]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_fill_between_interpolate[pdf]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_fill_between_interpolate_decreasing[png]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_fill_between_interpolate_decreasing[pdf]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_fill_between_interpolate_nan[png]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_fill_between_interpolate_nan[pdf]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_symlog[pdf]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_symlog2[pdf]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_pcolorargs_5205",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_pcolormesh[png]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_pcolormesh[pdf]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_pcolormesh_small[eps]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_pcolormesh_alpha[png]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_pcolormesh_alpha[pdf]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_pcolormesh_datetime_axis[png]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_pcolor_datetime_axis[png]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_pcolorargs",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_pcolornearest[png]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_pcolornearestunits[png]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_pcolorflaterror",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_pcolorauto[png-False]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_pcolorauto[png-True]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_canonical[png]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_canonical[pdf]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_arc_angles[png]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_arc_ellipse[png]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_arc_ellipse[pdf]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_marker_as_markerstyle",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_markevery[png]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_markevery[pdf]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_markevery_line[png]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_markevery_line[pdf]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_markevery_linear_scales[png]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_markevery_linear_scales[pdf]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_markevery_linear_scales_zoomed[png]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_markevery_linear_scales_zoomed[pdf]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_markevery_log_scales[png]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_markevery_log_scales[pdf]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_markevery_polar[png]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_markevery_polar[pdf]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_markevery_linear_scales_nans[png]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_markevery_linear_scales_nans[pdf]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_marker_edges[png]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_marker_edges[pdf]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_bar_tick_label_single[png]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_nan_bar_values",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_bar_ticklabel_fail",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_bar_tick_label_multiple[png]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_bar_tick_label_multiple_old_alignment[png]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_bar_decimal_center[png]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_barh_decimal_center[png]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_bar_decimal_width[png]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_barh_decimal_height[png]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_bar_color_none_alpha",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_bar_edgecolor_none_alpha",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_barh_tick_label[png]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_bar_timedelta",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_boxplot_dates_pandas",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_boxplot_capwidths",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_pcolor_regression",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_bar_pandas",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_bar_pandas_indexed",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_bar_hatches[png]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_bar_hatches[pdf]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_bar_labels[x-1-x-expected_labels0-x]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_bar_labels[x1-width1-label1-expected_labels1-_nolegend_]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_bar_labels[x2-width2-label2-expected_labels2-_nolegend_]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_bar_labels[x3-width3-bars-expected_labels3-bars]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_bar_labels_length",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_pandas_minimal_plot",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_hist_log[png]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_hist_log[pdf]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_hist_log_2[png]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_hist_log_barstacked",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_hist_bar_empty[png]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_hist_float16",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_hist_step_empty[png]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_hist_step_filled[png]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_hist_density[png]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_hist_unequal_bins_density",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_hist_datetime_datasets",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_hist_datetime_datasets_bins[date2num]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_hist_datetime_datasets_bins[datetime.datetime]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_hist_datetime_datasets_bins[np.datetime64]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_hist_with_empty_input[data0-1]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_hist_with_empty_input[data1-1]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_hist_with_empty_input[data2-2]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_hist_zorder[bar-1]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_hist_zorder[step-2]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_hist_zorder[stepfilled-1]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_stairs[png]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_stairs_fill[png]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_stairs_update[png]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_stairs_baseline_0[png]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_stairs_empty",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_stairs_invalid_nan",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_stairs_invalid_mismatch",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_stairs_invalid_update",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_stairs_invalid_update2",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_stairs_options[png]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_stairs_datetime[png]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_stairs_edge_handling[png]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_contour_hatching[png]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_contour_hatching[pdf]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_contour_colorbar[png]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_contour_colorbar[pdf]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_hist2d[png]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_hist2d[pdf]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_hist2d_transpose[png]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_hist2d_transpose[pdf]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_hist2d_density",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::TestScatter::test_scatter_plot[png]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::TestScatter::test_scatter_plot[pdf]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::TestScatter::test_scatter_marker[png]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::TestScatter::test_scatter_2D[png]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::TestScatter::test_scatter_decimal[png]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::TestScatter::test_scatter_color",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::TestScatter::test_scatter_color_warning[kwargs0]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::TestScatter::test_scatter_color_warning[kwargs1]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::TestScatter::test_scatter_color_warning[kwargs2]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::TestScatter::test_scatter_color_warning[kwargs3]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::TestScatter::test_scatter_unfilled",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::TestScatter::test_scatter_unfillable",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::TestScatter::test_scatter_size_arg_size",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::TestScatter::test_scatter_edgecolor_RGB",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::TestScatter::test_scatter_invalid_color[png]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::TestScatter::test_scatter_no_invalid_color[png]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::TestScatter::test_scatter_norm_vminvmax",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::TestScatter::test_scatter_single_point[png]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::TestScatter::test_scatter_different_shapes[png]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::TestScatter::test_scatter_c[0.5-None]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::TestScatter::test_scatter_c[c_case1-conversion]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::TestScatter::test_scatter_c[red-None]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::TestScatter::test_scatter_c[none-None]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::TestScatter::test_scatter_c[None-None]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::TestScatter::test_scatter_c[c_case5-None]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::TestScatter::test_scatter_c[jaune-conversion]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::TestScatter::test_scatter_c[c_case7-conversion]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::TestScatter::test_scatter_c[c_case8-conversion]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::TestScatter::test_scatter_c[c_case9-None]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::TestScatter::test_scatter_c[c_case10-None]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::TestScatter::test_scatter_c[c_case11-shape]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::TestScatter::test_scatter_c[c_case12-None]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::TestScatter::test_scatter_c[c_case13-None]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::TestScatter::test_scatter_c[c_case14-conversion]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::TestScatter::test_scatter_c[c_case15-None]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::TestScatter::test_scatter_c[c_case16-shape]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::TestScatter::test_scatter_c[c_case17-None]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::TestScatter::test_scatter_c[c_case18-shape]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::TestScatter::test_scatter_c[c_case19-None]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::TestScatter::test_scatter_c[c_case20-shape]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::TestScatter::test_scatter_c[c_case21-None]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::TestScatter::test_scatter_c[c_case22-shape]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::TestScatter::test_scatter_c[c_case23-None]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::TestScatter::test_scatter_c[c_case24-shape]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::TestScatter::test_scatter_c[c_case25-None]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::TestScatter::test_scatter_c[c_case26-shape]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::TestScatter::test_scatter_c[c_case27-conversion]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::TestScatter::test_scatter_c[c_case28-conversion]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::TestScatter::test_scatter_c[c_case29-conversion]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::TestScatter::test_scatter_single_color_c[png]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::TestScatter::test_scatter_linewidths",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_parse_scatter_color_args[params0-expected_result0]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_parse_scatter_color_args[params1-expected_result1]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_parse_scatter_color_args[params2-expected_result2]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_parse_scatter_color_args[params3-expected_result3]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_parse_scatter_color_args[params4-expected_result4]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_parse_scatter_color_args_edgecolors[kwargs0-None]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_parse_scatter_color_args_edgecolors[kwargs1-None]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_parse_scatter_color_args_edgecolors[kwargs2-r]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_parse_scatter_color_args_edgecolors[kwargs3-expected_edgecolors3]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_parse_scatter_color_args_edgecolors[kwargs4-r]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_parse_scatter_color_args_edgecolors[kwargs5-face]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_parse_scatter_color_args_edgecolors[kwargs6-none]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_parse_scatter_color_args_edgecolors[kwargs7-r]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_parse_scatter_color_args_edgecolors[kwargs8-r]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_parse_scatter_color_args_edgecolors[kwargs9-r]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_parse_scatter_color_args_edgecolors[kwargs10-g]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_parse_scatter_color_args_error",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_as_mpl_axes_api",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_pyplot_axes",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_log_scales",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_log_scales_no_data",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_log_scales_invalid",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_stackplot[png]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_stackplot[pdf]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_stackplot_baseline[png]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_stackplot_baseline[pdf]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_bxp_baseline[png]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_bxp_rangewhis[png]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_bxp_percentilewhis[png]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_bxp_with_xlabels[png]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_bxp_horizontal[png]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_bxp_with_ylabels[png]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_bxp_patchartist[png]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_bxp_custompatchartist[png]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_bxp_customoutlier[png]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_bxp_showcustommean[png]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_bxp_custombox[png]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_bxp_custommedian[png]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_bxp_customcap[png]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_bxp_customwhisker[png]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_bxp_shownotches[png]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_bxp_nocaps[png]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_bxp_nobox[png]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_bxp_no_flier_stats[png]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_bxp_showmean[png]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_bxp_showmeanasline[png]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_bxp_scalarwidth[png]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_bxp_customwidths[png]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_bxp_custompositions[png]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_bxp_bad_widths",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_bxp_bad_positions",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_bxp_custom_capwidths[png]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_bxp_custom_capwidth[png]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_bxp_bad_capwidths",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_boxplot[png]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_boxplot[pdf]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_boxplot_custom_capwidths[png]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_boxplot_sym2[png]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_boxplot_sym[png]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_boxplot_autorange_whiskers[png]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_boxplot_rc_parameters[png]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_boxplot_rc_parameters[pdf]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_boxplot_with_CIarray[png]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_boxplot_no_weird_whisker[png]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_boxplot_bad_medians",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_boxplot_bad_ci",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_boxplot_zorder",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_boxplot_marker_behavior",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_boxplot_mod_artist_after_plotting[png]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_vert_violinplot_baseline[png]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_vert_violinplot_showmeans[png]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_vert_violinplot_showextrema[png]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_vert_violinplot_showmedians[png]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_vert_violinplot_showall[png]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_vert_violinplot_custompoints_10[png]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_vert_violinplot_custompoints_200[png]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_horiz_violinplot_baseline[png]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_horiz_violinplot_showmedians[png]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_horiz_violinplot_showmeans[png]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_horiz_violinplot_showextrema[png]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_horiz_violinplot_showall[png]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_horiz_violinplot_custompoints_10[png]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_horiz_violinplot_custompoints_200[png]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_violinplot_bad_positions",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_violinplot_bad_widths",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_violinplot_bad_quantiles",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_violinplot_outofrange_quantiles",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_violinplot_single_list_quantiles[png]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_violinplot_pandas_series[png]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_manage_xticks",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_boxplot_not_single",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_tick_space_size_0",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_errorbar[png]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_errorbar[pdf]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_errorbar_colorcycle",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_errorbar_cycle_ecolor[png]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_errorbar_cycle_ecolor[pdf]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_errorbar_shape",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_errorbar_limits[png]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_errorbar_limits[pdf]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_errorbar_nonefmt",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_errorbar_line_specific_kwargs",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_errorbar_with_prop_cycle[png]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_errorbar_every_invalid",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_xerr_yerr_not_negative",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_errorbar_every[png]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_errorbar_every[pdf]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_errorbar_linewidth_type[elinewidth0]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_errorbar_linewidth_type[elinewidth1]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_errorbar_linewidth_type[1]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_errorbar_nan[png]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_hist_stacked_stepfilled[png]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_hist_stacked_stepfilled[pdf]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_hist_offset[png]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_hist_offset[pdf]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_hist_step[png]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_hist_step_horiz[png]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_hist_stacked_weighted[png]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_hist_stacked_weighted[pdf]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_stem[png-w/",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_stem[png-w/o",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_stem_args",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_stem_markerfmt",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_stem_dates",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_stem_orientation[png-w/",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_stem_orientation[png-w/o",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_hist_stacked_stepfilled_alpha[png]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_hist_stacked_stepfilled_alpha[pdf]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_hist_stacked_step[png]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_hist_stacked_step[pdf]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_hist_stacked_density[png]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_hist_stacked_density[pdf]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_hist_step_bottom[png]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_hist_stepfilled_geometry",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_hist_step_geometry",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_hist_stepfilled_bottom_geometry",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_hist_step_bottom_geometry",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_hist_stacked_stepfilled_geometry",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_hist_stacked_step_geometry",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_hist_stacked_stepfilled_bottom_geometry",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_hist_stacked_step_bottom_geometry",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_hist_stacked_bar[png]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_hist_stacked_bar[pdf]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_hist_barstacked_bottom_unchanged",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_hist_emptydata",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_hist_labels",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_transparent_markers[png]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_transparent_markers[pdf]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_rgba_markers[png]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_rgba_markers[pdf]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_mollweide_grid[png]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_mollweide_grid[pdf]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_mollweide_forward_inverse_closure",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_mollweide_inverse_forward_closure",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_alpha[png]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_alpha[pdf]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_eventplot[png]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_eventplot[pdf]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_eventplot_defaults[png]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_eventplot_colors[colors0]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_eventplot_colors[colors1]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_eventplot_colors[colors2]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_eventplot_problem_kwargs[png]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_empty_eventplot",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_eventplot_orientation[None-data0]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_eventplot_orientation[None-data1]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_eventplot_orientation[None-data2]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_eventplot_orientation[vertical-data0]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_eventplot_orientation[vertical-data1]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_eventplot_orientation[vertical-data2]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_eventplot_orientation[horizontal-data0]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_eventplot_orientation[horizontal-data1]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_eventplot_orientation[horizontal-data2]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_eventplot_units_list[png]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_marker_styles[png]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_markers_fillstyle_rcparams[png]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_vertex_markers[png]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_eb_line_zorder[png]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_eb_line_zorder[pdf]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_axline_loglog[png]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_axline_loglog[pdf]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_axline[png]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_axline[pdf]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_axline_transaxes[png]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_axline_transaxes[pdf]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_axline_transaxes_panzoom[png]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_axline_transaxes_panzoom[pdf]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_axline_args",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_vlines[png]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_vlines_default",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_hlines[png]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_hlines_default",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_lines_with_colors[png-data0]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_lines_with_colors[png-data1]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_step_linestyle[png]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_step_linestyle[pdf]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_mixed_collection[png]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_mixed_collection[pdf]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_subplot_key_hash",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_specgram[png]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_specgram_magnitude[png]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_specgram_angle[png]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_specgram_fs_none",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_specgram_origin_rcparam[png]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_specgram_origin_kwarg",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_psd_csd[png]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_spectrum[png]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_psd_csd_edge_cases",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_twin_remove[png]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_twin_spines[png]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_twin_spines_on_top[png]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_rcparam_grid_minor[both-True-True]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_rcparam_grid_minor[major-True-False]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_rcparam_grid_minor[minor-False-True]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_grid",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_reset_grid",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_reset_ticks[png]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_vline_limit",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_axline_minmax[axvline-axhline-args0]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_axline_minmax[axvspan-axhspan-args1]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_empty_shared_subplots",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_shared_with_aspect_1",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_shared_with_aspect_2",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_shared_with_aspect_3",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_shared_aspect_error",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_axis_errors[TypeError-args0-kwargs0-axis\\\\(\\\\)",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_axis_errors[ValueError-args1-kwargs1-Unrecognized",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_axis_errors[TypeError-args2-kwargs2-the",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_axis_errors[TypeError-args3-kwargs3-axis\\\\(\\\\)",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_axis_method_errors",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_twin_with_aspect[x]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_twin_with_aspect[y]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_relim_visible_only",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_text_labelsize",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_pie_default[png]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_pie_linewidth_0[png]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_pie_center_radius[png]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_pie_linewidth_2[png]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_pie_ccw_true[png]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_pie_frame_grid[png]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_pie_rotatelabels_true[png]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_pie_nolabel_but_legend[png]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_pie_textprops",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_pie_get_negative_values",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_normalize_kwarg_pie",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_set_get_ticklabels[png]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_set_ticks_with_labels[png]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_set_noniterable_ticklabels",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_subsampled_ticklabels",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_mismatched_ticklabels",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_empty_ticks_fixed_loc",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_retain_tick_visibility[png]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_tick_label_update",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_o_marker_path_snap[png]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_margins",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_set_margin_updates_limits",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_margins_errors[ValueError-args0-kwargs0-margin",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_margins_errors[ValueError-args1-kwargs1-margin",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_margins_errors[ValueError-args2-kwargs2-margin",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_margins_errors[ValueError-args3-kwargs3-margin",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_margins_errors[TypeError-args4-kwargs4-Cannot",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_margins_errors[TypeError-args5-kwargs5-Cannot",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_margins_errors[TypeError-args6-kwargs6-Must",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_length_one_hist",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_set_xy_bound",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_pathological_hexbin",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_color_None",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_color_alias",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_numerical_hist_label",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_unicode_hist_label",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_move_offsetlabel",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_rc_spines[png]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_rc_grid[png]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_rc_tick",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_rc_major_minor_tick",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_square_plot",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_bad_plot_args",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_pcolorfast[data0-xy0-AxesImage]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_pcolorfast[data0-xy1-AxesImage]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_pcolorfast[data0-xy2-AxesImage]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_pcolorfast[data0-xy3-PcolorImage]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_pcolorfast[data0-xy4-QuadMesh]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_pcolorfast[data1-xy0-AxesImage]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_pcolorfast[data1-xy1-AxesImage]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_pcolorfast[data1-xy2-AxesImage]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_pcolorfast[data1-xy3-PcolorImage]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_pcolorfast[data1-xy4-QuadMesh]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_shared_scale",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_shared_bool",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_violin_point_mass",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_errorbar_inputs_shotgun[kwargs0]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_errorbar_inputs_shotgun[kwargs1]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_errorbar_inputs_shotgun[kwargs2]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_errorbar_inputs_shotgun[kwargs3]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_errorbar_inputs_shotgun[kwargs4]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_errorbar_inputs_shotgun[kwargs5]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_errorbar_inputs_shotgun[kwargs6]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_errorbar_inputs_shotgun[kwargs7]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_errorbar_inputs_shotgun[kwargs8]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_errorbar_inputs_shotgun[kwargs9]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_errorbar_inputs_shotgun[kwargs10]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_errorbar_inputs_shotgun[kwargs11]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_errorbar_inputs_shotgun[kwargs12]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_errorbar_inputs_shotgun[kwargs13]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_errorbar_inputs_shotgun[kwargs14]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_errorbar_inputs_shotgun[kwargs15]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_errorbar_inputs_shotgun[kwargs16]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_errorbar_inputs_shotgun[kwargs17]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_errorbar_inputs_shotgun[kwargs18]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_errorbar_inputs_shotgun[kwargs19]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_errorbar_inputs_shotgun[kwargs20]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_errorbar_inputs_shotgun[kwargs21]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_errorbar_inputs_shotgun[kwargs22]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_errorbar_inputs_shotgun[kwargs23]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_errorbar_inputs_shotgun[kwargs24]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_errorbar_inputs_shotgun[kwargs25]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_errorbar_inputs_shotgun[kwargs26]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_errorbar_inputs_shotgun[kwargs27]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_errorbar_inputs_shotgun[kwargs28]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_errorbar_inputs_shotgun[kwargs29]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_errorbar_inputs_shotgun[kwargs30]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_errorbar_inputs_shotgun[kwargs31]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_errorbar_inputs_shotgun[kwargs32]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_errorbar_inputs_shotgun[kwargs33]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_errorbar_inputs_shotgun[kwargs34]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_errorbar_inputs_shotgun[kwargs35]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_errorbar_inputs_shotgun[kwargs36]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_errorbar_inputs_shotgun[kwargs37]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_errorbar_inputs_shotgun[kwargs38]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_errorbar_inputs_shotgun[kwargs39]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_errorbar_inputs_shotgun[kwargs40]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_errorbar_inputs_shotgun[kwargs41]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_errorbar_inputs_shotgun[kwargs42]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_errorbar_inputs_shotgun[kwargs43]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_errorbar_inputs_shotgun[kwargs44]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_errorbar_inputs_shotgun[kwargs45]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_errorbar_inputs_shotgun[kwargs46]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_errorbar_inputs_shotgun[kwargs47]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_errorbar_inputs_shotgun[kwargs48]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_errorbar_inputs_shotgun[kwargs49]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_errorbar_inputs_shotgun[kwargs50]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_errorbar_inputs_shotgun[kwargs51]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_dash_offset[png]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_dash_offset[pdf]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_title_pad",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_title_location_roundtrip",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_title_location_shared[True]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_title_location_shared[False]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_loglog[png]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_loglog_nonpos[png]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_axes_margins",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_remove_shared_axes[gca-x]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_remove_shared_axes[gca-y]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_remove_shared_axes[subplots-x]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_remove_shared_axes[subplots-y]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_remove_shared_axes[subplots_shared-x]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_remove_shared_axes[subplots_shared-y]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_remove_shared_axes[add_axes-x]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_remove_shared_axes[add_axes-y]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_remove_shared_axes_relim",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_shared_axes_autoscale",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_adjust_numtick_aspect",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_auto_numticks",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_auto_numticks_log",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_broken_barh_empty",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_broken_barh_timedelta",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_pandas_pcolormesh",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_pandas_indexing_dates",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_pandas_errorbar_indexing",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_pandas_index_shape",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_pandas_indexing_hist",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_pandas_bar_align_center",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_tick_apply_tickdir_deprecation",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_axis_set_tick_params_labelsize_labelcolor",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_axes_tick_params_gridlines",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_axes_tick_params_ylabelside",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_axes_tick_params_xlabelside",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_none_kwargs",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_bar_uint8",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_date_timezone_x[png]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_date_timezone_y[png]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_date_timezone_x_and_y[png]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_axisbelow[png]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_titletwiny",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_titlesetpos",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_title_xticks_top",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_title_xticks_top_both",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_title_above_offset[left",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_title_above_offset[center",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_title_above_offset[both",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_title_no_move_off_page",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_offset_label_color",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_offset_text_visible",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_large_offset",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_barb_units",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_quiver_units",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_bar_color_cycle",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_tick_param_label_rotation",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_fillbetween_cycle",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_log_margins",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_color_length_mismatch",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_eventplot_legend",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_bar_broadcast_args",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_invalid_axis_limits",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_minorticks_on[symlog-symlog]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_minorticks_on[symlog-log]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_minorticks_on[log-symlog]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_minorticks_on[log-log]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_twinx_knows_limits",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_zero_linewidth",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_empty_errorbar_legend",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_plot_decimal[png]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_markerfacecolor_none_alpha[png]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_tick_padding_tightbbox",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_inset",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_zoom_inset",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_inset_polar[png]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_inset_projection",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_inset_subclass",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_indicate_inset_inverted[False-False]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_indicate_inset_inverted[False-True]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_indicate_inset_inverted[True-False]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_indicate_inset_inverted[True-True]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_set_position",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_spines_properbbox_after_zoom",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_gettightbbox_ignore_nan",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_scatter_series_non_zero_index",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_scatter_empty_data",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_annotate_across_transforms[png]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_secondary_xy[png]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_secondary_fail",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_secondary_resize",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_secondary_minorloc",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_secondary_formatter",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_secondary_repr",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_normal_axes",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_nodecorator",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_displaced_spine",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_tickdirs",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_minor_accountedfor",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_axis_bool_arguments[png]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_axis_extent_arg",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_axis_extent_arg2",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_hist_auto_bins",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_hist_nan_data",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_hist_range_and_density",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_bar_errbar_zorder",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_set_ticks_inverted",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_aspect_nonlinear_adjustable_box",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_aspect_nonlinear_adjustable_datalim",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_box_aspect",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_box_aspect_custom_position",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_bbox_aspect_axes_init",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_redraw_in_frame",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_invisible_axes_events",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_xtickcolor_is_not_markercolor",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_ytickcolor_is_not_markercolor",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_unautoscale[True-x]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_unautoscale[True-y]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_unautoscale[False-x]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_unautoscale[False-y]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_unautoscale[None-x]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_unautoscale[None-y]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_polar_interpolation_steps_variable_r[png]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_autoscale_tiny_sticky",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_xtickcolor_is_not_xticklabelcolor",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_ytickcolor_is_not_yticklabelcolor",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_relative_ticklabel_sizes[xx-small]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_relative_ticklabel_sizes[x-small]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_relative_ticklabel_sizes[small]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_relative_ticklabel_sizes[medium]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_relative_ticklabel_sizes[large]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_relative_ticklabel_sizes[x-large]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_relative_ticklabel_sizes[xx-large]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_relative_ticklabel_sizes[larger]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_relative_ticklabel_sizes[smaller]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_relative_ticklabel_sizes[8]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_relative_ticklabel_sizes[10]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_relative_ticklabel_sizes[12]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_multiplot_autoscale",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_sharing_does_not_link_positions",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_2dcolor_plot[pdf]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_shared_axes_clear[png]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_shared_axes_retick",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_ylabel_ha_with_position[left]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_ylabel_ha_with_position[center]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_ylabel_ha_with_position[right]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_bar_label_location_vertical",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_bar_label_location_vertical_yinverted",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_bar_label_location_horizontal",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_bar_label_location_horizontal_yinverted",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_bar_label_location_horizontal_xinverted",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_bar_label_location_horizontal_xyinverted",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_bar_label_location_center",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_bar_label_location_errorbars",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_bar_label_fmt[%.2f]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_bar_label_fmt[{:.2f}]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_bar_label_fmt[format]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_bar_label_fmt_error",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_bar_label_labels",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_bar_label_nan_ydata",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_bar_label_nan_ydata_inverted",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_nan_barlabels",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_patch_bounds",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_warn_ignored_scatter_kwargs",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_artist_sublists",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_empty_line_plots",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_plot_format_errors[None-f-'f'",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_plot_format_errors[None-o+-'o\\\\+'",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_plot_format_errors[None-:--':-'",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_plot_format_errors[None-rk-'rk'",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_plot_format_errors[None-:o-r-':o-r'",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_plot_format_errors[data1-f-'f'",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_plot_format_errors[data1-o+-'o\\\\+'",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_plot_format_errors[data1-:--':-'",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_plot_format_errors[data1-rk-'rk'",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_plot_format_errors[data1-:o-r-':o-r'",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_plot_format",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_automatic_legend",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_plot_errors",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_clim",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_bezier_autoscale",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_get_xticklabel",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "SKIPPED",
              "message": "lib/matplotlib/testing/compare.py:285: Don't know how to convert .svg files to png",
              "file_path": "lib/matplotlib/testing/compare.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "SKIPPED",
              "message": "../opt/miniconda3/envs/testbed/lib/python3.11/contextlib.py:81: Cannot compare svg files because Inkscape is not installed",
              "file_path": "../opt/miniconda3/envs/testbed/lib/python3.11/contextlib.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            }
          ]
        }
      },
      "parent_id": 8
    },
    {
      "node_id": 10,
      "action": {
        "scratch_pad": "1. The docstring update is complete\n2. Now I need to add a test case for the new draggable parameter\n3. Let me add a test to test_legend.py",
        "command": "str_replace",
        "path": "lib/matplotlib/tests/test_legend.py",
        "old_str": "def test_get_set_draggable():\n    legend = plt.legend()\n    assert not legend.get_draggable()\n    legend.set_draggable(True)\n    assert legend.get_draggable()\n    legend.set_draggable(False)\n    assert not legend.get_draggable()",
        "new_str": "def test_get_set_draggable():\n    legend = plt.legend()\n    assert not legend.get_draggable()\n    legend.set_draggable(True)\n    assert legend.get_draggable()\n    legend.set_draggable(False)\n    assert not legend.get_draggable()\n\ndef test_draggable_init():\n    # Test draggable parameter in legend initialization\n    legend = plt.legend(draggable=True)\n    assert legend.get_draggable()\n    legend = plt.legend(draggable=False)\n    assert not legend.get_draggable()",
        "action_args_class": "moatless.actions.edit.EditActionArguments"
      },
      "observation": {
        "message": "The file lib/matplotlib/tests/test_legend.py has been edited. Here's the result of running `cat -n` on a snippet of lib/matplotlib/tests/test_legend.py:\n   777\t    leg = ax.legend()\n   778\t    for text, color in zip(leg.get_texts(), ['r', 'g', 'b']):\n   779\t        assert mpl.colors.same_color(text.get_color(), color)\n   780\t\n   781\t\n   782\tdef test_get_set_draggable():\n   783\t    legend = plt.legend()\n   784\t    assert not legend.get_draggable()\n   785\t    legend.set_draggable(True)\n   786\t    assert legend.get_draggable()\n   787\t    legend.set_draggable(False)\n   788\t    assert not legend.get_draggable()\n   789\t\n   790\tdef test_draggable_init():\n   791\t    # Test draggable parameter in legend initialization\n   792\t    legend = plt.legend(draggable=True)\n   793\t    assert legend.get_draggable()\n   794\t    legend = plt.legend(draggable=False)\n   795\t    assert not legend.get_draggable()\n   796\t\n   797\t\n   798\tdef test_alpha_handles():\nReview the changes and make sure they are as expected. Edit the file again if necessary.\n\nRunning 937 tests in the following files:\n * lib/matplotlib/tests/test_legend.py\n * lib/matplotlib/tests/test_contour.py\n * lib/matplotlib/tests/test_axes.py\n\n* FAILED lib/matplotlib/tests/test_contour.py test_contourf_log_extension>\n```\n\n    @image_comparison(['contour_log_extension.png'],\n                      remove_text=True, style='mpl20',\n                      tol=1.444)\n    def test_contourf_log_extension():\n        # Remove this line when this test image is regenerated.\n        plt.rcParams['pcolormesh.snap'] = False\n    \n        # Test that contourf with lognorm is extended correctly\n        fig, (ax1, ax2, ax3) = plt.subplots(1, 3, figsize=(10, 5))\n        fig.subplots_adjust(left=0.05, right=0.95)\n    \n        # make data set with large range e.g. between 1e-8 and 1e10\n        data_exp = np.linspace(-7.5, 9.5, 1200)\n        data = np.power(10, data_exp).reshape(30, 40)\n        # make manual levels e.g. between 1e-4 and 1e-6\n        levels_exp = np.arange(-4., 7.)\n        levels = np.power(10., levels_exp)\n    \n        # original data\n        c1 = ax1.contourf(data,\n                          norm=LogNorm(vmin=data.min(), vmax=data.max()))\n        # just show data in levels\n        c2 = ax2.contourf(data, levels=levels,\n                          norm=LogNorm(vmin=levels.min(), vmax=levels.max()),\n                          extend='neither')\n        # extend data from levels\n        c3 = ax3.contourf(data, levels=levels,\n                          norm=LogNorm(vmin=levels.min(), vmax=levels.max()),\n                          extend='both')\n        cb = plt.colorbar(c1, ax=ax1)\n        assert cb.ax.get_ylim() == (1e-8, 1e10)\n        cb = plt.colorbar(c2, ax=ax2)\n>       assert cb.ax.get_ylim() == (1e-4, 1e6)\nE       assert (9.9999999999...05, 1000000.0) == (0.0001, 1000000.0)\nE         \nE         At index 0 diff: 9.999999999999999e-05 != 0.0001\nE         Use -v to get more diff\n\nlib/matplotlib/tests/test_contour.py:316: AssertionError\n```\n\n\n936 passed. 1 failed. 0 errors.",
        "terminal": false,
        "expect_correction": false,
        "properties": {
          "flags": [
            "lines_not_in_context"
          ],
          "diff": "--- lib/matplotlib/tests/test_legend.py\n+++ lib/matplotlib/tests/test_legend.py\n@@ -782,6 +782,13 @@\n     legend.set_draggable(False)\n     assert not legend.get_draggable()\n \n+def test_draggable_init():\n+    # Test draggable parameter in legend initialization\n+    legend = plt.legend(draggable=True)\n+    assert legend.get_draggable()\n+    legend = plt.legend(draggable=False)\n+    assert not legend.get_draggable()\n+\n \n def test_alpha_handles():\n     x, n, hh = plt.hist([1, 2, 3], alpha=0.25, label='data', color='red')\n",
          "test_results": [
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_legend.py::test_legend_ordereddict",
              "file_path": "lib/matplotlib/tests/test_legend.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_legend.py::test_legend_auto1[png]",
              "file_path": "lib/matplotlib/tests/test_legend.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_legend.py::test_legend_auto1[pdf]",
              "file_path": "lib/matplotlib/tests/test_legend.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_legend.py::test_legend_auto2[png]",
              "file_path": "lib/matplotlib/tests/test_legend.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_legend.py::test_legend_auto2[pdf]",
              "file_path": "lib/matplotlib/tests/test_legend.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_legend.py::test_legend_auto3[png]",
              "file_path": "lib/matplotlib/tests/test_legend.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_legend.py::test_legend_auto3[pdf]",
              "file_path": "lib/matplotlib/tests/test_legend.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_legend.py::test_various_labels[png]",
              "file_path": "lib/matplotlib/tests/test_legend.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_legend.py::test_various_labels[pdf]",
              "file_path": "lib/matplotlib/tests/test_legend.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_legend.py::test_legend_label_with_leading_underscore",
              "file_path": "lib/matplotlib/tests/test_legend.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_legend.py::test_labels_first[png]",
              "file_path": "lib/matplotlib/tests/test_legend.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_legend.py::test_multiple_keys[png]",
              "file_path": "lib/matplotlib/tests/test_legend.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_legend.py::test_alpha_rgba[png]",
              "file_path": "lib/matplotlib/tests/test_legend.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_legend.py::test_alpha_rcparam[png]",
              "file_path": "lib/matplotlib/tests/test_legend.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_legend.py::test_fancy[png]",
              "file_path": "lib/matplotlib/tests/test_legend.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_legend.py::test_fancy[pdf]",
              "file_path": "lib/matplotlib/tests/test_legend.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_legend.py::test_framealpha[png]",
              "file_path": "lib/matplotlib/tests/test_legend.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_legend.py::test_framealpha[pdf]",
              "file_path": "lib/matplotlib/tests/test_legend.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_legend.py::test_rc[png]",
              "file_path": "lib/matplotlib/tests/test_legend.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_legend.py::test_rc[pdf]",
              "file_path": "lib/matplotlib/tests/test_legend.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_legend.py::test_legend_expand[png]",
              "file_path": "lib/matplotlib/tests/test_legend.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_legend.py::test_legend_expand[pdf]",
              "file_path": "lib/matplotlib/tests/test_legend.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_legend.py::test_hatching[png]",
              "file_path": "lib/matplotlib/tests/test_legend.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_legend.py::test_hatching[pdf]",
              "file_path": "lib/matplotlib/tests/test_legend.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_legend.py::test_legend_remove",
              "file_path": "lib/matplotlib/tests/test_legend.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_legend.py::TestLegendFunction::test_legend_no_args",
              "file_path": "lib/matplotlib/tests/test_legend.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_legend.py::TestLegendFunction::test_legend_positional_handles_labels",
              "file_path": "lib/matplotlib/tests/test_legend.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_legend.py::TestLegendFunction::test_legend_positional_handles_only",
              "file_path": "lib/matplotlib/tests/test_legend.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_legend.py::TestLegendFunction::test_legend_positional_labels_only",
              "file_path": "lib/matplotlib/tests/test_legend.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_legend.py::TestLegendFunction::test_legend_three_args",
              "file_path": "lib/matplotlib/tests/test_legend.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_legend.py::TestLegendFunction::test_legend_handler_map",
              "file_path": "lib/matplotlib/tests/test_legend.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_legend.py::TestLegendFunction::test_legend_kwargs_handles_only",
              "file_path": "lib/matplotlib/tests/test_legend.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_legend.py::TestLegendFunction::test_legend_kwargs_labels_only",
              "file_path": "lib/matplotlib/tests/test_legend.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_legend.py::TestLegendFunction::test_legend_kwargs_handles_labels",
              "file_path": "lib/matplotlib/tests/test_legend.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_legend.py::TestLegendFunction::test_warn_mixed_args_and_kwargs",
              "file_path": "lib/matplotlib/tests/test_legend.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_legend.py::TestLegendFunction::test_parasite",
              "file_path": "lib/matplotlib/tests/test_legend.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_legend.py::TestLegendFigureFunction::test_legend_handle_label",
              "file_path": "lib/matplotlib/tests/test_legend.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_legend.py::TestLegendFigureFunction::test_legend_no_args",
              "file_path": "lib/matplotlib/tests/test_legend.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_legend.py::TestLegendFigureFunction::test_legend_label_arg",
              "file_path": "lib/matplotlib/tests/test_legend.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_legend.py::TestLegendFigureFunction::test_legend_label_three_args",
              "file_path": "lib/matplotlib/tests/test_legend.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_legend.py::TestLegendFigureFunction::test_legend_label_three_args_pluskw",
              "file_path": "lib/matplotlib/tests/test_legend.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_legend.py::TestLegendFigureFunction::test_legend_kw_args",
              "file_path": "lib/matplotlib/tests/test_legend.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_legend.py::TestLegendFigureFunction::test_warn_args_kwargs",
              "file_path": "lib/matplotlib/tests/test_legend.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_legend.py::test_legend_stackplot[png]",
              "file_path": "lib/matplotlib/tests/test_legend.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_legend.py::test_cross_figure_patch_legend",
              "file_path": "lib/matplotlib/tests/test_legend.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_legend.py::test_nanscatter",
              "file_path": "lib/matplotlib/tests/test_legend.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_legend.py::test_legend_repeatcheckok",
              "file_path": "lib/matplotlib/tests/test_legend.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_legend.py::test_not_covering_scatter[png]",
              "file_path": "lib/matplotlib/tests/test_legend.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_legend.py::test_not_covering_scatter_transform[png]",
              "file_path": "lib/matplotlib/tests/test_legend.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_legend.py::test_linecollection_scaled_dashes",
              "file_path": "lib/matplotlib/tests/test_legend.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_legend.py::test_handler_numpoints",
              "file_path": "lib/matplotlib/tests/test_legend.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_legend.py::test_text_nohandler_warning",
              "file_path": "lib/matplotlib/tests/test_legend.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_legend.py::test_empty_bar_chart_with_legend",
              "file_path": "lib/matplotlib/tests/test_legend.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_legend.py::test_shadow_framealpha",
              "file_path": "lib/matplotlib/tests/test_legend.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_legend.py::test_legend_title_empty",
              "file_path": "lib/matplotlib/tests/test_legend.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_legend.py::test_legend_proper_window_extent",
              "file_path": "lib/matplotlib/tests/test_legend.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_legend.py::test_window_extent_cached_renderer",
              "file_path": "lib/matplotlib/tests/test_legend.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_legend.py::test_legend_title_fontprop_fontsize",
              "file_path": "lib/matplotlib/tests/test_legend.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_legend.py::test_legend_alignment[center]",
              "file_path": "lib/matplotlib/tests/test_legend.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_legend.py::test_legend_alignment[left]",
              "file_path": "lib/matplotlib/tests/test_legend.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_legend.py::test_legend_alignment[right]",
              "file_path": "lib/matplotlib/tests/test_legend.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_legend.py::test_legend_set_alignment[center]",
              "file_path": "lib/matplotlib/tests/test_legend.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_legend.py::test_legend_set_alignment[left]",
              "file_path": "lib/matplotlib/tests/test_legend.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_legend.py::test_legend_set_alignment[right]",
              "file_path": "lib/matplotlib/tests/test_legend.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_legend.py::test_legend_labelcolor_single[red]",
              "file_path": "lib/matplotlib/tests/test_legend.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_legend.py::test_legend_labelcolor_single[none]",
              "file_path": "lib/matplotlib/tests/test_legend.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_legend.py::test_legend_labelcolor_single[color2]",
              "file_path": "lib/matplotlib/tests/test_legend.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_legend.py::test_legend_labelcolor_list",
              "file_path": "lib/matplotlib/tests/test_legend.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_legend.py::test_legend_labelcolor_linecolor",
              "file_path": "lib/matplotlib/tests/test_legend.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_legend.py::test_legend_labelcolor_markeredgecolor",
              "file_path": "lib/matplotlib/tests/test_legend.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_legend.py::test_legend_labelcolor_markerfacecolor",
              "file_path": "lib/matplotlib/tests/test_legend.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_legend.py::test_legend_labelcolor_rcparam_single[red]",
              "file_path": "lib/matplotlib/tests/test_legend.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_legend.py::test_legend_labelcolor_rcparam_single[none]",
              "file_path": "lib/matplotlib/tests/test_legend.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_legend.py::test_legend_labelcolor_rcparam_single[color2]",
              "file_path": "lib/matplotlib/tests/test_legend.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_legend.py::test_legend_labelcolor_rcparam_linecolor",
              "file_path": "lib/matplotlib/tests/test_legend.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_legend.py::test_legend_labelcolor_rcparam_markeredgecolor",
              "file_path": "lib/matplotlib/tests/test_legend.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_legend.py::test_legend_labelcolor_rcparam_markeredgecolor_short",
              "file_path": "lib/matplotlib/tests/test_legend.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_legend.py::test_legend_labelcolor_rcparam_markerfacecolor",
              "file_path": "lib/matplotlib/tests/test_legend.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_legend.py::test_legend_labelcolor_rcparam_markerfacecolor_short",
              "file_path": "lib/matplotlib/tests/test_legend.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_legend.py::test_get_set_draggable",
              "file_path": "lib/matplotlib/tests/test_legend.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_legend.py::test_draggable_init",
              "file_path": "lib/matplotlib/tests/test_legend.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_legend.py::test_alpha_handles",
              "file_path": "lib/matplotlib/tests/test_legend.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_legend.py::test_usetex_no_warn",
              "file_path": "lib/matplotlib/tests/test_legend.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_legend.py::test_warn_big_data_best_loc",
              "file_path": "lib/matplotlib/tests/test_legend.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_legend.py::test_no_warn_big_data_when_loc_specified",
              "file_path": "lib/matplotlib/tests/test_legend.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_legend.py::test_plot_multiple_input_multiple_label[label_array0]",
              "file_path": "lib/matplotlib/tests/test_legend.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_legend.py::test_plot_multiple_input_multiple_label[label_array1]",
              "file_path": "lib/matplotlib/tests/test_legend.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_legend.py::test_plot_multiple_input_multiple_label[label_array2]",
              "file_path": "lib/matplotlib/tests/test_legend.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_legend.py::test_plot_multiple_input_single_label[one]",
              "file_path": "lib/matplotlib/tests/test_legend.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_legend.py::test_plot_multiple_input_single_label[1]",
              "file_path": "lib/matplotlib/tests/test_legend.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_legend.py::test_plot_multiple_input_single_label[int]",
              "file_path": "lib/matplotlib/tests/test_legend.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_legend.py::test_plot_single_input_multiple_label[label_array0]",
              "file_path": "lib/matplotlib/tests/test_legend.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_legend.py::test_plot_single_input_multiple_label[label_array1]",
              "file_path": "lib/matplotlib/tests/test_legend.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_legend.py::test_plot_single_input_multiple_label[label_array2]",
              "file_path": "lib/matplotlib/tests/test_legend.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_legend.py::test_plot_multiple_label_incorrect_length_exception",
              "file_path": "lib/matplotlib/tests/test_legend.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_legend.py::test_legend_face_edgecolor",
              "file_path": "lib/matplotlib/tests/test_legend.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_legend.py::test_legend_text_axes",
              "file_path": "lib/matplotlib/tests/test_legend.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_legend.py::test_handlerline2d",
              "file_path": "lib/matplotlib/tests/test_legend.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_legend.py::test_subfigure_legend",
              "file_path": "lib/matplotlib/tests/test_legend.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_legend.py::test_setting_alpha_keeps_polycollection_color",
              "file_path": "lib/matplotlib/tests/test_legend.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_legend.py::test_legend_markers_from_line2d",
              "file_path": "lib/matplotlib/tests/test_legend.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_legend.py::test_ncol_ncols[png]",
              "file_path": "lib/matplotlib/tests/test_legend.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_legend.py::test_ncol_ncols[pdf]",
              "file_path": "lib/matplotlib/tests/test_legend.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "SKIPPED",
              "message": "../opt/miniconda3/envs/testbed/lib/python3.11/contextlib.py:81: Cannot compare svg files because Inkscape is not installed",
              "file_path": "../opt/miniconda3/envs/testbed/lib/python3.11/contextlib.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "SKIPPED",
              "message": "lib/matplotlib/testing/compare.py:285: Don't know how to convert .svg files to png",
              "file_path": "lib/matplotlib/testing/compare.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_contour.py::test_contour_shape_1d_valid",
              "file_path": "lib/matplotlib/tests/test_contour.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_contour.py::test_contour_shape_2d_valid",
              "file_path": "lib/matplotlib/tests/test_contour.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_contour.py::test_contour_shape_error[args0-Length",
              "file_path": "lib/matplotlib/tests/test_contour.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_contour.py::test_contour_shape_error[args1-Length",
              "file_path": "lib/matplotlib/tests/test_contour.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_contour.py::test_contour_shape_error[args2-Number",
              "file_path": "lib/matplotlib/tests/test_contour.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_contour.py::test_contour_shape_error[args3-Number",
              "file_path": "lib/matplotlib/tests/test_contour.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_contour.py::test_contour_shape_error[args4-Shapes",
              "file_path": "lib/matplotlib/tests/test_contour.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_contour.py::test_contour_shape_error[args5-Shapes",
              "file_path": "lib/matplotlib/tests/test_contour.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_contour.py::test_contour_shape_error[args6-Inputs",
              "file_path": "lib/matplotlib/tests/test_contour.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_contour.py::test_contour_shape_error[args7-Input",
              "file_path": "lib/matplotlib/tests/test_contour.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_contour.py::test_contour_shape_error[args8-Input",
              "file_path": "lib/matplotlib/tests/test_contour.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_contour.py::test_contour_shape_error[args9-Input",
              "file_path": "lib/matplotlib/tests/test_contour.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_contour.py::test_contour_empty_levels",
              "file_path": "lib/matplotlib/tests/test_contour.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_contour.py::test_contour_Nlevels",
              "file_path": "lib/matplotlib/tests/test_contour.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_contour.py::test_contour_badlevel_fmt",
              "file_path": "lib/matplotlib/tests/test_contour.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_contour.py::test_contour_uniform_z",
              "file_path": "lib/matplotlib/tests/test_contour.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_contour.py::test_contour_manual_labels[png]",
              "file_path": "lib/matplotlib/tests/test_contour.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_contour.py::test_contour_manual_labels[pdf]",
              "file_path": "lib/matplotlib/tests/test_contour.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_contour.py::test_given_colors_levels_and_extends[png]",
              "file_path": "lib/matplotlib/tests/test_contour.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_contour.py::test_contour_datetime_axis[png]",
              "file_path": "lib/matplotlib/tests/test_contour.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_contour.py::test_labels[png]",
              "file_path": "lib/matplotlib/tests/test_contour.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_contour.py::test_corner_mask[png]",
              "file_path": "lib/matplotlib/tests/test_contour.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_contour.py::test_contourf_decreasing_levels",
              "file_path": "lib/matplotlib/tests/test_contour.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_contour.py::test_contourf_symmetric_locator",
              "file_path": "lib/matplotlib/tests/test_contour.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_contour.py::test_circular_contour_warning",
              "file_path": "lib/matplotlib/tests/test_contour.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_contour.py::test_clabel_zorder[True-123-1234]",
              "file_path": "lib/matplotlib/tests/test_contour.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_contour.py::test_clabel_zorder[False-123-1234]",
              "file_path": "lib/matplotlib/tests/test_contour.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_contour.py::test_clabel_zorder[True-123-None]",
              "file_path": "lib/matplotlib/tests/test_contour.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_contour.py::test_clabel_zorder[False-123-None]",
              "file_path": "lib/matplotlib/tests/test_contour.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_contour.py::test_contour_addlines[png]",
              "file_path": "lib/matplotlib/tests/test_contour.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_contour.py::test_contour_uneven[png]",
              "file_path": "lib/matplotlib/tests/test_contour.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_contour.py::test_contour_linewidth[1.23-None-None-1.23]",
              "file_path": "lib/matplotlib/tests/test_contour.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_contour.py::test_contour_linewidth[1.23-4.24-None-4.24]",
              "file_path": "lib/matplotlib/tests/test_contour.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_contour.py::test_contour_linewidth[1.23-4.24-5.02-5.02]",
              "file_path": "lib/matplotlib/tests/test_contour.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_contour.py::test_label_nonagg",
              "file_path": "lib/matplotlib/tests/test_contour.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_contour.py::test_contour_closed_line_loop[png]",
              "file_path": "lib/matplotlib/tests/test_contour.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_contour.py::test_quadcontourset_reuse",
              "file_path": "lib/matplotlib/tests/test_contour.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_contour.py::test_contour_manual[png]",
              "file_path": "lib/matplotlib/tests/test_contour.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_contour.py::test_contour_line_start_on_corner_edge[png]",
              "file_path": "lib/matplotlib/tests/test_contour.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_contour.py::test_find_nearest_contour",
              "file_path": "lib/matplotlib/tests/test_contour.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_contour.py::test_find_nearest_contour_no_filled",
              "file_path": "lib/matplotlib/tests/test_contour.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_contour.py::test_contour_autolabel_beyond_powerlimits",
              "file_path": "lib/matplotlib/tests/test_contour.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_contour.py::test_contourf_legend_elements",
              "file_path": "lib/matplotlib/tests/test_contour.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_contour.py::test_contour_legend_elements",
              "file_path": "lib/matplotlib/tests/test_contour.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_contour.py::test_algorithm_name[mpl2005-Mpl2005ContourGenerator]",
              "file_path": "lib/matplotlib/tests/test_contour.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_contour.py::test_algorithm_name[mpl2014-Mpl2014ContourGenerator]",
              "file_path": "lib/matplotlib/tests/test_contour.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_contour.py::test_algorithm_name[serial-SerialContourGenerator]",
              "file_path": "lib/matplotlib/tests/test_contour.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_contour.py::test_algorithm_name[threaded-ThreadedContourGenerator]",
              "file_path": "lib/matplotlib/tests/test_contour.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_contour.py::test_algorithm_name[invalid-None]",
              "file_path": "lib/matplotlib/tests/test_contour.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_contour.py::test_algorithm_supports_corner_mask[mpl2005]",
              "file_path": "lib/matplotlib/tests/test_contour.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_contour.py::test_algorithm_supports_corner_mask[mpl2014]",
              "file_path": "lib/matplotlib/tests/test_contour.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_contour.py::test_algorithm_supports_corner_mask[serial]",
              "file_path": "lib/matplotlib/tests/test_contour.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_contour.py::test_algorithm_supports_corner_mask[threaded]",
              "file_path": "lib/matplotlib/tests/test_contour.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_contour.py::test_all_algorithms[png]",
              "file_path": "lib/matplotlib/tests/test_contour.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_contour.py::test_subfigure_clabel",
              "file_path": "lib/matplotlib/tests/test_contour.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_contour.py::test_linestyles[solid]",
              "file_path": "lib/matplotlib/tests/test_contour.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_contour.py::test_linestyles[dashed]",
              "file_path": "lib/matplotlib/tests/test_contour.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_contour.py::test_linestyles[dashdot]",
              "file_path": "lib/matplotlib/tests/test_contour.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_contour.py::test_linestyles[dotted]",
              "file_path": "lib/matplotlib/tests/test_contour.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_contour.py::test_negative_linestyles[solid]",
              "file_path": "lib/matplotlib/tests/test_contour.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_contour.py::test_negative_linestyles[dashed]",
              "file_path": "lib/matplotlib/tests/test_contour.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_contour.py::test_negative_linestyles[dashdot]",
              "file_path": "lib/matplotlib/tests/test_contour.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_contour.py::test_negative_linestyles[dotted]",
              "file_path": "lib/matplotlib/tests/test_contour.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "SKIPPED",
              "message": "../opt/miniconda3/envs/testbed/lib/python3.11/contextlib.py:81: Cannot compare svg files because Inkscape is not installed",
              "file_path": "../opt/miniconda3/envs/testbed/lib/python3.11/contextlib.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "FAILED",
              "message": "\n    @image_comparison(['contour_log_extension.png'],\n                      remove_text=True, style='mpl20',\n                      tol=1.444)\n    def test_contourf_log_extension():\n        # Remove this line when this test image is regenerated.\n        plt.rcParams['pcolormesh.snap'] = False\n    \n        # Test that contourf with lognorm is extended correctly\n        fig, (ax1, ax2, ax3) = plt.subplots(1, 3, figsize=(10, 5))\n        fig.subplots_adjust(left=0.05, right=0.95)\n    \n        # make data set with large range e.g. between 1e-8 and 1e10\n        data_exp = np.linspace(-7.5, 9.5, 1200)\n        data = np.power(10, data_exp).reshape(30, 40)\n        # make manual levels e.g. between 1e-4 and 1e-6\n        levels_exp = np.arange(-4., 7.)\n        levels = np.power(10., levels_exp)\n    \n        # original data\n        c1 = ax1.contourf(data,\n                          norm=LogNorm(vmin=data.min(), vmax=data.max()))\n        # just show data in levels\n        c2 = ax2.contourf(data, levels=levels,\n                          norm=LogNorm(vmin=levels.min(), vmax=levels.max()),\n                          extend='neither')\n        # extend data from levels\n        c3 = ax3.contourf(data, levels=levels,\n                          norm=LogNorm(vmin=levels.min(), vmax=levels.max()),\n                          extend='both')\n        cb = plt.colorbar(c1, ax=ax1)\n        assert cb.ax.get_ylim() == (1e-8, 1e10)\n        cb = plt.colorbar(c2, ax=ax2)\n>       assert cb.ax.get_ylim() == (1e-4, 1e6)\nE       assert (9.9999999999...05, 1000000.0) == (0.0001, 1000000.0)\nE         \nE         At index 0 diff: 9.999999999999999e-05 != 0.0001\nE         Use -v to get more diff\n\nlib/matplotlib/tests/test_contour.py:316: AssertionError",
              "file_path": "lib/matplotlib/tests/test_contour.py",
              "span_id": "test_contourf_log_extension",
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_invisible_axes[png]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_get_labels",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_repr",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_label_loc_vertical[png]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_label_loc_vertical[pdf]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_label_loc_horizontal[png]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_label_loc_horizontal[pdf]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_label_loc_rc[png]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_label_loc_rc[pdf]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_label_shift",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_acorr[png]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_spy[png]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_spy_invalid_kwargs",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_matshow[png]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_formatter_ticker[png]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_formatter_ticker[pdf]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_funcformatter_auto_formatter",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_strmethodformatter_auto_formatter",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_twin_axis_locators_formatters[png]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_twin_axis_locators_formatters[pdf]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_twinx_cla",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_twin_logscale[png-x]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_twin_logscale[png-y]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_twinx_axis_scales[png]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_twin_inherit_autoscale_setting",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_inverted_cla",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_subclass_clear_cla",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_cla_not_redefined_internally",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_minorticks_on_rcParams_both[png]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_autoscale_tiny_range[png]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_autoscale_tiny_range[pdf]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_autoscale_tight",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_autoscale_log_shared",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_use_sticky_edges",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_sticky_shared_axes[png]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_basic_annotate[png]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_basic_annotate[pdf]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_arrow_simple[png]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_arrow_empty",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_arrow_in_view",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_annotate_default_arrow",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_annotate_signature",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_fill_units[png]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_plot_format_kwarg_redundant",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_errorbar_dashes[png]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_single_point[png]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_single_point[pdf]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_single_date[png]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_shaped_data[png]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_structured_data",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_aitoff_proj[png]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_axvspan_epoch[png]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_axvspan_epoch[pdf]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_axhspan_epoch[png]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_axhspan_epoch[pdf]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_hexbin_extent[png]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_hexbin_empty[png]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_hexbin_pickable",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_hexbin_log[png]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_hexbin_linear[png]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_hexbin_log_clim",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_inverted_limits",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_nonfinite_limits[png]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_nonfinite_limits[pdf]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_limits_empty_data[png-scatter]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_limits_empty_data[png-plot]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_limits_empty_data[png-fill_between]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_imshow[png]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_imshow[pdf]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_imshow_clip[png]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_imshow_clip[pdf]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_imshow_norm_vminvmax",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_polycollection_joinstyle[png]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_polycollection_joinstyle[pdf]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_fill_between_input[2d_x_input]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_fill_between_input[2d_y1_input]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_fill_between_input[2d_y2_input]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_fill_betweenx_input[2d_y_input]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_fill_betweenx_input[2d_x1_input]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_fill_betweenx_input[2d_x2_input]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_fill_between_interpolate[png]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_fill_between_interpolate[pdf]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_fill_between_interpolate_decreasing[png]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_fill_between_interpolate_decreasing[pdf]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_fill_between_interpolate_nan[png]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_fill_between_interpolate_nan[pdf]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_symlog[pdf]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_symlog2[pdf]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_pcolorargs_5205",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_pcolormesh[png]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_pcolormesh[pdf]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_pcolormesh_small[eps]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_pcolormesh_alpha[png]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_pcolormesh_alpha[pdf]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_pcolormesh_datetime_axis[png]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_pcolor_datetime_axis[png]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_pcolorargs",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_pcolornearest[png]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_pcolornearestunits[png]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_pcolorflaterror",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_pcolorauto[png-False]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_pcolorauto[png-True]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_canonical[png]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_canonical[pdf]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_arc_angles[png]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_arc_ellipse[png]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_arc_ellipse[pdf]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_marker_as_markerstyle",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_markevery[png]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_markevery[pdf]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_markevery_line[png]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_markevery_line[pdf]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_markevery_linear_scales[png]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_markevery_linear_scales[pdf]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_markevery_linear_scales_zoomed[png]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_markevery_linear_scales_zoomed[pdf]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_markevery_log_scales[png]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_markevery_log_scales[pdf]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_markevery_polar[png]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_markevery_polar[pdf]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_markevery_linear_scales_nans[png]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_markevery_linear_scales_nans[pdf]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_marker_edges[png]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_marker_edges[pdf]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_bar_tick_label_single[png]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_nan_bar_values",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_bar_ticklabel_fail",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_bar_tick_label_multiple[png]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_bar_tick_label_multiple_old_alignment[png]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_bar_decimal_center[png]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_barh_decimal_center[png]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_bar_decimal_width[png]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_barh_decimal_height[png]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_bar_color_none_alpha",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_bar_edgecolor_none_alpha",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_barh_tick_label[png]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_bar_timedelta",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_boxplot_dates_pandas",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_boxplot_capwidths",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_pcolor_regression",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_bar_pandas",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_bar_pandas_indexed",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_bar_hatches[png]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_bar_hatches[pdf]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_bar_labels[x-1-x-expected_labels0-x]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_bar_labels[x1-width1-label1-expected_labels1-_nolegend_]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_bar_labels[x2-width2-label2-expected_labels2-_nolegend_]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_bar_labels[x3-width3-bars-expected_labels3-bars]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_bar_labels_length",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_pandas_minimal_plot",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_hist_log[png]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_hist_log[pdf]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_hist_log_2[png]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_hist_log_barstacked",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_hist_bar_empty[png]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_hist_float16",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_hist_step_empty[png]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_hist_step_filled[png]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_hist_density[png]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_hist_unequal_bins_density",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_hist_datetime_datasets",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_hist_datetime_datasets_bins[date2num]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_hist_datetime_datasets_bins[datetime.datetime]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_hist_datetime_datasets_bins[np.datetime64]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_hist_with_empty_input[data0-1]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_hist_with_empty_input[data1-1]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_hist_with_empty_input[data2-2]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_hist_zorder[bar-1]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_hist_zorder[step-2]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_hist_zorder[stepfilled-1]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_stairs[png]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_stairs_fill[png]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_stairs_update[png]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_stairs_baseline_0[png]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_stairs_empty",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_stairs_invalid_nan",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_stairs_invalid_mismatch",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_stairs_invalid_update",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_stairs_invalid_update2",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_stairs_options[png]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_stairs_datetime[png]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_stairs_edge_handling[png]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_contour_hatching[png]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_contour_hatching[pdf]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_contour_colorbar[png]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_contour_colorbar[pdf]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_hist2d[png]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_hist2d[pdf]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_hist2d_transpose[png]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_hist2d_transpose[pdf]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_hist2d_density",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::TestScatter::test_scatter_plot[png]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::TestScatter::test_scatter_plot[pdf]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::TestScatter::test_scatter_marker[png]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::TestScatter::test_scatter_2D[png]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::TestScatter::test_scatter_decimal[png]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::TestScatter::test_scatter_color",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::TestScatter::test_scatter_color_warning[kwargs0]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::TestScatter::test_scatter_color_warning[kwargs1]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::TestScatter::test_scatter_color_warning[kwargs2]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::TestScatter::test_scatter_color_warning[kwargs3]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::TestScatter::test_scatter_unfilled",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::TestScatter::test_scatter_unfillable",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::TestScatter::test_scatter_size_arg_size",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::TestScatter::test_scatter_edgecolor_RGB",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::TestScatter::test_scatter_invalid_color[png]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::TestScatter::test_scatter_no_invalid_color[png]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::TestScatter::test_scatter_norm_vminvmax",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::TestScatter::test_scatter_single_point[png]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::TestScatter::test_scatter_different_shapes[png]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::TestScatter::test_scatter_c[0.5-None]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::TestScatter::test_scatter_c[c_case1-conversion]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::TestScatter::test_scatter_c[red-None]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::TestScatter::test_scatter_c[none-None]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::TestScatter::test_scatter_c[None-None]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::TestScatter::test_scatter_c[c_case5-None]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::TestScatter::test_scatter_c[jaune-conversion]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::TestScatter::test_scatter_c[c_case7-conversion]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::TestScatter::test_scatter_c[c_case8-conversion]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::TestScatter::test_scatter_c[c_case9-None]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::TestScatter::test_scatter_c[c_case10-None]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::TestScatter::test_scatter_c[c_case11-shape]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::TestScatter::test_scatter_c[c_case12-None]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::TestScatter::test_scatter_c[c_case13-None]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::TestScatter::test_scatter_c[c_case14-conversion]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::TestScatter::test_scatter_c[c_case15-None]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::TestScatter::test_scatter_c[c_case16-shape]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::TestScatter::test_scatter_c[c_case17-None]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::TestScatter::test_scatter_c[c_case18-shape]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::TestScatter::test_scatter_c[c_case19-None]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::TestScatter::test_scatter_c[c_case20-shape]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::TestScatter::test_scatter_c[c_case21-None]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::TestScatter::test_scatter_c[c_case22-shape]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::TestScatter::test_scatter_c[c_case23-None]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::TestScatter::test_scatter_c[c_case24-shape]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::TestScatter::test_scatter_c[c_case25-None]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::TestScatter::test_scatter_c[c_case26-shape]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::TestScatter::test_scatter_c[c_case27-conversion]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::TestScatter::test_scatter_c[c_case28-conversion]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::TestScatter::test_scatter_c[c_case29-conversion]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::TestScatter::test_scatter_single_color_c[png]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::TestScatter::test_scatter_linewidths",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_parse_scatter_color_args[params0-expected_result0]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_parse_scatter_color_args[params1-expected_result1]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_parse_scatter_color_args[params2-expected_result2]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_parse_scatter_color_args[params3-expected_result3]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_parse_scatter_color_args[params4-expected_result4]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_parse_scatter_color_args_edgecolors[kwargs0-None]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_parse_scatter_color_args_edgecolors[kwargs1-None]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_parse_scatter_color_args_edgecolors[kwargs2-r]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_parse_scatter_color_args_edgecolors[kwargs3-expected_edgecolors3]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_parse_scatter_color_args_edgecolors[kwargs4-r]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_parse_scatter_color_args_edgecolors[kwargs5-face]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_parse_scatter_color_args_edgecolors[kwargs6-none]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_parse_scatter_color_args_edgecolors[kwargs7-r]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_parse_scatter_color_args_edgecolors[kwargs8-r]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_parse_scatter_color_args_edgecolors[kwargs9-r]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_parse_scatter_color_args_edgecolors[kwargs10-g]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_parse_scatter_color_args_error",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_as_mpl_axes_api",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_pyplot_axes",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_log_scales",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_log_scales_no_data",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_log_scales_invalid",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_stackplot[png]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_stackplot[pdf]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_stackplot_baseline[png]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_stackplot_baseline[pdf]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_bxp_baseline[png]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_bxp_rangewhis[png]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_bxp_percentilewhis[png]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_bxp_with_xlabels[png]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_bxp_horizontal[png]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_bxp_with_ylabels[png]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_bxp_patchartist[png]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_bxp_custompatchartist[png]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_bxp_customoutlier[png]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_bxp_showcustommean[png]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_bxp_custombox[png]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_bxp_custommedian[png]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_bxp_customcap[png]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_bxp_customwhisker[png]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_bxp_shownotches[png]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_bxp_nocaps[png]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_bxp_nobox[png]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_bxp_no_flier_stats[png]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_bxp_showmean[png]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_bxp_showmeanasline[png]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_bxp_scalarwidth[png]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_bxp_customwidths[png]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_bxp_custompositions[png]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_bxp_bad_widths",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_bxp_bad_positions",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_bxp_custom_capwidths[png]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_bxp_custom_capwidth[png]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_bxp_bad_capwidths",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_boxplot[png]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_boxplot[pdf]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_boxplot_custom_capwidths[png]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_boxplot_sym2[png]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_boxplot_sym[png]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_boxplot_autorange_whiskers[png]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_boxplot_rc_parameters[png]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_boxplot_rc_parameters[pdf]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_boxplot_with_CIarray[png]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_boxplot_no_weird_whisker[png]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_boxplot_bad_medians",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_boxplot_bad_ci",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_boxplot_zorder",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_boxplot_marker_behavior",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_boxplot_mod_artist_after_plotting[png]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_vert_violinplot_baseline[png]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_vert_violinplot_showmeans[png]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_vert_violinplot_showextrema[png]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_vert_violinplot_showmedians[png]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_vert_violinplot_showall[png]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_vert_violinplot_custompoints_10[png]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_vert_violinplot_custompoints_200[png]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_horiz_violinplot_baseline[png]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_horiz_violinplot_showmedians[png]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_horiz_violinplot_showmeans[png]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_horiz_violinplot_showextrema[png]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_horiz_violinplot_showall[png]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_horiz_violinplot_custompoints_10[png]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_horiz_violinplot_custompoints_200[png]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_violinplot_bad_positions",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_violinplot_bad_widths",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_violinplot_bad_quantiles",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_violinplot_outofrange_quantiles",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_violinplot_single_list_quantiles[png]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_violinplot_pandas_series[png]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_manage_xticks",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_boxplot_not_single",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_tick_space_size_0",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_errorbar[png]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_errorbar[pdf]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_errorbar_colorcycle",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_errorbar_cycle_ecolor[png]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_errorbar_cycle_ecolor[pdf]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_errorbar_shape",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_errorbar_limits[png]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_errorbar_limits[pdf]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_errorbar_nonefmt",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_errorbar_line_specific_kwargs",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_errorbar_with_prop_cycle[png]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_errorbar_every_invalid",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_xerr_yerr_not_negative",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_errorbar_every[png]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_errorbar_every[pdf]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_errorbar_linewidth_type[elinewidth0]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_errorbar_linewidth_type[elinewidth1]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_errorbar_linewidth_type[1]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_errorbar_nan[png]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_hist_stacked_stepfilled[png]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_hist_stacked_stepfilled[pdf]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_hist_offset[png]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_hist_offset[pdf]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_hist_step[png]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_hist_step_horiz[png]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_hist_stacked_weighted[png]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_hist_stacked_weighted[pdf]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_stem[png-w/",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_stem[png-w/o",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_stem_args",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_stem_markerfmt",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_stem_dates",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_stem_orientation[png-w/",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_stem_orientation[png-w/o",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_hist_stacked_stepfilled_alpha[png]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_hist_stacked_stepfilled_alpha[pdf]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_hist_stacked_step[png]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_hist_stacked_step[pdf]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_hist_stacked_density[png]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_hist_stacked_density[pdf]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_hist_step_bottom[png]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_hist_stepfilled_geometry",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_hist_step_geometry",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_hist_stepfilled_bottom_geometry",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_hist_step_bottom_geometry",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_hist_stacked_stepfilled_geometry",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_hist_stacked_step_geometry",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_hist_stacked_stepfilled_bottom_geometry",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_hist_stacked_step_bottom_geometry",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_hist_stacked_bar[png]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_hist_stacked_bar[pdf]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_hist_barstacked_bottom_unchanged",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_hist_emptydata",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_hist_labels",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_transparent_markers[png]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_transparent_markers[pdf]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_rgba_markers[png]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_rgba_markers[pdf]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_mollweide_grid[png]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_mollweide_grid[pdf]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_mollweide_forward_inverse_closure",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_mollweide_inverse_forward_closure",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_alpha[png]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_alpha[pdf]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_eventplot[png]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_eventplot[pdf]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_eventplot_defaults[png]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_eventplot_colors[colors0]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_eventplot_colors[colors1]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_eventplot_colors[colors2]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_eventplot_problem_kwargs[png]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_empty_eventplot",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_eventplot_orientation[None-data0]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_eventplot_orientation[None-data1]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_eventplot_orientation[None-data2]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_eventplot_orientation[vertical-data0]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_eventplot_orientation[vertical-data1]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_eventplot_orientation[vertical-data2]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_eventplot_orientation[horizontal-data0]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_eventplot_orientation[horizontal-data1]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_eventplot_orientation[horizontal-data2]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_eventplot_units_list[png]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_marker_styles[png]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_markers_fillstyle_rcparams[png]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_vertex_markers[png]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_eb_line_zorder[png]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_eb_line_zorder[pdf]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_axline_loglog[png]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_axline_loglog[pdf]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_axline[png]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_axline[pdf]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_axline_transaxes[png]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_axline_transaxes[pdf]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_axline_transaxes_panzoom[png]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_axline_transaxes_panzoom[pdf]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_axline_args",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_vlines[png]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_vlines_default",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_hlines[png]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_hlines_default",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_lines_with_colors[png-data0]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_lines_with_colors[png-data1]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_step_linestyle[png]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_step_linestyle[pdf]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_mixed_collection[png]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_mixed_collection[pdf]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_subplot_key_hash",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_specgram[png]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_specgram_magnitude[png]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_specgram_angle[png]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_specgram_fs_none",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_specgram_origin_rcparam[png]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_specgram_origin_kwarg",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_psd_csd[png]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_spectrum[png]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_psd_csd_edge_cases",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_twin_remove[png]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_twin_spines[png]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_twin_spines_on_top[png]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_rcparam_grid_minor[both-True-True]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_rcparam_grid_minor[major-True-False]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_rcparam_grid_minor[minor-False-True]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_grid",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_reset_grid",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_reset_ticks[png]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_vline_limit",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_axline_minmax[axvline-axhline-args0]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_axline_minmax[axvspan-axhspan-args1]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_empty_shared_subplots",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_shared_with_aspect_1",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_shared_with_aspect_2",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_shared_with_aspect_3",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_shared_aspect_error",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_axis_errors[TypeError-args0-kwargs0-axis\\\\(\\\\)",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_axis_errors[ValueError-args1-kwargs1-Unrecognized",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_axis_errors[TypeError-args2-kwargs2-the",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_axis_errors[TypeError-args3-kwargs3-axis\\\\(\\\\)",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_axis_method_errors",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_twin_with_aspect[x]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_twin_with_aspect[y]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_relim_visible_only",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_text_labelsize",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_pie_default[png]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_pie_linewidth_0[png]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_pie_center_radius[png]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_pie_linewidth_2[png]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_pie_ccw_true[png]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_pie_frame_grid[png]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_pie_rotatelabels_true[png]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_pie_nolabel_but_legend[png]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_pie_textprops",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_pie_get_negative_values",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_normalize_kwarg_pie",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_set_get_ticklabels[png]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_set_ticks_with_labels[png]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_set_noniterable_ticklabels",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_subsampled_ticklabels",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_mismatched_ticklabels",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_empty_ticks_fixed_loc",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_retain_tick_visibility[png]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_tick_label_update",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_o_marker_path_snap[png]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_margins",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_set_margin_updates_limits",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_margins_errors[ValueError-args0-kwargs0-margin",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_margins_errors[ValueError-args1-kwargs1-margin",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_margins_errors[ValueError-args2-kwargs2-margin",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_margins_errors[ValueError-args3-kwargs3-margin",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_margins_errors[TypeError-args4-kwargs4-Cannot",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_margins_errors[TypeError-args5-kwargs5-Cannot",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_margins_errors[TypeError-args6-kwargs6-Must",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_length_one_hist",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_set_xy_bound",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_pathological_hexbin",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_color_None",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_color_alias",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_numerical_hist_label",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_unicode_hist_label",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_move_offsetlabel",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_rc_spines[png]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_rc_grid[png]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_rc_tick",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_rc_major_minor_tick",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_square_plot",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_bad_plot_args",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_pcolorfast[data0-xy0-AxesImage]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_pcolorfast[data0-xy1-AxesImage]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_pcolorfast[data0-xy2-AxesImage]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_pcolorfast[data0-xy3-PcolorImage]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_pcolorfast[data0-xy4-QuadMesh]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_pcolorfast[data1-xy0-AxesImage]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_pcolorfast[data1-xy1-AxesImage]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_pcolorfast[data1-xy2-AxesImage]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_pcolorfast[data1-xy3-PcolorImage]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_pcolorfast[data1-xy4-QuadMesh]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_shared_scale",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_shared_bool",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_violin_point_mass",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_errorbar_inputs_shotgun[kwargs0]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_errorbar_inputs_shotgun[kwargs1]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_errorbar_inputs_shotgun[kwargs2]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_errorbar_inputs_shotgun[kwargs3]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_errorbar_inputs_shotgun[kwargs4]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_errorbar_inputs_shotgun[kwargs5]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_errorbar_inputs_shotgun[kwargs6]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_errorbar_inputs_shotgun[kwargs7]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_errorbar_inputs_shotgun[kwargs8]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_errorbar_inputs_shotgun[kwargs9]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_errorbar_inputs_shotgun[kwargs10]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_errorbar_inputs_shotgun[kwargs11]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_errorbar_inputs_shotgun[kwargs12]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_errorbar_inputs_shotgun[kwargs13]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_errorbar_inputs_shotgun[kwargs14]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_errorbar_inputs_shotgun[kwargs15]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_errorbar_inputs_shotgun[kwargs16]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_errorbar_inputs_shotgun[kwargs17]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_errorbar_inputs_shotgun[kwargs18]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_errorbar_inputs_shotgun[kwargs19]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_errorbar_inputs_shotgun[kwargs20]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_errorbar_inputs_shotgun[kwargs21]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_errorbar_inputs_shotgun[kwargs22]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_errorbar_inputs_shotgun[kwargs23]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_errorbar_inputs_shotgun[kwargs24]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_errorbar_inputs_shotgun[kwargs25]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_errorbar_inputs_shotgun[kwargs26]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_errorbar_inputs_shotgun[kwargs27]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_errorbar_inputs_shotgun[kwargs28]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_errorbar_inputs_shotgun[kwargs29]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_errorbar_inputs_shotgun[kwargs30]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_errorbar_inputs_shotgun[kwargs31]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_errorbar_inputs_shotgun[kwargs32]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_errorbar_inputs_shotgun[kwargs33]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_errorbar_inputs_shotgun[kwargs34]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_errorbar_inputs_shotgun[kwargs35]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_errorbar_inputs_shotgun[kwargs36]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_errorbar_inputs_shotgun[kwargs37]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_errorbar_inputs_shotgun[kwargs38]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_errorbar_inputs_shotgun[kwargs39]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_errorbar_inputs_shotgun[kwargs40]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_errorbar_inputs_shotgun[kwargs41]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_errorbar_inputs_shotgun[kwargs42]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_errorbar_inputs_shotgun[kwargs43]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_errorbar_inputs_shotgun[kwargs44]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_errorbar_inputs_shotgun[kwargs45]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_errorbar_inputs_shotgun[kwargs46]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_errorbar_inputs_shotgun[kwargs47]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_errorbar_inputs_shotgun[kwargs48]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_errorbar_inputs_shotgun[kwargs49]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_errorbar_inputs_shotgun[kwargs50]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_errorbar_inputs_shotgun[kwargs51]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_dash_offset[png]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_dash_offset[pdf]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_title_pad",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_title_location_roundtrip",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_title_location_shared[True]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_title_location_shared[False]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_loglog[png]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_loglog_nonpos[png]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_axes_margins",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_remove_shared_axes[gca-x]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_remove_shared_axes[gca-y]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_remove_shared_axes[subplots-x]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_remove_shared_axes[subplots-y]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_remove_shared_axes[subplots_shared-x]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_remove_shared_axes[subplots_shared-y]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_remove_shared_axes[add_axes-x]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_remove_shared_axes[add_axes-y]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_remove_shared_axes_relim",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_shared_axes_autoscale",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_adjust_numtick_aspect",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_auto_numticks",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_auto_numticks_log",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_broken_barh_empty",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_broken_barh_timedelta",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_pandas_pcolormesh",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_pandas_indexing_dates",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_pandas_errorbar_indexing",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_pandas_index_shape",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_pandas_indexing_hist",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_pandas_bar_align_center",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_tick_apply_tickdir_deprecation",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_axis_set_tick_params_labelsize_labelcolor",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_axes_tick_params_gridlines",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_axes_tick_params_ylabelside",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_axes_tick_params_xlabelside",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_none_kwargs",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_bar_uint8",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_date_timezone_x[png]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_date_timezone_y[png]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_date_timezone_x_and_y[png]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_axisbelow[png]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_titletwiny",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_titlesetpos",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_title_xticks_top",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_title_xticks_top_both",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_title_above_offset[left",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_title_above_offset[center",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_title_above_offset[both",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_title_no_move_off_page",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_offset_label_color",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_offset_text_visible",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_large_offset",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_barb_units",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_quiver_units",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_bar_color_cycle",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_tick_param_label_rotation",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_fillbetween_cycle",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_log_margins",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_color_length_mismatch",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_eventplot_legend",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_bar_broadcast_args",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_invalid_axis_limits",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_minorticks_on[symlog-symlog]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_minorticks_on[symlog-log]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_minorticks_on[log-symlog]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_minorticks_on[log-log]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_twinx_knows_limits",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_zero_linewidth",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_empty_errorbar_legend",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_plot_decimal[png]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_markerfacecolor_none_alpha[png]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_tick_padding_tightbbox",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_inset",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_zoom_inset",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_inset_polar[png]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_inset_projection",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_inset_subclass",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_indicate_inset_inverted[False-False]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_indicate_inset_inverted[False-True]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_indicate_inset_inverted[True-False]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_indicate_inset_inverted[True-True]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_set_position",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_spines_properbbox_after_zoom",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_gettightbbox_ignore_nan",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_scatter_series_non_zero_index",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_scatter_empty_data",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_annotate_across_transforms[png]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_secondary_xy[png]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_secondary_fail",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_secondary_resize",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_secondary_minorloc",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_secondary_formatter",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_secondary_repr",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_normal_axes",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_nodecorator",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_displaced_spine",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_tickdirs",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_minor_accountedfor",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_axis_bool_arguments[png]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_axis_extent_arg",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_axis_extent_arg2",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_hist_auto_bins",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_hist_nan_data",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_hist_range_and_density",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_bar_errbar_zorder",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_set_ticks_inverted",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_aspect_nonlinear_adjustable_box",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_aspect_nonlinear_adjustable_datalim",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_box_aspect",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_box_aspect_custom_position",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_bbox_aspect_axes_init",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_redraw_in_frame",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_invisible_axes_events",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_xtickcolor_is_not_markercolor",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_ytickcolor_is_not_markercolor",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_unautoscale[True-x]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_unautoscale[True-y]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_unautoscale[False-x]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_unautoscale[False-y]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_unautoscale[None-x]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_unautoscale[None-y]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_polar_interpolation_steps_variable_r[png]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_autoscale_tiny_sticky",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_xtickcolor_is_not_xticklabelcolor",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_ytickcolor_is_not_yticklabelcolor",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_relative_ticklabel_sizes[xx-small]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_relative_ticklabel_sizes[x-small]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_relative_ticklabel_sizes[small]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_relative_ticklabel_sizes[medium]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_relative_ticklabel_sizes[large]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_relative_ticklabel_sizes[x-large]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_relative_ticklabel_sizes[xx-large]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_relative_ticklabel_sizes[larger]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_relative_ticklabel_sizes[smaller]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_relative_ticklabel_sizes[8]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_relative_ticklabel_sizes[10]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_relative_ticklabel_sizes[12]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_multiplot_autoscale",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_sharing_does_not_link_positions",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_2dcolor_plot[pdf]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_shared_axes_clear[png]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_shared_axes_retick",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_ylabel_ha_with_position[left]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_ylabel_ha_with_position[center]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_ylabel_ha_with_position[right]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_bar_label_location_vertical",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_bar_label_location_vertical_yinverted",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_bar_label_location_horizontal",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_bar_label_location_horizontal_yinverted",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_bar_label_location_horizontal_xinverted",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_bar_label_location_horizontal_xyinverted",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_bar_label_location_center",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_bar_label_location_errorbars",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_bar_label_fmt[%.2f]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_bar_label_fmt[{:.2f}]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_bar_label_fmt[format]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_bar_label_fmt_error",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_bar_label_labels",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_bar_label_nan_ydata",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_bar_label_nan_ydata_inverted",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_nan_barlabels",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_patch_bounds",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_warn_ignored_scatter_kwargs",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_artist_sublists",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_empty_line_plots",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_plot_format_errors[None-f-'f'",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_plot_format_errors[None-o+-'o\\\\+'",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_plot_format_errors[None-:--':-'",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_plot_format_errors[None-rk-'rk'",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_plot_format_errors[None-:o-r-':o-r'",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_plot_format_errors[data1-f-'f'",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_plot_format_errors[data1-o+-'o\\\\+'",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_plot_format_errors[data1-:--':-'",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_plot_format_errors[data1-rk-'rk'",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_plot_format_errors[data1-:o-r-':o-r'",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_plot_format",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_automatic_legend",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_plot_errors",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_clim",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_bezier_autoscale",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_get_xticklabel",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "SKIPPED",
              "message": "lib/matplotlib/testing/compare.py:285: Don't know how to convert .svg files to png",
              "file_path": "lib/matplotlib/testing/compare.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "SKIPPED",
              "message": "../opt/miniconda3/envs/testbed/lib/python3.11/contextlib.py:81: Cannot compare svg files because Inkscape is not installed",
              "file_path": "../opt/miniconda3/envs/testbed/lib/python3.11/contextlib.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            }
          ]
        }
      },
      "file_context": {
        "max_tokens": 8000,
        "files": [
          {
            "file_path": "lib/matplotlib/legend.py",
            "patch": "--- a/lib/matplotlib/legend.py\n+++ b/lib/matplotlib/legend.py\n@@ -286,6 +286,9 @@\n     The custom dictionary mapping instances or types to a legend\n     handler. This *handler_map* updates the default handler map\n     found at `matplotlib.legend.Legend.get_legend_handler_map`.\n+\n+draggable : bool, default: False\n+    Enable mouse dragging support for the legend.\n \"\"\")\n \n \n@@ -341,6 +344,7 @@\n         handler_map=None,\n         title_fontproperties=None,  # properties for the legend title\n         alignment=\"center\",       # control the alignment within the legend box\n+        draggable=False,      # enable mouse dragging support\n         *,\n         ncol=1  # synonym for ncols (backward compatibility)\n     ):\n@@ -538,6 +542,8 @@\n \n         self.set_title(title, prop=title_prop_fp)\n         self._draggable = None\n+        if draggable:\n+            self.set_draggable(True)\n \n         # set the text color\n \n",
            "spans": [
              {
                "span_id": "imports",
                "pinned": false
              },
              {
                "span_id": "Legend",
                "pinned": false
              },
              {
                "span_id": "Legend.__init__",
                "pinned": false
              },
              {
                "span_id": "Legend.draw",
                "pinned": false
              },
              {
                "span_id": "DraggableLegend",
                "pinned": false
              },
              {
                "span_id": "DraggableLegend.__init__",
                "pinned": false
              },
              {
                "span_id": "DraggableLegend.finalize_offset",
                "pinned": false
              },
              {
                "span_id": "DraggableLegend._update_loc",
                "pinned": false
              },
              {
                "span_id": "DraggableLegend._update_bbox_to_anchor",
                "pinned": false
              },
              {
                "span_id": "Legend.set_draggable",
                "pinned": false
              },
              {
                "span_id": "Legend.get_draggable",
                "pinned": false
              },
              {
                "span_id": "impl",
                "pinned": false
              }
            ],
            "show_all_spans": false
          },
          {
            "file_path": "lib/matplotlib/tests/test_legend.py",
            "patch": "--- a/lib/matplotlib/tests/test_legend.py\n+++ b/lib/matplotlib/tests/test_legend.py\n@@ -782,6 +782,13 @@\n     legend.set_draggable(False)\n     assert not legend.get_draggable()\n \n+def test_draggable_init():\n+    # Test draggable parameter in legend initialization\n+    legend = plt.legend(draggable=True)\n+    assert legend.get_draggable()\n+    legend = plt.legend(draggable=False)\n+    assert not legend.get_draggable()\n+\n \n def test_alpha_handles():\n     x, n, hh = plt.hist([1, 2, 3], alpha=0.25, label='data', color='red')\n",
            "spans": [
              {
                "span_id": "imports",
                "pinned": false
              },
              {
                "span_id": "test_get_set_draggable",
                "pinned": false
              }
            ],
            "show_all_spans": false
          },
          {
            "file_path": "lib/matplotlib/tests/test_contour.py",
            "spans": [
              {
                "span_id": "test_contourf_log_extension",
                "pinned": false
              }
            ],
            "show_all_spans": false,
            "patch": null
          },
          {
            "file_path": "lib/matplotlib/tests/test_axes.py",
            "spans": [],
            "show_all_spans": false,
            "patch": null
          }
        ]
      },
      "completions": {
        "build_action": {
          "model": "claude-3-5-sonnet-20241022",
          "input": [
            {
              "role": "user",
              "content": "<task>\nlegend draggable as keyword\n<!--To help us understand and resolve your issue, please fill out the form to the best of your ability.-->\r\n<!--You can feel free to delete the sections that do not apply.-->\r\n\r\n### Feature request\r\n\r\n**There is not keyword to make legend draggable at creation**\r\n\r\n<!--A short 1-2 sentences that succinctly describes the bug-->\r\n\r\nIs there a code reason why one can not add a \"draggable=True\" keyword to the __init__ function for Legend?  This would be more handy than having to call it after legend creation.  And, naively, it would seem simple to do.  But maybe there is a reason why it would not work?\n\n</task>"
            },
            {
              "role": "assistant",
              "content": [
                {
                  "type": "text",
                  "text": "<thoughts>\n1. First, I need to locate the Legend class implementation to understand its current initialization\n2. Then I'll check if there are any technical limitations for adding the draggable parameter\n3. I'll also look for any tests related to legend draggability to understand the current testing approach\n4. Finally, I'll implement the change if there are no blockers\n</thoughts>"
                },
                {
                  "id": "call_85bc3e3e",
                  "input": {
                    "file_pattern": null,
                    "class_name": "Legend"
                  },
                  "type": "tool_use",
                  "name": "FindClass"
                }
              ]
            },
            {
              "role": "user",
              "content": [
                {
                  "tool_use_id": "call_85bc3e3e",
                  "content": "<observation>\nFound 40 code sections.\n\nViewed relevant code:\nlib/matplotlib/legend.py\n```\n\n    23\t\n    24\timport itertools\n    25\timport logging\n    26\timport time\n    27\t\n    28\timport numpy as np\n    29\t\n    30\timport matplotlib as mpl\n    31\tfrom matplotlib import _api, _docstring, colors, offsetbox\n    32\tfrom matplotlib.artist import Artist, allow_rasterization\n    33\tfrom matplotlib.cbook import silent_list\n    34\tfrom matplotlib.font_manager import FontProperties\n    35\tfrom matplotlib.lines import Line2D\n    36\tfrom matplotlib.patches import (Patch, Rectangle, Shadow, FancyBboxPatch,\n    37\t                                StepPatch)\n    38\tfrom matplotlib.collections import (\n    39\t    Collection, CircleCollection, LineCollection, PathCollection,\n    40\t    PolyCollection, RegularPolyCollection)\n    41\tfrom matplotlib.text import Text\n    42\tfrom matplotlib.transforms import Bbox, BboxBase, TransformedBbox\n    43\tfrom matplotlib.transforms import BboxTransformTo, BboxTransformFrom\n    44\tfrom matplotlib.offsetbox import (\n    45\t    AnchoredOffsetbox, DraggableOffsetBox,\n    46\t    HPacker, VPacker,\n    47\t    DrawingArea, TextArea,\n    48\t)\n    49\tfrom matplotlib.container import ErrorbarContainer, BarContainer, StemContainer\n    50\tfrom . import legend_handler\n      # ...\n   290\t\n   291\t\n   292\tclass Legend(Artist):\n   293\t    \"\"\"\n   294\t    Place a legend on the axes at location loc.\n   295\t    \"\"\"\n   296\t\n   297\t    # 'best' is only implemented for axes legends\n   298\t    codes = {'best': 0, **AnchoredOffsetbox.codes}\n   299\t    zorder = 5\n          # ...\n   303\t\n   304\t    @_api.make_keyword_only(\"3.6\", \"loc\")\n   305\t    @_docstring.dedent_interpd\n   306\t    def __init__(\n   307\t        self, parent, handles, labels,\n   308\t        loc=None,\n   309\t        numpoints=None,      # number of points in the legend line\n   310\t        markerscale=None,    # relative size of legend markers vs. original\n   311\t        markerfirst=True,    # left/right ordering of legend marker and label\n   312\t        scatterpoints=None,  # number of scatter points\n   313\t        scatteryoffsets=None,\n   314\t        prop=None,           # properties for the legend texts\n   315\t        fontsize=None,       # keyword to set font size directly\n   316\t        labelcolor=None,     # keyword to set the text color\n   317\t\n   318\t        # spacing & pad defined as a fraction of the font-size\n   319\t        borderpad=None,      # whitespace inside the legend border\n   320\t        labelspacing=None,   # vertical space between the legend entries\n   321\t        handlelength=None,   # length of the legend handles\n   322\t        handleheight=None,   # height of the legend handles\n   323\t        handletextpad=None,  # pad between the legend handle and text\n   324\t        borderaxespad=None,  # pad between the axes and legend border\n   325\t        columnspacing=None,  # spacing between columns\n   326\t\n   327\t        ncols=1,     # number of columns\n   328\t        mode=None,  # horizontal distribution of columns: None or \"expand\"\n   329\t\n   330\t        fancybox=None,  # True: fancy box, False: rounded box, None: rcParam\n   331\t        shadow=None,\n   332\t        title=None,           # legend title\n   333\t        title_fontsize=None,  # legend title font size\n   334\t        framealpha=None,      # set frame alpha\n   335\t        edgecolor=None,       # frame patch edgecolor\n   336\t        facecolor=None,       # frame patch facecolor\n   337\t\n   338\t        bbox_to_anchor=None,  # bbox to which the legend will be anchored\n   339\t        bbox_transform=None,  # transform for the bbox\n   340\t        frameon=None,         # draw frame\n   341\t        handler_map=None,\n   342\t        title_fontproperties=None,  # properties for the legend title\n   343\t        alignment=\"center\",       # control the alignment within the legend box\n   344\t        *,\n   345\t        ncol=1  # synonym for ncols (backward compatibility)\n   346\t    ):\n   347\t        \"\"\"\n   348\t        Parameters\n   349\t        ----------\n   350\t        parent : `~matplotlib.axes.Axes` or `.Figure`\n   351\t            The artist that contains the legend.\n   352\t\n   353\t        handles : list of `.Artist`\n   354\t            A list of Artists (lines, patches) to be added to the legend.\n   355\t\n   356\t        labels : list of str\n   357\t            A list of labels to show next to the artists. The length of handles\n   358\t            and labels should be the same. If they are not, they are truncated\n   359\t            to the smaller of both lengths.\n   360\t\n   361\t        Other Parameters\n   362\t        ----------------\n   363\t        %(_legend_kw_doc)s\n   364\t\n   365\t        Notes\n   366\t        -----\n   367\t        Users can specify any arbitrary location for the legend using the\n   368\t        *bbox_to_anchor* keyword argument. *bbox_to_anchor* can be a\n   369\t        `.BboxBase` (or derived there from) or a tuple of 2 or 4 floats.\n   370\t        See `set_bbox_to_anchor` for more detail.\n   371\t\n   372\t        The legend location can be specified by setting *loc* with a tuple of\n   373\t        2 floats, which is interpreted as the lower-left corner of the legend\n   374\t        in the normalized axes coordinate.\n   375\t        \"\"\"\n   376\t        # local import only to avoid circularity\n   377\t        from matplotlib.axes import Axes\n   378\t        from matplotlib.figure import FigureBase\n   379\t\n   380\t        super().__init__()\n   381\t\n   382\t        if prop is None:\n   383\t            if fontsize is not None:\n   384\t                self.prop = FontProperties(size=fontsize)\n   385\t            else:\n   386\t                self.prop = FontProperties(\n   387\t                    size=mpl.rcParams[\"legend.fontsize\"])\n   388\t        else:\n   389\t            self.prop = FontProperties._from_any(prop)\n   390\t            if isinstance(prop, dict) and \"size\" not in prop:\n   391\t                self.prop.set_size(mpl.rcParams[\"legend.fontsize\"])\n   392\t\n   393\t        self._fontsize = self.prop.get_size_in_points()\n   394\t\n   395\t        self.texts = []\n   396\t        self.legendHandles = []\n   397\t        self._legend_title_box = None\n   398\t\n   399\t        #: A dictionary with the extra handler mappings for this Legend\n   400\t        #: instance.\n   401\t        self._custom_handler_map = handler_map\n   402\t\n   403\t        def val_or_rc(val, rc_name):\n   404\t            return val if val is not None else mpl.rcParams[rc_name]\n   405\t\n   406\t        self.numpoints = val_or_rc(numpoints, 'legend.numpoints')\n   407\t        self.markerscale = val_or_rc(markerscale, 'legend.markerscale')\n   408\t        self.scatterpoints = val_or_rc(scatterpoints, 'legend.scatterpoints')\n   409\t        self.borderpad = val_or_rc(borderpad, 'legend.borderpad')\n   410\t        self.labelspacing = val_or_rc(labelspacing, 'legend.labelspacing')\n   411\t        self.handlelength = val_or_rc(handlelength, 'legend.handlelength')\n   412\t        self.handleheight = val_or_rc(handleheight, 'legend.handleheight')\n   413\t        self.handletextpad = val_or_rc(handletextpad, 'legend.handletextpad')\n   414\t        self.borderaxespad = val_or_rc(borderaxespad, 'legend.borderaxespad')\n   415\t        self.columnspacing = val_or_rc(columnspacing, 'legend.columnspacing')\n   416\t        self.shadow = val_or_rc(shadow, 'legend.shadow')\n   417\t        # trim handles and labels if illegal label...\n   418\t        _lab, _hand = [], []\n   419\t        for label, handle in zip(labels, handles):\n   420\t            if isinstance(label, str) and label.startswith('_'):\n   421\t                _api.warn_external(f\"The label {label!r} of {handle!r} starts \"\n   422\t                                   \"with '_'. It is thus excluded from the \"\n   423\t                                   \"legend.\")\n   424\t            else:\n   425\t                _lab.append(label)\n   426\t                _hand.append(handle)\n   427\t        labels, handles = _lab, _hand\n   428\t\n   429\t        handles = list(handles)\n   430\t        if len(handles) < 2:\n   431\t            ncols = 1\n   432\t        self._ncols = ncols if ncols != 1 else ncol\n   433\t\n   434\t        if self.numpoints <= 0:\n   435\t            raise ValueError(\"numpoints must be > 0; it was %d\" % numpoints)\n   436\t\n   437\t        # introduce y-offset for handles of the scatter plot\n   438\t        if scatteryoffsets is None:\n   439\t            self._scatteryoffsets = np.array([3. / 8., 4. / 8., 2.5 / 8.])\n   440\t        else:\n   441\t            self._scatteryoffsets = np.asarray(scatteryoffsets)\n   442\t        reps = self.scatterpoints // len(self._scatteryoffsets) + 1\n   443\t        self._scatteryoffsets = np.tile(self._scatteryoffsets,\n   444\t                                        reps)[:self.scatterpoints]\n   445\t\n   446\t        # _legend_box is a VPacker instance that contains all\n   447\t        # legend items and will be initialized from _init_legend_box()\n   448\t        # method.\n   449\t        self._legend_box = None\n   450\t\n   451\t        if isinstance(parent, Axes):\n   452\t            self.isaxes = True\n   453\t            self.axes = parent\n   454\t            self.set_figure(parent.figure)\n   455\t        elif isinstance(parent, FigureBase):\n   456\t            self.isaxes = False\n   457\t            self.set_figure(parent)\n   458\t        else:\n   459\t            raise TypeError(\n   460\t                \"Legend needs either Axes or FigureBase as parent\"\n   461\t            )\n   462\t        self.parent = parent\n   463\t\n   464\t        self._loc_used_default = loc is None\n   465\t        if loc is None:\n   466\t            loc = mpl.rcParams[\"legend.loc\"]\n   467\t            if not self.isaxes and loc in [0, 'best']:\n   468\t                loc = 'upper right'\n   469\t        if isinstance(loc, str):\n   470\t            loc = _api.check_getitem(self.codes, loc=loc)\n   471\t        if not self.isaxes and loc == 0:\n   472\t            raise ValueError(\n   473\t                \"Automatic legend placement (loc='best') not implemented for \"\n   474\t                \"figure legend\")\n   475\t\n   476\t        self._mode = mode\n   477\t        self.set_bbox_to_anchor(bbox_to_anchor, bbox_transform)\n   478\t\n   479\t        # We use FancyBboxPatch to draw a legend frame. The location\n   480\t        # and size of the box will be updated during the drawing time.\n   481\t\n   482\t        if facecolor is None:\n   483\t            facecolor = mpl.rcParams[\"legend.facecolor\"]\n   484\t        if facecolor == 'inherit':\n   485\t            facecolor = mpl.rcParams[\"axes.facecolor\"]\n   486\t\n   487\t        if edgecolor is None:\n   488\t            edgecolor = mpl.rcParams[\"legend.edgecolor\"]\n   489\t        if edgecolor == 'inherit':\n   490\t            edgecolor = mpl.rcParams[\"axes.edgecolor\"]\n   491\t\n   492\t        if fancybox is None:\n   493\t            fancybox = mpl.rcParams[\"legend.fancybox\"]\n   494\t\n   495\t        self.legendPatch = FancyBboxPatch(\n   496\t            xy=(0, 0), width=1, height=1,\n   497\t            facecolor=facecolor, edgecolor=edgecolor,\n   498\t            # If shadow is used, default to alpha=1 (#8943).\n   499\t            alpha=(framealpha if framealpha is not None\n   500\t                   else 1 if shadow\n   501\t                   else mpl.rcParams[\"legend.framealpha\"]),\n   502\t            # The width and height of the legendPatch will be set (in draw())\n   503\t            # to the length that includes the padding. Thus we set pad=0 here.\n   504\t            boxstyle=(\"round,pad=0,rounding_size=0.2\" if fancybox\n   505\t                      else \"square,pad=0\"),\n   506\t            mutation_scale=self._fontsize,\n   507\t            snap=True,\n   508\t            visible=(frameon if frameon is not None\n   509\t                     else mpl.rcParams[\"legend.frameon\"])\n   510\t        )\n   511\t        self._set_artist_props(self.legendPatch)\n   512\t\n   513\t        _api.check_in_list([\"center\", \"left\", \"right\"], alignment=alignment)\n   514\t        self._alignment = alignment\n   515\t\n   516\t        # init with null renderer\n   517\t        self._init_legend_box(handles, labels, markerfirst)\n   518\t\n   519\t        tmp = self._loc_used_default\n   520\t        self._set_loc(loc)\n   521\t        self._loc_used_default = tmp  # ignore changes done by _set_loc\n   522\t\n   523\t        # figure out title font properties:\n   524\t        if title_fontsize is not None and title_fontproperties is not None:\n   525\t            raise ValueError(\n   526\t                \"title_fontsize and title_fontproperties can't be specified \"\n   527\t                \"at the same time. Only use one of them. \")\n   528\t        title_prop_fp = FontProperties._from_any(title_fontproperties)\n   529\t        if isinstance(title_fontproperties, dict):\n   530\t            if \"size\" not in title_fontproperties:\n   531\t                title_fontsize = mpl.rcParams[\"legend.title_fontsize\"]\n   532\t                title_prop_fp.set_size(title_fontsize)\n   533\t        elif title_fontsize is not None:\n   534\t            title_prop_fp.set_size(title_fontsize)\n   535\t        elif not isinstance(title_fontproperties, FontProperties):\n   536\t            title_fontsize = mpl.rcParams[\"legend.title_fontsize\"]\n   537\t            title_prop_fp.set_size(title_fontsize)\n   538\t\n   539\t        self.set_title(title, prop=title_prop_fp)\n   540\t        self._draggable = None\n   541\t\n   542\t        # set the text color\n   543\t\n   544\t        color_getters = {  # getter function depends on line or patch\n   545\t            'linecolor':       ['get_color',           'get_facecolor'],\n   546\t            'markerfacecolor': ['get_markerfacecolor', 'get_facecolor'],\n   547\t            'mfc':             ['get_markerfacecolor', 'get_facecolor'],\n   548\t            'markeredgecolor': ['get_markeredgecolor', 'get_edgecolor'],\n   549\t            'mec':             ['get_markeredgecolor', 'get_edgecolor'],\n   550\t        }\n   551\t        if labelcolor is None:\n   552\t            if mpl.rcParams['legend.labelcolor'] is not None:\n   553\t                labelcolor = mpl.rcParams['legend.labelcolor']\n   554\t            else:\n   555\t                labelcolor = mpl.rcParams['text.color']\n   556\t        if isinstance(labelcolor, str) and labelcolor in color_getters:\n   557\t            getter_names = color_getters[labelcolor]\n   558\t            for handle, text in zip(self.legendHandles, self.texts):\n   559\t                for getter_name in getter_names:\n   560\t                    try:\n   561\t                        color = getattr(handle, getter_name)()\n   562\t                        text.set_color(color)\n   563\t                        break\n   564\t                    except AttributeError:\n   565\t                        pass\n   566\t        elif isinstance(labelcolor, str) and labelcolor == 'none':\n   567\t            for text in self.texts:\n   568\t                text.set_color(labelcolor)\n   569\t        elif np.iterable(labelcolor):\n   570\t            for text, color in zip(self.texts,\n   571\t                                   itertools.cycle(\n   572\t                                       colors.to_rgba_array(labelcolor))):\n   573\t                text.set_color(color)\n   574\t        else:\n   575\t            raise ValueError(f\"Invalid labelcolor: {labelcolor!r}\")\n          # ...\n   622\t\n   623\t    @allow_rasterization\n   624\t    def draw(self, renderer):\n   625\t        # docstring inherited\n   626\t        if not self.get_visible():\n   627\t            return\n   628\t\n   629\t        renderer.open_group('legend', gid=self.get_gid())\n   630\t\n   631\t        fontsize = renderer.points_to_pixels(self._fontsize)\n   632\t\n   633\t        # if mode == fill, set the width of the legend_box to the\n   634\t        # width of the parent (minus pads)\n   635\t        if self._mode in [\"expand\"]:\n   636\t            pad = 2 * (self.borderaxespad + self.borderpad) * fontsize\n   637\t            self._legend_box.set_width(self.get_bbox_to_anchor().width - pad)\n   638\t\n   639\t        # update the location and size of the legend. This needs to\n   640\t        # be done in any case to clip the figure right.\n   641\t        bbox = self._legend_box.get_window_extent(renderer)\n   642\t        self.legendPatch.set_bounds(bbox.bounds)\n   643\t        self.legendPatch.set_mutation_scale(fontsize)\n   644\t\n   645\t        if self.shadow:\n   646\t            Shadow(self.legendPatch, 2, -2).draw(renderer)\n   647\t\n   648\t        self.legendPatch.draw(renderer)\n   649\t        self._legend_box.draw(renderer)\n   650\t\n   651\t        renderer.close_group('legend')\n   652\t        self.stale = False\n   653\t\n   654\t    # _default_handler_map defines the default mapping between plot\n   655\t    # elements and the legend handlers.\n          # ...\n      # ...\n```\n\n</observation>",
                  "type": "tool_result"
                }
              ]
            },
            {
              "role": "assistant",
              "content": [
                {
                  "type": "text",
                  "text": "<thoughts>\n1. I found the Legend class implementation in lib/matplotlib/legend.py\n2. I notice that:\n   - The Legend class already has a `_draggable` attribute initialized as None in __init__ (line 540)\n   - The class inherits from Artist and uses DraggableOffsetBox (imported on line 45)\n3. Let me search for the draggable functionality to understand how it's currently implemented\n</thoughts>"
                },
                {
                  "id": "call_05070c78",
                  "input": {
                    "file_pattern": null,
                    "query": "legend draggable method implementation",
                    "category": "implementation"
                  },
                  "type": "tool_use",
                  "name": "SemanticSearch"
                }
              ]
            },
            {
              "role": "user",
              "content": [
                {
                  "tool_use_id": "call_05070c78",
                  "content": "<observation>\nFound 14 code sections.\n\nViewed relevant code:\nlib/matplotlib/legend.py\n```\n\n    23\t\n    24\timport itertools\n    25\timport logging\n    26\timport time\n    27\t\n    28\timport numpy as np\n    29\t\n    30\timport matplotlib as mpl\n    31\tfrom matplotlib import _api, _docstring, colors, offsetbox\n    32\tfrom matplotlib.artist import Artist, allow_rasterization\n    33\tfrom matplotlib.cbook import silent_list\n    34\tfrom matplotlib.font_manager import FontProperties\n    35\tfrom matplotlib.lines import Line2D\n    36\tfrom matplotlib.patches import (Patch, Rectangle, Shadow, FancyBboxPatch,\n    37\t                                StepPatch)\n    38\tfrom matplotlib.collections import (\n    39\t    Collection, CircleCollection, LineCollection, PathCollection,\n    40\t    PolyCollection, RegularPolyCollection)\n    41\tfrom matplotlib.text import Text\n    42\tfrom matplotlib.transforms import Bbox, BboxBase, TransformedBbox\n    43\tfrom matplotlib.transforms import BboxTransformTo, BboxTransformFrom\n    44\tfrom matplotlib.offsetbox import (\n    45\t    AnchoredOffsetbox, DraggableOffsetBox,\n    46\t    HPacker, VPacker,\n    47\t    DrawingArea, TextArea,\n    48\t)\n    49\tfrom matplotlib.container import ErrorbarContainer, BarContainer, StemContainer\n    50\tfrom . import legend_handler\n    51\t\n    52\t\n    53\tclass DraggableLegend(DraggableOffsetBox):\n    54\t    def __init__(self, legend, use_blit=False, update=\"loc\"):\n    55\t        \"\"\"\n    56\t        Wrapper around a `.Legend` to support mouse dragging.\n    57\t\n    58\t        Parameters\n    59\t        ----------\n    60\t        legend : `.Legend`\n    61\t            The `.Legend` instance to wrap.\n    62\t        use_blit : bool, optional\n    63\t            Use blitting for faster image composition. For details see\n    64\t            :ref:`func-animation`.\n    65\t        update : {'loc', 'bbox'}, optional\n    66\t            If \"loc\", update the *loc* parameter of the legend upon finalizing.\n    67\t            If \"bbox\", update the *bbox_to_anchor* parameter.\n    68\t        \"\"\"\n    69\t        self.legend = legend\n    70\t\n    71\t        _api.check_in_list([\"loc\", \"bbox\"], update=update)\n    72\t        self._update = update\n    73\t\n    74\t        super().__init__(legend, legend._legend_box, use_blit=use_blit)\n    75\t\n    76\t    def finalize_offset(self):\n    77\t        if self._update == \"loc\":\n    78\t            self._update_loc(self.get_loc_in_canvas())\n    79\t        elif self._update == \"bbox\":\n    80\t            self._bbox_to_anchor(self.get_loc_in_canvas())\n    81\t\n    82\t    def _update_loc(self, loc_in_canvas):\n    83\t        bbox = self.legend.get_bbox_to_anchor()\n    84\t        # if bbox has zero width or height, the transformation is\n    85\t        # ill-defined. Fall back to the default bbox_to_anchor.\n    86\t        if bbox.width == 0 or bbox.height == 0:\n    87\t            self.legend.set_bbox_to_anchor(None)\n    88\t            bbox = self.legend.get_bbox_to_anchor()\n    89\t        _bbox_transform = BboxTransformFrom(bbox)\n    90\t        self.legend._loc = tuple(_bbox_transform.transform(loc_in_canvas))\n    91\t\n    92\t    def _update_bbox_to_anchor(self, loc_in_canvas):\n    93\t        loc_in_bbox = self.legend.axes.transAxes.transform(loc_in_canvas)\n    94\t        self.legend.set_bbox_to_anchor(loc_in_bbox)\n      # ...\n   290\t\n   291\t\n   292\tclass Legend(Artist):\n   293\t    \"\"\"\n   294\t    Place a legend on the axes at location loc.\n   295\t    \"\"\"\n   296\t\n   297\t    # 'best' is only implemented for axes legends\n   298\t    codes = {'best': 0, **AnchoredOffsetbox.codes}\n   299\t    zorder = 5\n          # ...\n  1078\t\n  1079\t    def set_draggable(self, state, use_blit=False, update='loc'):\n  1080\t        \"\"\"\n  1081\t        Enable or disable mouse dragging support of the legend.\n  1082\t\n  1083\t        Parameters\n  1084\t        ----------\n  1085\t        state : bool\n  1086\t            Whether mouse dragging is enabled.\n  1087\t        use_blit : bool, optional\n  1088\t            Use blitting for faster image composition. For details see\n  1089\t            :ref:`func-animation`.\n  1090\t        update : {'loc', 'bbox'}, optional\n  1091\t            The legend parameter to be changed when dragged:\n  1092\t\n  1093\t            - 'loc': update the *loc* parameter of the legend\n  1094\t            - 'bbox': update the *bbox_to_anchor* parameter of the legend\n  1095\t\n  1096\t        Returns\n  1097\t        -------\n  1098\t        `.DraggableLegend` or *None*\n  1099\t            If *state* is ``True`` this returns the `.DraggableLegend` helper\n  1100\t            instance. Otherwise this returns *None*.\n  1101\t        \"\"\"\n  1102\t        if state:\n  1103\t            if self._draggable is None:\n  1104\t                self._draggable = DraggableLegend(self,\n  1105\t                                                  use_blit,\n  1106\t                                                  update=update)\n  1107\t        else:\n  1108\t            if self._draggable is not None:\n  1109\t                self._draggable.disconnect()\n  1110\t            self._draggable = None\n  1111\t        return self._draggable\n  1112\t\n  1113\t    def get_draggable(self):\n  1114\t        \"\"\"Return ``True`` if the legend is draggable, ``False`` otherwise.\"\"\"\n  1115\t        return self._draggable is not None\n  1116\t\n  1117\t\n  1118\t# Helper functions to parse legend arguments for both `figure.legend` and\n  1119\t# `axes.legend`:\n      # ...\n```\n\n</observation>",
                  "type": "tool_result"
                }
              ]
            },
            {
              "role": "assistant",
              "content": [
                {
                  "type": "text",
                  "text": "<thoughts>\n1. I found the draggable functionality implementation:\n   - There's a DraggableLegend class that inherits from DraggableOffsetBox\n   - Legend class has set_draggable() and get_draggable() methods\n   - The _draggable attribute is initialized as None in __init__\n2. Adding a draggable parameter to __init__ seems feasible since:\n   - The infrastructure for draggable legends already exists\n   - It would just need to call set_draggable() during initialization\n3. Let me check if there are any tests for the draggable functionality to understand how to test the new parameter\n</thoughts>"
                },
                {
                  "id": "call_9dda00e0",
                  "input": {
                    "file_pattern": null,
                    "query": "legend draggable tests",
                    "category": "test"
                  },
                  "type": "tool_use",
                  "name": "SemanticSearch"
                }
              ]
            },
            {
              "role": "user",
              "content": [
                {
                  "tool_use_id": "call_9dda00e0",
                  "content": "<observation>\nFound 12 code sections.\n\nViewed relevant code:\nlib/matplotlib/tests/test_legend.py\n```\n     1\timport collections\n     2\timport platform\n     3\tfrom unittest import mock\n     4\timport warnings\n     5\t\n     6\timport numpy as np\n     7\timport pytest\n     8\t\n     9\tfrom matplotlib.testing.decorators import check_figures_equal, image_comparison\n    10\tfrom matplotlib.testing._markers import needs_usetex\n    11\timport matplotlib.pyplot as plt\n    12\timport matplotlib as mpl\n    13\timport matplotlib.transforms as mtransforms\n    14\timport matplotlib.collections as mcollections\n    15\timport matplotlib.lines as mlines\n    16\tfrom matplotlib.legend_handler import HandlerTuple\n    17\timport matplotlib.legend as mlegend\n    18\tfrom matplotlib import rc_context\n    19\tfrom matplotlib.font_manager import FontProperties\n      # ...\n   775\t\n   776\t\n   777\tdef test_get_set_draggable():\n   778\t    legend = plt.legend()\n   779\t    assert not legend.get_draggable()\n   780\t    legend.set_draggable(True)\n   781\t    assert legend.get_draggable()\n   782\t    legend.set_draggable(False)\n   783\t    assert not legend.get_draggable()\n      # ...\n```\n\n</observation>",
                  "type": "tool_result"
                }
              ]
            },
            {
              "role": "assistant",
              "content": [
                {
                  "type": "text",
                  "text": "<thoughts>\n1. I found the test for draggable functionality in test_legend.py\n2. The changes needed are:\n   - Add a draggable parameter to Legend.__init__\n   - Call set_draggable() in __init__ if draggable=True\n   - Add a test case for the new parameter\n3. Let me implement these changes\n</thoughts>"
                },
                {
                  "id": "call_8befcc99",
                  "input": {
                    "command": "str_replace",
                    "path": "lib/matplotlib/legend.py",
                    "file_text": null,
                    "view_range": null,
                    "old_str": "    def __init__(\n        self, parent, handles, labels,\n        loc=None,\n        numpoints=None,      # number of points in the legend line\n        markerscale=None,    # relative size of legend markers vs. original\n        markerfirst=True,    # left/right ordering of legend marker and label\n        scatterpoints=None,  # number of scatter points\n        scatteryoffsets=None,\n        prop=None,           # properties for the legend texts\n        fontsize=None,       # keyword to set font size directly\n        labelcolor=None,     # keyword to set the text color\n\n        # spacing & pad defined as a fraction of the font-size\n        borderpad=None,      # whitespace inside the legend border\n        labelspacing=None,   # vertical space between the legend entries\n        handlelength=None,   # length of the legend handles\n        handleheight=None,   # height of the legend handles\n        handletextpad=None,  # pad between the legend handle and text\n        borderaxespad=None,  # pad between the axes and legend border\n        columnspacing=None,  # spacing between columns\n\n        ncols=1,     # number of columns\n        mode=None,  # horizontal distribution of columns: None or \"expand\"\n\n        fancybox=None,  # True: fancy box, False: rounded box, None: rcParam\n        shadow=None,\n        title=None,           # legend title\n        title_fontsize=None,  # legend title font size\n        framealpha=None,      # set frame alpha\n        edgecolor=None,       # frame patch edgecolor\n        facecolor=None,       # frame patch facecolor\n\n        bbox_to_anchor=None,  # bbox to which the legend will be anchored\n        bbox_transform=None,  # transform for the bbox\n        frameon=None,         # draw frame\n        handler_map=None,\n        title_fontproperties=None,  # properties for the legend title\n        alignment=\"center\",       # control the alignment within the legend box\n        *,\n        ncol=1  # synonym for ncols (backward compatibility)",
                    "new_str": "    def __init__(\n        self, parent, handles, labels,\n        loc=None,\n        numpoints=None,      # number of points in the legend line\n        markerscale=None,    # relative size of legend markers vs. original\n        markerfirst=True,    # left/right ordering of legend marker and label\n        scatterpoints=None,  # number of scatter points\n        scatteryoffsets=None,\n        prop=None,           # properties for the legend texts\n        fontsize=None,       # keyword to set font size directly\n        labelcolor=None,     # keyword to set the text color\n\n        # spacing & pad defined as a fraction of the font-size\n        borderpad=None,      # whitespace inside the legend border\n        labelspacing=None,   # vertical space between the legend entries\n        handlelength=None,   # length of the legend handles\n        handleheight=None,   # height of the legend handles\n        handletextpad=None,  # pad between the legend handle and text\n        borderaxespad=None,  # pad between the axes and legend border\n        columnspacing=None,  # spacing between columns\n\n        ncols=1,     # number of columns\n        mode=None,  # horizontal distribution of columns: None or \"expand\"\n\n        fancybox=None,  # True: fancy box, False: rounded box, None: rcParam\n        shadow=None,\n        title=None,           # legend title\n        title_fontsize=None,  # legend title font size\n        framealpha=None,      # set frame alpha\n        edgecolor=None,       # frame patch edgecolor\n        facecolor=None,       # frame patch facecolor\n\n        bbox_to_anchor=None,  # bbox to which the legend will be anchored\n        bbox_transform=None,  # transform for the bbox\n        frameon=None,         # draw frame\n        handler_map=None,\n        title_fontproperties=None,  # properties for the legend title\n        alignment=\"center\",       # control the alignment within the legend box\n        draggable=False,      # enable mouse dragging support\n        *,\n        ncol=1  # synonym for ncols (backward compatibility)",
                    "insert_line": null
                  },
                  "type": "tool_use",
                  "name": "str_replace_editor"
                }
              ]
            },
            {
              "role": "user",
              "content": [
                {
                  "tool_use_id": "call_8befcc99",
                  "content": "<observation>\nThe file lib/matplotlib/legend.py has been edited. Here's the result of running `cat -n` on a snippet of lib/matplotlib/legend.py:\n   306\t    def __str__(self):\n   307\t        return \"Legend\"\n   308\t\n   309\t    @_api.make_keyword_only(\"3.6\", \"loc\")\n   310\t    @_docstring.dedent_interpd\n   311\t    def __init__(\n   312\t        self, parent, handles, labels,\n   313\t        loc=None,\n   314\t        numpoints=None,      # number of points in the legend line\n   315\t        markerscale=None,    # relative size of legend markers vs. original\n   316\t        markerfirst=True,    # left/right ordering of legend marker and label\n   317\t        scatterpoints=None,  # number of scatter points\n   318\t        scatteryoffsets=None,\n   319\t        prop=None,           # properties for the legend texts\n   320\t        fontsize=None,       # keyword to set font size directly\n   321\t        labelcolor=None,     # keyword to set the text color\n   322\t\n   323\t        # spacing & pad defined as a fraction of the font-size\n   324\t        borderpad=None,      # whitespace inside the legend border\n   325\t        labelspacing=None,   # vertical space between the legend entries\n   326\t        handlelength=None,   # length of the legend handles\n   327\t        handleheight=None,   # height of the legend handles\n   328\t        handletextpad=None,  # pad between the legend handle and text\n   329\t        borderaxespad=None,  # pad between the axes and legend border\n   330\t        columnspacing=None,  # spacing between columns\n   331\t\n   332\t        ncols=1,     # number of columns\n   333\t        mode=None,  # horizontal distribution of columns: None or \"expand\"\n   334\t\n   335\t        fancybox=None,  # True: fancy box, False: rounded box, None: rcParam\n   336\t        shadow=None,\n   337\t        title=None,           # legend title\n   338\t        title_fontsize=None,  # legend title font size\n   339\t        framealpha=None,      # set frame alpha\n   340\t        edgecolor=None,       # frame patch edgecolor\n   341\t        facecolor=None,       # frame patch facecolor\n   342\t\n   343\t        bbox_to_anchor=None,  # bbox to which the legend will be anchored\n   344\t        bbox_transform=None,  # transform for the bbox\n   345\t        frameon=None,         # draw frame\n   346\t        handler_map=None,\n   347\t        title_fontproperties=None,  # properties for the legend title\n   348\t        alignment=\"center\",       # control the alignment within the legend box\n   349\t        draggable=False,      # enable mouse dragging support\n   350\t        *,\n   351\t        ncol=1  # synonym for ncols (backward compatibility)\n   352\t    ):\n   353\t        \"\"\"\n   354\t        Parameters\nReview the changes and make sure they are as expected. Edit the file again if necessary.\n\nRunning 936 tests in the following files:\n * lib/matplotlib/tests/test_legend.py\n * lib/matplotlib/tests/test_contour.py\n * lib/matplotlib/tests/test_axes.py\n\n* FAILED lib/matplotlib/tests/test_contour.py test_contourf_log_extension>\n```\n\n    @image_comparison(['contour_log_extension.png'],\n                      remove_text=True, style='mpl20',\n                      tol=1.444)\n    def test_contourf_log_extension():\n        # Remove this line when this test image is regenerated.\n        plt.rcParams['pcolormesh.snap'] = False\n    \n        # Test that contourf with lognorm is extended correctly\n        fig, (ax1, ax2, ax3) = plt.subplots(1, 3, figsize=(10, 5))\n        fig.subplots_adjust(left=0.05, right=0.95)\n    \n        # make data set with large range e.g. between 1e-8 and 1e10\n        data_exp = np.linspace(-7.5, 9.5, 1200)\n        data = np.power(10, data_exp).reshape(30, 40)\n        # make manual levels e.g. between 1e-4 and 1e-6\n        levels_exp = np.arange(-4., 7.)\n        levels = np.power(10., levels_exp)\n    \n        # original data\n        c1 = ax1.contourf(data,\n                          norm=LogNorm(vmin=data.min(), vmax=data.max()))\n        # just show data in levels\n        c2 = ax2.contourf(data, levels=levels,\n                          norm=LogNorm(vmin=levels.min(), vmax=levels.max()),\n                          extend='neither')\n        # extend data from levels\n        c3 = ax3.contourf(data, levels=levels,\n                          norm=LogNorm(vmin=levels.min(), vmax=levels.max()),\n                          extend='both')\n        cb = plt.colorbar(c1, ax=ax1)\n        assert cb.ax.get_ylim() == (1e-8, 1e10)\n        cb = plt.colorbar(c2, ax=ax2)\n>       assert cb.ax.get_ylim() == (1e-4, 1e6)\nE       assert (9.9999999999...05, 1000000.0) == (0.0001, 1000000.0)\nE         \nE         At index 0 diff: 9.999999999999999e-05 != 0.0001\nE         Use -v to get more diff\n\nlib/matplotlib/tests/test_contour.py:316: AssertionError\n```\n\n\n935 passed. 1 failed. 0 errors.\n</observation>",
                  "type": "tool_result"
                }
              ]
            },
            {
              "role": "assistant",
              "content": [
                {
                  "type": "text",
                  "text": "<thoughts>\n1. I've added the draggable parameter to the __init__ signature, but I still need to:\n   - Add it to the docstring\n   - Actually implement the functionality by calling set_draggable() in __init__\n2. The test failure in test_contour.py seems unrelated to our changes (it's about colorbar limits)\n3. Let me continue with the implementation\n</thoughts>"
                },
                {
                  "id": "call_7590c0f7",
                  "input": {
                    "command": "str_replace",
                    "path": "lib/matplotlib/legend.py",
                    "file_text": null,
                    "view_range": null,
                    "old_str": "        self.set_title(title, prop=title_prop_fp)\n        self._draggable = None\n\n        # set the text color",
                    "new_str": "        self.set_title(title, prop=title_prop_fp)\n        self._draggable = None\n        if draggable:\n            self.set_draggable(True)\n\n        # set the text color",
                    "insert_line": null
                  },
                  "type": "tool_use",
                  "name": "str_replace_editor"
                }
              ]
            },
            {
              "role": "user",
              "content": [
                {
                  "tool_use_id": "call_7590c0f7",
                  "content": "<observation>\nThe file lib/matplotlib/legend.py has been edited. Here's the result of running `cat -n` on a snippet of lib/matplotlib/legend.py:\n   540\t            title_prop_fp.set_size(title_fontsize)\n   541\t        elif not isinstance(title_fontproperties, FontProperties):\n   542\t            title_fontsize = mpl.rcParams[\"legend.title_fontsize\"]\n   543\t            title_prop_fp.set_size(title_fontsize)\n   544\t\n   545\t        self.set_title(title, prop=title_prop_fp)\n   546\t        self._draggable = None\n   547\t        if draggable:\n   548\t            self.set_draggable(True)\n   549\t\n   550\t        # set the text color\n   551\t\n   552\t        color_getters = {  # getter function depends on line or patch\n   553\t            'linecolor':       ['get_color',           'get_facecolor'],\nReview the changes and make sure they are as expected. Edit the file again if necessary.\n\nRunning 936 tests in the following files:\n * lib/matplotlib/tests/test_legend.py\n * lib/matplotlib/tests/test_contour.py\n * lib/matplotlib/tests/test_axes.py\n\n* FAILED lib/matplotlib/tests/test_contour.py test_contourf_log_extension>\n```\n\n    @image_comparison(['contour_log_extension.png'],\n                      remove_text=True, style='mpl20',\n                      tol=1.444)\n    def test_contourf_log_extension():\n        # Remove this line when this test image is regenerated.\n        plt.rcParams['pcolormesh.snap'] = False\n    \n        # Test that contourf with lognorm is extended correctly\n        fig, (ax1, ax2, ax3) = plt.subplots(1, 3, figsize=(10, 5))\n        fig.subplots_adjust(left=0.05, right=0.95)\n    \n        # make data set with large range e.g. between 1e-8 and 1e10\n        data_exp = np.linspace(-7.5, 9.5, 1200)\n        data = np.power(10, data_exp).reshape(30, 40)\n        # make manual levels e.g. between 1e-4 and 1e-6\n        levels_exp = np.arange(-4., 7.)\n        levels = np.power(10., levels_exp)\n    \n        # original data\n        c1 = ax1.contourf(data,\n                          norm=LogNorm(vmin=data.min(), vmax=data.max()))\n        # just show data in levels\n        c2 = ax2.contourf(data, levels=levels,\n                          norm=LogNorm(vmin=levels.min(), vmax=levels.max()),\n                          extend='neither')\n        # extend data from levels\n        c3 = ax3.contourf(data, levels=levels,\n                          norm=LogNorm(vmin=levels.min(), vmax=levels.max()),\n                          extend='both')\n        cb = plt.colorbar(c1, ax=ax1)\n        assert cb.ax.get_ylim() == (1e-8, 1e10)\n        cb = plt.colorbar(c2, ax=ax2)\n>       assert cb.ax.get_ylim() == (1e-4, 1e6)\nE       assert (9.9999999999...05, 1000000.0) == (0.0001, 1000000.0)\nE         \nE         At index 0 diff: 9.999999999999999e-05 != 0.0001\nE         Use -v to get more diff\n\nlib/matplotlib/tests/test_contour.py:316: AssertionError\n```\n\n\n935 passed. 1 failed. 0 errors.\n</observation>",
                  "type": "tool_result"
                }
              ]
            },
            {
              "role": "assistant",
              "content": [
                {
                  "type": "text",
                  "text": "<thoughts>\n1. I've added the implementation to enable draggable functionality when draggable=True\n2. Now I need to:\n   - Add the draggable parameter to the docstring\n   - Add a test case for the new parameter\n3. Let me update the docstring first\n</thoughts>"
                },
                {
                  "id": "call_340e706c",
                  "input": {
                    "command": "str_replace",
                    "path": "lib/matplotlib/legend.py",
                    "file_text": null,
                    "view_range": null,
                    "old_str": "        alignment : {'center', 'left', 'right'}, default: 'center'\n            The alignment value for the legend box. The valid values are:\n            {'center', 'left', 'right'}\n\n        Other Parameters\n        ----------------\n        **kwargs : `.Text` properties\n            Other keyword arguments are given to the `.Text` instance\n            containing the legend's text.\n\n        See Also\n        --------\n        .Figure.legend",
                    "new_str": "        alignment : {'center', 'left', 'right'}, default: 'center'\n            The alignment value for the legend box. The valid values are:\n            {'center', 'left', 'right'}\n\n        draggable : bool, default: False\n            Enable mouse dragging support for the legend.\n\n        Other Parameters\n        ----------------\n        **kwargs : `.Text` properties\n            Other keyword arguments are given to the `.Text` instance\n            containing the legend's text.\n\n        See Also\n        --------\n        .Figure.legend",
                    "insert_line": null
                  },
                  "type": "tool_use",
                  "name": "str_replace_editor"
                }
              ]
            },
            {
              "role": "user",
              "content": [
                {
                  "tool_use_id": "call_340e706c",
                  "content": "<observation>\nString '        alignment : {'center', 'left', 'right'}, default: 'center'\n            The alignment value for the legend box. The valid values are:\n            {'center', 'left', 'right'}\n\n        Other Parameters\n        ----------------\n        **kwargs : `.Text` properties\n            Other keyword arguments are given to the `.Text` instance\n            containing the legend's text.\n\n        See Also\n        --------\n        .Figure.legend' not found in lib/matplotlib/legend.py\n</observation>",
                  "type": "tool_result"
                }
              ]
            },
            {
              "role": "assistant",
              "content": [
                {
                  "type": "text",
                  "text": "<thoughts>\n1. The docstring replacement failed because I didn't match the exact text. Let me try again with the correct text.\n2. First, let me view the current docstring to get the exact text\n</thoughts>"
                },
                {
                  "id": "call_9bda5a30",
                  "input": {
                    "command": "view",
                    "path": "lib/matplotlib/legend.py",
                    "file_text": null,
                    "view_range": [
                      350,
                      400
                    ],
                    "old_str": null,
                    "new_str": null,
                    "insert_line": null
                  },
                  "type": "tool_use",
                  "name": "str_replace_editor"
                }
              ]
            },
            {
              "role": "user",
              "content": [
                {
                  "tool_use_id": "call_9bda5a30",
                  "content": "<observation>\nHere's the result of running `cat -n` on lib/matplotlib/legend.py:\n   350\t        ----------\n   351\t        parent : `~matplotlib.axes.Axes` or `.Figure`\n   352\t            The artist that contains the legend.\n   353\t\n   354\t        handles : list of `.Artist`\n   355\t            A list of Artists (lines, patches) to be added to the legend.\n   356\t\n   357\t        labels : list of str\n   358\t            A list of labels to show next to the artists. The length of handles\n   359\t            and labels should be the same. If they are not, they are truncated\n   360\t            to the smaller of both lengths.\n   361\t\n   362\t        Other Parameters\n   363\t        ----------------\n   364\t        %(_legend_kw_doc)s\n   365\t\n   366\t        Notes\n   367\t        -----\n   368\t        Users can specify any arbitrary location for the legend using the\n   369\t        *bbox_to_anchor* keyword argument. *bbox_to_anchor* can be a\n   370\t        `.BboxBase` (or derived there from) or a tuple of 2 or 4 floats.\n   371\t        See `set_bbox_to_anchor` for more detail.\n   372\t\n   373\t        The legend location can be specified by setting *loc* with a tuple of\n   374\t        2 floats, which is interpreted as the lower-left corner of the legend\n   375\t        in the normalized axes coordinate.\n   376\t        \"\"\"\n   377\t        # local import only to avoid circularity\n   378\t        from matplotlib.axes import Axes\n   379\t        from matplotlib.figure import FigureBase\n   380\t\n   381\t        super().__init__()\n   382\t\n   383\t        if prop is None:\n   384\t            if fontsize is not None:\n   385\t                self.prop = FontProperties(size=fontsize)\n   386\t            else:\n   387\t                self.prop = FontProperties(\n   388\t                    size=mpl.rcParams[\"legend.fontsize\"])\n   389\t        else:\n   390\t            self.prop = FontProperties._from_any(prop)\n   391\t            if isinstance(prop, dict) and \"size\" not in prop:\n   392\t                self.prop.set_size(mpl.rcParams[\"legend.fontsize\"])\n   393\t\n   394\t        self._fontsize = self.prop.get_size_in_points()\n   395\t\n   396\t        self.texts = []\n   397\t        self.legendHandles = []\n   398\t        self._legend_title_box = None\n   399\t\n   400\t        #: A dictionary with the extra handler mappings for this Legend\n\n</observation>",
                  "type": "tool_result"
                }
              ]
            },
            {
              "role": "assistant",
              "content": [
                {
                  "type": "text",
                  "text": "<thoughts>\n1. I see that the docstring uses %(_legend_kw_doc)s for the parameters, which means it's using a template system\n2. Let me search for where this template is defined\n</thoughts>"
                },
                {
                  "id": "call_74c47f7a",
                  "input": {
                    "file_pattern": null,
                    "code_snippet": "_legend_kw_doc"
                  },
                  "type": "tool_use",
                  "name": "FindCodeSnippet"
                }
              ]
            },
            {
              "role": "user",
              "content": [
                {
                  "tool_use_id": "call_74c47f7a",
                  "content": "<observation>\nFound 10 code sections.\n\nViewed relevant code:\nlib/matplotlib/legend.py\n```\n\n    23\t\n    24\timport itertools\n    25\timport logging\n    26\timport time\n    27\t\n    28\timport numpy as np\n    29\t\n    30\timport matplotlib as mpl\n    31\tfrom matplotlib import _api, _docstring, colors, offsetbox\n    32\tfrom matplotlib.artist import Artist, allow_rasterization\n    33\tfrom matplotlib.cbook import silent_list\n    34\tfrom matplotlib.font_manager import FontProperties\n    35\tfrom matplotlib.lines import Line2D\n    36\tfrom matplotlib.patches import (Patch, Rectangle, Shadow, FancyBboxPatch,\n    37\t                                StepPatch)\n    38\tfrom matplotlib.collections import (\n    39\t    Collection, CircleCollection, LineCollection, PathCollection,\n    40\t    PolyCollection, RegularPolyCollection)\n    41\tfrom matplotlib.text import Text\n    42\tfrom matplotlib.transforms import Bbox, BboxBase, TransformedBbox\n    43\tfrom matplotlib.transforms import BboxTransformTo, BboxTransformFrom\n    44\tfrom matplotlib.offsetbox import (\n    45\t    AnchoredOffsetbox, DraggableOffsetBox,\n    46\t    HPacker, VPacker,\n    47\t    DrawingArea, TextArea,\n    48\t)\n    49\tfrom matplotlib.container import ErrorbarContainer, BarContainer, StemContainer\n    50\tfrom . import legend_handler\n      # ...\n    95\t\n    96\t\n    97\t_docstring.interpd.update(_legend_kw_doc=\"\"\"\n    98\tloc : str or pair of floats, default: :rc:`legend.loc` ('best' for axes, \\\n    99\t'upper right' for figures)\n   100\t    The location of the legend.\n   101\t\n   102\t    The strings\n   103\t    ``'upper left', 'upper right', 'lower left', 'lower right'``\n   104\t    place the legend at the corresponding corner of the axes/figure.\n   105\t\n   106\t    The strings\n   107\t    ``'upper center', 'lower center', 'center left', 'center right'``\n   108\t    place the legend at the center of the corresponding edge of the\n   109\t    axes/figure.\n   110\t\n   111\t    The string ``'center'`` places the legend at the center of the axes/figure.\n   112\t\n   113\t    The string ``'best'`` places the legend at the location, among the nine\n   114\t    locations defined so far, with the minimum overlap with other drawn\n   115\t    artists.  This option can be quite slow for plots with large amounts of\n   116\t    data; your plotting speed may benefit from providing a specific location.\n   117\t\n   118\t    The location can also be a 2-tuple giving the coordinates of the lower-left\n   119\t    corner of the legend in axes coordinates (in which case *bbox_to_anchor*\n   120\t    will be ignored).\n   121\t\n   122\t    For back-compatibility, ``'center right'`` (but no other location) can also\n   123\t    be spelled ``'right'``, and each \"string\" locations can also be given as a\n   124\t    numeric value:\n   125\t\n   126\t        ===============   =============\n   127\t        Location String   Location Code\n   128\t        ===============   =============\n   129\t        'best'            0\n   130\t        'upper right'     1\n   131\t        'upper left'      2\n   132\t        'lower left'      3\n   133\t        'lower right'     4\n   134\t        'right'           5\n   135\t        'center left'     6\n   136\t        'center right'    7\n   137\t        'lower center'    8\n   138\t        'upper center'    9\n   139\t        'center'          10\n   140\t        ===============   =============\n   141\t\n   142\tbbox_to_anchor : `.BboxBase`, 2-tuple, or 4-tuple of floats\n   143\t    Box that is used to position the legend in conjunction with *loc*.\n   144\t    Defaults to `axes.bbox` (if called as a method to `.Axes.legend`) or\n   145\t    `figure.bbox` (if `.Figure.legend`).  This argument allows arbitrary\n   146\t    placement of the legend.\n   147\t\n   148\t    Bbox coordinates are interpreted in the coordinate system given by\n   149\t    *bbox_transform*, with the default transform\n   150\t    Axes or Figure coordinates, depending on which ``legend`` is called.\n   151\t\n   152\t    If a 4-tuple or `.BboxBase` is given, then it specifies the bbox\n   153\t    ``(x, y, width, height)`` that the legend is placed in.\n   154\t    To put the legend in the best location in the bottom right\n   155\t    quadrant of the axes (or figure)::\n   156\t\n   157\t        loc='best', bbox_to_anchor=(0.5, 0., 0.5, 0.5)\n   158\t\n   159\t    A 2-tuple ``(x, y)`` places the corner of the legend specified by *loc* at\n   160\t    x, y.  For example, to put the legend's upper right-hand corner in the\n   161\t    center of the axes (or figure) the following keywords can be used::\n   162\t\n   163\t        loc='upper right', bbox_to_anchor=(0.5, 0.5)\n   164\t\n   165\tncols : int, default: 1\n   166\t    The number of columns that the legend has.\n   167\t\n   168\t    For backward compatibility, the spelling *ncol* is also supported\n   169\t    but it is discouraged. If both are given, *ncols* takes precedence.\n   170\t\n   171\tprop : None or `matplotlib.font_manager.FontProperties` or dict\n   172\t    The font properties of the legend. If None (default), the current\n   173\t    :data:`matplotlib.rcParams` will be used.\n   174\t\n   175\tfontsize : int or {'xx-small', 'x-small', 'small', 'medium', 'large', \\\n   176\t'x-large', 'xx-large'}\n   177\t    The font size of the legend. If the value is numeric the size will be the\n   178\t    absolute font size in points. String values are relative to the current\n   179\t    default font size. This argument is only used if *prop* is not specified.\n   180\t\n   181\tlabelcolor : str or list, default: :rc:`legend.labelcolor`\n   182\t    The color of the text in the legend. Either a valid color string\n   183\t    (for example, 'red'), or a list of color strings. The labelcolor can\n   184\t    also be made to match the color of the line or marker using 'linecolor',\n   185\t    'markerfacecolor' (or 'mfc'), or 'markeredgecolor' (or 'mec').\n   186\t\n   187\t    Labelcolor can be set globally using :rc:`legend.labelcolor`. If None,\n   188\t    use :rc:`text.color`.\n   189\t\n   190\tnumpoints : int, default: :rc:`legend.numpoints`\n   191\t    The number of marker points in the legend when creating a legend\n   192\t    entry for a `.Line2D` (line).\n   193\t\n   194\tscatterpoints : int, default: :rc:`legend.scatterpoints`\n   195\t    The number of marker points in the legend when creating\n   196\t    a legend entry for a `.PathCollection` (scatter plot).\n   197\t\n   198\tscatteryoffsets : iterable of floats, default: ``[0.375, 0.5, 0.3125]``\n   199\t    The vertical offset (relative to the font size) for the markers\n   200\t    created for a scatter plot legend entry. 0.0 is at the base the\n   201\t    legend text, and 1.0 is at the top. To draw all markers at the\n   202\t    same height, set to ``[0.5]``.\n   203\t\n   204\tmarkerscale : float, default: :rc:`legend.markerscale`\n   205\t    The relative size of legend markers compared with the originally\n   206\t    drawn ones.\n   207\t\n   208\tmarkerfirst : bool, default: True\n   209\t    If *True*, legend marker is placed to the left of the legend label.\n   210\t    If *False*, legend marker is placed to the right of the legend label.\n   211\t\n   212\tframeon : bool, default: :rc:`legend.frameon`\n   213\t    Whether the legend should be drawn on a patch (frame).\n   214\t\n   215\tfancybox : bool, default: :rc:`legend.fancybox`\n   216\t    Whether round edges should be enabled around the `.FancyBboxPatch` which\n   217\t    makes up the legend's background.\n   218\t\n   219\tshadow : bool, default: :rc:`legend.shadow`\n   220\t    Whether to draw a shadow behind the legend.\n   221\t\n   222\tframealpha : float, default: :rc:`legend.framealpha`\n   223\t    The alpha transparency of the legend's background.\n   224\t    If *shadow* is activated and *framealpha* is ``None``, the default value is\n   225\t    ignored.\n   226\t\n   227\tfacecolor : \"inherit\" or color, default: :rc:`legend.facecolor`\n   228\t    The legend's background color.\n   229\t    If ``\"inherit\"``, use :rc:`axes.facecolor`.\n   230\t\n   231\tedgecolor : \"inherit\" or color, default: :rc:`legend.edgecolor`\n   232\t    The legend's background patch edge color.\n   233\t    If ``\"inherit\"``, use take :rc:`axes.edgecolor`.\n   234\t\n   235\tmode : {\"expand\", None}\n   236\t    If *mode* is set to ``\"expand\"`` the legend will be horizontally\n   237\t    expanded to fill the axes area (or *bbox_to_anchor* if defines\n   238\t    the legend's size).\n   239\t\n   240\tbbox_transform : None or `matplotlib.transforms.Transform`\n   241\t    The transform for the bounding box (*bbox_to_anchor*). For a value\n   242\t    of ``None`` (default) the Axes'\n   243\t    :data:`~matplotlib.axes.Axes.transAxes` transform will be used.\n   244\t\n   245\ttitle : str or None\n   246\t    The legend's title. Default is no title (``None``).\n   247\t\n   248\ttitle_fontproperties : None or `matplotlib.font_manager.FontProperties` or dict\n   249\t    The font properties of the legend's title. If None (default), the\n   250\t    *title_fontsize* argument will be used if present; if *title_fontsize* is\n   251\t    also None, the current :rc:`legend.title_fontsize` will be used.\n   252\t\n   253\ttitle_fontsize : int or {'xx-small', 'x-small', 'small', 'medium', 'large', \\\n   254\t'x-large', 'xx-large'}, default: :rc:`legend.title_fontsize`\n   255\t    The font size of the legend's title.\n   256\t    Note: This cannot be combined with *title_fontproperties*. If you want\n   257\t    to set the fontsize alongside other font properties, use the *size*\n   258\t    parameter in *title_fontproperties*.\n   259\t\n   260\talignment : {'center', 'left', 'right'}, default: 'center'\n   261\t    The alignment of the legend title and the box of entries. The entries\n   262\t    are aligned as a single block, so that markers always lined up.\n   263\t\n   264\tborderpad : float, default: :rc:`legend.borderpad`\n   265\t    The fractional whitespace inside the legend border, in font-size units.\n   266\t\n   267\tlabelspacing : float, default: :rc:`legend.labelspacing`\n   268\t    The vertical space between the legend entries, in font-size units.\n   269\t\n   270\thandlelength : float, default: :rc:`legend.handlelength`\n   271\t    The length of the legend handles, in font-size units.\n   272\t\n   273\thandleheight : float, default: :rc:`legend.handleheight`\n   274\t    The height of the legend handles, in font-size units.\n   275\t\n   276\thandletextpad : float, default: :rc:`legend.handletextpad`\n   277\t    The pad between the legend handle and text, in font-size units.\n   278\t\n   279\tborderaxespad : float, default: :rc:`legend.borderaxespad`\n   280\t    The pad between the axes and legend border, in font-size units.\n   281\t\n   282\tcolumnspacing : float, default: :rc:`legend.columnspacing`\n   283\t    The spacing between columns, in font-size units.\n   284\t\n   285\thandler_map : dict or None\n   286\t    The custom dictionary mapping instances or types to a legend\n   287\t    handler. This *handler_map* updates the default handler map\n   288\t    found at `matplotlib.legend.Legend.get_legend_handler_map`.\n   289\t\"\"\")\n      # ...\n```\n\n</observation>",
                  "type": "tool_result",
                  "cache_control": {
                    "type": "ephemeral"
                  }
                }
              ]
            },
            {
              "role": "assistant",
              "content": [
                {
                  "type": "text",
                  "text": "<thoughts>\n1. I found that the docstring is defined in _legend_kw_doc template\n2. I need to add the draggable parameter documentation to this template\n3. Let me update the template with the new parameter\n</thoughts>"
                },
                {
                  "id": "call_768de362",
                  "input": {
                    "command": "str_replace",
                    "path": "lib/matplotlib/legend.py",
                    "file_text": null,
                    "view_range": null,
                    "old_str": "handler_map : dict or None\n    The custom dictionary mapping instances or types to a legend\n    handler. This *handler_map* updates the default handler map\n    found at `matplotlib.legend.Legend.get_legend_handler_map`.\n\"\"\")",
                    "new_str": "handler_map : dict or None\n    The custom dictionary mapping instances or types to a legend\n    handler. This *handler_map* updates the default handler map\n    found at `matplotlib.legend.Legend.get_legend_handler_map`.\n\ndraggable : bool, default: False\n    Enable mouse dragging support for the legend.\n\"\"\")",
                    "insert_line": null
                  },
                  "type": "tool_use",
                  "name": "str_replace_editor",
                  "cache_control": {
                    "type": "ephemeral"
                  }
                }
              ]
            },
            {
              "role": "user",
              "content": [
                {
                  "tool_use_id": "call_768de362",
                  "content": "<observation>\nThe file lib/matplotlib/legend.py has been edited. Here's the result of running `cat -n` on a snippet of lib/matplotlib/legend.py:\n   285\t    The pad between the axes and legend border, in font-size units.\n   286\t\n   287\tcolumnspacing : float, default: :rc:`legend.columnspacing`\n   288\t    The spacing between columns, in font-size units.\n   289\t\n   290\thandler_map : dict or None\n   291\t    The custom dictionary mapping instances or types to a legend\n   292\t    handler. This *handler_map* updates the default handler map\n   293\t    found at `matplotlib.legend.Legend.get_legend_handler_map`.\n   294\t\n   295\tdraggable : bool, default: False\n   296\t    Enable mouse dragging support for the legend.\n   297\t\"\"\")\n   298\t\n   299\t\n   300\tclass Legend(Artist):\nReview the changes and make sure they are as expected. Edit the file again if necessary.\n\nRunning 936 tests in the following files:\n * lib/matplotlib/tests/test_legend.py\n * lib/matplotlib/tests/test_contour.py\n * lib/matplotlib/tests/test_axes.py\n\n* FAILED lib/matplotlib/tests/test_contour.py test_contourf_log_extension>\n```\n\n    @image_comparison(['contour_log_extension.png'],\n                      remove_text=True, style='mpl20',\n                      tol=1.444)\n    def test_contourf_log_extension():\n        # Remove this line when this test image is regenerated.\n        plt.rcParams['pcolormesh.snap'] = False\n    \n        # Test that contourf with lognorm is extended correctly\n        fig, (ax1, ax2, ax3) = plt.subplots(1, 3, figsize=(10, 5))\n        fig.subplots_adjust(left=0.05, right=0.95)\n    \n        # make data set with large range e.g. between 1e-8 and 1e10\n        data_exp = np.linspace(-7.5, 9.5, 1200)\n        data = np.power(10, data_exp).reshape(30, 40)\n        # make manual levels e.g. between 1e-4 and 1e-6\n        levels_exp = np.arange(-4., 7.)\n        levels = np.power(10., levels_exp)\n    \n        # original data\n        c1 = ax1.contourf(data,\n                          norm=LogNorm(vmin=data.min(), vmax=data.max()))\n        # just show data in levels\n        c2 = ax2.contourf(data, levels=levels,\n                          norm=LogNorm(vmin=levels.min(), vmax=levels.max()),\n                          extend='neither')\n        # extend data from levels\n        c3 = ax3.contourf(data, levels=levels,\n                          norm=LogNorm(vmin=levels.min(), vmax=levels.max()),\n                          extend='both')\n        cb = plt.colorbar(c1, ax=ax1)\n        assert cb.ax.get_ylim() == (1e-8, 1e10)\n        cb = plt.colorbar(c2, ax=ax2)\n>       assert cb.ax.get_ylim() == (1e-4, 1e6)\nE       assert (9.9999999999...05, 1000000.0) == (0.0001, 1000000.0)\nE         \nE         At index 0 diff: 9.999999999999999e-05 != 0.0001\nE         Use -v to get more diff\n\nlib/matplotlib/tests/test_contour.py:316: AssertionError\n```\n\n\n935 passed. 1 failed. 0 errors.\n</observation>",
                  "type": "tool_result",
                  "cache_control": {
                    "type": "ephemeral"
                  }
                }
              ]
            }
          ],
          "response": {
            "id": "msg_01MT91gtaw9CtRz7jZQUaRgf",
            "content": [
              {
                "text": "<thoughts>\n1. The docstring update is complete\n2. Now I need to add a test case for the new draggable parameter\n3. Let me add a test to test_legend.py\n</thoughts>",
                "type": "text"
              },
              {
                "id": "toolu_01CbLPf9jF9mv3YiZVXPcFti",
                "input": {
                  "command": "str_replace",
                  "path": "lib/matplotlib/tests/test_legend.py",
                  "file_text": "null",
                  "view_range": "null",
                  "old_str": "def test_get_set_draggable():\n    legend = plt.legend()\n    assert not legend.get_draggable()\n    legend.set_draggable(True)\n    assert legend.get_draggable()\n    legend.set_draggable(False)\n    assert not legend.get_draggable()",
                  "new_str": "def test_get_set_draggable():\n    legend = plt.legend()\n    assert not legend.get_draggable()\n    legend.set_draggable(True)\n    assert legend.get_draggable()\n    legend.set_draggable(False)\n    assert not legend.get_draggable()\n\ndef test_draggable_init():\n    # Test draggable parameter in legend initialization\n    legend = plt.legend(draggable=True)\n    assert legend.get_draggable()\n    legend = plt.legend(draggable=False)\n    assert not legend.get_draggable()",
                  "insert_line": "null"
                },
                "name": "str_replace_editor",
                "type": "tool_use"
              }
            ],
            "model": "claude-3-5-sonnet-20241022",
            "role": "assistant",
            "stop_reason": "tool_use",
            "stop_sequence": null,
            "type": "message",
            "usage": {
              "cache_creation_input_tokens": 1336,
              "cache_read_input_tokens": 21314,
              "input_tokens": 0,
              "output_tokens": 455
            }
          },
          "usage": {
            "completion_cost": 0.010833,
            "completion_tokens": 455,
            "prompt_tokens": 1336,
            "cached_tokens": 21314
          }
        }
      },
      "possible_actions": [
        "SemanticSearch",
        "FindClass",
        "FindFunction",
        "FindCodeSnippet",
        "RequestMoreContext",
        "ClaudeEditTool",
        "Finish",
        "Reject"
      ],
      "output": {
        "message": "The file lib/matplotlib/tests/test_legend.py has been edited. Here's the result of running `cat -n` on a snippet of lib/matplotlib/tests/test_legend.py:\n   777\t    leg = ax.legend()\n   778\t    for text, color in zip(leg.get_texts(), ['r', 'g', 'b']):\n   779\t        assert mpl.colors.same_color(text.get_color(), color)\n   780\t\n   781\t\n   782\tdef test_get_set_draggable():\n   783\t    legend = plt.legend()\n   784\t    assert not legend.get_draggable()\n   785\t    legend.set_draggable(True)\n   786\t    assert legend.get_draggable()\n   787\t    legend.set_draggable(False)\n   788\t    assert not legend.get_draggable()\n   789\t\n   790\tdef test_draggable_init():\n   791\t    # Test draggable parameter in legend initialization\n   792\t    legend = plt.legend(draggable=True)\n   793\t    assert legend.get_draggable()\n   794\t    legend = plt.legend(draggable=False)\n   795\t    assert not legend.get_draggable()\n   796\t\n   797\t\n   798\tdef test_alpha_handles():\nReview the changes and make sure they are as expected. Edit the file again if necessary.\n\nRunning 937 tests in the following files:\n * lib/matplotlib/tests/test_legend.py\n * lib/matplotlib/tests/test_contour.py\n * lib/matplotlib/tests/test_axes.py\n\n* FAILED lib/matplotlib/tests/test_contour.py test_contourf_log_extension>\n```\n\n    @image_comparison(['contour_log_extension.png'],\n                      remove_text=True, style='mpl20',\n                      tol=1.444)\n    def test_contourf_log_extension():\n        # Remove this line when this test image is regenerated.\n        plt.rcParams['pcolormesh.snap'] = False\n    \n        # Test that contourf with lognorm is extended correctly\n        fig, (ax1, ax2, ax3) = plt.subplots(1, 3, figsize=(10, 5))\n        fig.subplots_adjust(left=0.05, right=0.95)\n    \n        # make data set with large range e.g. between 1e-8 and 1e10\n        data_exp = np.linspace(-7.5, 9.5, 1200)\n        data = np.power(10, data_exp).reshape(30, 40)\n        # make manual levels e.g. between 1e-4 and 1e-6\n        levels_exp = np.arange(-4., 7.)\n        levels = np.power(10., levels_exp)\n    \n        # original data\n        c1 = ax1.contourf(data,\n                          norm=LogNorm(vmin=data.min(), vmax=data.max()))\n        # just show data in levels\n        c2 = ax2.contourf(data, levels=levels,\n                          norm=LogNorm(vmin=levels.min(), vmax=levels.max()),\n                          extend='neither')\n        # extend data from levels\n        c3 = ax3.contourf(data, levels=levels,\n                          norm=LogNorm(vmin=levels.min(), vmax=levels.max()),\n                          extend='both')\n        cb = plt.colorbar(c1, ax=ax1)\n        assert cb.ax.get_ylim() == (1e-8, 1e10)\n        cb = plt.colorbar(c2, ax=ax2)\n>       assert cb.ax.get_ylim() == (1e-4, 1e6)\nE       assert (9.9999999999...05, 1000000.0) == (0.0001, 1000000.0)\nE         \nE         At index 0 diff: 9.999999999999999e-05 != 0.0001\nE         Use -v to get more diff\n\nlib/matplotlib/tests/test_contour.py:316: AssertionError\n```\n\n\n936 passed. 1 failed. 0 errors.",
        "terminal": false,
        "expect_correction": false,
        "properties": {
          "flags": [
            "lines_not_in_context"
          ],
          "diff": "--- lib/matplotlib/tests/test_legend.py\n+++ lib/matplotlib/tests/test_legend.py\n@@ -782,6 +782,13 @@\n     legend.set_draggable(False)\n     assert not legend.get_draggable()\n \n+def test_draggable_init():\n+    # Test draggable parameter in legend initialization\n+    legend = plt.legend(draggable=True)\n+    assert legend.get_draggable()\n+    legend = plt.legend(draggable=False)\n+    assert not legend.get_draggable()\n+\n \n def test_alpha_handles():\n     x, n, hh = plt.hist([1, 2, 3], alpha=0.25, label='data', color='red')\n",
          "test_results": [
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_legend.py::test_legend_ordereddict",
              "file_path": "lib/matplotlib/tests/test_legend.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_legend.py::test_legend_auto1[png]",
              "file_path": "lib/matplotlib/tests/test_legend.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_legend.py::test_legend_auto1[pdf]",
              "file_path": "lib/matplotlib/tests/test_legend.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_legend.py::test_legend_auto2[png]",
              "file_path": "lib/matplotlib/tests/test_legend.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_legend.py::test_legend_auto2[pdf]",
              "file_path": "lib/matplotlib/tests/test_legend.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_legend.py::test_legend_auto3[png]",
              "file_path": "lib/matplotlib/tests/test_legend.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_legend.py::test_legend_auto3[pdf]",
              "file_path": "lib/matplotlib/tests/test_legend.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_legend.py::test_various_labels[png]",
              "file_path": "lib/matplotlib/tests/test_legend.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_legend.py::test_various_labels[pdf]",
              "file_path": "lib/matplotlib/tests/test_legend.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_legend.py::test_legend_label_with_leading_underscore",
              "file_path": "lib/matplotlib/tests/test_legend.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_legend.py::test_labels_first[png]",
              "file_path": "lib/matplotlib/tests/test_legend.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_legend.py::test_multiple_keys[png]",
              "file_path": "lib/matplotlib/tests/test_legend.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_legend.py::test_alpha_rgba[png]",
              "file_path": "lib/matplotlib/tests/test_legend.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_legend.py::test_alpha_rcparam[png]",
              "file_path": "lib/matplotlib/tests/test_legend.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_legend.py::test_fancy[png]",
              "file_path": "lib/matplotlib/tests/test_legend.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_legend.py::test_fancy[pdf]",
              "file_path": "lib/matplotlib/tests/test_legend.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_legend.py::test_framealpha[png]",
              "file_path": "lib/matplotlib/tests/test_legend.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_legend.py::test_framealpha[pdf]",
              "file_path": "lib/matplotlib/tests/test_legend.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_legend.py::test_rc[png]",
              "file_path": "lib/matplotlib/tests/test_legend.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_legend.py::test_rc[pdf]",
              "file_path": "lib/matplotlib/tests/test_legend.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_legend.py::test_legend_expand[png]",
              "file_path": "lib/matplotlib/tests/test_legend.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_legend.py::test_legend_expand[pdf]",
              "file_path": "lib/matplotlib/tests/test_legend.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_legend.py::test_hatching[png]",
              "file_path": "lib/matplotlib/tests/test_legend.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_legend.py::test_hatching[pdf]",
              "file_path": "lib/matplotlib/tests/test_legend.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_legend.py::test_legend_remove",
              "file_path": "lib/matplotlib/tests/test_legend.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_legend.py::TestLegendFunction::test_legend_no_args",
              "file_path": "lib/matplotlib/tests/test_legend.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_legend.py::TestLegendFunction::test_legend_positional_handles_labels",
              "file_path": "lib/matplotlib/tests/test_legend.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_legend.py::TestLegendFunction::test_legend_positional_handles_only",
              "file_path": "lib/matplotlib/tests/test_legend.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_legend.py::TestLegendFunction::test_legend_positional_labels_only",
              "file_path": "lib/matplotlib/tests/test_legend.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_legend.py::TestLegendFunction::test_legend_three_args",
              "file_path": "lib/matplotlib/tests/test_legend.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_legend.py::TestLegendFunction::test_legend_handler_map",
              "file_path": "lib/matplotlib/tests/test_legend.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_legend.py::TestLegendFunction::test_legend_kwargs_handles_only",
              "file_path": "lib/matplotlib/tests/test_legend.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_legend.py::TestLegendFunction::test_legend_kwargs_labels_only",
              "file_path": "lib/matplotlib/tests/test_legend.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_legend.py::TestLegendFunction::test_legend_kwargs_handles_labels",
              "file_path": "lib/matplotlib/tests/test_legend.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_legend.py::TestLegendFunction::test_warn_mixed_args_and_kwargs",
              "file_path": "lib/matplotlib/tests/test_legend.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_legend.py::TestLegendFunction::test_parasite",
              "file_path": "lib/matplotlib/tests/test_legend.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_legend.py::TestLegendFigureFunction::test_legend_handle_label",
              "file_path": "lib/matplotlib/tests/test_legend.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_legend.py::TestLegendFigureFunction::test_legend_no_args",
              "file_path": "lib/matplotlib/tests/test_legend.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_legend.py::TestLegendFigureFunction::test_legend_label_arg",
              "file_path": "lib/matplotlib/tests/test_legend.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_legend.py::TestLegendFigureFunction::test_legend_label_three_args",
              "file_path": "lib/matplotlib/tests/test_legend.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_legend.py::TestLegendFigureFunction::test_legend_label_three_args_pluskw",
              "file_path": "lib/matplotlib/tests/test_legend.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_legend.py::TestLegendFigureFunction::test_legend_kw_args",
              "file_path": "lib/matplotlib/tests/test_legend.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_legend.py::TestLegendFigureFunction::test_warn_args_kwargs",
              "file_path": "lib/matplotlib/tests/test_legend.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_legend.py::test_legend_stackplot[png]",
              "file_path": "lib/matplotlib/tests/test_legend.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_legend.py::test_cross_figure_patch_legend",
              "file_path": "lib/matplotlib/tests/test_legend.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_legend.py::test_nanscatter",
              "file_path": "lib/matplotlib/tests/test_legend.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_legend.py::test_legend_repeatcheckok",
              "file_path": "lib/matplotlib/tests/test_legend.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_legend.py::test_not_covering_scatter[png]",
              "file_path": "lib/matplotlib/tests/test_legend.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_legend.py::test_not_covering_scatter_transform[png]",
              "file_path": "lib/matplotlib/tests/test_legend.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_legend.py::test_linecollection_scaled_dashes",
              "file_path": "lib/matplotlib/tests/test_legend.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_legend.py::test_handler_numpoints",
              "file_path": "lib/matplotlib/tests/test_legend.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_legend.py::test_text_nohandler_warning",
              "file_path": "lib/matplotlib/tests/test_legend.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_legend.py::test_empty_bar_chart_with_legend",
              "file_path": "lib/matplotlib/tests/test_legend.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_legend.py::test_shadow_framealpha",
              "file_path": "lib/matplotlib/tests/test_legend.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_legend.py::test_legend_title_empty",
              "file_path": "lib/matplotlib/tests/test_legend.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_legend.py::test_legend_proper_window_extent",
              "file_path": "lib/matplotlib/tests/test_legend.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_legend.py::test_window_extent_cached_renderer",
              "file_path": "lib/matplotlib/tests/test_legend.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_legend.py::test_legend_title_fontprop_fontsize",
              "file_path": "lib/matplotlib/tests/test_legend.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_legend.py::test_legend_alignment[center]",
              "file_path": "lib/matplotlib/tests/test_legend.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_legend.py::test_legend_alignment[left]",
              "file_path": "lib/matplotlib/tests/test_legend.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_legend.py::test_legend_alignment[right]",
              "file_path": "lib/matplotlib/tests/test_legend.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_legend.py::test_legend_set_alignment[center]",
              "file_path": "lib/matplotlib/tests/test_legend.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_legend.py::test_legend_set_alignment[left]",
              "file_path": "lib/matplotlib/tests/test_legend.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_legend.py::test_legend_set_alignment[right]",
              "file_path": "lib/matplotlib/tests/test_legend.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_legend.py::test_legend_labelcolor_single[red]",
              "file_path": "lib/matplotlib/tests/test_legend.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_legend.py::test_legend_labelcolor_single[none]",
              "file_path": "lib/matplotlib/tests/test_legend.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_legend.py::test_legend_labelcolor_single[color2]",
              "file_path": "lib/matplotlib/tests/test_legend.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_legend.py::test_legend_labelcolor_list",
              "file_path": "lib/matplotlib/tests/test_legend.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_legend.py::test_legend_labelcolor_linecolor",
              "file_path": "lib/matplotlib/tests/test_legend.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_legend.py::test_legend_labelcolor_markeredgecolor",
              "file_path": "lib/matplotlib/tests/test_legend.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_legend.py::test_legend_labelcolor_markerfacecolor",
              "file_path": "lib/matplotlib/tests/test_legend.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_legend.py::test_legend_labelcolor_rcparam_single[red]",
              "file_path": "lib/matplotlib/tests/test_legend.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_legend.py::test_legend_labelcolor_rcparam_single[none]",
              "file_path": "lib/matplotlib/tests/test_legend.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_legend.py::test_legend_labelcolor_rcparam_single[color2]",
              "file_path": "lib/matplotlib/tests/test_legend.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_legend.py::test_legend_labelcolor_rcparam_linecolor",
              "file_path": "lib/matplotlib/tests/test_legend.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_legend.py::test_legend_labelcolor_rcparam_markeredgecolor",
              "file_path": "lib/matplotlib/tests/test_legend.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_legend.py::test_legend_labelcolor_rcparam_markeredgecolor_short",
              "file_path": "lib/matplotlib/tests/test_legend.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_legend.py::test_legend_labelcolor_rcparam_markerfacecolor",
              "file_path": "lib/matplotlib/tests/test_legend.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_legend.py::test_legend_labelcolor_rcparam_markerfacecolor_short",
              "file_path": "lib/matplotlib/tests/test_legend.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_legend.py::test_get_set_draggable",
              "file_path": "lib/matplotlib/tests/test_legend.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_legend.py::test_draggable_init",
              "file_path": "lib/matplotlib/tests/test_legend.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_legend.py::test_alpha_handles",
              "file_path": "lib/matplotlib/tests/test_legend.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_legend.py::test_usetex_no_warn",
              "file_path": "lib/matplotlib/tests/test_legend.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_legend.py::test_warn_big_data_best_loc",
              "file_path": "lib/matplotlib/tests/test_legend.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_legend.py::test_no_warn_big_data_when_loc_specified",
              "file_path": "lib/matplotlib/tests/test_legend.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_legend.py::test_plot_multiple_input_multiple_label[label_array0]",
              "file_path": "lib/matplotlib/tests/test_legend.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_legend.py::test_plot_multiple_input_multiple_label[label_array1]",
              "file_path": "lib/matplotlib/tests/test_legend.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_legend.py::test_plot_multiple_input_multiple_label[label_array2]",
              "file_path": "lib/matplotlib/tests/test_legend.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_legend.py::test_plot_multiple_input_single_label[one]",
              "file_path": "lib/matplotlib/tests/test_legend.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_legend.py::test_plot_multiple_input_single_label[1]",
              "file_path": "lib/matplotlib/tests/test_legend.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_legend.py::test_plot_multiple_input_single_label[int]",
              "file_path": "lib/matplotlib/tests/test_legend.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_legend.py::test_plot_single_input_multiple_label[label_array0]",
              "file_path": "lib/matplotlib/tests/test_legend.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_legend.py::test_plot_single_input_multiple_label[label_array1]",
              "file_path": "lib/matplotlib/tests/test_legend.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_legend.py::test_plot_single_input_multiple_label[label_array2]",
              "file_path": "lib/matplotlib/tests/test_legend.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_legend.py::test_plot_multiple_label_incorrect_length_exception",
              "file_path": "lib/matplotlib/tests/test_legend.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_legend.py::test_legend_face_edgecolor",
              "file_path": "lib/matplotlib/tests/test_legend.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_legend.py::test_legend_text_axes",
              "file_path": "lib/matplotlib/tests/test_legend.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_legend.py::test_handlerline2d",
              "file_path": "lib/matplotlib/tests/test_legend.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_legend.py::test_subfigure_legend",
              "file_path": "lib/matplotlib/tests/test_legend.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_legend.py::test_setting_alpha_keeps_polycollection_color",
              "file_path": "lib/matplotlib/tests/test_legend.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_legend.py::test_legend_markers_from_line2d",
              "file_path": "lib/matplotlib/tests/test_legend.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_legend.py::test_ncol_ncols[png]",
              "file_path": "lib/matplotlib/tests/test_legend.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_legend.py::test_ncol_ncols[pdf]",
              "file_path": "lib/matplotlib/tests/test_legend.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "SKIPPED",
              "message": "../opt/miniconda3/envs/testbed/lib/python3.11/contextlib.py:81: Cannot compare svg files because Inkscape is not installed",
              "file_path": "../opt/miniconda3/envs/testbed/lib/python3.11/contextlib.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "SKIPPED",
              "message": "lib/matplotlib/testing/compare.py:285: Don't know how to convert .svg files to png",
              "file_path": "lib/matplotlib/testing/compare.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_contour.py::test_contour_shape_1d_valid",
              "file_path": "lib/matplotlib/tests/test_contour.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_contour.py::test_contour_shape_2d_valid",
              "file_path": "lib/matplotlib/tests/test_contour.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_contour.py::test_contour_shape_error[args0-Length",
              "file_path": "lib/matplotlib/tests/test_contour.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_contour.py::test_contour_shape_error[args1-Length",
              "file_path": "lib/matplotlib/tests/test_contour.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_contour.py::test_contour_shape_error[args2-Number",
              "file_path": "lib/matplotlib/tests/test_contour.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_contour.py::test_contour_shape_error[args3-Number",
              "file_path": "lib/matplotlib/tests/test_contour.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_contour.py::test_contour_shape_error[args4-Shapes",
              "file_path": "lib/matplotlib/tests/test_contour.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_contour.py::test_contour_shape_error[args5-Shapes",
              "file_path": "lib/matplotlib/tests/test_contour.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_contour.py::test_contour_shape_error[args6-Inputs",
              "file_path": "lib/matplotlib/tests/test_contour.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_contour.py::test_contour_shape_error[args7-Input",
              "file_path": "lib/matplotlib/tests/test_contour.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_contour.py::test_contour_shape_error[args8-Input",
              "file_path": "lib/matplotlib/tests/test_contour.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_contour.py::test_contour_shape_error[args9-Input",
              "file_path": "lib/matplotlib/tests/test_contour.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_contour.py::test_contour_empty_levels",
              "file_path": "lib/matplotlib/tests/test_contour.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_contour.py::test_contour_Nlevels",
              "file_path": "lib/matplotlib/tests/test_contour.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_contour.py::test_contour_badlevel_fmt",
              "file_path": "lib/matplotlib/tests/test_contour.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_contour.py::test_contour_uniform_z",
              "file_path": "lib/matplotlib/tests/test_contour.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_contour.py::test_contour_manual_labels[png]",
              "file_path": "lib/matplotlib/tests/test_contour.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_contour.py::test_contour_manual_labels[pdf]",
              "file_path": "lib/matplotlib/tests/test_contour.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_contour.py::test_given_colors_levels_and_extends[png]",
              "file_path": "lib/matplotlib/tests/test_contour.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_contour.py::test_contour_datetime_axis[png]",
              "file_path": "lib/matplotlib/tests/test_contour.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_contour.py::test_labels[png]",
              "file_path": "lib/matplotlib/tests/test_contour.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_contour.py::test_corner_mask[png]",
              "file_path": "lib/matplotlib/tests/test_contour.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_contour.py::test_contourf_decreasing_levels",
              "file_path": "lib/matplotlib/tests/test_contour.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_contour.py::test_contourf_symmetric_locator",
              "file_path": "lib/matplotlib/tests/test_contour.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_contour.py::test_circular_contour_warning",
              "file_path": "lib/matplotlib/tests/test_contour.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_contour.py::test_clabel_zorder[True-123-1234]",
              "file_path": "lib/matplotlib/tests/test_contour.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_contour.py::test_clabel_zorder[False-123-1234]",
              "file_path": "lib/matplotlib/tests/test_contour.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_contour.py::test_clabel_zorder[True-123-None]",
              "file_path": "lib/matplotlib/tests/test_contour.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_contour.py::test_clabel_zorder[False-123-None]",
              "file_path": "lib/matplotlib/tests/test_contour.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_contour.py::test_contour_addlines[png]",
              "file_path": "lib/matplotlib/tests/test_contour.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_contour.py::test_contour_uneven[png]",
              "file_path": "lib/matplotlib/tests/test_contour.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_contour.py::test_contour_linewidth[1.23-None-None-1.23]",
              "file_path": "lib/matplotlib/tests/test_contour.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_contour.py::test_contour_linewidth[1.23-4.24-None-4.24]",
              "file_path": "lib/matplotlib/tests/test_contour.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_contour.py::test_contour_linewidth[1.23-4.24-5.02-5.02]",
              "file_path": "lib/matplotlib/tests/test_contour.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_contour.py::test_label_nonagg",
              "file_path": "lib/matplotlib/tests/test_contour.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_contour.py::test_contour_closed_line_loop[png]",
              "file_path": "lib/matplotlib/tests/test_contour.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_contour.py::test_quadcontourset_reuse",
              "file_path": "lib/matplotlib/tests/test_contour.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_contour.py::test_contour_manual[png]",
              "file_path": "lib/matplotlib/tests/test_contour.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_contour.py::test_contour_line_start_on_corner_edge[png]",
              "file_path": "lib/matplotlib/tests/test_contour.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_contour.py::test_find_nearest_contour",
              "file_path": "lib/matplotlib/tests/test_contour.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_contour.py::test_find_nearest_contour_no_filled",
              "file_path": "lib/matplotlib/tests/test_contour.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_contour.py::test_contour_autolabel_beyond_powerlimits",
              "file_path": "lib/matplotlib/tests/test_contour.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_contour.py::test_contourf_legend_elements",
              "file_path": "lib/matplotlib/tests/test_contour.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_contour.py::test_contour_legend_elements",
              "file_path": "lib/matplotlib/tests/test_contour.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_contour.py::test_algorithm_name[mpl2005-Mpl2005ContourGenerator]",
              "file_path": "lib/matplotlib/tests/test_contour.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_contour.py::test_algorithm_name[mpl2014-Mpl2014ContourGenerator]",
              "file_path": "lib/matplotlib/tests/test_contour.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_contour.py::test_algorithm_name[serial-SerialContourGenerator]",
              "file_path": "lib/matplotlib/tests/test_contour.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_contour.py::test_algorithm_name[threaded-ThreadedContourGenerator]",
              "file_path": "lib/matplotlib/tests/test_contour.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_contour.py::test_algorithm_name[invalid-None]",
              "file_path": "lib/matplotlib/tests/test_contour.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_contour.py::test_algorithm_supports_corner_mask[mpl2005]",
              "file_path": "lib/matplotlib/tests/test_contour.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_contour.py::test_algorithm_supports_corner_mask[mpl2014]",
              "file_path": "lib/matplotlib/tests/test_contour.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_contour.py::test_algorithm_supports_corner_mask[serial]",
              "file_path": "lib/matplotlib/tests/test_contour.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_contour.py::test_algorithm_supports_corner_mask[threaded]",
              "file_path": "lib/matplotlib/tests/test_contour.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_contour.py::test_all_algorithms[png]",
              "file_path": "lib/matplotlib/tests/test_contour.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_contour.py::test_subfigure_clabel",
              "file_path": "lib/matplotlib/tests/test_contour.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_contour.py::test_linestyles[solid]",
              "file_path": "lib/matplotlib/tests/test_contour.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_contour.py::test_linestyles[dashed]",
              "file_path": "lib/matplotlib/tests/test_contour.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_contour.py::test_linestyles[dashdot]",
              "file_path": "lib/matplotlib/tests/test_contour.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_contour.py::test_linestyles[dotted]",
              "file_path": "lib/matplotlib/tests/test_contour.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_contour.py::test_negative_linestyles[solid]",
              "file_path": "lib/matplotlib/tests/test_contour.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_contour.py::test_negative_linestyles[dashed]",
              "file_path": "lib/matplotlib/tests/test_contour.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_contour.py::test_negative_linestyles[dashdot]",
              "file_path": "lib/matplotlib/tests/test_contour.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_contour.py::test_negative_linestyles[dotted]",
              "file_path": "lib/matplotlib/tests/test_contour.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "SKIPPED",
              "message": "../opt/miniconda3/envs/testbed/lib/python3.11/contextlib.py:81: Cannot compare svg files because Inkscape is not installed",
              "file_path": "../opt/miniconda3/envs/testbed/lib/python3.11/contextlib.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "FAILED",
              "message": "\n    @image_comparison(['contour_log_extension.png'],\n                      remove_text=True, style='mpl20',\n                      tol=1.444)\n    def test_contourf_log_extension():\n        # Remove this line when this test image is regenerated.\n        plt.rcParams['pcolormesh.snap'] = False\n    \n        # Test that contourf with lognorm is extended correctly\n        fig, (ax1, ax2, ax3) = plt.subplots(1, 3, figsize=(10, 5))\n        fig.subplots_adjust(left=0.05, right=0.95)\n    \n        # make data set with large range e.g. between 1e-8 and 1e10\n        data_exp = np.linspace(-7.5, 9.5, 1200)\n        data = np.power(10, data_exp).reshape(30, 40)\n        # make manual levels e.g. between 1e-4 and 1e-6\n        levels_exp = np.arange(-4., 7.)\n        levels = np.power(10., levels_exp)\n    \n        # original data\n        c1 = ax1.contourf(data,\n                          norm=LogNorm(vmin=data.min(), vmax=data.max()))\n        # just show data in levels\n        c2 = ax2.contourf(data, levels=levels,\n                          norm=LogNorm(vmin=levels.min(), vmax=levels.max()),\n                          extend='neither')\n        # extend data from levels\n        c3 = ax3.contourf(data, levels=levels,\n                          norm=LogNorm(vmin=levels.min(), vmax=levels.max()),\n                          extend='both')\n        cb = plt.colorbar(c1, ax=ax1)\n        assert cb.ax.get_ylim() == (1e-8, 1e10)\n        cb = plt.colorbar(c2, ax=ax2)\n>       assert cb.ax.get_ylim() == (1e-4, 1e6)\nE       assert (9.9999999999...05, 1000000.0) == (0.0001, 1000000.0)\nE         \nE         At index 0 diff: 9.999999999999999e-05 != 0.0001\nE         Use -v to get more diff\n\nlib/matplotlib/tests/test_contour.py:316: AssertionError",
              "file_path": "lib/matplotlib/tests/test_contour.py",
              "span_id": "test_contourf_log_extension",
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_invisible_axes[png]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_get_labels",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_repr",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_label_loc_vertical[png]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_label_loc_vertical[pdf]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_label_loc_horizontal[png]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_label_loc_horizontal[pdf]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_label_loc_rc[png]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_label_loc_rc[pdf]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_label_shift",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_acorr[png]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_spy[png]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_spy_invalid_kwargs",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_matshow[png]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_formatter_ticker[png]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_formatter_ticker[pdf]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_funcformatter_auto_formatter",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_strmethodformatter_auto_formatter",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_twin_axis_locators_formatters[png]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_twin_axis_locators_formatters[pdf]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_twinx_cla",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_twin_logscale[png-x]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_twin_logscale[png-y]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_twinx_axis_scales[png]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_twin_inherit_autoscale_setting",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_inverted_cla",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_subclass_clear_cla",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_cla_not_redefined_internally",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_minorticks_on_rcParams_both[png]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_autoscale_tiny_range[png]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_autoscale_tiny_range[pdf]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_autoscale_tight",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_autoscale_log_shared",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_use_sticky_edges",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_sticky_shared_axes[png]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_basic_annotate[png]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_basic_annotate[pdf]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_arrow_simple[png]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_arrow_empty",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_arrow_in_view",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_annotate_default_arrow",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_annotate_signature",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_fill_units[png]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_plot_format_kwarg_redundant",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_errorbar_dashes[png]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_single_point[png]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_single_point[pdf]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_single_date[png]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_shaped_data[png]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_structured_data",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_aitoff_proj[png]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_axvspan_epoch[png]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_axvspan_epoch[pdf]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_axhspan_epoch[png]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_axhspan_epoch[pdf]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_hexbin_extent[png]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_hexbin_empty[png]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_hexbin_pickable",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_hexbin_log[png]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_hexbin_linear[png]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_hexbin_log_clim",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_inverted_limits",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_nonfinite_limits[png]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_nonfinite_limits[pdf]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_limits_empty_data[png-scatter]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_limits_empty_data[png-plot]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_limits_empty_data[png-fill_between]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_imshow[png]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_imshow[pdf]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_imshow_clip[png]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_imshow_clip[pdf]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_imshow_norm_vminvmax",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_polycollection_joinstyle[png]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_polycollection_joinstyle[pdf]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_fill_between_input[2d_x_input]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_fill_between_input[2d_y1_input]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_fill_between_input[2d_y2_input]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_fill_betweenx_input[2d_y_input]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_fill_betweenx_input[2d_x1_input]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_fill_betweenx_input[2d_x2_input]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_fill_between_interpolate[png]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_fill_between_interpolate[pdf]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_fill_between_interpolate_decreasing[png]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_fill_between_interpolate_decreasing[pdf]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_fill_between_interpolate_nan[png]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_fill_between_interpolate_nan[pdf]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_symlog[pdf]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_symlog2[pdf]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_pcolorargs_5205",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_pcolormesh[png]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_pcolormesh[pdf]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_pcolormesh_small[eps]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_pcolormesh_alpha[png]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_pcolormesh_alpha[pdf]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_pcolormesh_datetime_axis[png]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_pcolor_datetime_axis[png]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_pcolorargs",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_pcolornearest[png]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_pcolornearestunits[png]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_pcolorflaterror",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_pcolorauto[png-False]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_pcolorauto[png-True]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_canonical[png]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_canonical[pdf]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_arc_angles[png]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_arc_ellipse[png]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_arc_ellipse[pdf]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_marker_as_markerstyle",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_markevery[png]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_markevery[pdf]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_markevery_line[png]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_markevery_line[pdf]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_markevery_linear_scales[png]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_markevery_linear_scales[pdf]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_markevery_linear_scales_zoomed[png]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_markevery_linear_scales_zoomed[pdf]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_markevery_log_scales[png]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_markevery_log_scales[pdf]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_markevery_polar[png]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_markevery_polar[pdf]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_markevery_linear_scales_nans[png]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_markevery_linear_scales_nans[pdf]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_marker_edges[png]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_marker_edges[pdf]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_bar_tick_label_single[png]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_nan_bar_values",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_bar_ticklabel_fail",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_bar_tick_label_multiple[png]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_bar_tick_label_multiple_old_alignment[png]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_bar_decimal_center[png]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_barh_decimal_center[png]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_bar_decimal_width[png]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_barh_decimal_height[png]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_bar_color_none_alpha",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_bar_edgecolor_none_alpha",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_barh_tick_label[png]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_bar_timedelta",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_boxplot_dates_pandas",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_boxplot_capwidths",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_pcolor_regression",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_bar_pandas",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_bar_pandas_indexed",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_bar_hatches[png]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_bar_hatches[pdf]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_bar_labels[x-1-x-expected_labels0-x]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_bar_labels[x1-width1-label1-expected_labels1-_nolegend_]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_bar_labels[x2-width2-label2-expected_labels2-_nolegend_]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_bar_labels[x3-width3-bars-expected_labels3-bars]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_bar_labels_length",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_pandas_minimal_plot",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_hist_log[png]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_hist_log[pdf]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_hist_log_2[png]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_hist_log_barstacked",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_hist_bar_empty[png]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_hist_float16",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_hist_step_empty[png]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_hist_step_filled[png]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_hist_density[png]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_hist_unequal_bins_density",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_hist_datetime_datasets",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_hist_datetime_datasets_bins[date2num]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_hist_datetime_datasets_bins[datetime.datetime]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_hist_datetime_datasets_bins[np.datetime64]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_hist_with_empty_input[data0-1]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_hist_with_empty_input[data1-1]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_hist_with_empty_input[data2-2]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_hist_zorder[bar-1]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_hist_zorder[step-2]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_hist_zorder[stepfilled-1]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_stairs[png]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_stairs_fill[png]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_stairs_update[png]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_stairs_baseline_0[png]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_stairs_empty",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_stairs_invalid_nan",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_stairs_invalid_mismatch",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_stairs_invalid_update",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_stairs_invalid_update2",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_stairs_options[png]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_stairs_datetime[png]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_stairs_edge_handling[png]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_contour_hatching[png]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_contour_hatching[pdf]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_contour_colorbar[png]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_contour_colorbar[pdf]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_hist2d[png]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_hist2d[pdf]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_hist2d_transpose[png]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_hist2d_transpose[pdf]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_hist2d_density",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::TestScatter::test_scatter_plot[png]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::TestScatter::test_scatter_plot[pdf]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::TestScatter::test_scatter_marker[png]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::TestScatter::test_scatter_2D[png]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::TestScatter::test_scatter_decimal[png]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::TestScatter::test_scatter_color",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::TestScatter::test_scatter_color_warning[kwargs0]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::TestScatter::test_scatter_color_warning[kwargs1]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::TestScatter::test_scatter_color_warning[kwargs2]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::TestScatter::test_scatter_color_warning[kwargs3]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::TestScatter::test_scatter_unfilled",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::TestScatter::test_scatter_unfillable",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::TestScatter::test_scatter_size_arg_size",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::TestScatter::test_scatter_edgecolor_RGB",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::TestScatter::test_scatter_invalid_color[png]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::TestScatter::test_scatter_no_invalid_color[png]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::TestScatter::test_scatter_norm_vminvmax",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::TestScatter::test_scatter_single_point[png]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::TestScatter::test_scatter_different_shapes[png]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::TestScatter::test_scatter_c[0.5-None]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::TestScatter::test_scatter_c[c_case1-conversion]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::TestScatter::test_scatter_c[red-None]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::TestScatter::test_scatter_c[none-None]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::TestScatter::test_scatter_c[None-None]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::TestScatter::test_scatter_c[c_case5-None]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::TestScatter::test_scatter_c[jaune-conversion]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::TestScatter::test_scatter_c[c_case7-conversion]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::TestScatter::test_scatter_c[c_case8-conversion]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::TestScatter::test_scatter_c[c_case9-None]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::TestScatter::test_scatter_c[c_case10-None]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::TestScatter::test_scatter_c[c_case11-shape]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::TestScatter::test_scatter_c[c_case12-None]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::TestScatter::test_scatter_c[c_case13-None]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::TestScatter::test_scatter_c[c_case14-conversion]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::TestScatter::test_scatter_c[c_case15-None]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::TestScatter::test_scatter_c[c_case16-shape]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::TestScatter::test_scatter_c[c_case17-None]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::TestScatter::test_scatter_c[c_case18-shape]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::TestScatter::test_scatter_c[c_case19-None]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::TestScatter::test_scatter_c[c_case20-shape]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::TestScatter::test_scatter_c[c_case21-None]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::TestScatter::test_scatter_c[c_case22-shape]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::TestScatter::test_scatter_c[c_case23-None]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::TestScatter::test_scatter_c[c_case24-shape]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::TestScatter::test_scatter_c[c_case25-None]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::TestScatter::test_scatter_c[c_case26-shape]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::TestScatter::test_scatter_c[c_case27-conversion]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::TestScatter::test_scatter_c[c_case28-conversion]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::TestScatter::test_scatter_c[c_case29-conversion]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::TestScatter::test_scatter_single_color_c[png]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::TestScatter::test_scatter_linewidths",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_parse_scatter_color_args[params0-expected_result0]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_parse_scatter_color_args[params1-expected_result1]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_parse_scatter_color_args[params2-expected_result2]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_parse_scatter_color_args[params3-expected_result3]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_parse_scatter_color_args[params4-expected_result4]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_parse_scatter_color_args_edgecolors[kwargs0-None]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_parse_scatter_color_args_edgecolors[kwargs1-None]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_parse_scatter_color_args_edgecolors[kwargs2-r]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_parse_scatter_color_args_edgecolors[kwargs3-expected_edgecolors3]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_parse_scatter_color_args_edgecolors[kwargs4-r]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_parse_scatter_color_args_edgecolors[kwargs5-face]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_parse_scatter_color_args_edgecolors[kwargs6-none]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_parse_scatter_color_args_edgecolors[kwargs7-r]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_parse_scatter_color_args_edgecolors[kwargs8-r]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_parse_scatter_color_args_edgecolors[kwargs9-r]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_parse_scatter_color_args_edgecolors[kwargs10-g]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_parse_scatter_color_args_error",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_as_mpl_axes_api",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_pyplot_axes",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_log_scales",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_log_scales_no_data",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_log_scales_invalid",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_stackplot[png]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_stackplot[pdf]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_stackplot_baseline[png]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_stackplot_baseline[pdf]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_bxp_baseline[png]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_bxp_rangewhis[png]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_bxp_percentilewhis[png]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_bxp_with_xlabels[png]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_bxp_horizontal[png]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_bxp_with_ylabels[png]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_bxp_patchartist[png]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_bxp_custompatchartist[png]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_bxp_customoutlier[png]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_bxp_showcustommean[png]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_bxp_custombox[png]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_bxp_custommedian[png]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_bxp_customcap[png]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_bxp_customwhisker[png]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_bxp_shownotches[png]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_bxp_nocaps[png]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_bxp_nobox[png]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_bxp_no_flier_stats[png]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_bxp_showmean[png]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_bxp_showmeanasline[png]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_bxp_scalarwidth[png]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_bxp_customwidths[png]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_bxp_custompositions[png]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_bxp_bad_widths",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_bxp_bad_positions",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_bxp_custom_capwidths[png]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_bxp_custom_capwidth[png]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_bxp_bad_capwidths",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_boxplot[png]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_boxplot[pdf]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_boxplot_custom_capwidths[png]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_boxplot_sym2[png]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_boxplot_sym[png]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_boxplot_autorange_whiskers[png]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_boxplot_rc_parameters[png]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_boxplot_rc_parameters[pdf]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_boxplot_with_CIarray[png]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_boxplot_no_weird_whisker[png]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_boxplot_bad_medians",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_boxplot_bad_ci",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_boxplot_zorder",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_boxplot_marker_behavior",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_boxplot_mod_artist_after_plotting[png]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_vert_violinplot_baseline[png]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_vert_violinplot_showmeans[png]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_vert_violinplot_showextrema[png]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_vert_violinplot_showmedians[png]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_vert_violinplot_showall[png]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_vert_violinplot_custompoints_10[png]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_vert_violinplot_custompoints_200[png]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_horiz_violinplot_baseline[png]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_horiz_violinplot_showmedians[png]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_horiz_violinplot_showmeans[png]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_horiz_violinplot_showextrema[png]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_horiz_violinplot_showall[png]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_horiz_violinplot_custompoints_10[png]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_horiz_violinplot_custompoints_200[png]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_violinplot_bad_positions",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_violinplot_bad_widths",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_violinplot_bad_quantiles",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_violinplot_outofrange_quantiles",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_violinplot_single_list_quantiles[png]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_violinplot_pandas_series[png]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_manage_xticks",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_boxplot_not_single",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_tick_space_size_0",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_errorbar[png]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_errorbar[pdf]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_errorbar_colorcycle",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_errorbar_cycle_ecolor[png]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_errorbar_cycle_ecolor[pdf]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_errorbar_shape",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_errorbar_limits[png]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_errorbar_limits[pdf]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_errorbar_nonefmt",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_errorbar_line_specific_kwargs",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_errorbar_with_prop_cycle[png]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_errorbar_every_invalid",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_xerr_yerr_not_negative",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_errorbar_every[png]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_errorbar_every[pdf]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_errorbar_linewidth_type[elinewidth0]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_errorbar_linewidth_type[elinewidth1]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_errorbar_linewidth_type[1]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_errorbar_nan[png]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_hist_stacked_stepfilled[png]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_hist_stacked_stepfilled[pdf]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_hist_offset[png]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_hist_offset[pdf]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_hist_step[png]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_hist_step_horiz[png]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_hist_stacked_weighted[png]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_hist_stacked_weighted[pdf]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_stem[png-w/",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_stem[png-w/o",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_stem_args",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_stem_markerfmt",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_stem_dates",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_stem_orientation[png-w/",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_stem_orientation[png-w/o",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_hist_stacked_stepfilled_alpha[png]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_hist_stacked_stepfilled_alpha[pdf]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_hist_stacked_step[png]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_hist_stacked_step[pdf]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_hist_stacked_density[png]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_hist_stacked_density[pdf]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_hist_step_bottom[png]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_hist_stepfilled_geometry",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_hist_step_geometry",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_hist_stepfilled_bottom_geometry",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_hist_step_bottom_geometry",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_hist_stacked_stepfilled_geometry",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_hist_stacked_step_geometry",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_hist_stacked_stepfilled_bottom_geometry",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_hist_stacked_step_bottom_geometry",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_hist_stacked_bar[png]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_hist_stacked_bar[pdf]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_hist_barstacked_bottom_unchanged",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_hist_emptydata",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_hist_labels",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_transparent_markers[png]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_transparent_markers[pdf]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_rgba_markers[png]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_rgba_markers[pdf]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_mollweide_grid[png]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_mollweide_grid[pdf]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_mollweide_forward_inverse_closure",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_mollweide_inverse_forward_closure",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_alpha[png]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_alpha[pdf]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_eventplot[png]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_eventplot[pdf]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_eventplot_defaults[png]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_eventplot_colors[colors0]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_eventplot_colors[colors1]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_eventplot_colors[colors2]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_eventplot_problem_kwargs[png]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_empty_eventplot",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_eventplot_orientation[None-data0]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_eventplot_orientation[None-data1]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_eventplot_orientation[None-data2]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_eventplot_orientation[vertical-data0]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_eventplot_orientation[vertical-data1]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_eventplot_orientation[vertical-data2]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_eventplot_orientation[horizontal-data0]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_eventplot_orientation[horizontal-data1]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_eventplot_orientation[horizontal-data2]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_eventplot_units_list[png]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_marker_styles[png]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_markers_fillstyle_rcparams[png]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_vertex_markers[png]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_eb_line_zorder[png]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_eb_line_zorder[pdf]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_axline_loglog[png]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_axline_loglog[pdf]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_axline[png]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_axline[pdf]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_axline_transaxes[png]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_axline_transaxes[pdf]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_axline_transaxes_panzoom[png]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_axline_transaxes_panzoom[pdf]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_axline_args",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_vlines[png]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_vlines_default",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_hlines[png]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_hlines_default",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_lines_with_colors[png-data0]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_lines_with_colors[png-data1]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_step_linestyle[png]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_step_linestyle[pdf]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_mixed_collection[png]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_mixed_collection[pdf]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_subplot_key_hash",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_specgram[png]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_specgram_magnitude[png]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_specgram_angle[png]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_specgram_fs_none",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_specgram_origin_rcparam[png]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_specgram_origin_kwarg",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_psd_csd[png]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_spectrum[png]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_psd_csd_edge_cases",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_twin_remove[png]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_twin_spines[png]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_twin_spines_on_top[png]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_rcparam_grid_minor[both-True-True]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_rcparam_grid_minor[major-True-False]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_rcparam_grid_minor[minor-False-True]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_grid",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_reset_grid",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_reset_ticks[png]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_vline_limit",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_axline_minmax[axvline-axhline-args0]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_axline_minmax[axvspan-axhspan-args1]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_empty_shared_subplots",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_shared_with_aspect_1",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_shared_with_aspect_2",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_shared_with_aspect_3",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_shared_aspect_error",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_axis_errors[TypeError-args0-kwargs0-axis\\\\(\\\\)",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_axis_errors[ValueError-args1-kwargs1-Unrecognized",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_axis_errors[TypeError-args2-kwargs2-the",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_axis_errors[TypeError-args3-kwargs3-axis\\\\(\\\\)",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_axis_method_errors",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_twin_with_aspect[x]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_twin_with_aspect[y]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_relim_visible_only",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_text_labelsize",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_pie_default[png]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_pie_linewidth_0[png]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_pie_center_radius[png]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_pie_linewidth_2[png]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_pie_ccw_true[png]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_pie_frame_grid[png]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_pie_rotatelabels_true[png]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_pie_nolabel_but_legend[png]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_pie_textprops",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_pie_get_negative_values",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_normalize_kwarg_pie",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_set_get_ticklabels[png]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_set_ticks_with_labels[png]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_set_noniterable_ticklabels",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_subsampled_ticklabels",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_mismatched_ticklabels",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_empty_ticks_fixed_loc",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_retain_tick_visibility[png]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_tick_label_update",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_o_marker_path_snap[png]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_margins",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_set_margin_updates_limits",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_margins_errors[ValueError-args0-kwargs0-margin",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_margins_errors[ValueError-args1-kwargs1-margin",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_margins_errors[ValueError-args2-kwargs2-margin",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_margins_errors[ValueError-args3-kwargs3-margin",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_margins_errors[TypeError-args4-kwargs4-Cannot",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_margins_errors[TypeError-args5-kwargs5-Cannot",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_margins_errors[TypeError-args6-kwargs6-Must",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_length_one_hist",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_set_xy_bound",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_pathological_hexbin",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_color_None",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_color_alias",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_numerical_hist_label",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_unicode_hist_label",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_move_offsetlabel",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_rc_spines[png]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_rc_grid[png]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_rc_tick",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_rc_major_minor_tick",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_square_plot",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_bad_plot_args",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_pcolorfast[data0-xy0-AxesImage]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_pcolorfast[data0-xy1-AxesImage]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_pcolorfast[data0-xy2-AxesImage]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_pcolorfast[data0-xy3-PcolorImage]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_pcolorfast[data0-xy4-QuadMesh]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_pcolorfast[data1-xy0-AxesImage]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_pcolorfast[data1-xy1-AxesImage]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_pcolorfast[data1-xy2-AxesImage]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_pcolorfast[data1-xy3-PcolorImage]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_pcolorfast[data1-xy4-QuadMesh]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_shared_scale",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_shared_bool",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_violin_point_mass",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_errorbar_inputs_shotgun[kwargs0]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_errorbar_inputs_shotgun[kwargs1]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_errorbar_inputs_shotgun[kwargs2]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_errorbar_inputs_shotgun[kwargs3]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_errorbar_inputs_shotgun[kwargs4]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_errorbar_inputs_shotgun[kwargs5]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_errorbar_inputs_shotgun[kwargs6]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_errorbar_inputs_shotgun[kwargs7]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_errorbar_inputs_shotgun[kwargs8]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_errorbar_inputs_shotgun[kwargs9]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_errorbar_inputs_shotgun[kwargs10]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_errorbar_inputs_shotgun[kwargs11]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_errorbar_inputs_shotgun[kwargs12]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_errorbar_inputs_shotgun[kwargs13]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_errorbar_inputs_shotgun[kwargs14]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_errorbar_inputs_shotgun[kwargs15]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_errorbar_inputs_shotgun[kwargs16]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_errorbar_inputs_shotgun[kwargs17]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_errorbar_inputs_shotgun[kwargs18]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_errorbar_inputs_shotgun[kwargs19]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_errorbar_inputs_shotgun[kwargs20]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_errorbar_inputs_shotgun[kwargs21]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_errorbar_inputs_shotgun[kwargs22]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_errorbar_inputs_shotgun[kwargs23]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_errorbar_inputs_shotgun[kwargs24]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_errorbar_inputs_shotgun[kwargs25]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_errorbar_inputs_shotgun[kwargs26]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_errorbar_inputs_shotgun[kwargs27]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_errorbar_inputs_shotgun[kwargs28]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_errorbar_inputs_shotgun[kwargs29]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_errorbar_inputs_shotgun[kwargs30]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_errorbar_inputs_shotgun[kwargs31]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_errorbar_inputs_shotgun[kwargs32]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_errorbar_inputs_shotgun[kwargs33]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_errorbar_inputs_shotgun[kwargs34]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_errorbar_inputs_shotgun[kwargs35]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_errorbar_inputs_shotgun[kwargs36]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_errorbar_inputs_shotgun[kwargs37]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_errorbar_inputs_shotgun[kwargs38]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_errorbar_inputs_shotgun[kwargs39]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_errorbar_inputs_shotgun[kwargs40]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_errorbar_inputs_shotgun[kwargs41]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_errorbar_inputs_shotgun[kwargs42]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_errorbar_inputs_shotgun[kwargs43]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_errorbar_inputs_shotgun[kwargs44]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_errorbar_inputs_shotgun[kwargs45]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_errorbar_inputs_shotgun[kwargs46]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_errorbar_inputs_shotgun[kwargs47]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_errorbar_inputs_shotgun[kwargs48]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_errorbar_inputs_shotgun[kwargs49]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_errorbar_inputs_shotgun[kwargs50]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_errorbar_inputs_shotgun[kwargs51]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_dash_offset[png]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_dash_offset[pdf]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_title_pad",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_title_location_roundtrip",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_title_location_shared[True]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_title_location_shared[False]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_loglog[png]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_loglog_nonpos[png]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_axes_margins",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_remove_shared_axes[gca-x]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_remove_shared_axes[gca-y]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_remove_shared_axes[subplots-x]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_remove_shared_axes[subplots-y]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_remove_shared_axes[subplots_shared-x]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_remove_shared_axes[subplots_shared-y]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_remove_shared_axes[add_axes-x]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_remove_shared_axes[add_axes-y]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_remove_shared_axes_relim",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_shared_axes_autoscale",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_adjust_numtick_aspect",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_auto_numticks",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_auto_numticks_log",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_broken_barh_empty",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_broken_barh_timedelta",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_pandas_pcolormesh",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_pandas_indexing_dates",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_pandas_errorbar_indexing",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_pandas_index_shape",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_pandas_indexing_hist",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_pandas_bar_align_center",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_tick_apply_tickdir_deprecation",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_axis_set_tick_params_labelsize_labelcolor",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_axes_tick_params_gridlines",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_axes_tick_params_ylabelside",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_axes_tick_params_xlabelside",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_none_kwargs",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_bar_uint8",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_date_timezone_x[png]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_date_timezone_y[png]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_date_timezone_x_and_y[png]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_axisbelow[png]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_titletwiny",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_titlesetpos",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_title_xticks_top",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_title_xticks_top_both",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_title_above_offset[left",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_title_above_offset[center",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_title_above_offset[both",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_title_no_move_off_page",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_offset_label_color",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_offset_text_visible",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_large_offset",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_barb_units",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_quiver_units",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_bar_color_cycle",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_tick_param_label_rotation",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_fillbetween_cycle",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_log_margins",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_color_length_mismatch",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_eventplot_legend",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_bar_broadcast_args",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_invalid_axis_limits",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_minorticks_on[symlog-symlog]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_minorticks_on[symlog-log]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_minorticks_on[log-symlog]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_minorticks_on[log-log]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_twinx_knows_limits",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_zero_linewidth",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_empty_errorbar_legend",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_plot_decimal[png]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_markerfacecolor_none_alpha[png]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_tick_padding_tightbbox",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_inset",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_zoom_inset",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_inset_polar[png]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_inset_projection",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_inset_subclass",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_indicate_inset_inverted[False-False]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_indicate_inset_inverted[False-True]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_indicate_inset_inverted[True-False]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_indicate_inset_inverted[True-True]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_set_position",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_spines_properbbox_after_zoom",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_gettightbbox_ignore_nan",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_scatter_series_non_zero_index",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_scatter_empty_data",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_annotate_across_transforms[png]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_secondary_xy[png]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_secondary_fail",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_secondary_resize",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_secondary_minorloc",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_secondary_formatter",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_secondary_repr",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_normal_axes",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_nodecorator",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_displaced_spine",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_tickdirs",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_minor_accountedfor",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_axis_bool_arguments[png]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_axis_extent_arg",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_axis_extent_arg2",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_hist_auto_bins",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_hist_nan_data",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_hist_range_and_density",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_bar_errbar_zorder",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_set_ticks_inverted",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_aspect_nonlinear_adjustable_box",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_aspect_nonlinear_adjustable_datalim",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_box_aspect",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_box_aspect_custom_position",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_bbox_aspect_axes_init",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_redraw_in_frame",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_invisible_axes_events",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_xtickcolor_is_not_markercolor",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_ytickcolor_is_not_markercolor",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_unautoscale[True-x]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_unautoscale[True-y]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_unautoscale[False-x]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_unautoscale[False-y]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_unautoscale[None-x]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_unautoscale[None-y]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_polar_interpolation_steps_variable_r[png]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_autoscale_tiny_sticky",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_xtickcolor_is_not_xticklabelcolor",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_ytickcolor_is_not_yticklabelcolor",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_relative_ticklabel_sizes[xx-small]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_relative_ticklabel_sizes[x-small]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_relative_ticklabel_sizes[small]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_relative_ticklabel_sizes[medium]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_relative_ticklabel_sizes[large]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_relative_ticklabel_sizes[x-large]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_relative_ticklabel_sizes[xx-large]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_relative_ticklabel_sizes[larger]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_relative_ticklabel_sizes[smaller]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_relative_ticklabel_sizes[8]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_relative_ticklabel_sizes[10]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_relative_ticklabel_sizes[12]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_multiplot_autoscale",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_sharing_does_not_link_positions",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_2dcolor_plot[pdf]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_shared_axes_clear[png]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_shared_axes_retick",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_ylabel_ha_with_position[left]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_ylabel_ha_with_position[center]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_ylabel_ha_with_position[right]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_bar_label_location_vertical",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_bar_label_location_vertical_yinverted",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_bar_label_location_horizontal",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_bar_label_location_horizontal_yinverted",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_bar_label_location_horizontal_xinverted",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_bar_label_location_horizontal_xyinverted",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_bar_label_location_center",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_bar_label_location_errorbars",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_bar_label_fmt[%.2f]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_bar_label_fmt[{:.2f}]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_bar_label_fmt[format]",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_bar_label_fmt_error",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_bar_label_labels",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_bar_label_nan_ydata",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_bar_label_nan_ydata_inverted",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_nan_barlabels",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_patch_bounds",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_warn_ignored_scatter_kwargs",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_artist_sublists",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_empty_line_plots",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_plot_format_errors[None-f-'f'",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_plot_format_errors[None-o+-'o\\\\+'",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_plot_format_errors[None-:--':-'",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_plot_format_errors[None-rk-'rk'",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_plot_format_errors[None-:o-r-':o-r'",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_plot_format_errors[data1-f-'f'",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_plot_format_errors[data1-o+-'o\\\\+'",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_plot_format_errors[data1-:--':-'",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_plot_format_errors[data1-rk-'rk'",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_plot_format_errors[data1-:o-r-':o-r'",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_plot_format",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_automatic_legend",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_plot_errors",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_clim",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_bezier_autoscale",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "PASSED",
              "message": "lib/matplotlib/tests/test_axes.py::test_get_xticklabel",
              "file_path": "lib/matplotlib/tests/test_axes.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "SKIPPED",
              "message": "lib/matplotlib/testing/compare.py:285: Don't know how to convert .svg files to png",
              "file_path": "lib/matplotlib/testing/compare.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            },
            {
              "status": "SKIPPED",
              "message": "../opt/miniconda3/envs/testbed/lib/python3.11/contextlib.py:81: Cannot compare svg files because Inkscape is not installed",
              "file_path": "../opt/miniconda3/envs/testbed/lib/python3.11/contextlib.py",
              "span_id": null,
              "line": null,
              "relevant_files": []
            }
          ]
        }
      },
      "parent_id": 9
    },
    {
      "node_id": 11,
      "action": {
        "scratch_pad": "1. I've completed all the necessary changes:\n   - Added draggable parameter to Legend.__init__\n   - Added implementation to enable dragging when draggable=True\n   - Added documentation in the _legend_kw_doc template\n   - Added test case test_draggable_init()\n2. The failing test in test_contour.py is unrelated to our changes (it's about colorbar limits)\n3. The feature is now complete and working as expected",
        "finish_reason": "The draggable parameter has been successfully added to the Legend class initialization. The changes include:\n1. Added draggable parameter with default False to Legend.__init__\n2. Added implementation to enable dragging when draggable=True\n3. Added documentation in the _legend_kw_doc template\n4. Added test case test_draggable_init()\n\nAll legend-related tests pass. The failing test in test_contour.py is unrelated to our changes.",
        "action_args_class": "moatless.actions.finish.FinishArgs"
      },
      "observation": {
        "message": "The draggable parameter has been successfully added to the Legend class initialization. The changes include:\n1. Added draggable parameter with default False to Legend.__init__\n2. Added implementation to enable dragging when draggable=True\n3. Added documentation in the _legend_kw_doc template\n4. Added test case test_draggable_init()\n\nAll legend-related tests pass. The failing test in test_contour.py is unrelated to our changes.",
        "terminal": true,
        "expect_correction": false,
        "properties": {}
      },
      "file_context": {
        "max_tokens": 8000,
        "files": [
          {
            "file_path": "lib/matplotlib/legend.py",
            "patch": "--- a/lib/matplotlib/legend.py\n+++ b/lib/matplotlib/legend.py\n@@ -286,6 +286,9 @@\n     The custom dictionary mapping instances or types to a legend\n     handler. This *handler_map* updates the default handler map\n     found at `matplotlib.legend.Legend.get_legend_handler_map`.\n+\n+draggable : bool, default: False\n+    Enable mouse dragging support for the legend.\n \"\"\")\n \n \n@@ -341,6 +344,7 @@\n         handler_map=None,\n         title_fontproperties=None,  # properties for the legend title\n         alignment=\"center\",       # control the alignment within the legend box\n+        draggable=False,      # enable mouse dragging support\n         *,\n         ncol=1  # synonym for ncols (backward compatibility)\n     ):\n@@ -538,6 +542,8 @@\n \n         self.set_title(title, prop=title_prop_fp)\n         self._draggable = None\n+        if draggable:\n+            self.set_draggable(True)\n \n         # set the text color\n \n",
            "spans": [
              {
                "span_id": "imports",
                "pinned": false
              },
              {
                "span_id": "Legend",
                "pinned": false
              },
              {
                "span_id": "Legend.__init__",
                "pinned": false
              },
              {
                "span_id": "Legend.draw",
                "pinned": false
              },
              {
                "span_id": "DraggableLegend",
                "pinned": false
              },
              {
                "span_id": "DraggableLegend.__init__",
                "pinned": false
              },
              {
                "span_id": "DraggableLegend.finalize_offset",
                "pinned": false
              },
              {
                "span_id": "DraggableLegend._update_loc",
                "pinned": false
              },
              {
                "span_id": "DraggableLegend._update_bbox_to_anchor",
                "pinned": false
              },
              {
                "span_id": "Legend.set_draggable",
                "pinned": false
              },
              {
                "span_id": "Legend.get_draggable",
                "pinned": false
              },
              {
                "span_id": "impl",
                "pinned": false
              }
            ],
            "show_all_spans": false
          },
          {
            "file_path": "lib/matplotlib/tests/test_legend.py",
            "patch": "--- a/lib/matplotlib/tests/test_legend.py\n+++ b/lib/matplotlib/tests/test_legend.py\n@@ -782,6 +782,13 @@\n     legend.set_draggable(False)\n     assert not legend.get_draggable()\n \n+def test_draggable_init():\n+    # Test draggable parameter in legend initialization\n+    legend = plt.legend(draggable=True)\n+    assert legend.get_draggable()\n+    legend = plt.legend(draggable=False)\n+    assert not legend.get_draggable()\n+\n \n def test_alpha_handles():\n     x, n, hh = plt.hist([1, 2, 3], alpha=0.25, label='data', color='red')\n",
            "spans": [
              {
                "span_id": "imports",
                "pinned": false
              },
              {
                "span_id": "test_get_set_draggable",
                "pinned": false
              }
            ],
            "show_all_spans": false
          },
          {
            "file_path": "lib/matplotlib/tests/test_contour.py",
            "spans": [
              {
                "span_id": "test_contourf_log_extension",
                "pinned": false
              }
            ],
            "show_all_spans": false,
            "patch": null
          },
          {
            "file_path": "lib/matplotlib/tests/test_axes.py",
            "spans": [],
            "show_all_spans": false,
            "patch": null
          }
        ]
      },
      "completions": {
        "build_action": {
          "model": "claude-3-5-sonnet-20241022",
          "input": [
            {
              "role": "user",
              "content": "<task>\nlegend draggable as keyword\n<!--To help us understand and resolve your issue, please fill out the form to the best of your ability.-->\r\n<!--You can feel free to delete the sections that do not apply.-->\r\n\r\n### Feature request\r\n\r\n**There is not keyword to make legend draggable at creation**\r\n\r\n<!--A short 1-2 sentences that succinctly describes the bug-->\r\n\r\nIs there a code reason why one can not add a \"draggable=True\" keyword to the __init__ function for Legend?  This would be more handy than having to call it after legend creation.  And, naively, it would seem simple to do.  But maybe there is a reason why it would not work?\n\n</task>"
            },
            {
              "role": "assistant",
              "content": [
                {
                  "type": "text",
                  "text": "<thoughts>\n1. First, I need to locate the Legend class implementation to understand its current initialization\n2. Then I'll check if there are any technical limitations for adding the draggable parameter\n3. I'll also look for any tests related to legend draggability to understand the current testing approach\n4. Finally, I'll implement the change if there are no blockers\n</thoughts>"
                },
                {
                  "id": "call_85bc3e3e",
                  "input": {
                    "file_pattern": null,
                    "class_name": "Legend"
                  },
                  "type": "tool_use",
                  "name": "FindClass"
                }
              ]
            },
            {
              "role": "user",
              "content": [
                {
                  "tool_use_id": "call_85bc3e3e",
                  "content": "<observation>\nFound 40 code sections.\n\nViewed relevant code:\nlib/matplotlib/legend.py\n```\n\n    23\t\n    24\timport itertools\n    25\timport logging\n    26\timport time\n    27\t\n    28\timport numpy as np\n    29\t\n    30\timport matplotlib as mpl\n    31\tfrom matplotlib import _api, _docstring, colors, offsetbox\n    32\tfrom matplotlib.artist import Artist, allow_rasterization\n    33\tfrom matplotlib.cbook import silent_list\n    34\tfrom matplotlib.font_manager import FontProperties\n    35\tfrom matplotlib.lines import Line2D\n    36\tfrom matplotlib.patches import (Patch, Rectangle, Shadow, FancyBboxPatch,\n    37\t                                StepPatch)\n    38\tfrom matplotlib.collections import (\n    39\t    Collection, CircleCollection, LineCollection, PathCollection,\n    40\t    PolyCollection, RegularPolyCollection)\n    41\tfrom matplotlib.text import Text\n    42\tfrom matplotlib.transforms import Bbox, BboxBase, TransformedBbox\n    43\tfrom matplotlib.transforms import BboxTransformTo, BboxTransformFrom\n    44\tfrom matplotlib.offsetbox import (\n    45\t    AnchoredOffsetbox, DraggableOffsetBox,\n    46\t    HPacker, VPacker,\n    47\t    DrawingArea, TextArea,\n    48\t)\n    49\tfrom matplotlib.container import ErrorbarContainer, BarContainer, StemContainer\n    50\tfrom . import legend_handler\n      # ...\n   290\t\n   291\t\n   292\tclass Legend(Artist):\n   293\t    \"\"\"\n   294\t    Place a legend on the axes at location loc.\n   295\t    \"\"\"\n   296\t\n   297\t    # 'best' is only implemented for axes legends\n   298\t    codes = {'best': 0, **AnchoredOffsetbox.codes}\n   299\t    zorder = 5\n          # ...\n   303\t\n   304\t    @_api.make_keyword_only(\"3.6\", \"loc\")\n   305\t    @_docstring.dedent_interpd\n   306\t    def __init__(\n   307\t        self, parent, handles, labels,\n   308\t        loc=None,\n   309\t        numpoints=None,      # number of points in the legend line\n   310\t        markerscale=None,    # relative size of legend markers vs. original\n   311\t        markerfirst=True,    # left/right ordering of legend marker and label\n   312\t        scatterpoints=None,  # number of scatter points\n   313\t        scatteryoffsets=None,\n   314\t        prop=None,           # properties for the legend texts\n   315\t        fontsize=None,       # keyword to set font size directly\n   316\t        labelcolor=None,     # keyword to set the text color\n   317\t\n   318\t        # spacing & pad defined as a fraction of the font-size\n   319\t        borderpad=None,      # whitespace inside the legend border\n   320\t        labelspacing=None,   # vertical space between the legend entries\n   321\t        handlelength=None,   # length of the legend handles\n   322\t        handleheight=None,   # height of the legend handles\n   323\t        handletextpad=None,  # pad between the legend handle and text\n   324\t        borderaxespad=None,  # pad between the axes and legend border\n   325\t        columnspacing=None,  # spacing between columns\n   326\t\n   327\t        ncols=1,     # number of columns\n   328\t        mode=None,  # horizontal distribution of columns: None or \"expand\"\n   329\t\n   330\t        fancybox=None,  # True: fancy box, False: rounded box, None: rcParam\n   331\t        shadow=None,\n   332\t        title=None,           # legend title\n   333\t        title_fontsize=None,  # legend title font size\n   334\t        framealpha=None,      # set frame alpha\n   335\t        edgecolor=None,       # frame patch edgecolor\n   336\t        facecolor=None,       # frame patch facecolor\n   337\t\n   338\t        bbox_to_anchor=None,  # bbox to which the legend will be anchored\n   339\t        bbox_transform=None,  # transform for the bbox\n   340\t        frameon=None,         # draw frame\n   341\t        handler_map=None,\n   342\t        title_fontproperties=None,  # properties for the legend title\n   343\t        alignment=\"center\",       # control the alignment within the legend box\n   344\t        *,\n   345\t        ncol=1  # synonym for ncols (backward compatibility)\n   346\t    ):\n   347\t        \"\"\"\n   348\t        Parameters\n   349\t        ----------\n   350\t        parent : `~matplotlib.axes.Axes` or `.Figure`\n   351\t            The artist that contains the legend.\n   352\t\n   353\t        handles : list of `.Artist`\n   354\t            A list of Artists (lines, patches) to be added to the legend.\n   355\t\n   356\t        labels : list of str\n   357\t            A list of labels to show next to the artists. The length of handles\n   358\t            and labels should be the same. If they are not, they are truncated\n   359\t            to the smaller of both lengths.\n   360\t\n   361\t        Other Parameters\n   362\t        ----------------\n   363\t        %(_legend_kw_doc)s\n   364\t\n   365\t        Notes\n   366\t        -----\n   367\t        Users can specify any arbitrary location for the legend using the\n   368\t        *bbox_to_anchor* keyword argument. *bbox_to_anchor* can be a\n   369\t        `.BboxBase` (or derived there from) or a tuple of 2 or 4 floats.\n   370\t        See `set_bbox_to_anchor` for more detail.\n   371\t\n   372\t        The legend location can be specified by setting *loc* with a tuple of\n   373\t        2 floats, which is interpreted as the lower-left corner of the legend\n   374\t        in the normalized axes coordinate.\n   375\t        \"\"\"\n   376\t        # local import only to avoid circularity\n   377\t        from matplotlib.axes import Axes\n   378\t        from matplotlib.figure import FigureBase\n   379\t\n   380\t        super().__init__()\n   381\t\n   382\t        if prop is None:\n   383\t            if fontsize is not None:\n   384\t                self.prop = FontProperties(size=fontsize)\n   385\t            else:\n   386\t                self.prop = FontProperties(\n   387\t                    size=mpl.rcParams[\"legend.fontsize\"])\n   388\t        else:\n   389\t            self.prop = FontProperties._from_any(prop)\n   390\t            if isinstance(prop, dict) and \"size\" not in prop:\n   391\t                self.prop.set_size(mpl.rcParams[\"legend.fontsize\"])\n   392\t\n   393\t        self._fontsize = self.prop.get_size_in_points()\n   394\t\n   395\t        self.texts = []\n   396\t        self.legendHandles = []\n   397\t        self._legend_title_box = None\n   398\t\n   399\t        #: A dictionary with the extra handler mappings for this Legend\n   400\t        #: instance.\n   401\t        self._custom_handler_map = handler_map\n   402\t\n   403\t        def val_or_rc(val, rc_name):\n   404\t            return val if val is not None else mpl.rcParams[rc_name]\n   405\t\n   406\t        self.numpoints = val_or_rc(numpoints, 'legend.numpoints')\n   407\t        self.markerscale = val_or_rc(markerscale, 'legend.markerscale')\n   408\t        self.scatterpoints = val_or_rc(scatterpoints, 'legend.scatterpoints')\n   409\t        self.borderpad = val_or_rc(borderpad, 'legend.borderpad')\n   410\t        self.labelspacing = val_or_rc(labelspacing, 'legend.labelspacing')\n   411\t        self.handlelength = val_or_rc(handlelength, 'legend.handlelength')\n   412\t        self.handleheight = val_or_rc(handleheight, 'legend.handleheight')\n   413\t        self.handletextpad = val_or_rc(handletextpad, 'legend.handletextpad')\n   414\t        self.borderaxespad = val_or_rc(borderaxespad, 'legend.borderaxespad')\n   415\t        self.columnspacing = val_or_rc(columnspacing, 'legend.columnspacing')\n   416\t        self.shadow = val_or_rc(shadow, 'legend.shadow')\n   417\t        # trim handles and labels if illegal label...\n   418\t        _lab, _hand = [], []\n   419\t        for label, handle in zip(labels, handles):\n   420\t            if isinstance(label, str) and label.startswith('_'):\n   421\t                _api.warn_external(f\"The label {label!r} of {handle!r} starts \"\n   422\t                                   \"with '_'. It is thus excluded from the \"\n   423\t                                   \"legend.\")\n   424\t            else:\n   425\t                _lab.append(label)\n   426\t                _hand.append(handle)\n   427\t        labels, handles = _lab, _hand\n   428\t\n   429\t        handles = list(handles)\n   430\t        if len(handles) < 2:\n   431\t            ncols = 1\n   432\t        self._ncols = ncols if ncols != 1 else ncol\n   433\t\n   434\t        if self.numpoints <= 0:\n   435\t            raise ValueError(\"numpoints must be > 0; it was %d\" % numpoints)\n   436\t\n   437\t        # introduce y-offset for handles of the scatter plot\n   438\t        if scatteryoffsets is None:\n   439\t            self._scatteryoffsets = np.array([3. / 8., 4. / 8., 2.5 / 8.])\n   440\t        else:\n   441\t            self._scatteryoffsets = np.asarray(scatteryoffsets)\n   442\t        reps = self.scatterpoints // len(self._scatteryoffsets) + 1\n   443\t        self._scatteryoffsets = np.tile(self._scatteryoffsets,\n   444\t                                        reps)[:self.scatterpoints]\n   445\t\n   446\t        # _legend_box is a VPacker instance that contains all\n   447\t        # legend items and will be initialized from _init_legend_box()\n   448\t        # method.\n   449\t        self._legend_box = None\n   450\t\n   451\t        if isinstance(parent, Axes):\n   452\t            self.isaxes = True\n   453\t            self.axes = parent\n   454\t            self.set_figure(parent.figure)\n   455\t        elif isinstance(parent, FigureBase):\n   456\t            self.isaxes = False\n   457\t            self.set_figure(parent)\n   458\t        else:\n   459\t            raise TypeError(\n   460\t                \"Legend needs either Axes or FigureBase as parent\"\n   461\t            )\n   462\t        self.parent = parent\n   463\t\n   464\t        self._loc_used_default = loc is None\n   465\t        if loc is None:\n   466\t            loc = mpl.rcParams[\"legend.loc\"]\n   467\t            if not self.isaxes and loc in [0, 'best']:\n   468\t                loc = 'upper right'\n   469\t        if isinstance(loc, str):\n   470\t            loc = _api.check_getitem(self.codes, loc=loc)\n   471\t        if not self.isaxes and loc == 0:\n   472\t            raise ValueError(\n   473\t                \"Automatic legend placement (loc='best') not implemented for \"\n   474\t                \"figure legend\")\n   475\t\n   476\t        self._mode = mode\n   477\t        self.set_bbox_to_anchor(bbox_to_anchor, bbox_transform)\n   478\t\n   479\t        # We use FancyBboxPatch to draw a legend frame. The location\n   480\t        # and size of the box will be updated during the drawing time.\n   481\t\n   482\t        if facecolor is None:\n   483\t            facecolor = mpl.rcParams[\"legend.facecolor\"]\n   484\t        if facecolor == 'inherit':\n   485\t            facecolor = mpl.rcParams[\"axes.facecolor\"]\n   486\t\n   487\t        if edgecolor is None:\n   488\t            edgecolor = mpl.rcParams[\"legend.edgecolor\"]\n   489\t        if edgecolor == 'inherit':\n   490\t            edgecolor = mpl.rcParams[\"axes.edgecolor\"]\n   491\t\n   492\t        if fancybox is None:\n   493\t            fancybox = mpl.rcParams[\"legend.fancybox\"]\n   494\t\n   495\t        self.legendPatch = FancyBboxPatch(\n   496\t            xy=(0, 0), width=1, height=1,\n   497\t            facecolor=facecolor, edgecolor=edgecolor,\n   498\t            # If shadow is used, default to alpha=1 (#8943).\n   499\t            alpha=(framealpha if framealpha is not None\n   500\t                   else 1 if shadow\n   501\t                   else mpl.rcParams[\"legend.framealpha\"]),\n   502\t            # The width and height of the legendPatch will be set (in draw())\n   503\t            # to the length that includes the padding. Thus we set pad=0 here.\n   504\t            boxstyle=(\"round,pad=0,rounding_size=0.2\" if fancybox\n   505\t                      else \"square,pad=0\"),\n   506\t            mutation_scale=self._fontsize,\n   507\t            snap=True,\n   508\t            visible=(frameon if frameon is not None\n   509\t                     else mpl.rcParams[\"legend.frameon\"])\n   510\t        )\n   511\t        self._set_artist_props(self.legendPatch)\n   512\t\n   513\t        _api.check_in_list([\"center\", \"left\", \"right\"], alignment=alignment)\n   514\t        self._alignment = alignment\n   515\t\n   516\t        # init with null renderer\n   517\t        self._init_legend_box(handles, labels, markerfirst)\n   518\t\n   519\t        tmp = self._loc_used_default\n   520\t        self._set_loc(loc)\n   521\t        self._loc_used_default = tmp  # ignore changes done by _set_loc\n   522\t\n   523\t        # figure out title font properties:\n   524\t        if title_fontsize is not None and title_fontproperties is not None:\n   525\t            raise ValueError(\n   526\t                \"title_fontsize and title_fontproperties can't be specified \"\n   527\t                \"at the same time. Only use one of them. \")\n   528\t        title_prop_fp = FontProperties._from_any(title_fontproperties)\n   529\t        if isinstance(title_fontproperties, dict):\n   530\t            if \"size\" not in title_fontproperties:\n   531\t                title_fontsize = mpl.rcParams[\"legend.title_fontsize\"]\n   532\t                title_prop_fp.set_size(title_fontsize)\n   533\t        elif title_fontsize is not None:\n   534\t            title_prop_fp.set_size(title_fontsize)\n   535\t        elif not isinstance(title_fontproperties, FontProperties):\n   536\t            title_fontsize = mpl.rcParams[\"legend.title_fontsize\"]\n   537\t            title_prop_fp.set_size(title_fontsize)\n   538\t\n   539\t        self.set_title(title, prop=title_prop_fp)\n   540\t        self._draggable = None\n   541\t\n   542\t        # set the text color\n   543\t\n   544\t        color_getters = {  # getter function depends on line or patch\n   545\t            'linecolor':       ['get_color',           'get_facecolor'],\n   546\t            'markerfacecolor': ['get_markerfacecolor', 'get_facecolor'],\n   547\t            'mfc':             ['get_markerfacecolor', 'get_facecolor'],\n   548\t            'markeredgecolor': ['get_markeredgecolor', 'get_edgecolor'],\n   549\t            'mec':             ['get_markeredgecolor', 'get_edgecolor'],\n   550\t        }\n   551\t        if labelcolor is None:\n   552\t            if mpl.rcParams['legend.labelcolor'] is not None:\n   553\t                labelcolor = mpl.rcParams['legend.labelcolor']\n   554\t            else:\n   555\t                labelcolor = mpl.rcParams['text.color']\n   556\t        if isinstance(labelcolor, str) and labelcolor in color_getters:\n   557\t            getter_names = color_getters[labelcolor]\n   558\t            for handle, text in zip(self.legendHandles, self.texts):\n   559\t                for getter_name in getter_names:\n   560\t                    try:\n   561\t                        color = getattr(handle, getter_name)()\n   562\t                        text.set_color(color)\n   563\t                        break\n   564\t                    except AttributeError:\n   565\t                        pass\n   566\t        elif isinstance(labelcolor, str) and labelcolor == 'none':\n   567\t            for text in self.texts:\n   568\t                text.set_color(labelcolor)\n   569\t        elif np.iterable(labelcolor):\n   570\t            for text, color in zip(self.texts,\n   571\t                                   itertools.cycle(\n   572\t                                       colors.to_rgba_array(labelcolor))):\n   573\t                text.set_color(color)\n   574\t        else:\n   575\t            raise ValueError(f\"Invalid labelcolor: {labelcolor!r}\")\n          # ...\n   622\t\n   623\t    @allow_rasterization\n   624\t    def draw(self, renderer):\n   625\t        # docstring inherited\n   626\t        if not self.get_visible():\n   627\t            return\n   628\t\n   629\t        renderer.open_group('legend', gid=self.get_gid())\n   630\t\n   631\t        fontsize = renderer.points_to_pixels(self._fontsize)\n   632\t\n   633\t        # if mode == fill, set the width of the legend_box to the\n   634\t        # width of the parent (minus pads)\n   635\t        if self._mode in [\"expand\"]:\n   636\t            pad = 2 * (self.borderaxespad + self.borderpad) * fontsize\n   637\t            self._legend_box.set_width(self.get_bbox_to_anchor().width - pad)\n   638\t\n   639\t        # update the location and size of the legend. This needs to\n   640\t        # be done in any case to clip the figure right.\n   641\t        bbox = self._legend_box.get_window_extent(renderer)\n   642\t        self.legendPatch.set_bounds(bbox.bounds)\n   643\t        self.legendPatch.set_mutation_scale(fontsize)\n   644\t\n   645\t        if self.shadow:\n   646\t            Shadow(self.legendPatch, 2, -2).draw(renderer)\n   647\t\n   648\t        self.legendPatch.draw(renderer)\n   649\t        self._legend_box.draw(renderer)\n   650\t\n   651\t        renderer.close_group('legend')\n   652\t        self.stale = False\n   653\t\n   654\t    # _default_handler_map defines the default mapping between plot\n   655\t    # elements and the legend handlers.\n          # ...\n      # ...\n```\n\n</observation>",
                  "type": "tool_result"
                }
              ]
            },
            {
              "role": "assistant",
              "content": [
                {
                  "type": "text",
                  "text": "<thoughts>\n1. I found the Legend class implementation in lib/matplotlib/legend.py\n2. I notice that:\n   - The Legend class already has a `_draggable` attribute initialized as None in __init__ (line 540)\n   - The class inherits from Artist and uses DraggableOffsetBox (imported on line 45)\n3. Let me search for the draggable functionality to understand how it's currently implemented\n</thoughts>"
                },
                {
                  "id": "call_05070c78",
                  "input": {
                    "file_pattern": null,
                    "query": "legend draggable method implementation",
                    "category": "implementation"
                  },
                  "type": "tool_use",
                  "name": "SemanticSearch"
                }
              ]
            },
            {
              "role": "user",
              "content": [
                {
                  "tool_use_id": "call_05070c78",
                  "content": "<observation>\nFound 14 code sections.\n\nViewed relevant code:\nlib/matplotlib/legend.py\n```\n\n    23\t\n    24\timport itertools\n    25\timport logging\n    26\timport time\n    27\t\n    28\timport numpy as np\n    29\t\n    30\timport matplotlib as mpl\n    31\tfrom matplotlib import _api, _docstring, colors, offsetbox\n    32\tfrom matplotlib.artist import Artist, allow_rasterization\n    33\tfrom matplotlib.cbook import silent_list\n    34\tfrom matplotlib.font_manager import FontProperties\n    35\tfrom matplotlib.lines import Line2D\n    36\tfrom matplotlib.patches import (Patch, Rectangle, Shadow, FancyBboxPatch,\n    37\t                                StepPatch)\n    38\tfrom matplotlib.collections import (\n    39\t    Collection, CircleCollection, LineCollection, PathCollection,\n    40\t    PolyCollection, RegularPolyCollection)\n    41\tfrom matplotlib.text import Text\n    42\tfrom matplotlib.transforms import Bbox, BboxBase, TransformedBbox\n    43\tfrom matplotlib.transforms import BboxTransformTo, BboxTransformFrom\n    44\tfrom matplotlib.offsetbox import (\n    45\t    AnchoredOffsetbox, DraggableOffsetBox,\n    46\t    HPacker, VPacker,\n    47\t    DrawingArea, TextArea,\n    48\t)\n    49\tfrom matplotlib.container import ErrorbarContainer, BarContainer, StemContainer\n    50\tfrom . import legend_handler\n    51\t\n    52\t\n    53\tclass DraggableLegend(DraggableOffsetBox):\n    54\t    def __init__(self, legend, use_blit=False, update=\"loc\"):\n    55\t        \"\"\"\n    56\t        Wrapper around a `.Legend` to support mouse dragging.\n    57\t\n    58\t        Parameters\n    59\t        ----------\n    60\t        legend : `.Legend`\n    61\t            The `.Legend` instance to wrap.\n    62\t        use_blit : bool, optional\n    63\t            Use blitting for faster image composition. For details see\n    64\t            :ref:`func-animation`.\n    65\t        update : {'loc', 'bbox'}, optional\n    66\t            If \"loc\", update the *loc* parameter of the legend upon finalizing.\n    67\t            If \"bbox\", update the *bbox_to_anchor* parameter.\n    68\t        \"\"\"\n    69\t        self.legend = legend\n    70\t\n    71\t        _api.check_in_list([\"loc\", \"bbox\"], update=update)\n    72\t        self._update = update\n    73\t\n    74\t        super().__init__(legend, legend._legend_box, use_blit=use_blit)\n    75\t\n    76\t    def finalize_offset(self):\n    77\t        if self._update == \"loc\":\n    78\t            self._update_loc(self.get_loc_in_canvas())\n    79\t        elif self._update == \"bbox\":\n    80\t            self._bbox_to_anchor(self.get_loc_in_canvas())\n    81\t\n    82\t    def _update_loc(self, loc_in_canvas):\n    83\t        bbox = self.legend.get_bbox_to_anchor()\n    84\t        # if bbox has zero width or height, the transformation is\n    85\t        # ill-defined. Fall back to the default bbox_to_anchor.\n    86\t        if bbox.width == 0 or bbox.height == 0:\n    87\t            self.legend.set_bbox_to_anchor(None)\n    88\t            bbox = self.legend.get_bbox_to_anchor()\n    89\t        _bbox_transform = BboxTransformFrom(bbox)\n    90\t        self.legend._loc = tuple(_bbox_transform.transform(loc_in_canvas))\n    91\t\n    92\t    def _update_bbox_to_anchor(self, loc_in_canvas):\n    93\t        loc_in_bbox = self.legend.axes.transAxes.transform(loc_in_canvas)\n    94\t        self.legend.set_bbox_to_anchor(loc_in_bbox)\n      # ...\n   290\t\n   291\t\n   292\tclass Legend(Artist):\n   293\t    \"\"\"\n   294\t    Place a legend on the axes at location loc.\n   295\t    \"\"\"\n   296\t\n   297\t    # 'best' is only implemented for axes legends\n   298\t    codes = {'best': 0, **AnchoredOffsetbox.codes}\n   299\t    zorder = 5\n          # ...\n  1078\t\n  1079\t    def set_draggable(self, state, use_blit=False, update='loc'):\n  1080\t        \"\"\"\n  1081\t        Enable or disable mouse dragging support of the legend.\n  1082\t\n  1083\t        Parameters\n  1084\t        ----------\n  1085\t        state : bool\n  1086\t            Whether mouse dragging is enabled.\n  1087\t        use_blit : bool, optional\n  1088\t            Use blitting for faster image composition. For details see\n  1089\t            :ref:`func-animation`.\n  1090\t        update : {'loc', 'bbox'}, optional\n  1091\t            The legend parameter to be changed when dragged:\n  1092\t\n  1093\t            - 'loc': update the *loc* parameter of the legend\n  1094\t            - 'bbox': update the *bbox_to_anchor* parameter of the legend\n  1095\t\n  1096\t        Returns\n  1097\t        -------\n  1098\t        `.DraggableLegend` or *None*\n  1099\t            If *state* is ``True`` this returns the `.DraggableLegend` helper\n  1100\t            instance. Otherwise this returns *None*.\n  1101\t        \"\"\"\n  1102\t        if state:\n  1103\t            if self._draggable is None:\n  1104\t                self._draggable = DraggableLegend(self,\n  1105\t                                                  use_blit,\n  1106\t                                                  update=update)\n  1107\t        else:\n  1108\t            if self._draggable is not None:\n  1109\t                self._draggable.disconnect()\n  1110\t            self._draggable = None\n  1111\t        return self._draggable\n  1112\t\n  1113\t    def get_draggable(self):\n  1114\t        \"\"\"Return ``True`` if the legend is draggable, ``False`` otherwise.\"\"\"\n  1115\t        return self._draggable is not None\n  1116\t\n  1117\t\n  1118\t# Helper functions to parse legend arguments for both `figure.legend` and\n  1119\t# `axes.legend`:\n      # ...\n```\n\n</observation>",
                  "type": "tool_result"
                }
              ]
            },
            {
              "role": "assistant",
              "content": [
                {
                  "type": "text",
                  "text": "<thoughts>\n1. I found the draggable functionality implementation:\n   - There's a DraggableLegend class that inherits from DraggableOffsetBox\n   - Legend class has set_draggable() and get_draggable() methods\n   - The _draggable attribute is initialized as None in __init__\n2. Adding a draggable parameter to __init__ seems feasible since:\n   - The infrastructure for draggable legends already exists\n   - It would just need to call set_draggable() during initialization\n3. Let me check if there are any tests for the draggable functionality to understand how to test the new parameter\n</thoughts>"
                },
                {
                  "id": "call_9dda00e0",
                  "input": {
                    "file_pattern": null,
                    "query": "legend draggable tests",
                    "category": "test"
                  },
                  "type": "tool_use",
                  "name": "SemanticSearch"
                }
              ]
            },
            {
              "role": "user",
              "content": [
                {
                  "tool_use_id": "call_9dda00e0",
                  "content": "<observation>\nFound 12 code sections.\n\nViewed relevant code:\nlib/matplotlib/tests/test_legend.py\n```\n     1\timport collections\n     2\timport platform\n     3\tfrom unittest import mock\n     4\timport warnings\n     5\t\n     6\timport numpy as np\n     7\timport pytest\n     8\t\n     9\tfrom matplotlib.testing.decorators import check_figures_equal, image_comparison\n    10\tfrom matplotlib.testing._markers import needs_usetex\n    11\timport matplotlib.pyplot as plt\n    12\timport matplotlib as mpl\n    13\timport matplotlib.transforms as mtransforms\n    14\timport matplotlib.collections as mcollections\n    15\timport matplotlib.lines as mlines\n    16\tfrom matplotlib.legend_handler import HandlerTuple\n    17\timport matplotlib.legend as mlegend\n    18\tfrom matplotlib import rc_context\n    19\tfrom matplotlib.font_manager import FontProperties\n      # ...\n   775\t\n   776\t\n   777\tdef test_get_set_draggable():\n   778\t    legend = plt.legend()\n   779\t    assert not legend.get_draggable()\n   780\t    legend.set_draggable(True)\n   781\t    assert legend.get_draggable()\n   782\t    legend.set_draggable(False)\n   783\t    assert not legend.get_draggable()\n      # ...\n```\n\n</observation>",
                  "type": "tool_result"
                }
              ]
            },
            {
              "role": "assistant",
              "content": [
                {
                  "type": "text",
                  "text": "<thoughts>\n1. I found the test for draggable functionality in test_legend.py\n2. The changes needed are:\n   - Add a draggable parameter to Legend.__init__\n   - Call set_draggable() in __init__ if draggable=True\n   - Add a test case for the new parameter\n3. Let me implement these changes\n</thoughts>"
                },
                {
                  "id": "call_8befcc99",
                  "input": {
                    "command": "str_replace",
                    "path": "lib/matplotlib/legend.py",
                    "file_text": null,
                    "view_range": null,
                    "old_str": "    def __init__(\n        self, parent, handles, labels,\n        loc=None,\n        numpoints=None,      # number of points in the legend line\n        markerscale=None,    # relative size of legend markers vs. original\n        markerfirst=True,    # left/right ordering of legend marker and label\n        scatterpoints=None,  # number of scatter points\n        scatteryoffsets=None,\n        prop=None,           # properties for the legend texts\n        fontsize=None,       # keyword to set font size directly\n        labelcolor=None,     # keyword to set the text color\n\n        # spacing & pad defined as a fraction of the font-size\n        borderpad=None,      # whitespace inside the legend border\n        labelspacing=None,   # vertical space between the legend entries\n        handlelength=None,   # length of the legend handles\n        handleheight=None,   # height of the legend handles\n        handletextpad=None,  # pad between the legend handle and text\n        borderaxespad=None,  # pad between the axes and legend border\n        columnspacing=None,  # spacing between columns\n\n        ncols=1,     # number of columns\n        mode=None,  # horizontal distribution of columns: None or \"expand\"\n\n        fancybox=None,  # True: fancy box, False: rounded box, None: rcParam\n        shadow=None,\n        title=None,           # legend title\n        title_fontsize=None,  # legend title font size\n        framealpha=None,      # set frame alpha\n        edgecolor=None,       # frame patch edgecolor\n        facecolor=None,       # frame patch facecolor\n\n        bbox_to_anchor=None,  # bbox to which the legend will be anchored\n        bbox_transform=None,  # transform for the bbox\n        frameon=None,         # draw frame\n        handler_map=None,\n        title_fontproperties=None,  # properties for the legend title\n        alignment=\"center\",       # control the alignment within the legend box\n        *,\n        ncol=1  # synonym for ncols (backward compatibility)",
                    "new_str": "    def __init__(\n        self, parent, handles, labels,\n        loc=None,\n        numpoints=None,      # number of points in the legend line\n        markerscale=None,    # relative size of legend markers vs. original\n        markerfirst=True,    # left/right ordering of legend marker and label\n        scatterpoints=None,  # number of scatter points\n        scatteryoffsets=None,\n        prop=None,           # properties for the legend texts\n        fontsize=None,       # keyword to set font size directly\n        labelcolor=None,     # keyword to set the text color\n\n        # spacing & pad defined as a fraction of the font-size\n        borderpad=None,      # whitespace inside the legend border\n        labelspacing=None,   # vertical space between the legend entries\n        handlelength=None,   # length of the legend handles\n        handleheight=None,   # height of the legend handles\n        handletextpad=None,  # pad between the legend handle and text\n        borderaxespad=None,  # pad between the axes and legend border\n        columnspacing=None,  # spacing between columns\n\n        ncols=1,     # number of columns\n        mode=None,  # horizontal distribution of columns: None or \"expand\"\n\n        fancybox=None,  # True: fancy box, False: rounded box, None: rcParam\n        shadow=None,\n        title=None,           # legend title\n        title_fontsize=None,  # legend title font size\n        framealpha=None,      # set frame alpha\n        edgecolor=None,       # frame patch edgecolor\n        facecolor=None,       # frame patch facecolor\n\n        bbox_to_anchor=None,  # bbox to which the legend will be anchored\n        bbox_transform=None,  # transform for the bbox\n        frameon=None,         # draw frame\n        handler_map=None,\n        title_fontproperties=None,  # properties for the legend title\n        alignment=\"center\",       # control the alignment within the legend box\n        draggable=False,      # enable mouse dragging support\n        *,\n        ncol=1  # synonym for ncols (backward compatibility)",
                    "insert_line": null
                  },
                  "type": "tool_use",
                  "name": "str_replace_editor"
                }
              ]
            },
            {
              "role": "user",
              "content": [
                {
                  "tool_use_id": "call_8befcc99",
                  "content": "<observation>\nThe file lib/matplotlib/legend.py has been edited. Here's the result of running `cat -n` on a snippet of lib/matplotlib/legend.py:\n   306\t    def __str__(self):\n   307\t        return \"Legend\"\n   308\t\n   309\t    @_api.make_keyword_only(\"3.6\", \"loc\")\n   310\t    @_docstring.dedent_interpd\n   311\t    def __init__(\n   312\t        self, parent, handles, labels,\n   313\t        loc=None,\n   314\t        numpoints=None,      # number of points in the legend line\n   315\t        markerscale=None,    # relative size of legend markers vs. original\n   316\t        markerfirst=True,    # left/right ordering of legend marker and label\n   317\t        scatterpoints=None,  # number of scatter points\n   318\t        scatteryoffsets=None,\n   319\t        prop=None,           # properties for the legend texts\n   320\t        fontsize=None,       # keyword to set font size directly\n   321\t        labelcolor=None,     # keyword to set the text color\n   322\t\n   323\t        # spacing & pad defined as a fraction of the font-size\n   324\t        borderpad=None,      # whitespace inside the legend border\n   325\t        labelspacing=None,   # vertical space between the legend entries\n   326\t        handlelength=None,   # length of the legend handles\n   327\t        handleheight=None,   # height of the legend handles\n   328\t        handletextpad=None,  # pad between the legend handle and text\n   329\t        borderaxespad=None,  # pad between the axes and legend border\n   330\t        columnspacing=None,  # spacing between columns\n   331\t\n   332\t        ncols=1,     # number of columns\n   333\t        mode=None,  # horizontal distribution of columns: None or \"expand\"\n   334\t\n   335\t        fancybox=None,  # True: fancy box, False: rounded box, None: rcParam\n   336\t        shadow=None,\n   337\t        title=None,           # legend title\n   338\t        title_fontsize=None,  # legend title font size\n   339\t        framealpha=None,      # set frame alpha\n   340\t        edgecolor=None,       # frame patch edgecolor\n   341\t        facecolor=None,       # frame patch facecolor\n   342\t\n   343\t        bbox_to_anchor=None,  # bbox to which the legend will be anchored\n   344\t        bbox_transform=None,  # transform for the bbox\n   345\t        frameon=None,         # draw frame\n   346\t        handler_map=None,\n   347\t        title_fontproperties=None,  # properties for the legend title\n   348\t        alignment=\"center\",       # control the alignment within the legend box\n   349\t        draggable=False,      # enable mouse dragging support\n   350\t        *,\n   351\t        ncol=1  # synonym for ncols (backward compatibility)\n   352\t    ):\n   353\t        \"\"\"\n   354\t        Parameters\nReview the changes and make sure they are as expected. Edit the file again if necessary.\n\nRunning 936 tests in the following files:\n * lib/matplotlib/tests/test_legend.py\n * lib/matplotlib/tests/test_contour.py\n * lib/matplotlib/tests/test_axes.py\n\n* FAILED lib/matplotlib/tests/test_contour.py test_contourf_log_extension>\n```\n\n    @image_comparison(['contour_log_extension.png'],\n                      remove_text=True, style='mpl20',\n                      tol=1.444)\n    def test_contourf_log_extension():\n        # Remove this line when this test image is regenerated.\n        plt.rcParams['pcolormesh.snap'] = False\n    \n        # Test that contourf with lognorm is extended correctly\n        fig, (ax1, ax2, ax3) = plt.subplots(1, 3, figsize=(10, 5))\n        fig.subplots_adjust(left=0.05, right=0.95)\n    \n        # make data set with large range e.g. between 1e-8 and 1e10\n        data_exp = np.linspace(-7.5, 9.5, 1200)\n        data = np.power(10, data_exp).reshape(30, 40)\n        # make manual levels e.g. between 1e-4 and 1e-6\n        levels_exp = np.arange(-4., 7.)\n        levels = np.power(10., levels_exp)\n    \n        # original data\n        c1 = ax1.contourf(data,\n                          norm=LogNorm(vmin=data.min(), vmax=data.max()))\n        # just show data in levels\n        c2 = ax2.contourf(data, levels=levels,\n                          norm=LogNorm(vmin=levels.min(), vmax=levels.max()),\n                          extend='neither')\n        # extend data from levels\n        c3 = ax3.contourf(data, levels=levels,\n                          norm=LogNorm(vmin=levels.min(), vmax=levels.max()),\n                          extend='both')\n        cb = plt.colorbar(c1, ax=ax1)\n        assert cb.ax.get_ylim() == (1e-8, 1e10)\n        cb = plt.colorbar(c2, ax=ax2)\n>       assert cb.ax.get_ylim() == (1e-4, 1e6)\nE       assert (9.9999999999...05, 1000000.0) == (0.0001, 1000000.0)\nE         \nE         At index 0 diff: 9.999999999999999e-05 != 0.0001\nE         Use -v to get more diff\n\nlib/matplotlib/tests/test_contour.py:316: AssertionError\n```\n\n\n935 passed. 1 failed. 0 errors.\n</observation>",
                  "type": "tool_result"
                }
              ]
            },
            {
              "role": "assistant",
              "content": [
                {
                  "type": "text",
                  "text": "<thoughts>\n1. I've added the draggable parameter to the __init__ signature, but I still need to:\n   - Add it to the docstring\n   - Actually implement the functionality by calling set_draggable() in __init__\n2. The test failure in test_contour.py seems unrelated to our changes (it's about colorbar limits)\n3. Let me continue with the implementation\n</thoughts>"
                },
                {
                  "id": "call_7590c0f7",
                  "input": {
                    "command": "str_replace",
                    "path": "lib/matplotlib/legend.py",
                    "file_text": null,
                    "view_range": null,
                    "old_str": "        self.set_title(title, prop=title_prop_fp)\n        self._draggable = None\n\n        # set the text color",
                    "new_str": "        self.set_title(title, prop=title_prop_fp)\n        self._draggable = None\n        if draggable:\n            self.set_draggable(True)\n\n        # set the text color",
                    "insert_line": null
                  },
                  "type": "tool_use",
                  "name": "str_replace_editor"
                }
              ]
            },
            {
              "role": "user",
              "content": [
                {
                  "tool_use_id": "call_7590c0f7",
                  "content": "<observation>\nThe file lib/matplotlib/legend.py has been edited. Here's the result of running `cat -n` on a snippet of lib/matplotlib/legend.py:\n   540\t            title_prop_fp.set_size(title_fontsize)\n   541\t        elif not isinstance(title_fontproperties, FontProperties):\n   542\t            title_fontsize = mpl.rcParams[\"legend.title_fontsize\"]\n   543\t            title_prop_fp.set_size(title_fontsize)\n   544\t\n   545\t        self.set_title(title, prop=title_prop_fp)\n   546\t        self._draggable = None\n   547\t        if draggable:\n   548\t            self.set_draggable(True)\n   549\t\n   550\t        # set the text color\n   551\t\n   552\t        color_getters = {  # getter function depends on line or patch\n   553\t            'linecolor':       ['get_color',           'get_facecolor'],\nReview the changes and make sure they are as expected. Edit the file again if necessary.\n\nRunning 936 tests in the following files:\n * lib/matplotlib/tests/test_legend.py\n * lib/matplotlib/tests/test_contour.py\n * lib/matplotlib/tests/test_axes.py\n\n* FAILED lib/matplotlib/tests/test_contour.py test_contourf_log_extension>\n```\n\n    @image_comparison(['contour_log_extension.png'],\n                      remove_text=True, style='mpl20',\n                      tol=1.444)\n    def test_contourf_log_extension():\n        # Remove this line when this test image is regenerated.\n        plt.rcParams['pcolormesh.snap'] = False\n    \n        # Test that contourf with lognorm is extended correctly\n        fig, (ax1, ax2, ax3) = plt.subplots(1, 3, figsize=(10, 5))\n        fig.subplots_adjust(left=0.05, right=0.95)\n    \n        # make data set with large range e.g. between 1e-8 and 1e10\n        data_exp = np.linspace(-7.5, 9.5, 1200)\n        data = np.power(10, data_exp).reshape(30, 40)\n        # make manual levels e.g. between 1e-4 and 1e-6\n        levels_exp = np.arange(-4., 7.)\n        levels = np.power(10., levels_exp)\n    \n        # original data\n        c1 = ax1.contourf(data,\n                          norm=LogNorm(vmin=data.min(), vmax=data.max()))\n        # just show data in levels\n        c2 = ax2.contourf(data, levels=levels,\n                          norm=LogNorm(vmin=levels.min(), vmax=levels.max()),\n                          extend='neither')\n        # extend data from levels\n        c3 = ax3.contourf(data, levels=levels,\n                          norm=LogNorm(vmin=levels.min(), vmax=levels.max()),\n                          extend='both')\n        cb = plt.colorbar(c1, ax=ax1)\n        assert cb.ax.get_ylim() == (1e-8, 1e10)\n        cb = plt.colorbar(c2, ax=ax2)\n>       assert cb.ax.get_ylim() == (1e-4, 1e6)\nE       assert (9.9999999999...05, 1000000.0) == (0.0001, 1000000.0)\nE         \nE         At index 0 diff: 9.999999999999999e-05 != 0.0001\nE         Use -v to get more diff\n\nlib/matplotlib/tests/test_contour.py:316: AssertionError\n```\n\n\n935 passed. 1 failed. 0 errors.\n</observation>",
                  "type": "tool_result"
                }
              ]
            },
            {
              "role": "assistant",
              "content": [
                {
                  "type": "text",
                  "text": "<thoughts>\n1. I've added the implementation to enable draggable functionality when draggable=True\n2. Now I need to:\n   - Add the draggable parameter to the docstring\n   - Add a test case for the new parameter\n3. Let me update the docstring first\n</thoughts>"
                },
                {
                  "id": "call_340e706c",
                  "input": {
                    "command": "str_replace",
                    "path": "lib/matplotlib/legend.py",
                    "file_text": null,
                    "view_range": null,
                    "old_str": "        alignment : {'center', 'left', 'right'}, default: 'center'\n            The alignment value for the legend box. The valid values are:\n            {'center', 'left', 'right'}\n\n        Other Parameters\n        ----------------\n        **kwargs : `.Text` properties\n            Other keyword arguments are given to the `.Text` instance\n            containing the legend's text.\n\n        See Also\n        --------\n        .Figure.legend",
                    "new_str": "        alignment : {'center', 'left', 'right'}, default: 'center'\n            The alignment value for the legend box. The valid values are:\n            {'center', 'left', 'right'}\n\n        draggable : bool, default: False\n            Enable mouse dragging support for the legend.\n\n        Other Parameters\n        ----------------\n        **kwargs : `.Text` properties\n            Other keyword arguments are given to the `.Text` instance\n            containing the legend's text.\n\n        See Also\n        --------\n        .Figure.legend",
                    "insert_line": null
                  },
                  "type": "tool_use",
                  "name": "str_replace_editor"
                }
              ]
            },
            {
              "role": "user",
              "content": [
                {
                  "tool_use_id": "call_340e706c",
                  "content": "<observation>\nString '        alignment : {'center', 'left', 'right'}, default: 'center'\n            The alignment value for the legend box. The valid values are:\n            {'center', 'left', 'right'}\n\n        Other Parameters\n        ----------------\n        **kwargs : `.Text` properties\n            Other keyword arguments are given to the `.Text` instance\n            containing the legend's text.\n\n        See Also\n        --------\n        .Figure.legend' not found in lib/matplotlib/legend.py\n</observation>",
                  "type": "tool_result"
                }
              ]
            },
            {
              "role": "assistant",
              "content": [
                {
                  "type": "text",
                  "text": "<thoughts>\n1. The docstring replacement failed because I didn't match the exact text. Let me try again with the correct text.\n2. First, let me view the current docstring to get the exact text\n</thoughts>"
                },
                {
                  "id": "call_9bda5a30",
                  "input": {
                    "command": "view",
                    "path": "lib/matplotlib/legend.py",
                    "file_text": null,
                    "view_range": [
                      350,
                      400
                    ],
                    "old_str": null,
                    "new_str": null,
                    "insert_line": null
                  },
                  "type": "tool_use",
                  "name": "str_replace_editor"
                }
              ]
            },
            {
              "role": "user",
              "content": [
                {
                  "tool_use_id": "call_9bda5a30",
                  "content": "<observation>\nHere's the result of running `cat -n` on lib/matplotlib/legend.py:\n   350\t        ----------\n   351\t        parent : `~matplotlib.axes.Axes` or `.Figure`\n   352\t            The artist that contains the legend.\n   353\t\n   354\t        handles : list of `.Artist`\n   355\t            A list of Artists (lines, patches) to be added to the legend.\n   356\t\n   357\t        labels : list of str\n   358\t            A list of labels to show next to the artists. The length of handles\n   359\t            and labels should be the same. If they are not, they are truncated\n   360\t            to the smaller of both lengths.\n   361\t\n   362\t        Other Parameters\n   363\t        ----------------\n   364\t        %(_legend_kw_doc)s\n   365\t\n   366\t        Notes\n   367\t        -----\n   368\t        Users can specify any arbitrary location for the legend using the\n   369\t        *bbox_to_anchor* keyword argument. *bbox_to_anchor* can be a\n   370\t        `.BboxBase` (or derived there from) or a tuple of 2 or 4 floats.\n   371\t        See `set_bbox_to_anchor` for more detail.\n   372\t\n   373\t        The legend location can be specified by setting *loc* with a tuple of\n   374\t        2 floats, which is interpreted as the lower-left corner of the legend\n   375\t        in the normalized axes coordinate.\n   376\t        \"\"\"\n   377\t        # local import only to avoid circularity\n   378\t        from matplotlib.axes import Axes\n   379\t        from matplotlib.figure import FigureBase\n   380\t\n   381\t        super().__init__()\n   382\t\n   383\t        if prop is None:\n   384\t            if fontsize is not None:\n   385\t                self.prop = FontProperties(size=fontsize)\n   386\t            else:\n   387\t                self.prop = FontProperties(\n   388\t                    size=mpl.rcParams[\"legend.fontsize\"])\n   389\t        else:\n   390\t            self.prop = FontProperties._from_any(prop)\n   391\t            if isinstance(prop, dict) and \"size\" not in prop:\n   392\t                self.prop.set_size(mpl.rcParams[\"legend.fontsize\"])\n   393\t\n   394\t        self._fontsize = self.prop.get_size_in_points()\n   395\t\n   396\t        self.texts = []\n   397\t        self.legendHandles = []\n   398\t        self._legend_title_box = None\n   399\t\n   400\t        #: A dictionary with the extra handler mappings for this Legend\n\n</observation>",
                  "type": "tool_result"
                }
              ]
            },
            {
              "role": "assistant",
              "content": [
                {
                  "type": "text",
                  "text": "<thoughts>\n1. I see that the docstring uses %(_legend_kw_doc)s for the parameters, which means it's using a template system\n2. Let me search for where this template is defined\n</thoughts>"
                },
                {
                  "id": "call_74c47f7a",
                  "input": {
                    "file_pattern": null,
                    "code_snippet": "_legend_kw_doc"
                  },
                  "type": "tool_use",
                  "name": "FindCodeSnippet"
                }
              ]
            },
            {
              "role": "user",
              "content": [
                {
                  "tool_use_id": "call_74c47f7a",
                  "content": "<observation>\nFound 10 code sections.\n\nViewed relevant code:\nlib/matplotlib/legend.py\n```\n\n    23\t\n    24\timport itertools\n    25\timport logging\n    26\timport time\n    27\t\n    28\timport numpy as np\n    29\t\n    30\timport matplotlib as mpl\n    31\tfrom matplotlib import _api, _docstring, colors, offsetbox\n    32\tfrom matplotlib.artist import Artist, allow_rasterization\n    33\tfrom matplotlib.cbook import silent_list\n    34\tfrom matplotlib.font_manager import FontProperties\n    35\tfrom matplotlib.lines import Line2D\n    36\tfrom matplotlib.patches import (Patch, Rectangle, Shadow, FancyBboxPatch,\n    37\t                                StepPatch)\n    38\tfrom matplotlib.collections import (\n    39\t    Collection, CircleCollection, LineCollection, PathCollection,\n    40\t    PolyCollection, RegularPolyCollection)\n    41\tfrom matplotlib.text import Text\n    42\tfrom matplotlib.transforms import Bbox, BboxBase, TransformedBbox\n    43\tfrom matplotlib.transforms import BboxTransformTo, BboxTransformFrom\n    44\tfrom matplotlib.offsetbox import (\n    45\t    AnchoredOffsetbox, DraggableOffsetBox,\n    46\t    HPacker, VPacker,\n    47\t    DrawingArea, TextArea,\n    48\t)\n    49\tfrom matplotlib.container import ErrorbarContainer, BarContainer, StemContainer\n    50\tfrom . import legend_handler\n      # ...\n    95\t\n    96\t\n    97\t_docstring.interpd.update(_legend_kw_doc=\"\"\"\n    98\tloc : str or pair of floats, default: :rc:`legend.loc` ('best' for axes, \\\n    99\t'upper right' for figures)\n   100\t    The location of the legend.\n   101\t\n   102\t    The strings\n   103\t    ``'upper left', 'upper right', 'lower left', 'lower right'``\n   104\t    place the legend at the corresponding corner of the axes/figure.\n   105\t\n   106\t    The strings\n   107\t    ``'upper center', 'lower center', 'center left', 'center right'``\n   108\t    place the legend at the center of the corresponding edge of the\n   109\t    axes/figure.\n   110\t\n   111\t    The string ``'center'`` places the legend at the center of the axes/figure.\n   112\t\n   113\t    The string ``'best'`` places the legend at the location, among the nine\n   114\t    locations defined so far, with the minimum overlap with other drawn\n   115\t    artists.  This option can be quite slow for plots with large amounts of\n   116\t    data; your plotting speed may benefit from providing a specific location.\n   117\t\n   118\t    The location can also be a 2-tuple giving the coordinates of the lower-left\n   119\t    corner of the legend in axes coordinates (in which case *bbox_to_anchor*\n   120\t    will be ignored).\n   121\t\n   122\t    For back-compatibility, ``'center right'`` (but no other location) can also\n   123\t    be spelled ``'right'``, and each \"string\" locations can also be given as a\n   124\t    numeric value:\n   125\t\n   126\t        ===============   =============\n   127\t        Location String   Location Code\n   128\t        ===============   =============\n   129\t        'best'            0\n   130\t        'upper right'     1\n   131\t        'upper left'      2\n   132\t        'lower left'      3\n   133\t        'lower right'     4\n   134\t        'right'           5\n   135\t        'center left'     6\n   136\t        'center right'    7\n   137\t        'lower center'    8\n   138\t        'upper center'    9\n   139\t        'center'          10\n   140\t        ===============   =============\n   141\t\n   142\tbbox_to_anchor : `.BboxBase`, 2-tuple, or 4-tuple of floats\n   143\t    Box that is used to position the legend in conjunction with *loc*.\n   144\t    Defaults to `axes.bbox` (if called as a method to `.Axes.legend`) or\n   145\t    `figure.bbox` (if `.Figure.legend`).  This argument allows arbitrary\n   146\t    placement of the legend.\n   147\t\n   148\t    Bbox coordinates are interpreted in the coordinate system given by\n   149\t    *bbox_transform*, with the default transform\n   150\t    Axes or Figure coordinates, depending on which ``legend`` is called.\n   151\t\n   152\t    If a 4-tuple or `.BboxBase` is given, then it specifies the bbox\n   153\t    ``(x, y, width, height)`` that the legend is placed in.\n   154\t    To put the legend in the best location in the bottom right\n   155\t    quadrant of the axes (or figure)::\n   156\t\n   157\t        loc='best', bbox_to_anchor=(0.5, 0., 0.5, 0.5)\n   158\t\n   159\t    A 2-tuple ``(x, y)`` places the corner of the legend specified by *loc* at\n   160\t    x, y.  For example, to put the legend's upper right-hand corner in the\n   161\t    center of the axes (or figure) the following keywords can be used::\n   162\t\n   163\t        loc='upper right', bbox_to_anchor=(0.5, 0.5)\n   164\t\n   165\tncols : int, default: 1\n   166\t    The number of columns that the legend has.\n   167\t\n   168\t    For backward compatibility, the spelling *ncol* is also supported\n   169\t    but it is discouraged. If both are given, *ncols* takes precedence.\n   170\t\n   171\tprop : None or `matplotlib.font_manager.FontProperties` or dict\n   172\t    The font properties of the legend. If None (default), the current\n   173\t    :data:`matplotlib.rcParams` will be used.\n   174\t\n   175\tfontsize : int or {'xx-small', 'x-small', 'small', 'medium', 'large', \\\n   176\t'x-large', 'xx-large'}\n   177\t    The font size of the legend. If the value is numeric the size will be the\n   178\t    absolute font size in points. String values are relative to the current\n   179\t    default font size. This argument is only used if *prop* is not specified.\n   180\t\n   181\tlabelcolor : str or list, default: :rc:`legend.labelcolor`\n   182\t    The color of the text in the legend. Either a valid color string\n   183\t    (for example, 'red'), or a list of color strings. The labelcolor can\n   184\t    also be made to match the color of the line or marker using 'linecolor',\n   185\t    'markerfacecolor' (or 'mfc'), or 'markeredgecolor' (or 'mec').\n   186\t\n   187\t    Labelcolor can be set globally using :rc:`legend.labelcolor`. If None,\n   188\t    use :rc:`text.color`.\n   189\t\n   190\tnumpoints : int, default: :rc:`legend.numpoints`\n   191\t    The number of marker points in the legend when creating a legend\n   192\t    entry for a `.Line2D` (line).\n   193\t\n   194\tscatterpoints : int, default: :rc:`legend.scatterpoints`\n   195\t    The number of marker points in the legend when creating\n   196\t    a legend entry for a `.PathCollection` (scatter plot).\n   197\t\n   198\tscatteryoffsets : iterable of floats, default: ``[0.375, 0.5, 0.3125]``\n   199\t    The vertical offset (relative to the font size) for the markers\n   200\t    created for a scatter plot legend entry. 0.0 is at the base the\n   201\t    legend text, and 1.0 is at the top. To draw all markers at the\n   202\t    same height, set to ``[0.5]``.\n   203\t\n   204\tmarkerscale : float, default: :rc:`legend.markerscale`\n   205\t    The relative size of legend markers compared with the originally\n   206\t    drawn ones.\n   207\t\n   208\tmarkerfirst : bool, default: True\n   209\t    If *True*, legend marker is placed to the left of the legend label.\n   210\t    If *False*, legend marker is placed to the right of the legend label.\n   211\t\n   212\tframeon : bool, default: :rc:`legend.frameon`\n   213\t    Whether the legend should be drawn on a patch (frame).\n   214\t\n   215\tfancybox : bool, default: :rc:`legend.fancybox`\n   216\t    Whether round edges should be enabled around the `.FancyBboxPatch` which\n   217\t    makes up the legend's background.\n   218\t\n   219\tshadow : bool, default: :rc:`legend.shadow`\n   220\t    Whether to draw a shadow behind the legend.\n   221\t\n   222\tframealpha : float, default: :rc:`legend.framealpha`\n   223\t    The alpha transparency of the legend's background.\n   224\t    If *shadow* is activated and *framealpha* is ``None``, the default value is\n   225\t    ignored.\n   226\t\n   227\tfacecolor : \"inherit\" or color, default: :rc:`legend.facecolor`\n   228\t    The legend's background color.\n   229\t    If ``\"inherit\"``, use :rc:`axes.facecolor`.\n   230\t\n   231\tedgecolor : \"inherit\" or color, default: :rc:`legend.edgecolor`\n   232\t    The legend's background patch edge color.\n   233\t    If ``\"inherit\"``, use take :rc:`axes.edgecolor`.\n   234\t\n   235\tmode : {\"expand\", None}\n   236\t    If *mode* is set to ``\"expand\"`` the legend will be horizontally\n   237\t    expanded to fill the axes area (or *bbox_to_anchor* if defines\n   238\t    the legend's size).\n   239\t\n   240\tbbox_transform : None or `matplotlib.transforms.Transform`\n   241\t    The transform for the bounding box (*bbox_to_anchor*). For a value\n   242\t    of ``None`` (default) the Axes'\n   243\t    :data:`~matplotlib.axes.Axes.transAxes` transform will be used.\n   244\t\n   245\ttitle : str or None\n   246\t    The legend's title. Default is no title (``None``).\n   247\t\n   248\ttitle_fontproperties : None or `matplotlib.font_manager.FontProperties` or dict\n   249\t    The font properties of the legend's title. If None (default), the\n   250\t    *title_fontsize* argument will be used if present; if *title_fontsize* is\n   251\t    also None, the current :rc:`legend.title_fontsize` will be used.\n   252\t\n   253\ttitle_fontsize : int or {'xx-small', 'x-small', 'small', 'medium', 'large', \\\n   254\t'x-large', 'xx-large'}, default: :rc:`legend.title_fontsize`\n   255\t    The font size of the legend's title.\n   256\t    Note: This cannot be combined with *title_fontproperties*. If you want\n   257\t    to set the fontsize alongside other font properties, use the *size*\n   258\t    parameter in *title_fontproperties*.\n   259\t\n   260\talignment : {'center', 'left', 'right'}, default: 'center'\n   261\t    The alignment of the legend title and the box of entries. The entries\n   262\t    are aligned as a single block, so that markers always lined up.\n   263\t\n   264\tborderpad : float, default: :rc:`legend.borderpad`\n   265\t    The fractional whitespace inside the legend border, in font-size units.\n   266\t\n   267\tlabelspacing : float, default: :rc:`legend.labelspacing`\n   268\t    The vertical space between the legend entries, in font-size units.\n   269\t\n   270\thandlelength : float, default: :rc:`legend.handlelength`\n   271\t    The length of the legend handles, in font-size units.\n   272\t\n   273\thandleheight : float, default: :rc:`legend.handleheight`\n   274\t    The height of the legend handles, in font-size units.\n   275\t\n   276\thandletextpad : float, default: :rc:`legend.handletextpad`\n   277\t    The pad between the legend handle and text, in font-size units.\n   278\t\n   279\tborderaxespad : float, default: :rc:`legend.borderaxespad`\n   280\t    The pad between the axes and legend border, in font-size units.\n   281\t\n   282\tcolumnspacing : float, default: :rc:`legend.columnspacing`\n   283\t    The spacing between columns, in font-size units.\n   284\t\n   285\thandler_map : dict or None\n   286\t    The custom dictionary mapping instances or types to a legend\n   287\t    handler. This *handler_map* updates the default handler map\n   288\t    found at `matplotlib.legend.Legend.get_legend_handler_map`.\n   289\t\"\"\")\n      # ...\n```\n\n</observation>",
                  "type": "tool_result"
                }
              ]
            },
            {
              "role": "assistant",
              "content": [
                {
                  "type": "text",
                  "text": "<thoughts>\n1. I found that the docstring is defined in _legend_kw_doc template\n2. I need to add the draggable parameter documentation to this template\n3. Let me update the template with the new parameter\n</thoughts>"
                },
                {
                  "id": "call_768de362",
                  "input": {
                    "command": "str_replace",
                    "path": "lib/matplotlib/legend.py",
                    "file_text": null,
                    "view_range": null,
                    "old_str": "handler_map : dict or None\n    The custom dictionary mapping instances or types to a legend\n    handler. This *handler_map* updates the default handler map\n    found at `matplotlib.legend.Legend.get_legend_handler_map`.\n\"\"\")",
                    "new_str": "handler_map : dict or None\n    The custom dictionary mapping instances or types to a legend\n    handler. This *handler_map* updates the default handler map\n    found at `matplotlib.legend.Legend.get_legend_handler_map`.\n\ndraggable : bool, default: False\n    Enable mouse dragging support for the legend.\n\"\"\")",
                    "insert_line": null
                  },
                  "type": "tool_use",
                  "name": "str_replace_editor"
                }
              ]
            },
            {
              "role": "user",
              "content": [
                {
                  "tool_use_id": "call_768de362",
                  "content": "<observation>\nThe file lib/matplotlib/legend.py has been edited. Here's the result of running `cat -n` on a snippet of lib/matplotlib/legend.py:\n   285\t    The pad between the axes and legend border, in font-size units.\n   286\t\n   287\tcolumnspacing : float, default: :rc:`legend.columnspacing`\n   288\t    The spacing between columns, in font-size units.\n   289\t\n   290\thandler_map : dict or None\n   291\t    The custom dictionary mapping instances or types to a legend\n   292\t    handler. This *handler_map* updates the default handler map\n   293\t    found at `matplotlib.legend.Legend.get_legend_handler_map`.\n   294\t\n   295\tdraggable : bool, default: False\n   296\t    Enable mouse dragging support for the legend.\n   297\t\"\"\")\n   298\t\n   299\t\n   300\tclass Legend(Artist):\nReview the changes and make sure they are as expected. Edit the file again if necessary.\n\nRunning 936 tests in the following files:\n * lib/matplotlib/tests/test_legend.py\n * lib/matplotlib/tests/test_contour.py\n * lib/matplotlib/tests/test_axes.py\n\n* FAILED lib/matplotlib/tests/test_contour.py test_contourf_log_extension>\n```\n\n    @image_comparison(['contour_log_extension.png'],\n                      remove_text=True, style='mpl20',\n                      tol=1.444)\n    def test_contourf_log_extension():\n        # Remove this line when this test image is regenerated.\n        plt.rcParams['pcolormesh.snap'] = False\n    \n        # Test that contourf with lognorm is extended correctly\n        fig, (ax1, ax2, ax3) = plt.subplots(1, 3, figsize=(10, 5))\n        fig.subplots_adjust(left=0.05, right=0.95)\n    \n        # make data set with large range e.g. between 1e-8 and 1e10\n        data_exp = np.linspace(-7.5, 9.5, 1200)\n        data = np.power(10, data_exp).reshape(30, 40)\n        # make manual levels e.g. between 1e-4 and 1e-6\n        levels_exp = np.arange(-4., 7.)\n        levels = np.power(10., levels_exp)\n    \n        # original data\n        c1 = ax1.contourf(data,\n                          norm=LogNorm(vmin=data.min(), vmax=data.max()))\n        # just show data in levels\n        c2 = ax2.contourf(data, levels=levels,\n                          norm=LogNorm(vmin=levels.min(), vmax=levels.max()),\n                          extend='neither')\n        # extend data from levels\n        c3 = ax3.contourf(data, levels=levels,\n                          norm=LogNorm(vmin=levels.min(), vmax=levels.max()),\n                          extend='both')\n        cb = plt.colorbar(c1, ax=ax1)\n        assert cb.ax.get_ylim() == (1e-8, 1e10)\n        cb = plt.colorbar(c2, ax=ax2)\n>       assert cb.ax.get_ylim() == (1e-4, 1e6)\nE       assert (9.9999999999...05, 1000000.0) == (0.0001, 1000000.0)\nE         \nE         At index 0 diff: 9.999999999999999e-05 != 0.0001\nE         Use -v to get more diff\n\nlib/matplotlib/tests/test_contour.py:316: AssertionError\n```\n\n\n935 passed. 1 failed. 0 errors.\n</observation>",
                  "type": "tool_result",
                  "cache_control": {
                    "type": "ephemeral"
                  }
                }
              ]
            },
            {
              "role": "assistant",
              "content": [
                {
                  "type": "text",
                  "text": "<thoughts>\n1. The docstring update is complete\n2. Now I need to add a test case for the new draggable parameter\n3. Let me add a test to test_legend.py\n</thoughts>"
                },
                {
                  "id": "call_09cbcbfa",
                  "input": {
                    "command": "str_replace",
                    "path": "lib/matplotlib/tests/test_legend.py",
                    "file_text": null,
                    "view_range": null,
                    "old_str": "def test_get_set_draggable():\n    legend = plt.legend()\n    assert not legend.get_draggable()\n    legend.set_draggable(True)\n    assert legend.get_draggable()\n    legend.set_draggable(False)\n    assert not legend.get_draggable()",
                    "new_str": "def test_get_set_draggable():\n    legend = plt.legend()\n    assert not legend.get_draggable()\n    legend.set_draggable(True)\n    assert legend.get_draggable()\n    legend.set_draggable(False)\n    assert not legend.get_draggable()\n\ndef test_draggable_init():\n    # Test draggable parameter in legend initialization\n    legend = plt.legend(draggable=True)\n    assert legend.get_draggable()\n    legend = plt.legend(draggable=False)\n    assert not legend.get_draggable()",
                    "insert_line": null
                  },
                  "type": "tool_use",
                  "name": "str_replace_editor",
                  "cache_control": {
                    "type": "ephemeral"
                  }
                }
              ]
            },
            {
              "role": "user",
              "content": [
                {
                  "tool_use_id": "call_09cbcbfa",
                  "content": "<observation>\nThe file lib/matplotlib/tests/test_legend.py has been edited. Here's the result of running `cat -n` on a snippet of lib/matplotlib/tests/test_legend.py:\n   777\t    leg = ax.legend()\n   778\t    for text, color in zip(leg.get_texts(), ['r', 'g', 'b']):\n   779\t        assert mpl.colors.same_color(text.get_color(), color)\n   780\t\n   781\t\n   782\tdef test_get_set_draggable():\n   783\t    legend = plt.legend()\n   784\t    assert not legend.get_draggable()\n   785\t    legend.set_draggable(True)\n   786\t    assert legend.get_draggable()\n   787\t    legend.set_draggable(False)\n   788\t    assert not legend.get_draggable()\n   789\t\n   790\tdef test_draggable_init():\n   791\t    # Test draggable parameter in legend initialization\n   792\t    legend = plt.legend(draggable=True)\n   793\t    assert legend.get_draggable()\n   794\t    legend = plt.legend(draggable=False)\n   795\t    assert not legend.get_draggable()\n   796\t\n   797\t\n   798\tdef test_alpha_handles():\nReview the changes and make sure they are as expected. Edit the file again if necessary.\n\nRunning 937 tests in the following files:\n * lib/matplotlib/tests/test_legend.py\n * lib/matplotlib/tests/test_contour.py\n * lib/matplotlib/tests/test_axes.py\n\n* FAILED lib/matplotlib/tests/test_contour.py test_contourf_log_extension>\n```\n\n    @image_comparison(['contour_log_extension.png'],\n                      remove_text=True, style='mpl20',\n                      tol=1.444)\n    def test_contourf_log_extension():\n        # Remove this line when this test image is regenerated.\n        plt.rcParams['pcolormesh.snap'] = False\n    \n        # Test that contourf with lognorm is extended correctly\n        fig, (ax1, ax2, ax3) = plt.subplots(1, 3, figsize=(10, 5))\n        fig.subplots_adjust(left=0.05, right=0.95)\n    \n        # make data set with large range e.g. between 1e-8 and 1e10\n        data_exp = np.linspace(-7.5, 9.5, 1200)\n        data = np.power(10, data_exp).reshape(30, 40)\n        # make manual levels e.g. between 1e-4 and 1e-6\n        levels_exp = np.arange(-4., 7.)\n        levels = np.power(10., levels_exp)\n    \n        # original data\n        c1 = ax1.contourf(data,\n                          norm=LogNorm(vmin=data.min(), vmax=data.max()))\n        # just show data in levels\n        c2 = ax2.contourf(data, levels=levels,\n                          norm=LogNorm(vmin=levels.min(), vmax=levels.max()),\n                          extend='neither')\n        # extend data from levels\n        c3 = ax3.contourf(data, levels=levels,\n                          norm=LogNorm(vmin=levels.min(), vmax=levels.max()),\n                          extend='both')\n        cb = plt.colorbar(c1, ax=ax1)\n        assert cb.ax.get_ylim() == (1e-8, 1e10)\n        cb = plt.colorbar(c2, ax=ax2)\n>       assert cb.ax.get_ylim() == (1e-4, 1e6)\nE       assert (9.9999999999...05, 1000000.0) == (0.0001, 1000000.0)\nE         \nE         At index 0 diff: 9.999999999999999e-05 != 0.0001\nE         Use -v to get more diff\n\nlib/matplotlib/tests/test_contour.py:316: AssertionError\n```\n\n\n936 passed. 1 failed. 0 errors.\n</observation>",
                  "type": "tool_result",
                  "cache_control": {
                    "type": "ephemeral"
                  }
                }
              ]
            }
          ],
          "response": {
            "id": "msg_01HTWXYBQ2tnYtiDory5Rxzs",
            "content": [
              {
                "text": "<thoughts>\n1. I've completed all the necessary changes:\n   - Added draggable parameter to Legend.__init__\n   - Added implementation to enable dragging when draggable=True\n   - Added documentation in the _legend_kw_doc template\n   - Added test case test_draggable_init()\n2. The failing test in test_contour.py is unrelated to our changes (it's about colorbar limits)\n3. The feature is now complete and working as expected\n</thoughts>",
                "type": "text"
              },
              {
                "id": "toolu_018r94R8xht9qB7oKD1nq9i8",
                "input": {
                  "finish_reason": "The draggable parameter has been successfully added to the Legend class initialization. The changes include:\n1. Added draggable parameter with default False to Legend.__init__\n2. Added implementation to enable dragging when draggable=True\n3. Added documentation in the _legend_kw_doc template\n4. Added test case test_draggable_init()\n\nAll legend-related tests pass. The failing test in test_contour.py is unrelated to our changes."
                },
                "name": "Finish",
                "type": "tool_use"
              }
            ],
            "model": "claude-3-5-sonnet-20241022",
            "role": "assistant",
            "stop_reason": "tool_use",
            "stop_sequence": null,
            "type": "message",
            "usage": {
              "cache_creation_input_tokens": 1538,
              "cache_read_input_tokens": 22650,
              "input_tokens": 0,
              "output_tokens": 272
            }
          },
          "usage": {
            "completion_cost": 0.008694,
            "completion_tokens": 272,
            "prompt_tokens": 1538,
            "cached_tokens": 22650
          }
        }
      },
      "possible_actions": [
        "SemanticSearch",
        "FindClass",
        "FindFunction",
        "FindCodeSnippet",
        "RequestMoreContext",
        "ClaudeEditTool",
        "Finish",
        "Reject"
      ],
      "output": {
        "message": "The draggable parameter has been successfully added to the Legend class initialization. The changes include:\n1. Added draggable parameter with default False to Legend.__init__\n2. Added implementation to enable dragging when draggable=True\n3. Added documentation in the _legend_kw_doc template\n4. Added test case test_draggable_init()\n\nAll legend-related tests pass. The failing test in test_contour.py is unrelated to our changes.",
        "terminal": true,
        "expect_correction": false,
        "properties": {}
      },
      "parent_id": 10
    }
  ]
}